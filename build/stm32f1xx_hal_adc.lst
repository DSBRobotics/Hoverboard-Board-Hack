ARM GAS  /tmp/ccNsrXlN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_hal_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
  19              		.align	2
  20              		.weak	HAL_ADC_MspInit
  21              		.thumb
  22              		.thumb_func
  24              	HAL_ADC_MspInit:
  25              	.LFB65:
  26              		.file 1 "./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c"
   1:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
   2:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
   3:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @file    stm32f1xx_hal_adc.c
   4:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @author  MCD Application Team
   5:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @version V1.0.4
   6:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @date    29-April-2016
   7:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          peripheral:
  10:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  11:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  12:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Operation functions
  13:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  14:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  15:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Control functions
  16:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  17:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  18:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  19:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + State functions
  20:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ ADC state machine management
  21:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  22:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  23:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          "stm32f1xx_hal_adc_ex.c".
  24:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  25:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @verbatim
  26:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  27:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  28:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  29:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   [..]
  30:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) 12-bit resolution
  31:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  32:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
ARM GAS  /tmp/ccNsrXlN.s 			page 2


  33:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  34:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  35:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  36:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  37:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  38:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  39:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  40:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  41:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  42:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  43:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  44:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  45:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) 
  46:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       for both regular and injected groups.
  47:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  48:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  49:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  50:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Multimode Dual mode (available on devices with 2 ADCs or more).
  51:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  52:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable DMA data storage in Multimode Dual mode (available on devices
  53:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       with 2 DCs or more).
  54:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  55:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode (available 
  56:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       on devices with 2 DCs or more).
  57:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  58:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC calibration
  59:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  60:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  61:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       slower speed.
  62:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  63:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  64:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  65:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  66:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  67:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### How to use this driver #####
  68:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  69:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
  70:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  71:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  72:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
  73:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
  74:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  75:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Enable the ADC interface
  76:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  77:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****            Caution: On STM32F1, ADC clock frequency max is 14MHz (refer
  78:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     to device datasheet).
  79:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  80:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  81:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     this maximum frequency.
  82:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) One clock setting is mandatory:
  83:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC clock (core clock, also possibly conversion clock).
  84:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
  85:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  86:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
  87:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  88:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) __ADC1_CLK_ENABLE();
  89:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
ARM GAS  /tmp/ccNsrXlN.s 			page 3


  90:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  91:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  92:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  93:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
  94:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  95:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  96:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  97:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_GPIO_Init()
  98:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  99:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ADCx_IRQHandler().
 105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ==========================================================================
 117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_Init().
 122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         sequencer, ..., of injected group)
 129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         monitored, thresholds, ...)
 135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
 138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         multimode parameters
 139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ====================================
 143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         conversion accuracy
ARM GAS  /tmp/ccNsrXlN.s 			page 4


 147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         transfer by DMA.
 151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by polling:
 153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (this function must be implemented in user program)
 170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              with transfer by DMA:
 190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/ccNsrXlN.s 			page 5


 204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
 215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Disable the ADC interface
 218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC clock disable
 222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
 224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
 226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC
 227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPLLCLK2_OFF
 228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)
 229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
 231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Deinitialize the DMA
 240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     @endverbatim
 247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @attention
 249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
ARM GAS  /tmp/ccNsrXlN.s 			page 6


 261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      without specific prior written permission.
 262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************  
 275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #include "stm32f1xx_hal.h"
 279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @addtogroup STM32F1xx_HAL_Driver
 281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC ADC
 285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief ADC HAL module driver
 286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              ((uint32_t) 2)
 304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             ((uint32_t) 2)
 305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               ((uint32_t) 1)
 310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         ((uint32_t) 10)
 315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
ARM GAS  /tmp/ccNsrXlN.s 			page 7


 318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief    Initialization and Configuration functions
 338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim    
 340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) De-initialize the ADC.
 346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (clock source APB2).
 356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/ccNsrXlN.s 			page 8


 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0;
 378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0;
 379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sqr1 = 0;
 380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* procedure.                                                               */
 408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Initialize ADC error code */
 414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       bit ADON.                                                          */
 428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
ARM GAS  /tmp/ccNsrXlN.s 			page 9


 432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC parameters */
 442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - data alignment                                                      */
 445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger polarity (always set to 1, because needed for all  */
 447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    triggers: external trigger of SW start)                             */
 448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       a conversion on injected group would start a conversion also on  */
 452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       regular group after ADC enabling.                                */
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                               |
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - scan mode                                                           */
 459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Enable the selected ADC regular discontinuous mode */
 471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set the number of channels to be converted in discontinuous mode */
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
 476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* ADC regular group settings continuous and sequencer discontinuous*/
 478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                */
 479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
 481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR1 with previous settings */
ARM GAS  /tmp/ccNsrXlN.s 			page 10


 489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR1,
 490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCEN  |
 492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCNUM    ,
 493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr1             );
 494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR2,
 497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTSEL  |
 499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTTRIG |
 500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_CONT       ,
 501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr2             );
 502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
 518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                tmp_sqr1             );
 520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement path bit (TSVREFE).                                        */
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_TSVREFE                     ))
 531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          == tmp_cr2)
 532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to none */
 534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the ADC state */
 537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
 544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
ARM GAS  /tmp/ccNsrXlN.s 			page 11


 546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      return HAL_ERROR;
 583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
 589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/ccNsrXlN.s 			page 12


 603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SR */
 606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          
 609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR1 */
 610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
 613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
 614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR2 */
 616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
 619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
 620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_ADON                                          ));
 621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR1 */
 623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
 626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR2 */
 628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
 631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP0                                    ));
 632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR1 */
 634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register HTR */
 643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR2 */
 658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
ARM GAS  /tmp/ccNsrXlN.s 			page 13


 660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR3 */
 662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register DR */
 676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*                                                                        */
 687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC error code to none */
 694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  27              		.loc 1 714 0
  28              		.cfi_startproc
ARM GAS  /tmp/ccNsrXlN.s 			page 14


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE65:
  37 0002 00BF     		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
  38              		.align	2
  39              		.weak	HAL_ADC_MspDeInit
  40              		.thumb
  41              		.thumb_func
  43              	HAL_ADC_MspDeInit:
  44              	.LFB66:
 715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  45              		.loc 1 728 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50              	.LVL1:
  51 0000 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE66:
  55 0002 00BF     		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
  56              		.align	2
  57              		.global	HAL_ADC_PollForConversion
  58              		.thumb
  59              		.thumb_func
  61              	HAL_ADC_PollForConversion:
  62              	.LFB69:
 729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Input and Output operation functions
ARM GAS  /tmp/ccNsrXlN.s 			page 15


 742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
 743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
 744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       ##### IO operation functions #####
 746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group.
 749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group.
 750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion event.
 752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Handle ADC interrupt request
 756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
 779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
 785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
 787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
 789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
 792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
 793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
 797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
ARM GAS  /tmp/ccNsrXlN.s 			page 16


 799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
 809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
 828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag */
 837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
 841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
 842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
 843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
 844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
 845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
 846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
 847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If ADC is master, ADC is enabled and conversion is started.            */
 848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
 854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccNsrXlN.s 			page 17


 856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
 859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
 875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
 876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
 877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
 878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
 880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
 888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
ARM GAS  /tmp/ccNsrXlN.s 			page 18


 913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in DMA mode.
 915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         performed on each conversion.
 917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, limitation in case of sequencer enabled
 918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (several ranks selected): polling cannot be done on each 
 919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion inside the sequence. In this case, polling is replaced by
 920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         wait for maximum conversion time.
 921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
 923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  63              		.loc 1 926 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 8
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              	.LVL2:
  68              		.loc 1 926 0
  69 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  70              	.LCFI0:
  71              		.cfi_def_cfa_offset 20
  72              		.cfi_offset 4, -20
  73              		.cfi_offset 5, -16
  74              		.cfi_offset 6, -12
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 83B0     		sub	sp, sp, #12
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 32
  80 0004 0546     		mov	r5, r0
  81 0006 0C46     		mov	r4, r1
  82              	.LVL3:
 927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
  83              		.loc 1 931 0
  84 0008 0023     		movs	r3, #0
  85 000a 0193     		str	r3, [sp, #4]
  86              	.LVL4:
 932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0;
 933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
 934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
 938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
  87              		.loc 1 938 0
  88 000c FFF7FEFF 		bl	HAL_GetTick
  89              	.LVL5:
 939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for        */
 941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* each conversion:                                                         */
 942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode                            */
ARM GAS  /tmp/ccNsrXlN.s 			page 19


 943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
  90              		.loc 1 943 0
  91 0010 2B68     		ldr	r3, [r5]
  92 0012 9A68     		ldr	r2, [r3, #8]
  93 0014 12F4807F 		tst	r2, #256
  94 0018 08D0     		beq	.L4
 944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
  95              		.loc 1 946 0
  96 001a AB6A     		ldr	r3, [r5, #40]
  97 001c 43F02003 		orr	r3, r3, #32
  98 0020 AB62     		str	r3, [r5, #40]
 947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
  99              		.loc 1 949 0
 100 0022 0023     		movs	r3, #0
 101 0024 85F82430 		strb	r3, [r5, #36]
 950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 102              		.loc 1 951 0
 103 0028 0120     		movs	r0, #1
 104 002a 97E0     		b	.L5
 105              	.L4:
 106 002c 0646     		mov	r6, r0
 107              	.LVL6:
 952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
 957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    with NbrOfConversion =1), flag EOC is used to determine the           */
 958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    conversion completion.                                                */
 959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
 960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    NbrOfConversion >=2), flag EOC is set only at the end of the          */
 961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    sequence.                                                             */
 962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
 967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    be set.                                                               */
 968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 108              		.loc 1 968 0
 109 002e 5A68     		ldr	r2, [r3, #4]
 110 0030 12F4807F 		tst	r2, #256
 111 0034 1CD1     		bne	.L6
 969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 112              		.loc 1 969 0 discriminator 1
 113 0036 DB6A     		ldr	r3, [r3, #44]
 968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 114              		.loc 1 968 0 discriminator 1
 115 0038 13F4700F 		tst	r3, #15728640
 116 003c 12D0     		beq	.L8
 117 003e 17E0     		b	.L6
 118              	.L10:
ARM GAS  /tmp/ccNsrXlN.s 			page 20


 970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait until End of Conversion flag is raised */
 972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
 975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 119              		.loc 1 975 0
 120 0040 B4F1FF3F 		cmp	r4, #-1
 121 0044 0ED0     		beq	.L8
 976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 122              		.loc 1 977 0
 123 0046 24B1     		cbz	r4, .L9
 124              		.loc 1 977 0 is_stmt 0 discriminator 1
 125 0048 FFF7FEFF 		bl	HAL_GetTick
 126              	.LVL7:
 127 004c 801B     		subs	r0, r0, r6
 128 004e A042     		cmp	r0, r4
 129 0050 08D9     		bls	.L8
 130              	.L9:
 978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
 979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
 980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 131              		.loc 1 980 0 is_stmt 1
 132 0052 AB6A     		ldr	r3, [r5, #40]
 133 0054 43F00403 		orr	r3, r3, #4
 134 0058 AB62     		str	r3, [r5, #40]
 981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
 983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 135              		.loc 1 983 0
 136 005a 0023     		movs	r3, #0
 137 005c 85F82430 		strb	r3, [r5, #36]
 984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 138              		.loc 1 985 0
 139 0060 0320     		movs	r0, #3
 140 0062 7BE0     		b	.L5
 141              	.L8:
 972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 142              		.loc 1 972 0
 143 0064 2B68     		ldr	r3, [r5]
 144 0066 1B68     		ldr	r3, [r3]
 145 0068 13F0020F 		tst	r3, #2
 146 006c E8D0     		beq	.L10
 147 006e 51E0     		b	.L11
 148              	.L6:
 986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
 987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Replace polling by wait for maximum conversion time */
 993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
 995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
ARM GAS  /tmp/ccNsrXlN.s 			page 21


 996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 149              		.loc 1 997 0
 150 0070 3B4B     		ldr	r3, .L30
 151 0072 1F68     		ldr	r7, [r3]
 152 0074 0220     		movs	r0, #2
 153 0076 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 154              	.LVL8:
 155 007a B7FBF0F0 		udiv	r0, r7, r0
 998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 156              		.loc 1 998 0
 157 007e 2B68     		ldr	r3, [r5]
 158 0080 1969     		ldr	r1, [r3, #16]
 159 0082 384A     		ldr	r2, .L30+4
 160 0084 1142     		tst	r1, r2
 161 0086 12D1     		bne	.L12
 162              		.loc 1 998 0 is_stmt 0 discriminator 1
 163 0088 D968     		ldr	r1, [r3, #12]
 164 008a 02F15C42 		add	r2, r2, #-603979776
 165 008e 1142     		tst	r1, r2
 166 0090 0DD1     		bne	.L12
 167              		.loc 1 998 0 discriminator 3
 168 0092 1969     		ldr	r1, [r3, #16]
 169 0094 344A     		ldr	r2, .L30+8
 170 0096 1142     		tst	r1, r2
 171 0098 05D1     		bne	.L21
 172              		.loc 1 998 0 discriminator 5
 173 009a DA68     		ldr	r2, [r3, #12]
 174 009c 334B     		ldr	r3, .L30+12
 175 009e 1A42     		tst	r2, r3
 176 00a0 03D0     		beq	.L22
 177              		.loc 1 998 0
 178 00a2 2923     		movs	r3, #41
 179 00a4 1BE0     		b	.L14
 180              	.L21:
 181 00a6 2923     		movs	r3, #41
 182 00a8 19E0     		b	.L14
 183              	.L22:
 184 00aa 1423     		movs	r3, #20
 185 00ac 17E0     		b	.L14
 186              	.L12:
 187              		.loc 1 998 0 discriminator 4
 188 00ae 1969     		ldr	r1, [r3, #16]
 189 00b0 2D4A     		ldr	r2, .L30+8
 190 00b2 1142     		tst	r1, r2
 191 00b4 04D1     		bne	.L15
 192              		.loc 1 998 0 discriminator 11
 193 00b6 D968     		ldr	r1, [r3, #12]
 194 00b8 02F16E42 		add	r2, r2, #-301989888
 195 00bc 1142     		tst	r1, r2
 196 00be 09D0     		beq	.L23
 197              	.L15:
 198              		.loc 1 998 0 discriminator 14
 199 00c0 1969     		ldr	r1, [r3, #16]
 200 00c2 2B4A     		ldr	r2, .L30+16
 201 00c4 0A40     		ands	r2, r2, r1
 202 00c6 3AB9     		cbnz	r2, .L24
ARM GAS  /tmp/ccNsrXlN.s 			page 22


 203              		.loc 1 998 0 discriminator 15
 204 00c8 DA68     		ldr	r2, [r3, #12]
 205 00ca 294B     		ldr	r3, .L30+16
 206 00cc 1340     		ands	r3, r3, r2
 207 00ce 2BB1     		cbz	r3, .L25
 208              		.loc 1 998 0
 209 00d0 FC23     		movs	r3, #252
 210 00d2 04E0     		b	.L14
 211              	.L23:
 212 00d4 5423     		movs	r3, #84
 213 00d6 02E0     		b	.L14
 214              	.L24:
 215 00d8 FC23     		movs	r3, #252
 216 00da 00E0     		b	.L14
 217              	.L25:
 218 00dc 5423     		movs	r3, #84
 219              	.L14:
 996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 220              		.loc 1 996 0 is_stmt 1
 221 00de 03FB00F7 		mul	r7, r3, r0
 222              	.LVL9:
 999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 223              		.loc 1 1000 0
 224 00e2 14E0     		b	.L17
 225              	.L20:
1001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 226              		.loc 1 1003 0
 227 00e4 B4F1FF3F 		cmp	r4, #-1
 228 00e8 0ED0     		beq	.L18
1004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 229              		.loc 1 1005 0
 230 00ea 24B1     		cbz	r4, .L19
 231              		.loc 1 1005 0 is_stmt 0 discriminator 1
 232 00ec FFF7FEFF 		bl	HAL_GetTick
 233              	.LVL10:
 234 00f0 801B     		subs	r0, r0, r6
 235 00f2 A042     		cmp	r0, r4
 236 00f4 08D9     		bls	.L18
 237              	.L19:
1006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 238              		.loc 1 1008 0 is_stmt 1
 239 00f6 AB6A     		ldr	r3, [r5, #40]
 240 00f8 43F00403 		orr	r3, r3, #4
 241 00fc AB62     		str	r3, [r5, #40]
1009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
1010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
1011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 242              		.loc 1 1011 0
 243 00fe 0023     		movs	r3, #0
 244 0100 85F82430 		strb	r3, [r5, #36]
1012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
ARM GAS  /tmp/ccNsrXlN.s 			page 23


1013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 245              		.loc 1 1013 0
 246 0104 0320     		movs	r0, #3
 247 0106 29E0     		b	.L5
 248              	.L18:
1014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Conversion_Timeout_CPU_cycles ++;
 249              		.loc 1 1016 0
 250 0108 019B     		ldr	r3, [sp, #4]
 251 010a 0133     		adds	r3, r3, #1
 252 010c 0193     		str	r3, [sp, #4]
 253              	.L17:
1000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 254              		.loc 1 1000 0
 255 010e 019B     		ldr	r3, [sp, #4]
 256 0110 BB42     		cmp	r3, r7
 257 0112 E7D3     		bcc	.L20
 258              	.LVL11:
 259              	.L11:
1017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear regular group conversion flag */
1021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 260              		.loc 1 1021 0
 261 0114 2B68     		ldr	r3, [r5]
 262 0116 6FF01202 		mvn	r2, #18
 263 011a 1A60     		str	r2, [r3]
1022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update ADC state machine */
1024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 264              		.loc 1 1024 0
 265 011c AB6A     		ldr	r3, [r5, #40]
 266 011e 43F40073 		orr	r3, r3, #512
 267 0122 AB62     		str	r3, [r5, #40]
1025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: On STM32F1 devices, in case of sequencer enabled                   */
1029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       at the end of the sequence.                                        */
1031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 268              		.loc 1 1031 0
 269 0124 2B68     		ldr	r3, [r5]
 270 0126 9B68     		ldr	r3, [r3, #8]
 271 0128 03F46023 		and	r3, r3, #917504
 272 012c B3F5602F 		cmp	r3, #917504
 273 0130 0FD1     		bne	.L26
1032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 274              		.loc 1 1032 0 discriminator 1
 275 0132 EB68     		ldr	r3, [r5, #12]
1031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 276              		.loc 1 1031 0 discriminator 1
 277 0134 7BB9     		cbnz	r3, .L27
1033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {   
1034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
ARM GAS  /tmp/ccNsrXlN.s 			page 24


1035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 278              		.loc 1 1035 0
 279 0136 AB6A     		ldr	r3, [r5, #40]
 280 0138 23F48073 		bic	r3, r3, #256
 281 013c AB62     		str	r3, [r5, #40]
1036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 282              		.loc 1 1037 0
 283 013e AB6A     		ldr	r3, [r5, #40]
 284 0140 13F4805F 		tst	r3, #4096
 285 0144 09D1     		bne	.L28
1038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     { 
1039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 286              		.loc 1 1039 0
 287 0146 AB6A     		ldr	r3, [r5, #40]
 288 0148 43F00103 		orr	r3, r3, #1
 289 014c AB62     		str	r3, [r5, #40]
1040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 290              		.loc 1 1044 0
 291 014e 0020     		movs	r0, #0
 292 0150 04E0     		b	.L5
 293              	.L26:
 294 0152 0020     		movs	r0, #0
 295 0154 02E0     		b	.L5
 296              	.L27:
 297 0156 0020     		movs	r0, #0
 298 0158 00E0     		b	.L5
 299              	.L28:
 300 015a 0020     		movs	r0, #0
 301              	.L5:
1045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 302              		.loc 1 1045 0
 303 015c 03B0     		add	sp, sp, #12
 304              	.LCFI2:
 305              		.cfi_def_cfa_offset 20
 306              		@ sp needed
 307 015e F0BD     		pop	{r4, r5, r6, r7, pc}
 308              	.LVL12:
 309              	.L31:
 310              		.align	2
 311              	.L30:
 312 0160 00000000 		.word	SystemCoreClock
 313 0164 24499224 		.word	613566756
 314 0168 92244912 		.word	306783378
 315 016c 92244900 		.word	4793490
 316 0170 49922400 		.word	2396745
 317              		.cfi_endproc
 318              	.LFE69:
 320              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 321              		.align	2
 322              		.global	HAL_ADC_PollForEvent
 323              		.thumb
 324              		.thumb_func
ARM GAS  /tmp/ccNsrXlN.s 			page 25


 326              	HAL_ADC_PollForEvent:
 327              	.LFB70:
1046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 328              		.loc 1 1057 0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
 332              	.LVL13:
 333 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 334              	.LCFI3:
 335              		.cfi_def_cfa_offset 24
 336              		.cfi_offset 3, -24
 337              		.cfi_offset 4, -20
 338              		.cfi_offset 5, -16
 339              		.cfi_offset 6, -12
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 0002 0546     		mov	r5, r0
 343 0004 0C46     		mov	r4, r1
 344 0006 1646     		mov	r6, r2
 345              	.LVL14:
1058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0; 
1059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 346              		.loc 1 1065 0
 347 0008 FFF7FEFF 		bl	HAL_GetTick
 348              	.LVL15:
 349 000c 0746     		mov	r7, r0
 350              	.LVL16:
1066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check selected event flag */
1068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 351              		.loc 1 1068 0
 352 000e 11E0     		b	.L34
 353              	.LVL17:
 354              	.L37:
1069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 355              		.loc 1 1071 0
 356 0010 B6F1FF3F 		cmp	r6, #-1
ARM GAS  /tmp/ccNsrXlN.s 			page 26


 357 0014 0ED0     		beq	.L34
1072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 358              		.loc 1 1073 0
 359 0016 26B1     		cbz	r6, .L35
 360              		.loc 1 1073 0 is_stmt 0 discriminator 1
 361 0018 FFF7FEFF 		bl	HAL_GetTick
 362              	.LVL18:
 363 001c C01B     		subs	r0, r0, r7
 364 001e B042     		cmp	r0, r6
 365 0020 08D9     		bls	.L34
 366              	.L35:
1074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 367              		.loc 1 1076 0 is_stmt 1
 368 0022 AB6A     		ldr	r3, [r5, #40]
 369 0024 43F00403 		orr	r3, r3, #4
 370 0028 AB62     		str	r3, [r5, #40]
1077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 371              		.loc 1 1079 0
 372 002a 0023     		movs	r3, #0
 373 002c 85F82430 		strb	r3, [r5, #36]
1080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_TIMEOUT;
 374              		.loc 1 1081 0
 375 0030 0320     		movs	r0, #3
 376 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 377              	.LVL19:
 378              	.L34:
1068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 379              		.loc 1 1068 0
 380 0034 2A68     		ldr	r2, [r5]
 381 0036 1368     		ldr	r3, [r2]
 382 0038 2340     		ands	r3, r3, r4
 383 003a A342     		cmp	r3, r4
 384 003c E8D1     		bne	.L37
1082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
1088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 385              		.loc 1 1088 0
 386 003e AB6A     		ldr	r3, [r5, #40]
 387 0040 43F48033 		orr	r3, r3, #65536
 388 0044 AB62     		str	r3, [r5, #40]
1089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear ADC analog watchdog flag */
1091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 389              		.loc 1 1091 0
 390 0046 6FF00103 		mvn	r3, #1
 391 004a 1360     		str	r3, [r2]
1092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  /tmp/ccNsrXlN.s 			page 27


1093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 392              		.loc 1 1094 0
 393 004c 0020     		movs	r0, #0
1095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 394              		.loc 1 1095 0
 395 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 396              		.cfi_endproc
 397              	.LFE70:
 399              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 400              		.align	2
 401              		.global	HAL_ADC_GetValue
 402              		.thumb
 403              		.thumb_func
 405              	HAL_ADC_GetValue:
 406              	.LFB75:
1096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1098:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1099:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
1117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
1126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
ARM GAS  /tmp/ccNsrXlN.s 			page 28


1137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
1176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
1179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
1188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
1189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
1192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
ARM GAS  /tmp/ccNsrXlN.s 			page 29


1194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
1197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
ARM GAS  /tmp/ccNsrXlN.s 			page 30


1251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         through DMA.
1252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA transfer complete
1254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA half transfer
1255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
1258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC2 converted data can be transferred in dual ADC mode using DMA
1261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of ADC1 (ADC master in multimode).
1262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In case of using ADC1 with DMA on a device featuring 2 ADC
1263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         instances: ADC1 conversion register DR contains ADC1 conversion 
1264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         result (ADC1 register DR bits 0 to 11) and, additionally, ADC2 last
1265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion result (ADC1 register DR bits 16 to 27). Therefore, to
1266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         have DMA transferring the conversion results of ADC1 only, DMA must
1267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be configured to transfer size: half word.
1268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if multimode is disabled (for devices with several ADC)     */
1281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If multimode is enabled, dedicated function multimode conversion         */
1282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* start DMA must be used.                                                  */
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
1284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process locked */
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_LOCK(hadc);
1287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC peripheral */
1289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state                                                        */
1295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
ARM GAS  /tmp/ccNsrXlN.s 			page 31


1308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* State machine update: Check if an injected conversion is ongoing */
1330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC error code fields related to conversions on group regular */
1333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC all error code fields */
1338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
1339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA error callback */
1353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* operations)                                                          */
1362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
1363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable ADC DMA mode */
ARM GAS  /tmp/ccNsrXlN.s 			page 32


1365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
1366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start the DMA channel */
1368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* trigger event.                                                       */
1374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
1375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with SW start */
1377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
1378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with external trigger */
1382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
1383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC peripheral.
1404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
1409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
ARM GAS  /tmp/ccNsrXlN.s 			page 33


1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
1433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            to flag EOC.
1469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
ARM GAS  /tmp/ccNsrXlN.s 			page 34


1479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 407              		.loc 1 1480 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412              	.LVL20:
1481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC converted value */ 
1488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->Instance->DR;
 413              		.loc 1 1488 0
 414 0000 0368     		ldr	r3, [r0]
 415 0002 D86C     		ldr	r0, [r3, #76]
 416              	.LVL21:
1489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 417              		.loc 1 1489 0
 418 0004 7047     		bx	lr
 419              		.cfi_endproc
 420              	.LFE75:
 422 0006 00BF     		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 423              		.align	2
 424              		.weak	HAL_ADC_ConvCpltCallback
 425              		.thumb
 426              		.thumb_func
 428              	HAL_ADC_ConvCpltCallback:
 429              	.LFB77:
1490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
1506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
1508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
ARM GAS  /tmp/ccNsrXlN.s 			page 35


1515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
1523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group regular */
1525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
1529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */
1537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
1538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag */
1540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
1541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
1546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
1548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
1554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
1564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
1565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
1566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
1567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group injected */
1569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
ARM GAS  /tmp/ccNsrXlN.s 			page 36


1572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
1573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
1575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
1576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */ 
1581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
1582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
1585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
1592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Level out of window callback */ 
1597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
1598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 430              		.loc 1 1612 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 435              	.LVL22:
 436 0000 7047     		bx	lr
 437              		.cfi_endproc
 438              	.LFE77:
 440 0002 00BF     		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 441              		.align	2
 442              		.global	ADC_DMAConvCplt
 443              		.thumb
 444              		.thumb_func
 446              	ADC_DMAConvCplt:
 447              	.LFB87:
ARM GAS  /tmp/ccNsrXlN.s 			page 37


1613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */
1618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral Control functions
ARM GAS  /tmp/ccNsrXlN.s 			page 38


1670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure channels on regular group
1677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure the analog watchdog
1678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         group.
1686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the ADC.
1695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
1700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** { 
1704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
1706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Regular sequence configuration */
1718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 1 to 6 */
1719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Rank < 7)
1720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
1722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
1723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
1724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 7 to 12 */
1726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (sConfig->Rank < 13)
ARM GAS  /tmp/ccNsrXlN.s 			page 39


1727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
1729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
1730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
1731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 13 to 16 */
1733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
1736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
1737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
1738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Channel sampling time configuration */
1742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For channels 10 to 17 */
1743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Channel >= ADC_CHANNEL_10)
1744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
1746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
1747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
1748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else /* For channels 0 to 9 */
1750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
1752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
1753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
1754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
1758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
1759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
1760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Instance == ADC1)
1765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
1767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
1769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
1771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
1775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0)
1776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             wait_loop_index--;
1778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
1779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  /tmp/ccNsrXlN.s 			page 40


1784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
1788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         is on going.
1802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
1810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
1819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
1820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
1822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
1823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
1824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog configuration */
1832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
1834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
1835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
ARM GAS  /tmp/ccNsrXlN.s 			page 41


1841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
1846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
1847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    one or all channels.                                                  */
1848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
1849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
1850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   MODIFY_REG(hadc->Instance->CR1            ,
1851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
1852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_JAWDEN |
1853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDEN  |
1854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDCH                  ,
1855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->WatchdogMode |
1856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->Channel        );
1857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the high threshold */
1859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
1860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the low threshold */
1862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
1863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
1869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral State functions
1879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim
1881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
1885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     peripheral.
1887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC state
1888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC error code
1889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  return the ADC state
1896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL state
ARM GAS  /tmp/ccNsrXlN.s 			page 42


1898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->State;
1903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Return the ADC error code
1907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC Error Code
1909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
1913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
1937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
1938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
1944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the Peripheral */
1946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
1951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0)
1952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       wait_loop_index--;
1954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccNsrXlN.s 			page 43


1955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
1957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
1958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
1961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
1965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
1974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
1979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
1980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
1984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         stopped to disable the ADC.
1986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
1990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
1992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
1994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
1995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC peripheral */
1997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
1998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
2001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
2004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
2008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
ARM GAS  /tmp/ccNsrXlN.s 			page 44


2012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
2014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
2020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
2021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 448              		.loc 1 2028 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              	.LVL23:
 453              		.loc 1 2028 0
 454 0000 08B5     		push	{r3, lr}
 455              	.LCFI4:
 456              		.cfi_def_cfa_offset 8
 457              		.cfi_offset 3, -8
 458              		.cfi_offset 14, -4
2029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 459              		.loc 1 2030 0
 460 0002 436A     		ldr	r3, [r0, #36]
 461              	.LVL24:
2031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
2032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 462              		.loc 1 2033 0
 463 0004 9A6A     		ldr	r2, [r3, #40]
 464 0006 12F0500F 		tst	r2, #80
 465 000a 1CD1     		bne	.L42
2034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine */
2036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 466              		.loc 1 2036 0
 467 000c 9A6A     		ldr	r2, [r3, #40]
 468 000e 42F40072 		orr	r2, r2, #512
 469 0012 9A62     		str	r2, [r3, #40]
2037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: On STM32F1 devices, in case of sequencer enabled                 */
2041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       (several ranks selected), end of conversion flag is raised       */
2042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       at the end of the sequence.                                      */
2043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 470              		.loc 1 2043 0
 471 0014 1A68     		ldr	r2, [r3]
 472 0016 9268     		ldr	r2, [r2, #8]
ARM GAS  /tmp/ccNsrXlN.s 			page 45


 473 0018 02F46022 		and	r2, r2, #917504
 474 001c B2F5602F 		cmp	r2, #917504
 475 0020 0DD1     		bne	.L43
2044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 476              		.loc 1 2044 0 discriminator 1
 477 0022 DA68     		ldr	r2, [r3, #12]
2043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 478              		.loc 1 2043 0 discriminator 1
 479 0024 5AB9     		cbnz	r2, .L43
2045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
2047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 480              		.loc 1 2047 0
 481 0026 9A6A     		ldr	r2, [r3, #40]
 482 0028 22F48072 		bic	r2, r2, #256
 483 002c 9A62     		str	r2, [r3, #40]
2048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 484              		.loc 1 2049 0
 485 002e 9A6A     		ldr	r2, [r3, #40]
 486 0030 12F4805F 		tst	r2, #4096
 487 0034 03D1     		bne	.L43
2050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 488              		.loc 1 2051 0
 489 0036 9A6A     		ldr	r2, [r3, #40]
 490 0038 42F00102 		orr	r2, r2, #1
 491 003c 9A62     		str	r2, [r3, #40]
 492              	.L43:
2052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Conversion complete callback */
2056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 493              		.loc 1 2056 0
 494 003e 1846     		mov	r0, r3
 495              	.LVL25:
 496 0040 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 497              	.LVL26:
 498 0044 08BD     		pop	{r3, pc}
 499              	.LVL27:
 500              	.L42:
2057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Call DMA error callback */
2061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 501              		.loc 1 2061 0
 502 0046 1B6A     		ldr	r3, [r3, #32]
 503              	.LVL28:
 504 0048 1B6B     		ldr	r3, [r3, #48]
 505 004a 9847     		blx	r3
 506              	.LVL29:
 507 004c 08BD     		pop	{r3, pc}
 508              		.cfi_endproc
 509              	.LFE87:
 511 004e 00BF     		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
ARM GAS  /tmp/ccNsrXlN.s 			page 46


 512              		.align	2
 513              		.weak	HAL_ADC_ConvHalfCpltCallback
 514              		.thumb
 515              		.thumb_func
 517              	HAL_ADC_ConvHalfCpltCallback:
 518              	.LFB78:
1626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 519              		.loc 1 1626 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 0
 522              		@ frame_needed = 0, uses_anonymous_args = 0
 523              		@ link register save eliminated.
 524              	.LVL30:
 525 0000 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE78:
 529 0002 00BF     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 530              		.align	2
 531              		.global	ADC_DMAHalfConvCplt
 532              		.thumb
 533              		.thumb_func
 535              	ADC_DMAHalfConvCplt:
 536              	.LFB88:
2062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
2064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 537              		.loc 1 2071 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              	.LVL31:
 542              		.loc 1 2071 0
 543 0000 08B5     		push	{r3, lr}
 544              	.LCFI5:
 545              		.cfi_def_cfa_offset 8
 546              		.cfi_offset 3, -8
 547              		.cfi_offset 14, -4
 548              	.LVL32:
2072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Half conversion callback */
2076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 549              		.loc 1 2076 0
 550 0002 406A     		ldr	r0, [r0, #36]
 551              	.LVL33:
 552 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 553              	.LVL34:
 554 0008 08BD     		pop	{r3, pc}
 555              		.cfi_endproc
ARM GAS  /tmp/ccNsrXlN.s 			page 47


 556              	.LFE88:
 558 000a 00BF     		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 559              		.align	2
 560              		.weak	HAL_ADC_LevelOutOfWindowCallback
 561              		.thumb
 562              		.thumb_func
 564              	HAL_ADC_LevelOutOfWindowCallback:
 565              	.LFB79:
1640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 566              		.loc 1 1640 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 571              	.LVL35:
 572 0000 7047     		bx	lr
 573              		.cfi_endproc
 574              	.LFE79:
 576 0002 00BF     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 577              		.align	2
 578              		.global	HAL_ADC_IRQHandler
 579              		.thumb
 580              		.thumb_func
 582              	HAL_ADC_IRQHandler:
 583              	.LFB76:
1497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 584              		.loc 1 1497 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL36:
1497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 589              		.loc 1 1497 0
 590 0000 10B5     		push	{r4, lr}
 591              	.LCFI6:
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 4, -8
 594              		.cfi_offset 14, -4
 595 0002 0446     		mov	r4, r0
1505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 596              		.loc 1 1505 0
 597 0004 0368     		ldr	r3, [r0]
 598 0006 5A68     		ldr	r2, [r3, #4]
 599 0008 12F0200F 		tst	r2, #32
 600 000c 2AD0     		beq	.L51
1507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 601              		.loc 1 1507 0
 602 000e 1A68     		ldr	r2, [r3]
 603 0010 12F0020F 		tst	r2, #2
 604 0014 26D0     		beq	.L51
1510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 605              		.loc 1 1510 0
 606 0016 826A     		ldr	r2, [r0, #40]
 607 0018 12F0100F 		tst	r2, #16
 608 001c 03D1     		bne	.L52
1513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 609              		.loc 1 1513 0
ARM GAS  /tmp/ccNsrXlN.s 			page 48


 610 001e 826A     		ldr	r2, [r0, #40]
 611 0020 42F40072 		orr	r2, r2, #512
 612 0024 8262     		str	r2, [r0, #40]
 613              	.L52:
1521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 614              		.loc 1 1521 0
 615 0026 9A68     		ldr	r2, [r3, #8]
 616 0028 02F46022 		and	r2, r2, #917504
 617 002c B2F5602F 		cmp	r2, #917504
 618 0030 11D1     		bne	.L53
1522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 619              		.loc 1 1522 0 discriminator 1
 620 0032 E268     		ldr	r2, [r4, #12]
1521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 621              		.loc 1 1521 0 discriminator 1
 622 0034 7AB9     		cbnz	r2, .L53
1525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 623              		.loc 1 1525 0
 624 0036 5A68     		ldr	r2, [r3, #4]
 625 0038 22F02002 		bic	r2, r2, #32
 626 003c 5A60     		str	r2, [r3, #4]
1528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 627              		.loc 1 1528 0
 628 003e A36A     		ldr	r3, [r4, #40]
 629 0040 23F48073 		bic	r3, r3, #256
 630 0044 A362     		str	r3, [r4, #40]
1530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
 631              		.loc 1 1530 0
 632 0046 A36A     		ldr	r3, [r4, #40]
 633 0048 13F4805F 		tst	r3, #4096
 634 004c 03D1     		bne	.L53
1532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
 635              		.loc 1 1532 0
 636 004e A36A     		ldr	r3, [r4, #40]
 637 0050 43F00103 		orr	r3, r3, #1
 638 0054 A362     		str	r3, [r4, #40]
 639              	.L53:
1537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 640              		.loc 1 1537 0
 641 0056 2046     		mov	r0, r4
 642              	.LVL37:
 643 0058 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 644              	.LVL38:
1540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 645              		.loc 1 1540 0
 646 005c 2368     		ldr	r3, [r4]
 647 005e 6FF01202 		mvn	r2, #18
 648 0062 1A60     		str	r2, [r3]
 649              	.L51:
1545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 650              		.loc 1 1545 0
 651 0064 2368     		ldr	r3, [r4]
 652 0066 5A68     		ldr	r2, [r3, #4]
 653 0068 12F0800F 		tst	r2, #128
 654 006c 34D0     		beq	.L54
1547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 655              		.loc 1 1547 0
ARM GAS  /tmp/ccNsrXlN.s 			page 49


 656 006e 1A68     		ldr	r2, [r3]
 657 0070 12F0040F 		tst	r2, #4
 658 0074 30D0     		beq	.L54
1550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 659              		.loc 1 1550 0
 660 0076 A26A     		ldr	r2, [r4, #40]
 661 0078 12F0100F 		tst	r2, #16
 662 007c 03D1     		bne	.L55
1553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 663              		.loc 1 1553 0
 664 007e A26A     		ldr	r2, [r4, #40]
 665 0080 42F40052 		orr	r2, r2, #8192
 666 0084 A262     		str	r2, [r4, #40]
 667              	.L55:
1563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 668              		.loc 1 1563 0
 669 0086 9A68     		ldr	r2, [r3, #8]
 670 0088 02F4E042 		and	r2, r2, #28672
 671 008c B2F5E04F 		cmp	r2, #28672
 672 0090 0BD0     		beq	.L56
1564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 673              		.loc 1 1564 0 discriminator 1
 674 0092 5A68     		ldr	r2, [r3, #4]
1563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 675              		.loc 1 1563 0 discriminator 1
 676 0094 12F4806F 		tst	r2, #1024
 677 0098 17D1     		bne	.L57
1565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 678              		.loc 1 1565 0
 679 009a 9A68     		ldr	r2, [r3, #8]
 680 009c 02F46022 		and	r2, r2, #917504
1564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 681              		.loc 1 1564 0
 682 00a0 B2F5602F 		cmp	r2, #917504
 683 00a4 11D1     		bne	.L57
1566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 684              		.loc 1 1566 0
 685 00a6 E268     		ldr	r2, [r4, #12]
1565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 686              		.loc 1 1565 0
 687 00a8 7AB9     		cbnz	r2, .L57
 688              	.L56:
1569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 689              		.loc 1 1569 0
 690 00aa 5A68     		ldr	r2, [r3, #4]
 691 00ac 22F08002 		bic	r2, r2, #128
 692 00b0 5A60     		str	r2, [r3, #4]
1572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 693              		.loc 1 1572 0
 694 00b2 A36A     		ldr	r3, [r4, #40]
 695 00b4 23F48053 		bic	r3, r3, #4096
 696 00b8 A362     		str	r3, [r4, #40]
1574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
 697              		.loc 1 1574 0
 698 00ba A36A     		ldr	r3, [r4, #40]
 699 00bc 13F4807F 		tst	r3, #256
 700 00c0 03D1     		bne	.L57
ARM GAS  /tmp/ccNsrXlN.s 			page 50


1576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
 701              		.loc 1 1576 0
 702 00c2 A36A     		ldr	r3, [r4, #40]
 703 00c4 43F00103 		orr	r3, r3, #1
 704 00c8 A362     		str	r3, [r4, #40]
 705              	.L57:
1581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 706              		.loc 1 1581 0
 707 00ca 2046     		mov	r0, r4
 708 00cc FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 709              	.LVL39:
1584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 710              		.loc 1 1584 0
 711 00d0 2368     		ldr	r3, [r4]
 712 00d2 6FF00C02 		mvn	r2, #12
 713 00d6 1A60     		str	r2, [r3]
 714              	.L54:
1589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 715              		.loc 1 1589 0
 716 00d8 2368     		ldr	r3, [r4]
 717 00da 5A68     		ldr	r2, [r3, #4]
 718 00dc 12F0400F 		tst	r2, #64
 719 00e0 0ED0     		beq	.L50
1591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 720              		.loc 1 1591 0
 721 00e2 1B68     		ldr	r3, [r3]
 722 00e4 13F0010F 		tst	r3, #1
 723 00e8 0AD0     		beq	.L50
1594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 724              		.loc 1 1594 0
 725 00ea A36A     		ldr	r3, [r4, #40]
 726 00ec 43F48033 		orr	r3, r3, #65536
 727 00f0 A362     		str	r3, [r4, #40]
1597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 728              		.loc 1 1597 0
 729 00f2 2046     		mov	r0, r4
 730 00f4 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 731              	.LVL40:
1600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 732              		.loc 1 1600 0
 733 00f8 2368     		ldr	r3, [r4]
 734 00fa 6FF00102 		mvn	r2, #1
 735 00fe 1A60     		str	r2, [r3]
 736              	.L50:
 737 0100 10BD     		pop	{r4, pc}
 738              		.cfi_endproc
 739              	.LFE76:
 741 0102 00BF     		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 742              		.align	2
 743              		.weak	HAL_ADC_ErrorCallback
 744              		.thumb
 745              		.thumb_func
 747              	HAL_ADC_ErrorCallback:
 748              	.LFB80:
1655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 749              		.loc 1 1655 0
 750              		.cfi_startproc
ARM GAS  /tmp/ccNsrXlN.s 			page 51


 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              		@ link register save eliminated.
 754              	.LVL41:
 755 0000 7047     		bx	lr
 756              		.cfi_endproc
 757              	.LFE80:
 759 0002 00BF     		.section	.text.ADC_DMAError,"ax",%progbits
 760              		.align	2
 761              		.global	ADC_DMAError
 762              		.thumb
 763              		.thumb_func
 765              	ADC_DMAError:
 766              	.LFB89:
2077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
2078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA error callback 
2081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 767              		.loc 1 2085 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              	.LVL42:
 772              		.loc 1 2085 0
 773 0000 08B5     		push	{r3, lr}
 774              	.LCFI7:
 775              		.cfi_def_cfa_offset 8
 776              		.cfi_offset 3, -8
 777              		.cfi_offset 14, -4
2086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 778              		.loc 1 2087 0
 779 0002 406A     		ldr	r0, [r0, #36]
 780              	.LVL43:
2088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
2090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 781              		.loc 1 2090 0
 782 0004 836A     		ldr	r3, [r0, #40]
 783 0006 43F04003 		orr	r3, r3, #64
 784 000a 8362     		str	r3, [r0, #40]
2091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 785              		.loc 1 2093 0
 786 000c C36A     		ldr	r3, [r0, #44]
 787 000e 43F00403 		orr	r3, r3, #4
 788 0012 C362     		str	r3, [r0, #44]
2094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Error callback */
2096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 789              		.loc 1 2096 0
ARM GAS  /tmp/ccNsrXlN.s 			page 52


 790 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 791              	.LVL44:
 792 0018 08BD     		pop	{r3, pc}
 793              		.cfi_endproc
 794              	.LFE89:
 796              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 797              		.align	2
 798              		.global	HAL_ADC_ConfigChannel
 799              		.thumb
 800              		.thumb_func
 802              	HAL_ADC_ConfigChannel:
 803              	.LFB81:
1703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 804              		.loc 1 1703 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 8
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              		@ link register save eliminated.
 809              	.LVL45:
 810 0000 F0B4     		push	{r4, r5, r6, r7}
 811              	.LCFI8:
 812              		.cfi_def_cfa_offset 16
 813              		.cfi_offset 4, -16
 814              		.cfi_offset 5, -12
 815              		.cfi_offset 6, -8
 816              		.cfi_offset 7, -4
 817 0002 82B0     		sub	sp, sp, #8
 818              	.LCFI9:
 819              		.cfi_def_cfa_offset 24
 820              	.LVL46:
1705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 821              		.loc 1 1705 0
 822 0004 0023     		movs	r3, #0
 823 0006 0193     		str	r3, [sp, #4]
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 824              		.loc 1 1714 0
 825 0008 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 826 000c 012B     		cmp	r3, #1
 827 000e 00F0BD80 		beq	.L74
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 828              		.loc 1 1714 0 is_stmt 0 discriminator 2
 829 0012 0123     		movs	r3, #1
 830 0014 80F82430 		strb	r3, [r0, #36]
1719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 831              		.loc 1 1719 0 is_stmt 1 discriminator 2
 832 0018 4B68     		ldr	r3, [r1, #4]
 833 001a 062B     		cmp	r3, #6
 834 001c 19D8     		bhi	.L65
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
 835              		.loc 1 1721 0
 836 001e 0668     		ldr	r6, [r0]
 837 0020 776B     		ldr	r7, [r6, #52]
 838              	.LVL47:
 839              	.LBB28:
 840              	.LBB29:
 841              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
ARM GAS  /tmp/ccNsrXlN.s 			page 53


   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
ARM GAS  /tmp/ccNsrXlN.s 			page 54


  59:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
ARM GAS  /tmp/ccNsrXlN.s 			page 55


 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccNsrXlN.s 			page 56


 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccNsrXlN.s 			page 57


 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccNsrXlN.s 			page 58


 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccNsrXlN.s 			page 59


 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:./Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccNsrXlN.s 			page 60


 401:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:./Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:./Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:./Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:./Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
ARM GAS  /tmp/ccNsrXlN.s 			page 61


 458:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:./Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
ARM GAS  /tmp/ccNsrXlN.s 			page 62


 515:./Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 842              		.loc 2 531 0
 843 0022 4FF47872 		mov	r2, #992
 844              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 845 0026 92FAA2F5 		rbit r5, r2
 846              	@ 0 "" 2
 847              	.LVL48:
 848              		.thumb
 849              	.LBE29:
 850              	.LBE28:
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
 851              		.loc 1 1721 0
 852 002a B5FA85F5 		clz	r5, r5
 853              	.LVL49:
 854 002e 013B     		subs	r3, r3, #1
 855 0030 03FB05F5 		mul	r5, r3, r5
 856 0034 1F24     		movs	r4, #31
 857 0036 AC40     		lsls	r4, r4, r5
 858 0038 27EA0405 		bic	r5, r7, r4
 859 003c 0C68     		ldr	r4, [r1]
 860              	.LVL50:
 861              	.LBB30:
 862              	.LBB31:
 863              		.loc 2 531 0
 864              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 865 003e 92FAA2F2 		rbit r2, r2
 866              	@ 0 "" 2
 867              	.LVL51:
 868              		.thumb
 869              	.LBE31:
 870              	.LBE30:
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
 871              		.loc 1 1721 0
 872 0042 B2FA82F2 		clz	r2, r2
 873              	.LVL52:
 874 0046 02FB03F3 		mul	r3, r2, r3
 875 004a 9C40     		lsls	r4, r4, r3
 876 004c 2C43     		orrs	r4, r4, r5
 877 004e 7463     		str	r4, [r6, #52]
 878 0050 34E0     		b	.L66
 879              	.LVL53:
ARM GAS  /tmp/ccNsrXlN.s 			page 63


 880              	.L65:
1726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 881              		.loc 1 1726 0
 882 0052 0C2B     		cmp	r3, #12
 883 0054 19D8     		bhi	.L67
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
 884              		.loc 1 1728 0
 885 0056 0668     		ldr	r6, [r0]
 886 0058 376B     		ldr	r7, [r6, #48]
 887              	.LVL54:
 888              	.LBB32:
 889              	.LBB33:
 890              		.loc 2 531 0
 891 005a 4FF47872 		mov	r2, #992
 892              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 893 005e 92FAA2F5 		rbit r5, r2
 894              	@ 0 "" 2
 895              	.LVL55:
 896              		.thumb
 897              	.LBE33:
 898              	.LBE32:
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
 899              		.loc 1 1728 0
 900 0062 B5FA85F5 		clz	r5, r5
 901              	.LVL56:
 902 0066 073B     		subs	r3, r3, #7
 903 0068 03FB05F5 		mul	r5, r3, r5
 904 006c 1F24     		movs	r4, #31
 905 006e AC40     		lsls	r4, r4, r5
 906 0070 27EA0405 		bic	r5, r7, r4
 907 0074 0C68     		ldr	r4, [r1]
 908              	.LVL57:
 909              	.LBB34:
 910              	.LBB35:
 911              		.loc 2 531 0
 912              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 913 0076 92FAA2F2 		rbit r2, r2
 914              	@ 0 "" 2
 915              	.LVL58:
 916              		.thumb
 917              	.LBE35:
 918              	.LBE34:
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
 919              		.loc 1 1728 0
 920 007a B2FA82F2 		clz	r2, r2
 921              	.LVL59:
 922 007e 02FB03F3 		mul	r3, r2, r3
 923 0082 9C40     		lsls	r4, r4, r3
 924 0084 2C43     		orrs	r4, r4, r5
 925 0086 3463     		str	r4, [r6, #48]
 926 0088 18E0     		b	.L66
 927              	.LVL60:
 928              	.L67:
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
 929              		.loc 1 1735 0
 930 008a 0668     		ldr	r6, [r0]
 931 008c F76A     		ldr	r7, [r6, #44]
ARM GAS  /tmp/ccNsrXlN.s 			page 64


 932              	.LVL61:
 933              	.LBB36:
 934              	.LBB37:
 935              		.loc 2 531 0
 936 008e 4FF47872 		mov	r2, #992
 937              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 938 0092 92FAA2F5 		rbit r5, r2
 939              	@ 0 "" 2
 940              	.LVL62:
 941              		.thumb
 942              	.LBE37:
 943              	.LBE36:
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
 944              		.loc 1 1735 0
 945 0096 B5FA85F5 		clz	r5, r5
 946              	.LVL63:
 947 009a 0D3B     		subs	r3, r3, #13
 948 009c 03FB05F5 		mul	r5, r3, r5
 949 00a0 1F24     		movs	r4, #31
 950 00a2 AC40     		lsls	r4, r4, r5
 951 00a4 27EA0405 		bic	r5, r7, r4
 952 00a8 0C68     		ldr	r4, [r1]
 953              	.LVL64:
 954              	.LBB38:
 955              	.LBB39:
 956              		.loc 2 531 0
 957              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 958 00aa 92FAA2F2 		rbit r2, r2
 959              	@ 0 "" 2
 960              	.LVL65:
 961              		.thumb
 962              	.LBE39:
 963              	.LBE38:
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
 964              		.loc 1 1735 0
 965 00ae B2FA82F2 		clz	r2, r2
 966              	.LVL66:
 967 00b2 02FB03F3 		mul	r3, r2, r3
 968 00b6 9C40     		lsls	r4, r4, r3
 969 00b8 2C43     		orrs	r4, r4, r5
 970 00ba F462     		str	r4, [r6, #44]
 971              	.LVL67:
 972              	.L66:
1743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 973              		.loc 1 1743 0
 974 00bc 0C68     		ldr	r4, [r1]
 975 00be 092C     		cmp	r4, #9
 976 00c0 18D9     		bls	.L68
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
 977              		.loc 1 1745 0
 978 00c2 0768     		ldr	r7, [r0]
 979 00c4 FB68     		ldr	r3, [r7, #12]
 980              	.LVL68:
 981              	.LBB40:
 982              	.LBB41:
 983              		.loc 2 531 0
 984 00c6 3822     		movs	r2, #56
ARM GAS  /tmp/ccNsrXlN.s 			page 65


 985              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 986 00c8 92FAA2F6 		rbit r6, r2
 987              	@ 0 "" 2
 988              	.LVL69:
 989              		.thumb
 990              	.LBE41:
 991              	.LBE40:
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
 992              		.loc 1 1745 0
 993 00cc B6FA86F6 		clz	r6, r6
 994              	.LVL70:
 995 00d0 0A3C     		subs	r4, r4, #10
 996 00d2 04FB06F6 		mul	r6, r4, r6
 997 00d6 0725     		movs	r5, #7
 998 00d8 B540     		lsls	r5, r5, r6
 999 00da 23EA0506 		bic	r6, r3, r5
 1000 00de 8D68     		ldr	r5, [r1, #8]
 1001              	.LVL71:
 1002              	.LBB42:
 1003              	.LBB43:
 1004              		.loc 2 531 0
 1005              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1006 00e0 92FAA2F2 		rbit r2, r2
 1007              	@ 0 "" 2
 1008              	.LVL72:
 1009              		.thumb
 1010              	.LBE43:
 1011              	.LBE42:
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
 1012              		.loc 1 1745 0
 1013 00e4 B2FA82F2 		clz	r2, r2
 1014              	.LVL73:
 1015 00e8 02FB04F3 		mul	r3, r2, r4
 1016 00ec 9D40     		lsls	r5, r5, r3
 1017 00ee 3543     		orrs	r5, r5, r6
 1018 00f0 FD60     		str	r5, [r7, #12]
 1019 00f2 16E0     		b	.L69
 1020              	.LVL74:
 1021              	.L68:
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
 1022              		.loc 1 1751 0
 1023 00f4 0668     		ldr	r6, [r0]
 1024 00f6 3769     		ldr	r7, [r6, #16]
 1025              	.LVL75:
 1026              	.LBB44:
 1027              	.LBB45:
 1028              		.loc 2 531 0
 1029 00f8 3823     		movs	r3, #56
 1030              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1031 00fa 93FAA3F5 		rbit r5, r3
 1032              	@ 0 "" 2
 1033              	.LVL76:
 1034              		.thumb
 1035              	.LBE45:
 1036              	.LBE44:
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
 1037              		.loc 1 1751 0
ARM GAS  /tmp/ccNsrXlN.s 			page 66


 1038 00fe B5FA85F5 		clz	r5, r5
 1039              	.LVL77:
 1040 0102 05FB04F5 		mul	r5, r5, r4
 1041 0106 0722     		movs	r2, #7
 1042 0108 AA40     		lsls	r2, r2, r5
 1043 010a 27EA0205 		bic	r5, r7, r2
 1044 010e 8A68     		ldr	r2, [r1, #8]
 1045              	.LVL78:
 1046              	.LBB46:
 1047              	.LBB47:
 1048              		.loc 2 531 0
 1049              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1050 0110 93FAA3F3 		rbit r3, r3
 1051              	@ 0 "" 2
 1052              	.LVL79:
 1053              		.thumb
 1054              	.LBE47:
 1055              	.LBE46:
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
 1056              		.loc 1 1751 0
 1057 0114 B3FA83F3 		clz	r3, r3
 1058              	.LVL80:
 1059 0118 03FB04F3 		mul	r3, r3, r4
 1060 011c 9A40     		lsls	r2, r2, r3
 1061 011e 2A43     		orrs	r2, r2, r5
 1062 0120 3261     		str	r2, [r6, #16]
 1063              	.LVL81:
 1064              	.L69:
1758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 1065              		.loc 1 1758 0
 1066 0122 0B68     		ldr	r3, [r1]
 1067 0124 103B     		subs	r3, r3, #16
 1068 0126 012B     		cmp	r3, #1
 1069 0128 26D8     		bhi	.L75
1764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1070              		.loc 1 1764 0
 1071 012a 0368     		ldr	r3, [r0]
 1072 012c 194A     		ldr	r2, .L79
 1073 012e 9342     		cmp	r3, r2
 1074 0130 1CD1     		bne	.L71
1766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1075              		.loc 1 1766 0
 1076 0132 9A68     		ldr	r2, [r3, #8]
 1077 0134 12F4000F 		tst	r2, #8388608
 1078 0138 20D1     		bne	.L76
1768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 1079              		.loc 1 1768 0
 1080 013a 9A68     		ldr	r2, [r3, #8]
 1081 013c 42F40002 		orr	r2, r2, #8388608
 1082 0140 9A60     		str	r2, [r3, #8]
1770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
 1083              		.loc 1 1770 0
 1084 0142 0B68     		ldr	r3, [r1]
 1085 0144 102B     		cmp	r3, #16
 1086 0146 1BD1     		bne	.L77
1774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0)
 1087              		.loc 1 1774 0
ARM GAS  /tmp/ccNsrXlN.s 			page 67


 1088 0148 134B     		ldr	r3, .L79+4
 1089 014a 1B68     		ldr	r3, [r3]
 1090 014c 134A     		ldr	r2, .L79+8
 1091 014e A2FB0323 		umull	r2, r3, r2, r3
 1092 0152 9B0C     		lsrs	r3, r3, #18
 1093 0154 03EB8303 		add	r3, r3, r3, lsl #2
 1094 0158 5B00     		lsls	r3, r3, #1
 1095 015a 0193     		str	r3, [sp, #4]
1775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
 1096              		.loc 1 1775 0
 1097 015c 02E0     		b	.L72
 1098              	.L73:
1777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
 1099              		.loc 1 1777 0
 1100 015e 019B     		ldr	r3, [sp, #4]
 1101 0160 013B     		subs	r3, r3, #1
 1102 0162 0193     		str	r3, [sp, #4]
 1103              	.L72:
1775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
 1104              		.loc 1 1775 0
 1105 0164 019B     		ldr	r3, [sp, #4]
 1106 0166 002B     		cmp	r3, #0
 1107 0168 F9D1     		bne	.L73
 1108 016a 0AE0     		b	.L70
 1109              	.L71:
1785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1110              		.loc 1 1785 0
 1111 016c 836A     		ldr	r3, [r0, #40]
 1112 016e 43F02003 		orr	r3, r3, #32
 1113 0172 8362     		str	r3, [r0, #40]
 1114              	.LVL82:
1787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1115              		.loc 1 1787 0
 1116 0174 0123     		movs	r3, #1
 1117 0176 04E0     		b	.L70
 1118              	.LVL83:
 1119              	.L75:
1704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 1120              		.loc 1 1704 0
 1121 0178 0023     		movs	r3, #0
 1122 017a 02E0     		b	.L70
 1123              	.L76:
 1124 017c 0023     		movs	r3, #0
 1125 017e 00E0     		b	.L70
 1126              	.L77:
 1127 0180 0023     		movs	r3, #0
 1128              	.LVL84:
 1129              	.L70:
1792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1130              		.loc 1 1792 0
 1131 0182 0022     		movs	r2, #0
 1132 0184 80F82420 		strb	r2, [r0, #36]
1795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1133              		.loc 1 1795 0
 1134 0188 1846     		mov	r0, r3
 1135              	.LVL85:
 1136 018a 00E0     		b	.L64
ARM GAS  /tmp/ccNsrXlN.s 			page 68


 1137              	.LVL86:
 1138              	.L74:
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1139              		.loc 1 1714 0
 1140 018c 0220     		movs	r0, #2
 1141              	.LVL87:
 1142              	.L64:
1796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1143              		.loc 1 1796 0
 1144 018e 02B0     		add	sp, sp, #8
 1145              	.LCFI10:
 1146              		.cfi_def_cfa_offset 16
 1147              		@ sp needed
 1148 0190 F0BC     		pop	{r4, r5, r6, r7}
 1149              	.LCFI11:
 1150              		.cfi_restore 7
 1151              		.cfi_restore 6
 1152              		.cfi_restore 5
 1153              		.cfi_restore 4
 1154              		.cfi_def_cfa_offset 0
 1155 0192 7047     		bx	lr
 1156              	.L80:
 1157              		.align	2
 1158              	.L79:
 1159 0194 00240140 		.word	1073816576
 1160 0198 00000000 		.word	SystemCoreClock
 1161 019c 83DE1B43 		.word	1125899907
 1162              		.cfi_endproc
 1163              	.LFE81:
 1165              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 1166              		.align	2
 1167              		.global	HAL_ADC_AnalogWDGConfig
 1168              		.thumb
 1169              		.thumb_func
 1171              	HAL_ADC_AnalogWDGConfig:
 1172              	.LFB82:
1813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 1173              		.loc 1 1813 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 0
 1176              		@ frame_needed = 0, uses_anonymous_args = 0
 1177              		@ link register save eliminated.
 1178              	.LVL88:
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1179              		.loc 1 1829 0
 1180 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1181 0004 012B     		cmp	r3, #1
 1182 0006 25D0     		beq	.L85
1813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 1183              		.loc 1 1813 0 discriminator 2
 1184 0008 30B4     		push	{r4, r5}
 1185              	.LCFI12:
 1186              		.cfi_def_cfa_offset 8
 1187              		.cfi_offset 4, -8
 1188              		.cfi_offset 5, -4
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1189              		.loc 1 1829 0 discriminator 2
ARM GAS  /tmp/ccNsrXlN.s 			page 69


 1190 000a 0123     		movs	r3, #1
 1191 000c 80F82430 		strb	r3, [r0, #36]
1834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1192              		.loc 1 1834 0 discriminator 2
 1193 0010 8B68     		ldr	r3, [r1, #8]
 1194 0012 012B     		cmp	r3, #1
 1195 0014 05D1     		bne	.L83
1837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1196              		.loc 1 1837 0
 1197 0016 0268     		ldr	r2, [r0]
 1198 0018 5368     		ldr	r3, [r2, #4]
 1199 001a 43F04003 		orr	r3, r3, #64
 1200 001e 5360     		str	r3, [r2, #4]
 1201 0020 04E0     		b	.L84
 1202              	.L83:
1842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1203              		.loc 1 1842 0
 1204 0022 0268     		ldr	r2, [r0]
 1205 0024 5368     		ldr	r3, [r2, #4]
 1206 0026 23F04003 		bic	r3, r3, #64
 1207 002a 5360     		str	r3, [r2, #4]
 1208              	.L84:
1850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
 1209              		.loc 1 1850 0
 1210 002c 0468     		ldr	r4, [r0]
 1211 002e 6368     		ldr	r3, [r4, #4]
 1212 0030 0A4A     		ldr	r2, .L88
 1213 0032 1A40     		ands	r2, r2, r3
 1214 0034 0D68     		ldr	r5, [r1]
 1215 0036 4B68     		ldr	r3, [r1, #4]
 1216 0038 2B43     		orrs	r3, r3, r5
 1217 003a 1343     		orrs	r3, r3, r2
 1218 003c 6360     		str	r3, [r4, #4]
1859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1219              		.loc 1 1859 0
 1220 003e 0368     		ldr	r3, [r0]
 1221 0040 CA68     		ldr	r2, [r1, #12]
 1222 0042 5A62     		str	r2, [r3, #36]
1862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1223              		.loc 1 1862 0
 1224 0044 0368     		ldr	r3, [r0]
 1225 0046 0A69     		ldr	r2, [r1, #16]
 1226 0048 9A62     		str	r2, [r3, #40]
1865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1227              		.loc 1 1865 0
 1228 004a 0023     		movs	r3, #0
 1229 004c 80F82430 		strb	r3, [r0, #36]
1868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1230              		.loc 1 1868 0
 1231 0050 1846     		mov	r0, r3
 1232              	.LVL89:
 1233 0052 01E0     		b	.L82
 1234              	.LVL90:
 1235              	.L85:
 1236              	.LCFI13:
 1237              		.cfi_def_cfa_offset 0
 1238              		.cfi_restore 4
ARM GAS  /tmp/ccNsrXlN.s 			page 70


 1239              		.cfi_restore 5
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1240              		.loc 1 1829 0
 1241 0054 0220     		movs	r0, #2
 1242              	.LVL91:
 1243 0056 7047     		bx	lr
 1244              	.L82:
 1245              	.LCFI14:
 1246              		.cfi_def_cfa_offset 8
 1247              		.cfi_offset 4, -8
 1248              		.cfi_offset 5, -4
1869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1249              		.loc 1 1869 0
 1250 0058 30BC     		pop	{r4, r5}
 1251              	.LCFI15:
 1252              		.cfi_restore 5
 1253              		.cfi_restore 4
 1254              		.cfi_def_cfa_offset 0
 1255 005a 7047     		bx	lr
 1256              	.L89:
 1257              		.align	2
 1258              	.L88:
 1259 005c E0FD3FFF 		.word	-12583456
 1260              		.cfi_endproc
 1261              	.LFE82:
 1263              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 1264              		.align	2
 1265              		.global	HAL_ADC_GetState
 1266              		.thumb
 1267              		.thumb_func
 1269              	HAL_ADC_GetState:
 1270              	.LFB83:
1900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
 1271              		.loc 1 1900 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 0
 1274              		@ frame_needed = 0, uses_anonymous_args = 0
 1275              		@ link register save eliminated.
 1276              	.LVL92:
1902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1277              		.loc 1 1902 0
 1278 0000 806A     		ldr	r0, [r0, #40]
 1279              	.LVL93:
1903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1280              		.loc 1 1903 0
 1281 0002 7047     		bx	lr
 1282              		.cfi_endproc
 1283              	.LFE83:
 1285              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 1286              		.align	2
 1287              		.global	HAL_ADC_GetError
 1288              		.thumb
 1289              		.thumb_func
 1291              	HAL_ADC_GetError:
 1292              	.LFB84:
1911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
 1293              		.loc 1 1911 0
ARM GAS  /tmp/ccNsrXlN.s 			page 71


 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298              	.LVL94:
1912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1299              		.loc 1 1912 0
 1300 0000 C06A     		ldr	r0, [r0, #44]
 1301              	.LVL95:
1913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1302              		.loc 1 1913 0
 1303 0002 7047     		bx	lr
 1304              		.cfi_endproc
 1305              	.LFE84:
 1307              		.section	.text.ADC_Enable,"ax",%progbits
 1308              		.align	2
 1309              		.global	ADC_Enable
 1310              		.thumb
 1311              		.thumb_func
 1313              	ADC_Enable:
 1314              	.LFB85:
1935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 1315              		.loc 1 1935 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 8
 1318              		@ frame_needed = 0, uses_anonymous_args = 0
 1319              	.LVL96:
 1320 0000 30B5     		push	{r4, r5, lr}
 1321              	.LCFI16:
 1322              		.cfi_def_cfa_offset 12
 1323              		.cfi_offset 4, -12
 1324              		.cfi_offset 5, -8
 1325              		.cfi_offset 14, -4
 1326 0002 83B0     		sub	sp, sp, #12
 1327              	.LCFI17:
 1328              		.cfi_def_cfa_offset 24
 1329              	.LVL97:
1937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1330              		.loc 1 1937 0
 1331 0004 0023     		movs	r3, #0
 1332 0006 0193     		str	r3, [sp, #4]
1943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1333              		.loc 1 1943 0
 1334 0008 0368     		ldr	r3, [r0]
 1335 000a 9A68     		ldr	r2, [r3, #8]
 1336 000c 12F0010F 		tst	r2, #1
 1337 0010 2FD1     		bne	.L98
1946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1338              		.loc 1 1946 0
 1339 0012 9A68     		ldr	r2, [r3, #8]
 1340 0014 42F00102 		orr	r2, r2, #1
 1341 0018 9A60     		str	r2, [r3, #8]
1950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0)
 1342              		.loc 1 1950 0
 1343 001a 174B     		ldr	r3, .L100
 1344 001c 1B68     		ldr	r3, [r3]
 1345 001e 174A     		ldr	r2, .L100+4
ARM GAS  /tmp/ccNsrXlN.s 			page 72


 1346 0020 A2FB0323 		umull	r2, r3, r2, r3
 1347 0024 9B0C     		lsrs	r3, r3, #18
 1348 0026 0193     		str	r3, [sp, #4]
1951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1349              		.loc 1 1951 0
 1350 0028 02E0     		b	.L94
 1351              	.L95:
1953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1352              		.loc 1 1953 0
 1353 002a 019B     		ldr	r3, [sp, #4]
 1354 002c 013B     		subs	r3, r3, #1
 1355 002e 0193     		str	r3, [sp, #4]
 1356              	.L94:
1951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1357              		.loc 1 1951 0
 1358 0030 019B     		ldr	r3, [sp, #4]
 1359 0032 002B     		cmp	r3, #0
 1360 0034 F9D1     		bne	.L95
 1361 0036 0446     		mov	r4, r0
1957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1362              		.loc 1 1957 0
 1363 0038 FFF7FEFF 		bl	HAL_GetTick
 1364              	.LVL98:
 1365 003c 0546     		mov	r5, r0
 1366              	.LVL99:
1960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1367              		.loc 1 1960 0
 1368 003e 11E0     		b	.L96
 1369              	.LVL100:
 1370              	.L97:
1962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1371              		.loc 1 1962 0
 1372 0040 FFF7FEFF 		bl	HAL_GetTick
 1373              	.LVL101:
 1374 0044 401B     		subs	r0, r0, r5
 1375 0046 0228     		cmp	r0, #2
 1376 0048 0CD9     		bls	.L96
1965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1377              		.loc 1 1965 0
 1378 004a A36A     		ldr	r3, [r4, #40]
 1379 004c 43F01003 		orr	r3, r3, #16
 1380 0050 A362     		str	r3, [r4, #40]
1968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 1381              		.loc 1 1968 0
 1382 0052 E36A     		ldr	r3, [r4, #44]
 1383 0054 43F00103 		orr	r3, r3, #1
 1384 0058 E362     		str	r3, [r4, #44]
1971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1385              		.loc 1 1971 0
 1386 005a 0023     		movs	r3, #0
 1387 005c 84F82430 		strb	r3, [r4, #36]
1973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1388              		.loc 1 1973 0
 1389 0060 0120     		movs	r0, #1
 1390 0062 07E0     		b	.L93
 1391              	.L96:
1960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  /tmp/ccNsrXlN.s 			page 73


 1392              		.loc 1 1960 0
 1393 0064 2368     		ldr	r3, [r4]
 1394 0066 9B68     		ldr	r3, [r3, #8]
 1395 0068 13F0010F 		tst	r3, #1
 1396 006c E8D0     		beq	.L97
1979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1397              		.loc 1 1979 0
 1398 006e 0020     		movs	r0, #0
 1399 0070 00E0     		b	.L93
 1400              	.LVL102:
 1401              	.L98:
 1402 0072 0020     		movs	r0, #0
 1403              	.LVL103:
 1404              	.L93:
1980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1405              		.loc 1 1980 0
 1406 0074 03B0     		add	sp, sp, #12
 1407              	.LCFI18:
 1408              		.cfi_def_cfa_offset 12
 1409              		@ sp needed
 1410 0076 30BD     		pop	{r4, r5, pc}
 1411              	.L101:
 1412              		.align	2
 1413              	.L100:
 1414 0078 00000000 		.word	SystemCoreClock
 1415 007c 83DE1B43 		.word	1125899907
 1416              		.cfi_endproc
 1417              	.LFE85:
 1419              		.section	.text.HAL_ADC_Start,"ax",%progbits
 1420              		.align	2
 1421              		.global	HAL_ADC_Start
 1422              		.thumb
 1423              		.thumb_func
 1425              	HAL_ADC_Start:
 1426              	.LFB67:
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1427              		.loc 1 769 0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              	.LVL104:
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 1432              		.loc 1 776 0
 1433 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1434 0004 012B     		cmp	r3, #1
 1435 0006 70D0     		beq	.L114
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1436              		.loc 1 769 0 discriminator 2
 1437 0008 10B5     		push	{r4, lr}
 1438              	.LCFI19:
 1439              		.cfi_def_cfa_offset 8
 1440              		.cfi_offset 4, -8
 1441              		.cfi_offset 14, -4
 1442 000a 0446     		mov	r4, r0
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 1443              		.loc 1 776 0 discriminator 2
 1444 000c 0123     		movs	r3, #1
ARM GAS  /tmp/ccNsrXlN.s 			page 74


 1445 000e 80F82430 		strb	r3, [r0, #36]
 779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1446              		.loc 1 779 0 discriminator 2
 1447 0012 FFF7FEFF 		bl	ADC_Enable
 1448              	.LVL105:
 782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1449              		.loc 1 782 0 discriminator 2
 1450 0016 0346     		mov	r3, r0
 1451 0018 0028     		cmp	r0, #0
 1452 001a 61D1     		bne	.L104
 787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
 1453              		.loc 1 787 0
 1454 001c A26A     		ldr	r2, [r4, #40]
 1455 001e 22F44072 		bic	r2, r2, #768
 1456 0022 22F00102 		bic	r2, r2, #1
 1457 0026 42F48072 		orr	r2, r2, #256
 1458 002a A262     		str	r2, [r4, #40]
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1459              		.loc 1 794 0
 1460 002c 2268     		ldr	r2, [r4]
 1461 002e 3049     		ldr	r1, .L117
 1462 0030 8A42     		cmp	r2, r1
 1463 0032 05D1     		bne	.L105
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1464              		.loc 1 794 0 is_stmt 0 discriminator 1
 1465 0034 A1F58061 		sub	r1, r1, #1024
 1466 0038 4968     		ldr	r1, [r1, #4]
 1467 003a 11F4702F 		tst	r1, #983040
 1468 003e 0ED1     		bne	.L106
 1469              	.L105:
 797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1470              		.loc 1 797 0 is_stmt 1
 1471 0040 A16A     		ldr	r1, [r4, #40]
 1472 0042 21F48011 		bic	r1, r1, #1048576
 1473 0046 A162     		str	r1, [r4, #40]
 801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1474              		.loc 1 801 0
 1475 0048 5168     		ldr	r1, [r2, #4]
 1476 004a 11F4806F 		tst	r1, #1024
 1477 004e 1CD0     		beq	.L107
 803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1478              		.loc 1 803 0
 1479 0050 A16A     		ldr	r1, [r4, #40]
 1480 0052 21F44051 		bic	r1, r1, #12288
 1481 0056 41F48051 		orr	r1, r1, #4096
 1482 005a A162     		str	r1, [r4, #40]
 1483 005c 15E0     		b	.L107
 1484              	.L106:
 809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1485              		.loc 1 809 0
 1486 005e A16A     		ldr	r1, [r4, #40]
 1487 0060 41F48011 		orr	r1, r1, #1048576
 1488 0064 A162     		str	r1, [r4, #40]
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1489              		.loc 1 813 0
 1490 0066 2349     		ldr	r1, .L117+4
 1491 0068 8A42     		cmp	r2, r1
ARM GAS  /tmp/ccNsrXlN.s 			page 75


 1492 006a 03D0     		beq	.L108
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1493              		.loc 1 813 0 is_stmt 0 discriminator 2
 1494 006c 01F58061 		add	r1, r1, #1024
 1495 0070 8A42     		cmp	r2, r1
 1496 0072 0AD1     		bne	.L107
 1497              	.L108:
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1498              		.loc 1 813 0 discriminator 3
 1499 0074 1F49     		ldr	r1, .L117+4
 1500 0076 4968     		ldr	r1, [r1, #4]
 1501 0078 11F4806F 		tst	r1, #1024
 1502 007c 05D0     		beq	.L107
 815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1503              		.loc 1 815 0 is_stmt 1
 1504 007e A16A     		ldr	r1, [r4, #40]
 1505 0080 21F44051 		bic	r1, r1, #12288
 1506 0084 41F48051 		orr	r1, r1, #4096
 1507 0088 A162     		str	r1, [r4, #40]
 1508              	.L107:
 820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1509              		.loc 1 820 0
 1510 008a A16A     		ldr	r1, [r4, #40]
 1511 008c 11F4805F 		tst	r1, #4096
 1512 0090 04D0     		beq	.L109
 823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1513              		.loc 1 823 0
 1514 0092 E16A     		ldr	r1, [r4, #44]
 1515 0094 21F00601 		bic	r1, r1, #6
 1516 0098 E162     		str	r1, [r4, #44]
 1517 009a 01E0     		b	.L110
 1518              	.L109:
 828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1519              		.loc 1 828 0
 1520 009c 0021     		movs	r1, #0
 1521 009e E162     		str	r1, [r4, #44]
 1522              	.L110:
 834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1523              		.loc 1 834 0
 1524 00a0 0021     		movs	r1, #0
 1525 00a2 84F82410 		strb	r1, [r4, #36]
 838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1526              		.loc 1 838 0
 1527 00a6 6FF00201 		mvn	r1, #2
 1528 00aa 1160     		str	r1, [r2]
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1529              		.loc 1 850 0
 1530 00ac 2268     		ldr	r2, [r4]
 1531 00ae 9168     		ldr	r1, [r2, #8]
 1532 00b0 01F46021 		and	r1, r1, #917504
 1533 00b4 B1F5602F 		cmp	r1, #917504
 1534 00b8 0DD1     		bne	.L111
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1535              		.loc 1 850 0 is_stmt 0 discriminator 1
 1536 00ba 0D49     		ldr	r1, .L117
 1537 00bc 8A42     		cmp	r2, r1
 1538 00be 05D1     		bne	.L112
ARM GAS  /tmp/ccNsrXlN.s 			page 76


 851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1539              		.loc 1 851 0 is_stmt 1 discriminator 2
 1540 00c0 A1F58061 		sub	r1, r1, #1024
 1541 00c4 4968     		ldr	r1, [r1, #4]
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1542              		.loc 1 850 0 discriminator 2
 1543 00c6 11F4702F 		tst	r1, #983040
 1544 00ca 04D1     		bne	.L111
 1545              	.L112:
 854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1546              		.loc 1 854 0
 1547 00cc 9168     		ldr	r1, [r2, #8]
 1548 00ce 41F4A001 		orr	r1, r1, #5242880
 1549 00d2 9160     		str	r1, [r2, #8]
 1550 00d4 07E0     		b	.L113
 1551              	.L111:
 859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1552              		.loc 1 859 0
 1553 00d6 9168     		ldr	r1, [r2, #8]
 1554 00d8 41F48011 		orr	r1, r1, #1048576
 1555 00dc 9160     		str	r1, [r2, #8]
 1556 00de 02E0     		b	.L113
 1557              	.L104:
 865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1558              		.loc 1 865 0
 1559 00e0 0022     		movs	r2, #0
 1560 00e2 84F82420 		strb	r2, [r4, #36]
 1561              	.L113:
 869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1562              		.loc 1 869 0
 1563 00e6 1846     		mov	r0, r3
 1564              	.LVL106:
 1565 00e8 10BD     		pop	{r4, pc}
 1566              	.LVL107:
 1567              	.L114:
 1568              	.LCFI20:
 1569              		.cfi_def_cfa_offset 0
 1570              		.cfi_restore 4
 1571              		.cfi_restore 14
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 1572              		.loc 1 776 0
 1573 00ea 0220     		movs	r0, #2
 1574              	.LVL108:
 1575 00ec 7047     		bx	lr
 1576              	.L118:
 1577 00ee 00BF     		.align	2
 1578              	.L117:
 1579 00f0 00280140 		.word	1073817600
 1580 00f4 00240140 		.word	1073816576
 1581              		.cfi_endproc
 1582              	.LFE67:
 1584              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1585              		.align	2
 1586              		.global	HAL_ADC_Start_IT
 1587              		.thumb
 1588              		.thumb_func
 1590              	HAL_ADC_Start_IT:
ARM GAS  /tmp/ccNsrXlN.s 			page 77


 1591              	.LFB71:
1106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1592              		.loc 1 1106 0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596              	.LVL109:
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1597              		.loc 1 1113 0
 1598 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1599 0004 012B     		cmp	r3, #1
 1600 0006 75D0     		beq	.L131
1106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1601              		.loc 1 1106 0 discriminator 2
 1602 0008 10B5     		push	{r4, lr}
 1603              	.LCFI21:
 1604              		.cfi_def_cfa_offset 8
 1605              		.cfi_offset 4, -8
 1606              		.cfi_offset 14, -4
 1607 000a 0446     		mov	r4, r0
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1608              		.loc 1 1113 0 discriminator 2
 1609 000c 0123     		movs	r3, #1
 1610 000e 80F82430 		strb	r3, [r0, #36]
1116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1611              		.loc 1 1116 0 discriminator 2
 1612 0012 FFF7FEFF 		bl	ADC_Enable
 1613              	.LVL110:
1119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1614              		.loc 1 1119 0 discriminator 2
 1615 0016 0346     		mov	r3, r0
 1616 0018 0028     		cmp	r0, #0
 1617 001a 66D1     		bne	.L121
1124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
 1618              		.loc 1 1124 0
 1619 001c A26A     		ldr	r2, [r4, #40]
 1620 001e 22F47062 		bic	r2, r2, #3840
 1621 0022 22F00102 		bic	r2, r2, #1
 1622 0026 42F48072 		orr	r2, r2, #256
 1623 002a A262     		str	r2, [r4, #40]
1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1624              		.loc 1 1131 0
 1625 002c 2268     		ldr	r2, [r4]
 1626 002e 3249     		ldr	r1, .L134
 1627 0030 8A42     		cmp	r2, r1
 1628 0032 05D1     		bne	.L122
1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1629              		.loc 1 1131 0 is_stmt 0 discriminator 1
 1630 0034 A1F58061 		sub	r1, r1, #1024
 1631 0038 4968     		ldr	r1, [r1, #4]
 1632 003a 11F4702F 		tst	r1, #983040
 1633 003e 0ED1     		bne	.L123
 1634              	.L122:
1134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1635              		.loc 1 1134 0 is_stmt 1
 1636 0040 A16A     		ldr	r1, [r4, #40]
 1637 0042 21F48011 		bic	r1, r1, #1048576
ARM GAS  /tmp/ccNsrXlN.s 			page 78


 1638 0046 A162     		str	r1, [r4, #40]
1138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1639              		.loc 1 1138 0
 1640 0048 5168     		ldr	r1, [r2, #4]
 1641 004a 11F4806F 		tst	r1, #1024
 1642 004e 1CD0     		beq	.L124
1140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1643              		.loc 1 1140 0
 1644 0050 A16A     		ldr	r1, [r4, #40]
 1645 0052 21F44051 		bic	r1, r1, #12288
 1646 0056 41F48051 		orr	r1, r1, #4096
 1647 005a A162     		str	r1, [r4, #40]
 1648 005c 15E0     		b	.L124
 1649              	.L123:
1146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1650              		.loc 1 1146 0
 1651 005e A16A     		ldr	r1, [r4, #40]
 1652 0060 41F48011 		orr	r1, r1, #1048576
 1653 0064 A162     		str	r1, [r4, #40]
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1654              		.loc 1 1150 0
 1655 0066 2549     		ldr	r1, .L134+4
 1656 0068 8A42     		cmp	r2, r1
 1657 006a 03D0     		beq	.L125
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1658              		.loc 1 1150 0 is_stmt 0 discriminator 2
 1659 006c 01F58061 		add	r1, r1, #1024
 1660 0070 8A42     		cmp	r2, r1
 1661 0072 0AD1     		bne	.L124
 1662              	.L125:
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1663              		.loc 1 1150 0 discriminator 3
 1664 0074 2149     		ldr	r1, .L134+4
 1665 0076 4968     		ldr	r1, [r1, #4]
 1666 0078 11F4806F 		tst	r1, #1024
 1667 007c 05D0     		beq	.L124
1152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1668              		.loc 1 1152 0 is_stmt 1
 1669 007e A16A     		ldr	r1, [r4, #40]
 1670 0080 21F44051 		bic	r1, r1, #12288
 1671 0084 41F48051 		orr	r1, r1, #4096
 1672 0088 A162     		str	r1, [r4, #40]
 1673              	.L124:
1157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1674              		.loc 1 1157 0
 1675 008a A16A     		ldr	r1, [r4, #40]
 1676 008c 11F4805F 		tst	r1, #4096
 1677 0090 04D0     		beq	.L126
1160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1678              		.loc 1 1160 0
 1679 0092 E16A     		ldr	r1, [r4, #44]
 1680 0094 21F00601 		bic	r1, r1, #6
 1681 0098 E162     		str	r1, [r4, #44]
 1682 009a 01E0     		b	.L127
 1683              	.L126:
1165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1684              		.loc 1 1165 0
ARM GAS  /tmp/ccNsrXlN.s 			page 79


 1685 009c 0021     		movs	r1, #0
 1686 009e E162     		str	r1, [r4, #44]
 1687              	.L127:
1171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1688              		.loc 1 1171 0
 1689 00a0 0021     		movs	r1, #0
 1690 00a2 84F82410 		strb	r1, [r4, #36]
1175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1691              		.loc 1 1175 0
 1692 00a6 6FF00201 		mvn	r1, #2
 1693 00aa 1160     		str	r1, [r2]
1178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1694              		.loc 1 1178 0
 1695 00ac 2168     		ldr	r1, [r4]
 1696 00ae 4A68     		ldr	r2, [r1, #4]
 1697 00b0 42F02002 		orr	r2, r2, #32
 1698 00b4 4A60     		str	r2, [r1, #4]
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1699              		.loc 1 1187 0
 1700 00b6 2268     		ldr	r2, [r4]
 1701 00b8 9168     		ldr	r1, [r2, #8]
 1702 00ba 01F46021 		and	r1, r1, #917504
 1703 00be B1F5602F 		cmp	r1, #917504
 1704 00c2 0DD1     		bne	.L128
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1705              		.loc 1 1187 0 is_stmt 0 discriminator 1
 1706 00c4 0C49     		ldr	r1, .L134
 1707 00c6 8A42     		cmp	r2, r1
 1708 00c8 05D1     		bne	.L129
1188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1709              		.loc 1 1188 0 is_stmt 1 discriminator 2
 1710 00ca A1F58061 		sub	r1, r1, #1024
 1711 00ce 4968     		ldr	r1, [r1, #4]
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1712              		.loc 1 1187 0 discriminator 2
 1713 00d0 11F4702F 		tst	r1, #983040
 1714 00d4 04D1     		bne	.L128
 1715              	.L129:
1191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1716              		.loc 1 1191 0
 1717 00d6 9168     		ldr	r1, [r2, #8]
 1718 00d8 41F4A001 		orr	r1, r1, #5242880
 1719 00dc 9160     		str	r1, [r2, #8]
 1720 00de 07E0     		b	.L130
 1721              	.L128:
1196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1722              		.loc 1 1196 0
 1723 00e0 9168     		ldr	r1, [r2, #8]
 1724 00e2 41F48011 		orr	r1, r1, #1048576
 1725 00e6 9160     		str	r1, [r2, #8]
 1726 00e8 02E0     		b	.L130
 1727              	.L121:
1202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1728              		.loc 1 1202 0
 1729 00ea 0022     		movs	r2, #0
 1730 00ec 84F82420 		strb	r2, [r4, #36]
 1731              	.L130:
ARM GAS  /tmp/ccNsrXlN.s 			page 80


1206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1732              		.loc 1 1206 0
 1733 00f0 1846     		mov	r0, r3
 1734              	.LVL111:
 1735 00f2 10BD     		pop	{r4, pc}
 1736              	.LVL112:
 1737              	.L131:
 1738              	.LCFI22:
 1739              		.cfi_def_cfa_offset 0
 1740              		.cfi_restore 4
 1741              		.cfi_restore 14
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1742              		.loc 1 1113 0
 1743 00f4 0220     		movs	r0, #2
 1744              	.LVL113:
 1745 00f6 7047     		bx	lr
 1746              	.L135:
 1747              		.align	2
 1748              	.L134:
 1749 00f8 00280140 		.word	1073817600
 1750 00fc 00240140 		.word	1073816576
 1751              		.cfi_endproc
 1752              	.LFE71:
 1754              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1755              		.align	2
 1756              		.global	HAL_ADC_Start_DMA
 1757              		.thumb
 1758              		.thumb_func
 1760              	HAL_ADC_Start_DMA:
 1761              	.LFB73:
1274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1762              		.loc 1 1274 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
 1766              	.LVL114:
 1767 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1768              	.LCFI23:
 1769              		.cfi_def_cfa_offset 24
 1770              		.cfi_offset 3, -24
 1771              		.cfi_offset 4, -20
 1772              		.cfi_offset 5, -16
 1773              		.cfi_offset 6, -12
 1774              		.cfi_offset 7, -8
 1775              		.cfi_offset 14, -4
 1776              	.LVL115:
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1777              		.loc 1 1283 0
 1778 0002 0468     		ldr	r4, [r0]
 1779 0004 4A4D     		ldr	r5, .L152
 1780 0006 AC42     		cmp	r4, r5
 1781 0008 03D0     		beq	.L137
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1782              		.loc 1 1283 0 is_stmt 0 discriminator 1
 1783 000a 05F58065 		add	r5, r5, #1024
 1784 000e AC42     		cmp	r4, r5
 1785 0010 05D1     		bne	.L138
ARM GAS  /tmp/ccNsrXlN.s 			page 81


 1786              	.L137:
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1787              		.loc 1 1283 0 discriminator 3
 1788 0012 474B     		ldr	r3, .L152
 1789 0014 5B68     		ldr	r3, [r3, #4]
 1790 0016 13F4702F 		tst	r3, #983040
 1791 001a 40F08380 		bne	.L149
 1792              	.L138:
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1793              		.loc 1 1286 0 is_stmt 1
 1794 001e 90F82440 		ldrb	r4, [r0, #36]	@ zero_extendqisi2
 1795 0022 012C     		cmp	r4, #1
 1796 0024 00F08180 		beq	.L150
 1797 0028 1746     		mov	r7, r2
 1798 002a 0E46     		mov	r6, r1
 1799 002c 0446     		mov	r4, r0
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1800              		.loc 1 1286 0 is_stmt 0 discriminator 2
 1801 002e 0123     		movs	r3, #1
 1802 0030 80F82430 		strb	r3, [r0, #36]
1289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1803              		.loc 1 1289 0 is_stmt 1 discriminator 2
 1804 0034 FFF7FEFF 		bl	ADC_Enable
 1805              	.LVL116:
1292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1806              		.loc 1 1292 0 discriminator 2
 1807 0038 0546     		mov	r5, r0
 1808 003a 0028     		cmp	r0, #0
 1809 003c 6ED1     		bne	.L141
1297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1810              		.loc 1 1297 0
 1811 003e A36A     		ldr	r3, [r4, #40]
 1812 0040 23F47063 		bic	r3, r3, #3840
 1813 0044 23F00103 		bic	r3, r3, #1
 1814 0048 43F48073 		orr	r3, r3, #256
 1815 004c A362     		str	r3, [r4, #40]
1304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1816              		.loc 1 1304 0
 1817 004e 2268     		ldr	r2, [r4]
 1818 0050 384B     		ldr	r3, .L152+4
 1819 0052 9A42     		cmp	r2, r3
 1820 0054 05D1     		bne	.L142
1304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1821              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1822 0056 A3F58063 		sub	r3, r3, #1024
 1823 005a 5B68     		ldr	r3, [r3, #4]
 1824 005c 13F4702F 		tst	r3, #983040
 1825 0060 0ED1     		bne	.L143
 1826              	.L142:
1307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1827              		.loc 1 1307 0 is_stmt 1
 1828 0062 A36A     		ldr	r3, [r4, #40]
 1829 0064 23F48013 		bic	r3, r3, #1048576
 1830 0068 A362     		str	r3, [r4, #40]
1311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1831              		.loc 1 1311 0
 1832 006a 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/ccNsrXlN.s 			page 82


 1833 006c 13F4806F 		tst	r3, #1024
 1834 0070 1CD0     		beq	.L144
1313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1835              		.loc 1 1313 0
 1836 0072 A36A     		ldr	r3, [r4, #40]
 1837 0074 23F44053 		bic	r3, r3, #12288
 1838 0078 43F48053 		orr	r3, r3, #4096
 1839 007c A362     		str	r3, [r4, #40]
 1840 007e 15E0     		b	.L144
 1841              	.L143:
1319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1842              		.loc 1 1319 0
 1843 0080 A36A     		ldr	r3, [r4, #40]
 1844 0082 43F48013 		orr	r3, r3, #1048576
 1845 0086 A362     		str	r3, [r4, #40]
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1846              		.loc 1 1323 0
 1847 0088 294B     		ldr	r3, .L152
 1848 008a 9A42     		cmp	r2, r3
 1849 008c 03D0     		beq	.L145
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1850              		.loc 1 1323 0 is_stmt 0 discriminator 2
 1851 008e 03F58063 		add	r3, r3, #1024
 1852 0092 9A42     		cmp	r2, r3
 1853 0094 0AD1     		bne	.L144
 1854              	.L145:
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1855              		.loc 1 1323 0 discriminator 3
 1856 0096 264B     		ldr	r3, .L152
 1857 0098 5B68     		ldr	r3, [r3, #4]
 1858 009a 13F4806F 		tst	r3, #1024
 1859 009e 05D0     		beq	.L144
1325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1860              		.loc 1 1325 0 is_stmt 1
 1861 00a0 A36A     		ldr	r3, [r4, #40]
 1862 00a2 23F44053 		bic	r3, r3, #12288
 1863 00a6 43F48053 		orr	r3, r3, #4096
 1864 00aa A362     		str	r3, [r4, #40]
 1865              	.L144:
1330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1866              		.loc 1 1330 0
 1867 00ac A36A     		ldr	r3, [r4, #40]
 1868 00ae 13F4805F 		tst	r3, #4096
 1869 00b2 04D0     		beq	.L146
1333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1870              		.loc 1 1333 0
 1871 00b4 E36A     		ldr	r3, [r4, #44]
 1872 00b6 23F00603 		bic	r3, r3, #6
 1873 00ba E362     		str	r3, [r4, #44]
 1874 00bc 01E0     		b	.L147
 1875              	.L146:
1338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1876              		.loc 1 1338 0
 1877 00be 0023     		movs	r3, #0
 1878 00c0 E362     		str	r3, [r4, #44]
 1879              	.L147:
1344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
ARM GAS  /tmp/ccNsrXlN.s 			page 83


 1880              		.loc 1 1344 0
 1881 00c2 0023     		movs	r3, #0
 1882 00c4 84F82430 		strb	r3, [r4, #36]
1347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1883              		.loc 1 1347 0
 1884 00c8 236A     		ldr	r3, [r4, #32]
 1885 00ca 1B4A     		ldr	r2, .L152+8
 1886 00cc 9A62     		str	r2, [r3, #40]
1350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1887              		.loc 1 1350 0
 1888 00ce 236A     		ldr	r3, [r4, #32]
 1889 00d0 1A4A     		ldr	r2, .L152+12
 1890 00d2 DA62     		str	r2, [r3, #44]
1353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1891              		.loc 1 1353 0
 1892 00d4 236A     		ldr	r3, [r4, #32]
 1893 00d6 1A4A     		ldr	r2, .L152+16
 1894 00d8 1A63     		str	r2, [r3, #48]
1362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1895              		.loc 1 1362 0
 1896 00da 2368     		ldr	r3, [r4]
 1897 00dc 6FF00202 		mvn	r2, #2
 1898 00e0 1A60     		str	r2, [r3]
1365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1899              		.loc 1 1365 0
 1900 00e2 2268     		ldr	r2, [r4]
 1901 00e4 9368     		ldr	r3, [r2, #8]
 1902 00e6 43F48073 		orr	r3, r3, #256
 1903 00ea 9360     		str	r3, [r2, #8]
1368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1904              		.loc 1 1368 0
 1905 00ec 2168     		ldr	r1, [r4]
 1906 00ee 206A     		ldr	r0, [r4, #32]
 1907              	.LVL117:
 1908 00f0 4C31     		adds	r1, r1, #76
 1909 00f2 3246     		mov	r2, r6
 1910 00f4 3B46     		mov	r3, r7
 1911 00f6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1912              	.LVL118:
1374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1913              		.loc 1 1374 0
 1914 00fa 2368     		ldr	r3, [r4]
 1915 00fc 9A68     		ldr	r2, [r3, #8]
 1916 00fe 02F46022 		and	r2, r2, #917504
 1917 0102 B2F5602F 		cmp	r2, #917504
 1918 0106 04D1     		bne	.L148
1377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1919              		.loc 1 1377 0
 1920 0108 9A68     		ldr	r2, [r3, #8]
 1921 010a 42F4A002 		orr	r2, r2, #5242880
 1922 010e 9A60     		str	r2, [r3, #8]
 1923 0110 09E0     		b	.L139
 1924              	.L148:
1382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1925              		.loc 1 1382 0
 1926 0112 9A68     		ldr	r2, [r3, #8]
 1927 0114 42F48012 		orr	r2, r2, #1048576
ARM GAS  /tmp/ccNsrXlN.s 			page 84


 1928 0118 9A60     		str	r2, [r3, #8]
 1929 011a 04E0     		b	.L139
 1930              	.LVL119:
 1931              	.L141:
1388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1932              		.loc 1 1388 0
 1933 011c 0023     		movs	r3, #0
 1934 011e 84F82430 		strb	r3, [r4, #36]
 1935 0122 00E0     		b	.L139
 1936              	.LVL120:
 1937              	.L149:
1393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1938              		.loc 1 1393 0
 1939 0124 0125     		movs	r5, #1
 1940              	.LVL121:
 1941              	.L139:
1397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1942              		.loc 1 1397 0
 1943 0126 2846     		mov	r0, r5
 1944 0128 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1945              	.LVL122:
 1946              	.L150:
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1947              		.loc 1 1286 0
 1948 012a 0220     		movs	r0, #2
 1949              	.LVL123:
1398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1950              		.loc 1 1398 0
 1951 012c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1952              	.L153:
 1953 012e 00BF     		.align	2
 1954              	.L152:
 1955 0130 00240140 		.word	1073816576
 1956 0134 00280140 		.word	1073817600
 1957 0138 00000000 		.word	ADC_DMAConvCplt
 1958 013c 00000000 		.word	ADC_DMAHalfConvCplt
 1959 0140 00000000 		.word	ADC_DMAError
 1960              		.cfi_endproc
 1961              	.LFE73:
 1963              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 1964              		.align	2
 1965              		.global	ADC_ConversionStop_Disable
 1966              		.thumb
 1967              		.thumb_func
 1969              	ADC_ConversionStop_Disable:
 1970              	.LFB86:
1990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 1971              		.loc 1 1990 0
 1972              		.cfi_startproc
 1973              		@ args = 0, pretend = 0, frame = 0
 1974              		@ frame_needed = 0, uses_anonymous_args = 0
 1975              	.LVL124:
 1976 0000 38B5     		push	{r3, r4, r5, lr}
 1977              	.LCFI24:
 1978              		.cfi_def_cfa_offset 16
 1979              		.cfi_offset 3, -16
 1980              		.cfi_offset 4, -12
ARM GAS  /tmp/ccNsrXlN.s 			page 85


 1981              		.cfi_offset 5, -8
 1982              		.cfi_offset 14, -4
 1983              	.LVL125:
1994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1984              		.loc 1 1994 0
 1985 0002 0368     		ldr	r3, [r0]
 1986 0004 9A68     		ldr	r2, [r3, #8]
 1987 0006 12F0010F 		tst	r2, #1
 1988 000a 1ED0     		beq	.L158
 1989 000c 0446     		mov	r4, r0
1997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
 1990              		.loc 1 1997 0
 1991 000e 9A68     		ldr	r2, [r3, #8]
 1992 0010 22F00102 		bic	r2, r2, #1
 1993 0014 9A60     		str	r2, [r3, #8]
2000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1994              		.loc 1 2000 0
 1995 0016 FFF7FEFF 		bl	HAL_GetTick
 1996              	.LVL126:
 1997 001a 0546     		mov	r5, r0
 1998              	.LVL127:
2003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1999              		.loc 1 2003 0
 2000 001c 0EE0     		b	.L156
 2001              	.LVL128:
 2002              	.L157:
2005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 2003              		.loc 1 2005 0
 2004 001e FFF7FEFF 		bl	HAL_GetTick
 2005              	.LVL129:
 2006 0022 401B     		subs	r0, r0, r5
 2007 0024 0228     		cmp	r0, #2
 2008 0026 09D9     		bls	.L156
2008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 2009              		.loc 1 2008 0
 2010 0028 A36A     		ldr	r3, [r4, #40]
 2011 002a 43F01003 		orr	r3, r3, #16
 2012 002e A362     		str	r3, [r4, #40]
2011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 2013              		.loc 1 2011 0
 2014 0030 E36A     		ldr	r3, [r4, #44]
 2015 0032 43F00103 		orr	r3, r3, #1
 2016 0036 E362     		str	r3, [r4, #44]
2013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 2017              		.loc 1 2013 0
 2018 0038 0120     		movs	r0, #1
 2019 003a 38BD     		pop	{r3, r4, r5, pc}
 2020              	.LVL130:
 2021              	.L156:
2003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2022              		.loc 1 2003 0
 2023 003c 2368     		ldr	r3, [r4]
 2024 003e 9B68     		ldr	r3, [r3, #8]
 2025 0040 13F0010F 		tst	r3, #1
 2026 0044 EBD1     		bne	.L157
2019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2027              		.loc 1 2019 0
ARM GAS  /tmp/ccNsrXlN.s 			page 86


 2028 0046 0020     		movs	r0, #0
 2029 0048 38BD     		pop	{r3, r4, r5, pc}
 2030              	.LVL131:
 2031              	.L158:
 2032 004a 0020     		movs	r0, #0
 2033              	.LVL132:
2020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 2034              		.loc 1 2020 0
 2035 004c 38BD     		pop	{r3, r4, r5, pc}
 2036              		.cfi_endproc
 2037              	.LFE86:
 2039 004e 00BF     		.section	.text.HAL_ADC_Init,"ax",%progbits
 2040              		.align	2
 2041              		.global	HAL_ADC_Init
 2042              		.thumb
 2043              		.thumb_func
 2045              	HAL_ADC_Init:
 2046              	.LFB63:
 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2047              		.loc 1 375 0
 2048              		.cfi_startproc
 2049              		@ args = 0, pretend = 0, frame = 0
 2050              		@ frame_needed = 0, uses_anonymous_args = 0
 2051              	.LVL133:
 382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2052              		.loc 1 382 0
 2053 0000 0028     		cmp	r0, #0
 2054 0002 00F09D80 		beq	.L174
 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2055              		.loc 1 375 0
 2056 0006 70B5     		push	{r4, r5, r6, lr}
 2057              	.LCFI25:
 2058              		.cfi_def_cfa_offset 16
 2059              		.cfi_offset 4, -16
 2060              		.cfi_offset 5, -12
 2061              		.cfi_offset 6, -8
 2062              		.cfi_offset 14, -4
 2063 0008 0446     		mov	r4, r0
 411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2064              		.loc 1 411 0
 2065 000a 836A     		ldr	r3, [r0, #40]
 2066 000c 23B9     		cbnz	r3, .L162
 414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2067              		.loc 1 414 0
 2068 000e C362     		str	r3, [r0, #44]
 417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2069              		.loc 1 417 0
 2070 0010 80F82430 		strb	r3, [r0, #36]
 420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 2071              		.loc 1 420 0
 2072 0014 FFF7FEFF 		bl	HAL_ADC_MspInit
 2073              	.LVL134:
 2074              	.L162:
 428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2075              		.loc 1 428 0
 2076 0018 2046     		mov	r0, r4
 2077 001a FFF7FEFF 		bl	ADC_ConversionStop_Disable
ARM GAS  /tmp/ccNsrXlN.s 			page 87


 2078              	.LVL135:
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 2079              		.loc 1 433 0
 2080 001e A36A     		ldr	r3, [r4, #40]
 2081 0020 13F0100F 		tst	r3, #16
 2082 0024 40F08680 		bne	.L163
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 2083              		.loc 1 433 0 is_stmt 0 discriminator 1
 2084 0028 0028     		cmp	r0, #0
 2085 002a 40F08380 		bne	.L163
 437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2086              		.loc 1 437 0 is_stmt 1
 2087 002e A36A     		ldr	r3, [r4, #40]
 2088 0030 23F48853 		bic	r3, r3, #4352
 2089 0034 23F00203 		bic	r3, r3, #2
 2090 0038 43F00203 		orr	r3, r3, #2
 2091 003c A362     		str	r3, [r4, #40]
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 2092              		.loc 1 453 0
 2093 003e 6168     		ldr	r1, [r4, #4]
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2094              		.loc 1 454 0
 2095 0040 2268     		ldr	r2, [r4]
 2096 0042 404B     		ldr	r3, .L180
 2097 0044 9A42     		cmp	r2, r3
 2098 0046 06D1     		bne	.L164
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2099              		.loc 1 454 0 is_stmt 0 discriminator 1
 2100 0048 E369     		ldr	r3, [r4, #28]
 2101 004a B3F5402F 		cmp	r3, #786432
 2102 004e 03D1     		bne	.L166
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2103              		.loc 1 454 0
 2104 0050 4FF40023 		mov	r3, #524288
 2105 0054 00E0     		b	.L166
 2106              	.L164:
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2107              		.loc 1 454 0 discriminator 2
 2108 0056 E369     		ldr	r3, [r4, #28]
 2109              	.L166:
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 2110              		.loc 1 453 0 is_stmt 1
 2111 0058 1943     		orrs	r1, r1, r3
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2112              		.loc 1 455 0
 2113 005a E568     		ldr	r5, [r4, #12]
 2114              	.LVL136:
 2115              	.LBB48:
 2116              	.LBB49:
 2117              		.loc 2 531 0
 2118 005c 0223     		movs	r3, #2
 2119              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2120 005e 93FAA3F3 		rbit r3, r3
 2121              	@ 0 "" 2
 2122              	.LVL137:
 2123              		.thumb
 2124              	.LBE49:
ARM GAS  /tmp/ccNsrXlN.s 			page 88


 2125              	.LBE48:
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2126              		.loc 1 455 0
 2127 0062 B3FA83F3 		clz	r3, r3
 2128              	.LVL138:
 2129 0066 05FA03F3 		lsl	r3, r5, r3
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2130              		.loc 1 454 0
 2131 006a 1943     		orrs	r1, r1, r3
 2132              	.LVL139:
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2133              		.loc 1 461 0
 2134 006c A368     		ldr	r3, [r4, #8]
 2135 006e B3F5807F 		cmp	r3, #256
 2136 0072 04D0     		beq	.L175
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2137              		.loc 1 461 0 is_stmt 0 discriminator 2
 2138 0074 012B     		cmp	r3, #1
 2139 0076 05D1     		bne	.L176
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2140              		.loc 1 461 0
 2141 0078 4FF48073 		mov	r3, #256
 2142 007c 03E0     		b	.L167
 2143              	.L175:
 2144 007e 4FF48073 		mov	r3, #256
 2145 0082 00E0     		b	.L167
 2146              	.L176:
 2147 0084 0023     		movs	r3, #0
 2148              	.L167:
 2149              	.LVL140:
 466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2150              		.loc 1 466 0 is_stmt 1 discriminator 6
 2151 0086 6669     		ldr	r6, [r4, #20]
 2152 0088 012E     		cmp	r6, #1
 2153 008a 15D1     		bne	.L168
 468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 2154              		.loc 1 468 0
 2155 008c 65B9     		cbnz	r5, .L169
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 2156              		.loc 1 472 0
 2157 008e A569     		ldr	r5, [r4, #24]
 2158 0090 013D     		subs	r5, r5, #1
 2159              	.LVL141:
 2160              	.LBB50:
 2161              	.LBB51:
 2162              		.loc 2 531 0
 2163 0092 4FF46046 		mov	r6, #57344
 2164              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2165 0096 96FAA6F6 		rbit r6, r6
 2166              	@ 0 "" 2
 2167              	.LVL142:
 2168              		.thumb
 2169              	.LBE51:
 2170              	.LBE50:
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 2171              		.loc 1 472 0
 2172 009a B6FA86F6 		clz	r6, r6
ARM GAS  /tmp/ccNsrXlN.s 			page 89


 2173              	.LVL143:
 2174 009e B540     		lsls	r5, r5, r6
 2175 00a0 45F40065 		orr	r5, r5, #2048
 2176 00a4 2B43     		orrs	r3, r3, r5
 2177              	.LVL144:
 2178 00a6 07E0     		b	.L168
 2179              	.LVL145:
 2180              	.L169:
 481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 2181              		.loc 1 481 0
 2182 00a8 A56A     		ldr	r5, [r4, #40]
 2183 00aa 45F02005 		orr	r5, r5, #32
 2184 00ae A562     		str	r5, [r4, #40]
 484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 2185              		.loc 1 484 0
 2186 00b0 E56A     		ldr	r5, [r4, #44]
 2187 00b2 45F00105 		orr	r5, r5, #1
 2188 00b6 E562     		str	r5, [r4, #44]
 2189              	.L168:
 489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 2190              		.loc 1 489 0
 2191 00b8 5568     		ldr	r5, [r2, #4]
 2192 00ba 25F46945 		bic	r5, r5, #59648
 2193 00be 2B43     		orrs	r3, r3, r5
 2194              	.LVL146:
 2195 00c0 5360     		str	r3, [r2, #4]
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 2196              		.loc 1 496 0
 2197 00c2 2268     		ldr	r2, [r4]
 2198 00c4 9568     		ldr	r5, [r2, #8]
 2199 00c6 204B     		ldr	r3, .L180+4
 2200 00c8 2B40     		ands	r3, r3, r5
 2201 00ca 0B43     		orrs	r3, r3, r1
 2202 00cc 9360     		str	r3, [r2, #8]
 512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2203              		.loc 1 512 0
 2204 00ce A368     		ldr	r3, [r4, #8]
 2205 00d0 B3F5807F 		cmp	r3, #256
 2206 00d4 01D0     		beq	.L170
 512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2207              		.loc 1 512 0 is_stmt 0 discriminator 1
 2208 00d6 012B     		cmp	r3, #1
 2209 00d8 0AD1     		bne	.L177
 2210              	.L170:
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 2211              		.loc 1 514 0 is_stmt 1
 2212 00da 2369     		ldr	r3, [r4, #16]
 2213 00dc 013B     		subs	r3, r3, #1
 2214              	.LVL147:
 2215              	.LBB52:
 2216              	.LBB53:
 2217              		.loc 2 531 0
 2218 00de 4FF47002 		mov	r2, #15728640
 2219              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2220 00e2 92FAA2F2 		rbit r2, r2
 2221              	@ 0 "" 2
 2222              	.LVL148:
ARM GAS  /tmp/ccNsrXlN.s 			page 90


 2223              		.thumb
 2224              	.LBE53:
 2225              	.LBE52:
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 2226              		.loc 1 514 0
 2227 00e6 B2FA82F2 		clz	r2, r2
 2228              	.LVL149:
 2229 00ea 03FA02F2 		lsl	r2, r3, r2
 2230              	.LVL150:
 2231 00ee 00E0     		b	.L171
 2232              	.LVL151:
 2233              	.L177:
 379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2234              		.loc 1 379 0
 2235 00f0 0022     		movs	r2, #0
 2236              	.LVL152:
 2237              	.L171:
 517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 2238              		.loc 1 517 0
 2239 00f2 2568     		ldr	r5, [r4]
 2240 00f4 EB6A     		ldr	r3, [r5, #44]
 2241 00f6 23F47003 		bic	r3, r3, #15728640
 2242 00fa 1343     		orrs	r3, r3, r2
 2243 00fc EB62     		str	r3, [r5, #44]
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 2244              		.loc 1 527 0
 2245 00fe 2368     		ldr	r3, [r4]
 2246 0100 9A68     		ldr	r2, [r3, #8]
 2247              	.LVL153:
 2248 0102 124B     		ldr	r3, .L180+8
 2249 0104 1340     		ands	r3, r3, r2
 2250 0106 9942     		cmp	r1, r3
 2251 0108 08D1     		bne	.L172
 534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 2252              		.loc 1 534 0
 2253 010a 0023     		movs	r3, #0
 2254 010c E362     		str	r3, [r4, #44]
 537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 2255              		.loc 1 537 0
 2256 010e A36A     		ldr	r3, [r4, #40]
 2257 0110 23F00303 		bic	r3, r3, #3
 2258 0114 43F00103 		orr	r3, r3, #1
 2259 0118 A362     		str	r3, [r4, #40]
 2260 011a 70BD     		pop	{r4, r5, r6, pc}
 2261              	.LVL154:
 2262              	.L172:
 544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 2263              		.loc 1 544 0
 2264 011c A36A     		ldr	r3, [r4, #40]
 2265 011e 23F01203 		bic	r3, r3, #18
 2266 0122 43F01003 		orr	r3, r3, #16
 2267 0126 A362     		str	r3, [r4, #40]
 549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 2268              		.loc 1 549 0
 2269 0128 E36A     		ldr	r3, [r4, #44]
 2270 012a 43F00103 		orr	r3, r3, #1
 2271 012e E362     		str	r3, [r4, #44]
ARM GAS  /tmp/ccNsrXlN.s 			page 91


 2272              	.LVL155:
 551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 2273              		.loc 1 551 0
 2274 0130 0120     		movs	r0, #1
 2275 0132 70BD     		pop	{r4, r5, r6, pc}
 2276              	.LVL156:
 2277              	.L163:
 558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 2278              		.loc 1 558 0
 2279 0134 A36A     		ldr	r3, [r4, #40]
 2280 0136 43F01003 		orr	r3, r3, #16
 2281 013a A362     		str	r3, [r4, #40]
 2282              	.LVL157:
 560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 2283              		.loc 1 560 0
 2284 013c 0120     		movs	r0, #1
 2285              	.LVL158:
 564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2286              		.loc 1 564 0
 2287 013e 70BD     		pop	{r4, r5, r6, pc}
 2288              	.LVL159:
 2289              	.L174:
 2290              	.LCFI26:
 2291              		.cfi_def_cfa_offset 0
 2292              		.cfi_restore 4
 2293              		.cfi_restore 5
 2294              		.cfi_restore 6
 2295              		.cfi_restore 14
 384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 2296              		.loc 1 384 0
 2297 0140 0120     		movs	r0, #1
 2298              	.LVL160:
 2299 0142 7047     		bx	lr
 2300              	.L181:
 2301              		.align	2
 2302              	.L180:
 2303 0144 003C0140 		.word	1073822720
 2304 0148 FDF7E1FF 		.word	-1968131
 2305 014c FE0E1FFF 		.word	-14741762
 2306              		.cfi_endproc
 2307              	.LFE63:
 2309              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 2310              		.align	2
 2311              		.global	HAL_ADC_DeInit
 2312              		.thumb
 2313              		.thumb_func
 2315              	HAL_ADC_DeInit:
 2316              	.LFB64:
 576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2317              		.loc 1 576 0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 2321              	.LVL161:
 580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2322              		.loc 1 580 0
 2323 0000 0028     		cmp	r0, #0
ARM GAS  /tmp/ccNsrXlN.s 			page 92


 2324 0002 75D0     		beq	.L185
 576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2325              		.loc 1 576 0
 2326 0004 38B5     		push	{r3, r4, r5, lr}
 2327              	.LCFI27:
 2328              		.cfi_def_cfa_offset 16
 2329              		.cfi_offset 3, -16
 2330              		.cfi_offset 4, -12
 2331              		.cfi_offset 5, -8
 2332              		.cfi_offset 14, -4
 2333 0006 0446     		mov	r4, r0
 589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2334              		.loc 1 589 0
 2335 0008 836A     		ldr	r3, [r0, #40]
 2336 000a 43F00203 		orr	r3, r3, #2
 2337 000e 8362     		str	r3, [r0, #40]
 593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2338              		.loc 1 593 0
 2339 0010 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2340              	.LVL162:
 598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2341              		.loc 1 598 0
 2342 0014 0546     		mov	r5, r0
 2343 0016 0028     		cmp	r0, #0
 2344 0018 65D1     		bne	.L184
 606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 2345              		.loc 1 606 0
 2346 001a 2368     		ldr	r3, [r4]
 2347 001c 6FF01F02 		mvn	r2, #31
 2348 0020 1A60     		str	r2, [r3]
 610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 2349              		.loc 1 610 0
 2350 0022 2268     		ldr	r2, [r4]
 2351 0024 5168     		ldr	r1, [r2, #4]
 2352 0026 334B     		ldr	r3, .L188
 2353 0028 0B40     		ands	r3, r3, r1
 2354 002a 5360     		str	r3, [r2, #4]
 616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 2355              		.loc 1 616 0
 2356 002c 2268     		ldr	r2, [r4]
 2357 002e 9168     		ldr	r1, [r2, #8]
 2358 0030 314B     		ldr	r3, .L188+4
 2359 0032 0B40     		ands	r3, r3, r1
 2360 0034 9360     		str	r3, [r2, #8]
 623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 2361              		.loc 1 623 0
 2362 0036 2268     		ldr	r2, [r4]
 2363 0038 D368     		ldr	r3, [r2, #12]
 2364 003a 03F07F43 		and	r3, r3, #-16777216
 2365 003e D360     		str	r3, [r2, #12]
 628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 2366              		.loc 1 628 0
 2367 0040 2268     		ldr	r2, [r4]
 2368 0042 1369     		ldr	r3, [r2, #16]
 2369 0044 03F04043 		and	r3, r3, #-1073741824
 2370 0048 1361     		str	r3, [r2, #16]
 634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
ARM GAS  /tmp/ccNsrXlN.s 			page 93


 2371              		.loc 1 634 0
 2372 004a 2268     		ldr	r2, [r4]
 2373 004c 5369     		ldr	r3, [r2, #20]
 2374 004e 23F47F63 		bic	r3, r3, #4080
 2375 0052 23F00F03 		bic	r3, r3, #15
 2376 0056 5361     		str	r3, [r2, #20]
 636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 2377              		.loc 1 636 0
 2378 0058 2268     		ldr	r2, [r4]
 2379 005a 9369     		ldr	r3, [r2, #24]
 2380 005c 23F47F63 		bic	r3, r3, #4080
 2381 0060 23F00F03 		bic	r3, r3, #15
 2382 0064 9361     		str	r3, [r2, #24]
 638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 2383              		.loc 1 638 0
 2384 0066 2268     		ldr	r2, [r4]
 2385 0068 D369     		ldr	r3, [r2, #28]
 2386 006a 23F47F63 		bic	r3, r3, #4080
 2387 006e 23F00F03 		bic	r3, r3, #15
 2388 0072 D361     		str	r3, [r2, #28]
 640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2389              		.loc 1 640 0
 2390 0074 2268     		ldr	r2, [r4]
 2391 0076 136A     		ldr	r3, [r2, #32]
 2392 0078 23F47F63 		bic	r3, r3, #4080
 2393 007c 23F00F03 		bic	r3, r3, #15
 2394 0080 1362     		str	r3, [r2, #32]
 643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 2395              		.loc 1 643 0
 2396 0082 2268     		ldr	r2, [r4]
 2397 0084 536A     		ldr	r3, [r2, #36]
 2398 0086 23F47F63 		bic	r3, r3, #4080
 2399 008a 23F00F03 		bic	r3, r3, #15
 2400 008e 5362     		str	r3, [r2, #36]
 645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2401              		.loc 1 645 0
 2402 0090 2268     		ldr	r2, [r4]
 2403 0092 936A     		ldr	r3, [r2, #40]
 2404 0094 23F47F63 		bic	r3, r3, #4080
 2405 0098 23F00F03 		bic	r3, r3, #15
 2406 009c 9362     		str	r3, [r2, #40]
 648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 2407              		.loc 1 648 0
 2408 009e 2268     		ldr	r2, [r4]
 2409 00a0 D36A     		ldr	r3, [r2, #44]
 2410 00a2 03F07F43 		and	r3, r3, #-16777216
 2411 00a6 D362     		str	r3, [r2, #44]
 653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 2412              		.loc 1 653 0
 2413 00a8 2268     		ldr	r2, [r4]
 2414 00aa D36A     		ldr	r3, [r2, #44]
 2415 00ac 03F07F43 		and	r3, r3, #-16777216
 2416 00b0 D362     		str	r3, [r2, #44]
 658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 2417              		.loc 1 658 0
 2418 00b2 2268     		ldr	r2, [r4]
 2419 00b4 136B     		ldr	r3, [r2, #48]
ARM GAS  /tmp/ccNsrXlN.s 			page 94


 2420 00b6 03F04043 		and	r3, r3, #-1073741824
 2421 00ba 1363     		str	r3, [r2, #48]
 662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 2422              		.loc 1 662 0
 2423 00bc 2268     		ldr	r2, [r4]
 2424 00be 536B     		ldr	r3, [r2, #52]
 2425 00c0 03F04043 		and	r3, r3, #-1073741824
 2426 00c4 5363     		str	r3, [r2, #52]
 666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 2427              		.loc 1 666 0
 2428 00c6 2268     		ldr	r2, [r4]
 2429 00c8 936B     		ldr	r3, [r2, #56]
 2430 00ca 9B0D     		lsrs	r3, r3, #22
 2431 00cc 9B05     		lsls	r3, r3, #22
 2432 00ce 9363     		str	r3, [r2, #56]
 671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 2433              		.loc 1 671 0
 2434 00d0 2268     		ldr	r2, [r4]
 2435 00d2 936B     		ldr	r3, [r2, #56]
 2436 00d4 9B0D     		lsrs	r3, r3, #22
 2437 00d6 9B05     		lsls	r3, r3, #22
 2438 00d8 9363     		str	r3, [r2, #56]
 691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2439              		.loc 1 691 0
 2440 00da 2046     		mov	r0, r4
 2441              	.LVL163:
 2442 00dc FFF7FEFF 		bl	HAL_ADC_MspDeInit
 2443              	.LVL164:
 694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2444              		.loc 1 694 0
 2445 00e0 0023     		movs	r3, #0
 2446 00e2 E362     		str	r3, [r4, #44]
 697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2447              		.loc 1 697 0
 2448 00e4 A362     		str	r3, [r4, #40]
 2449              	.L184:
 702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2450              		.loc 1 702 0
 2451 00e6 0023     		movs	r3, #0
 2452 00e8 84F82430 		strb	r3, [r4, #36]
 705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2453              		.loc 1 705 0
 2454 00ec 2846     		mov	r0, r5
 2455 00ee 38BD     		pop	{r3, r4, r5, pc}
 2456              	.LVL165:
 2457              	.L185:
 2458              	.LCFI28:
 2459              		.cfi_def_cfa_offset 0
 2460              		.cfi_restore 3
 2461              		.cfi_restore 4
 2462              		.cfi_restore 5
 2463              		.cfi_restore 14
 582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 2464              		.loc 1 582 0
 2465 00f0 0120     		movs	r0, #1
 2466              	.LVL166:
 2467 00f2 7047     		bx	lr
ARM GAS  /tmp/ccNsrXlN.s 			page 95


 2468              	.L189:
 2469              		.align	2
 2470              	.L188:
 2471 00f4 00003FFF 		.word	-12648448
 2472 00f8 F00601FF 		.word	-16709904
 2473              		.cfi_endproc
 2474              	.LFE64:
 2476              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 2477              		.align	2
 2478              		.global	HAL_ADC_Stop
 2479              		.thumb
 2480              		.thumb_func
 2482              	HAL_ADC_Stop:
 2483              	.LFB68:
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2484              		.loc 1 882 0
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 0
 2487              		@ frame_needed = 0, uses_anonymous_args = 0
 2488              	.LVL167:
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2489              		.loc 1 889 0
 2490 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 2491 0004 012B     		cmp	r3, #1
 2492 0006 15D0     		beq	.L193
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2493              		.loc 1 882 0 discriminator 2
 2494 0008 10B5     		push	{r4, lr}
 2495              	.LCFI29:
 2496              		.cfi_def_cfa_offset 8
 2497              		.cfi_offset 4, -8
 2498              		.cfi_offset 14, -4
 2499 000a 0446     		mov	r4, r0
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2500              		.loc 1 889 0 discriminator 2
 2501 000c 0123     		movs	r3, #1
 2502 000e 80F82430 		strb	r3, [r0, #36]
 893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2503              		.loc 1 893 0 discriminator 2
 2504 0012 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2505              	.LVL168:
 896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2506              		.loc 1 896 0 discriminator 2
 2507 0016 0346     		mov	r3, r0
 2508 0018 38B9     		cbnz	r0, .L192
 899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2509              		.loc 1 899 0
 2510 001a A26A     		ldr	r2, [r4, #40]
 2511 001c 22F48852 		bic	r2, r2, #4352
 2512 0020 22F00102 		bic	r2, r2, #1
 2513 0024 42F00102 		orr	r2, r2, #1
 2514 0028 A262     		str	r2, [r4, #40]
 2515              	.L192:
 905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2516              		.loc 1 905 0
 2517 002a 0022     		movs	r2, #0
 2518 002c 84F82420 		strb	r2, [r4, #36]
ARM GAS  /tmp/ccNsrXlN.s 			page 96


 908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2519              		.loc 1 908 0
 2520 0030 1846     		mov	r0, r3
 2521              	.LVL169:
 2522 0032 10BD     		pop	{r4, pc}
 2523              	.LVL170:
 2524              	.L193:
 2525              	.LCFI30:
 2526              		.cfi_def_cfa_offset 0
 2527              		.cfi_restore 4
 2528              		.cfi_restore 14
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2529              		.loc 1 889 0
 2530 0034 0220     		movs	r0, #2
 2531              	.LVL171:
 2532 0036 7047     		bx	lr
 2533              		.cfi_endproc
 2534              	.LFE68:
 2536              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 2537              		.align	2
 2538              		.global	HAL_ADC_Stop_IT
 2539              		.thumb
 2540              		.thumb_func
 2542              	HAL_ADC_Stop_IT:
 2543              	.LFB72:
1217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2544              		.loc 1 1217 0
 2545              		.cfi_startproc
 2546              		@ args = 0, pretend = 0, frame = 0
 2547              		@ frame_needed = 0, uses_anonymous_args = 0
 2548              	.LVL172:
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2549              		.loc 1 1224 0
 2550 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 2551 0004 012B     		cmp	r3, #1
 2552 0006 1AD0     		beq	.L199
1217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2553              		.loc 1 1217 0 discriminator 2
 2554 0008 10B5     		push	{r4, lr}
 2555              	.LCFI31:
 2556              		.cfi_def_cfa_offset 8
 2557              		.cfi_offset 4, -8
 2558              		.cfi_offset 14, -4
 2559 000a 0446     		mov	r4, r0
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2560              		.loc 1 1224 0 discriminator 2
 2561 000c 0123     		movs	r3, #1
 2562 000e 80F82430 		strb	r3, [r0, #36]
1228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2563              		.loc 1 1228 0 discriminator 2
 2564 0012 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2565              	.LVL173:
1231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2566              		.loc 1 1231 0 discriminator 2
 2567 0016 0346     		mov	r3, r0
 2568 0018 60B9     		cbnz	r0, .L198
1234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
ARM GAS  /tmp/ccNsrXlN.s 			page 97


 2569              		.loc 1 1234 0
 2570 001a 2168     		ldr	r1, [r4]
 2571 001c 4A68     		ldr	r2, [r1, #4]
 2572 001e 22F02002 		bic	r2, r2, #32
 2573 0022 4A60     		str	r2, [r1, #4]
1237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2574              		.loc 1 1237 0
 2575 0024 A26A     		ldr	r2, [r4, #40]
 2576 0026 22F48852 		bic	r2, r2, #4352
 2577 002a 22F00102 		bic	r2, r2, #1
 2578 002e 42F00102 		orr	r2, r2, #1
 2579 0032 A262     		str	r2, [r4, #40]
 2580              	.L198:
1243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2581              		.loc 1 1243 0
 2582 0034 0022     		movs	r2, #0
 2583 0036 84F82420 		strb	r2, [r4, #36]
1246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2584              		.loc 1 1246 0
 2585 003a 1846     		mov	r0, r3
 2586              	.LVL174:
 2587 003c 10BD     		pop	{r4, pc}
 2588              	.LVL175:
 2589              	.L199:
 2590              	.LCFI32:
 2591              		.cfi_def_cfa_offset 0
 2592              		.cfi_restore 4
 2593              		.cfi_restore 14
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2594              		.loc 1 1224 0
 2595 003e 0220     		movs	r0, #2
 2596              	.LVL176:
 2597 0040 7047     		bx	lr
 2598              		.cfi_endproc
 2599              	.LFE72:
 2601 0042 00BF     		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 2602              		.align	2
 2603              		.global	HAL_ADC_Stop_DMA
 2604              		.thumb
 2605              		.thumb_func
 2607              	HAL_ADC_Stop_DMA:
 2608              	.LFB74:
1415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2609              		.loc 1 1415 0
 2610              		.cfi_startproc
 2611              		@ args = 0, pretend = 0, frame = 0
 2612              		@ frame_needed = 0, uses_anonymous_args = 0
 2613              	.LVL177:
1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2614              		.loc 1 1422 0
 2615 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 2616 0004 012B     		cmp	r3, #1
 2617 0006 24D0     		beq	.L206
1415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2618              		.loc 1 1415 0 discriminator 2
 2619 0008 10B5     		push	{r4, lr}
 2620              	.LCFI33:
ARM GAS  /tmp/ccNsrXlN.s 			page 98


 2621              		.cfi_def_cfa_offset 8
 2622              		.cfi_offset 4, -8
 2623              		.cfi_offset 14, -4
 2624 000a 0446     		mov	r4, r0
1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2625              		.loc 1 1422 0 discriminator 2
 2626 000c 0123     		movs	r3, #1
 2627 000e 80F82430 		strb	r3, [r0, #36]
1426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2628              		.loc 1 1426 0 discriminator 2
 2629 0012 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2630              	.LVL178:
1429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2631              		.loc 1 1429 0 discriminator 2
 2632 0016 0346     		mov	r3, r0
 2633 0018 B0B9     		cbnz	r0, .L204
1432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2634              		.loc 1 1432 0
 2635 001a 2268     		ldr	r2, [r4]
 2636 001c 9368     		ldr	r3, [r2, #8]
 2637 001e 23F48073 		bic	r3, r3, #256
 2638 0022 9360     		str	r3, [r2, #8]
1436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2639              		.loc 1 1436 0
 2640 0024 206A     		ldr	r0, [r4, #32]
 2641              	.LVL179:
 2642 0026 FFF7FEFF 		bl	HAL_DMA_Abort
 2643              	.LVL180:
1439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2644              		.loc 1 1439 0
 2645 002a 0346     		mov	r3, r0
 2646 002c 40B9     		cbnz	r0, .L205
1442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2647              		.loc 1 1442 0
 2648 002e A26A     		ldr	r2, [r4, #40]
 2649 0030 22F48852 		bic	r2, r2, #4352
 2650 0034 22F00102 		bic	r2, r2, #1
 2651 0038 42F00102 		orr	r2, r2, #1
 2652 003c A262     		str	r2, [r4, #40]
 2653 003e 03E0     		b	.L204
 2654              	.L205:
1449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 2655              		.loc 1 1449 0
 2656 0040 A26A     		ldr	r2, [r4, #40]
 2657 0042 42F04002 		orr	r2, r2, #64
 2658 0046 A262     		str	r2, [r4, #40]
 2659              	.L204:
 2660              	.LVL181:
1454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2661              		.loc 1 1454 0
 2662 0048 0022     		movs	r2, #0
 2663 004a 84F82420 		strb	r2, [r4, #36]
1457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2664              		.loc 1 1457 0
 2665 004e 1846     		mov	r0, r3
 2666 0050 10BD     		pop	{r4, pc}
 2667              	.LVL182:
ARM GAS  /tmp/ccNsrXlN.s 			page 99


 2668              	.L206:
 2669              	.LCFI34:
 2670              		.cfi_def_cfa_offset 0
 2671              		.cfi_restore 4
 2672              		.cfi_restore 14
1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2673              		.loc 1 1422 0
 2674 0052 0220     		movs	r0, #2
 2675              	.LVL183:
 2676 0054 7047     		bx	lr
 2677              		.cfi_endproc
 2678              	.LFE74:
 2680 0056 00BF     		.text
 2681              	.Letext0:
 2682              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2683              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2684              		.file 5 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 2685              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2686              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2687              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2688              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 2689              		.file 10 "./Drivers/CMSIS/Include/core_cm3.h"
 2690              		.file 11 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2691              		.file 12 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2692              		.file 13 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 2693              		.file 14 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccNsrXlN.s 			page 100


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc.c
     /tmp/ccNsrXlN.s:19     .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccNsrXlN.s:24     .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccNsrXlN.s:38     .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccNsrXlN.s:43     .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccNsrXlN.s:56     .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccNsrXlN.s:61     .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccNsrXlN.s:312    .text.HAL_ADC_PollForConversion:0000000000000160 $d
     /tmp/ccNsrXlN.s:321    .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccNsrXlN.s:326    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccNsrXlN.s:400    .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccNsrXlN.s:405    .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccNsrXlN.s:423    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccNsrXlN.s:428    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccNsrXlN.s:441    .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccNsrXlN.s:446    .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccNsrXlN.s:512    .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccNsrXlN.s:517    .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccNsrXlN.s:530    .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccNsrXlN.s:535    .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccNsrXlN.s:559    .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccNsrXlN.s:564    .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccNsrXlN.s:577    .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccNsrXlN.s:582    .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccNsrXlN.s:742    .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccNsrXlN.s:747    .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccNsrXlN.s:760    .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccNsrXlN.s:765    .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccNsrXlN.s:797    .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccNsrXlN.s:802    .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccNsrXlN.s:1159   .text.HAL_ADC_ConfigChannel:0000000000000194 $d
     /tmp/ccNsrXlN.s:1166   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccNsrXlN.s:1171   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccNsrXlN.s:1259   .text.HAL_ADC_AnalogWDGConfig:000000000000005c $d
     /tmp/ccNsrXlN.s:1264   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccNsrXlN.s:1269   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccNsrXlN.s:1286   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccNsrXlN.s:1291   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccNsrXlN.s:1308   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccNsrXlN.s:1313   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccNsrXlN.s:1414   .text.ADC_Enable:0000000000000078 $d
     /tmp/ccNsrXlN.s:1420   .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccNsrXlN.s:1425   .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccNsrXlN.s:1579   .text.HAL_ADC_Start:00000000000000f0 $d
     /tmp/ccNsrXlN.s:1585   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccNsrXlN.s:1590   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccNsrXlN.s:1749   .text.HAL_ADC_Start_IT:00000000000000f8 $d
     /tmp/ccNsrXlN.s:1755   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccNsrXlN.s:1760   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccNsrXlN.s:1955   .text.HAL_ADC_Start_DMA:0000000000000130 $d
     /tmp/ccNsrXlN.s:1964   .text.ADC_ConversionStop_Disable:0000000000000000 $t
     /tmp/ccNsrXlN.s:1969   .text.ADC_ConversionStop_Disable:0000000000000000 ADC_ConversionStop_Disable
     /tmp/ccNsrXlN.s:2040   .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccNsrXlN.s:2045   .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccNsrXlN.s:2303   .text.HAL_ADC_Init:0000000000000144 $d
     /tmp/ccNsrXlN.s:2310   .text.HAL_ADC_DeInit:0000000000000000 $t
ARM GAS  /tmp/ccNsrXlN.s 			page 101


     /tmp/ccNsrXlN.s:2315   .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccNsrXlN.s:2471   .text.HAL_ADC_DeInit:00000000000000f4 $d
     /tmp/ccNsrXlN.s:2477   .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccNsrXlN.s:2482   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccNsrXlN.s:2537   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccNsrXlN.s:2542   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccNsrXlN.s:2602   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccNsrXlN.s:2607   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
SystemCoreClock
HAL_ADCEx_InjectedConvCpltCallback
HAL_DMA_Start_IT
HAL_DMA_Abort
