<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 1
=======
ARM GAS  /tmp/ccWElble.s 			page 1
>>>>>>> GameTrak


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_hal_adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
  20              		.align	2
  21              		.weak	HAL_ADC_MspInit
  22              		.thumb
  23              		.thumb_func
  25              	HAL_ADC_MspInit:
  26              	.LFB66:
  27              		.file 1 "./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c"
   1:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
   2:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
   3:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @file    stm32f1xx_hal_adc.c
   4:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @author  MCD Application Team
   5:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @version V1.0.4
   6:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @date    29-April-2016
   7:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          peripheral:
  10:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
  11:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  12:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Operation functions
  13:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  14:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  15:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Control functions
  16:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  17:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  18:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  19:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + State functions
  20:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ ADC state machine management
  21:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  22:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  23:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          "stm32f1xx_hal_adc_ex.c".
  24:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  25:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @verbatim
  26:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  27:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  28:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  29:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   [..]
  30:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) 12-bit resolution
  31:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 2
=======
ARM GAS  /tmp/ccWElble.s 			page 2
>>>>>>> GameTrak


  32:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
  33:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  34:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  35:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  36:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  37:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  38:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  39:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  40:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  41:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  42:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  43:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  44:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  45:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) 
  46:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       for both regular and injected groups.
  47:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  48:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  49:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  50:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Multimode Dual mode (available on devices with 2 ADCs or more).
  51:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  52:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable DMA data storage in Multimode Dual mode (available on devices
  53:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       with 2 DCs or more).
  54:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  55:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode (available 
  56:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       on devices with 2 DCs or more).
  57:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  58:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC calibration
  59:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  60:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  61:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       slower speed.
  62:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  63:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  64:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  65:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  66:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  67:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### How to use this driver #####
  68:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  69:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
  70:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  71:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  72:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
  73:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
  74:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  75:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Enable the ADC interface
  76:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  77:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****            Caution: On STM32F1, ADC clock frequency max is 14MHz (refer
  78:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     to device datasheet).
  79:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  80:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  81:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     this maximum frequency.
  82:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) One clock setting is mandatory:
  83:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC clock (core clock, also possibly conversion clock).
  84:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
  85:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  86:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
  87:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  88:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) __ADC1_CLK_ENABLE();
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 3
=======
ARM GAS  /tmp/ccWElble.s 			page 3
>>>>>>> GameTrak


  89:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  90:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  91:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  92:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  93:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
  94:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  95:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  96:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  97:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_GPIO_Init()
  98:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  99:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ADCx_IRQHandler().
 105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ==========================================================================
 117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_Init().
 122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         sequencer, ..., of injected group)
 129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         monitored, thresholds, ...)
 135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
 138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         multimode parameters
 139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ====================================
 143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 4
=======
ARM GAS  /tmp/ccWElble.s 			page 4
>>>>>>> GameTrak


 146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         conversion accuracy
 147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         transfer by DMA.
 151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by polling:
 153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (this function must be implemented in user program)
 170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              with transfer by DMA:
 190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 5
=======
ARM GAS  /tmp/ccWElble.s 			page 5
>>>>>>> GameTrak


 203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
 215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Disable the ADC interface
 218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC clock disable
 222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
 224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
 226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC
 227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPLLCLK2_OFF
 228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)
 229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
 231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Deinitialize the DMA
 240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     @endverbatim
 247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
 248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @attention
 249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 6
=======
ARM GAS  /tmp/ccWElble.s 			page 6
>>>>>>> GameTrak


 260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *      without specific prior written permission.
 262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************  
 275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #include "stm32f1xx_hal.h"
 279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @addtogroup STM32F1xx_HAL_Driver
 281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC ADC
 285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief ADC HAL module driver
 286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              ((uint32_t) 2)
 304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             ((uint32_t) 2)
 305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               ((uint32_t) 1)
 310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         ((uint32_t) 10)
 315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 7
=======
ARM GAS  /tmp/ccWElble.s 			page 7
>>>>>>> GameTrak


 317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief    Initialization and Configuration functions
 338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim    
 340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) De-initialize the ADC.
 346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (clock source APB2).
 356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 8
=======
ARM GAS  /tmp/ccWElble.s 			page 8
>>>>>>> GameTrak


 374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0;
 378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0;
 379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sqr1 = 0;
 380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* procedure.                                                               */
 408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Initialize ADC error code */
 414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       bit ADON.                                                          */
 428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 9
=======
ARM GAS  /tmp/ccWElble.s 			page 9
>>>>>>> GameTrak


 431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC parameters */
 442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - data alignment                                                      */
 445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger polarity (always set to 1, because needed for all  */
 447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    triggers: external trigger of SW start)                             */
 448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       a conversion on injected group would start a conversion also on  */
 452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       regular group after ADC enabling.                                */
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                               |
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - scan mode                                                           */
 459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Enable the selected ADC regular discontinuous mode */
 471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set the number of channels to be converted in discontinuous mode */
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
 476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* ADC regular group settings continuous and sequencer discontinuous*/
 478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                */
 479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
 481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 10
=======
ARM GAS  /tmp/ccWElble.s 			page 10
>>>>>>> GameTrak


 488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR1 with previous settings */
 489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR1,
 490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCEN  |
 492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCNUM    ,
 493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr1             );
 494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR2,
 497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTSEL  |
 499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTTRIG |
 500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_CONT       ,
 501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr2             );
 502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
 518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                tmp_sqr1             );
 520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement path bit (TSVREFE).                                        */
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_TSVREFE                     ))
 531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          == tmp_cr2)
 532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to none */
 534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the ADC state */
 537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
 544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 11
=======
ARM GAS  /tmp/ccWElble.s 			page 11
>>>>>>> GameTrak


 545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      return HAL_ERROR;
 583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
 589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 12
=======
ARM GAS  /tmp/ccWElble.s 			page 12
>>>>>>> GameTrak


 602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SR */
 606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          
 609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR1 */
 610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
 613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
 614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR2 */
 616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
 619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
 620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_ADON                                          ));
 621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR1 */
 623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
 626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR2 */
 628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
 631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP0                                    ));
 632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR1 */
 634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register HTR */
 643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR2 */
 658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 13
=======
ARM GAS  /tmp/ccWElble.s 			page 13
>>>>>>> GameTrak


 659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR3 */
 662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register DR */
 676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*                                                                        */
 687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC error code to none */
 694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  28              		.loc 1 714 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 14
=======
ARM GAS  /tmp/ccWElble.s 			page 14
>>>>>>> GameTrak


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE66:
  38 0002 00BF     		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
  39              		.align	2
  40              		.weak	HAL_ADC_MspDeInit
  41              		.thumb
  42              		.thumb_func
  44              	HAL_ADC_MspDeInit:
  45              	.LFB67:
 715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  46              		.loc 1 728 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.LVL1:
  52 0000 7047     		bx	lr
  53              		.cfi_endproc
  54              	.LFE67:
  56 0002 00BF     		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
  57              		.align	2
  58              		.global	HAL_ADC_PollForConversion
  59              		.thumb
  60              		.thumb_func
  62              	HAL_ADC_PollForConversion:
  63              	.LFB70:
 729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 15
=======
ARM GAS  /tmp/ccWElble.s 			page 15
>>>>>>> GameTrak


 741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Input and Output operation functions
 742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
 743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
 744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       ##### IO operation functions #####
 746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group.
 749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group.
 750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
 751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion event.
 752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
 753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
 754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
 755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Handle ADC interrupt request
 756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
 757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
 758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
 764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
 765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
 779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
 785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
 787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
 789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
 792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
 793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
 797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 16
=======
ARM GAS  /tmp/ccWElble.s 			page 16
>>>>>>> GameTrak


 798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
 809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
 812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
 828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag */
 837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
 841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
 842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
 843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
 844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
 845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
 846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
 847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If ADC is master, ADC is enabled and conversion is started.            */
 848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
 854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 17
=======
ARM GAS  /tmp/ccWElble.s 			page 17
>>>>>>> GameTrak


 855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
 859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
 875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
 876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
 877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
 878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
 880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
 888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 18
=======
ARM GAS  /tmp/ccWElble.s 			page 18
>>>>>>> GameTrak


 912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
 913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in DMA mode.
 915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         performed on each conversion.
 917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, limitation in case of sequencer enabled
 918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (several ranks selected): polling cannot be done on each 
 919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion inside the sequence. In this case, polling is replaced by
 920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         wait for maximum conversion time.
 921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
 923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  64              		.loc 1 926 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 8
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              	.LVL2:
  69              		.loc 1 926 0
  70 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  71              	.LCFI0:
  72              		.cfi_def_cfa_offset 20
  73              		.cfi_offset 4, -20
  74              		.cfi_offset 5, -16
  75              		.cfi_offset 6, -12
  76              		.cfi_offset 7, -8
  77              		.cfi_offset 14, -4
  78 0002 83B0     		sub	sp, sp, #12
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 32
  81 0004 0546     		mov	r5, r0
  82 0006 0C46     		mov	r4, r1
  83              	.LVL3:
 927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
  84              		.loc 1 931 0
  85 0008 0023     		movs	r3, #0
  86 000a 0193     		str	r3, [sp, #4]
  87              	.LVL4:
 932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0;
 933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
 934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
 938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
  88              		.loc 1 938 0
  89 000c FFF7FEFF 		bl	HAL_GetTick
  90              	.LVL5:
 939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for        */
 941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* each conversion:                                                         */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 19
=======
ARM GAS  /tmp/ccWElble.s 			page 19
>>>>>>> GameTrak


 942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode                            */
 943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
  91              		.loc 1 943 0
  92 0010 2B68     		ldr	r3, [r5]
  93 0012 9A68     		ldr	r2, [r3, #8]
  94 0014 12F4807F 		tst	r2, #256
  95 0018 08D0     		beq	.L4
 944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
  96              		.loc 1 946 0
  97 001a AB6A     		ldr	r3, [r5, #40]
  98 001c 43F02003 		orr	r3, r3, #32
  99 0020 AB62     		str	r3, [r5, #40]
 947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
 949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 100              		.loc 1 949 0
 101 0022 0023     		movs	r3, #0
 102 0024 85F82430 		strb	r3, [r5, #36]
 950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 103              		.loc 1 951 0
 104 0028 0120     		movs	r0, #1
 105              	.LVL6:
 106 002a 97E0     		b	.L5
 107              	.LVL7:
 108              	.L4:
 109 002c 0646     		mov	r6, r0
 952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
 956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
 957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    with NbrOfConversion =1), flag EOC is used to determine the           */
 958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    conversion completion.                                                */
 959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
 960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    NbrOfConversion >=2), flag EOC is set only at the end of the          */
 961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    sequence.                                                             */
 962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
 967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    be set.                                                               */
 968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 110              		.loc 1 968 0
 111 002e 5A68     		ldr	r2, [r3, #4]
 112 0030 12F4807F 		tst	r2, #256
 113 0034 1CD1     		bne	.L6
 969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 114              		.loc 1 969 0 discriminator 1
 115 0036 DB6A     		ldr	r3, [r3, #44]
 968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 116              		.loc 1 968 0 discriminator 1
 117 0038 13F4700F 		tst	r3, #15728640
 118 003c 12D0     		beq	.L8
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 20
=======
ARM GAS  /tmp/ccWElble.s 			page 20
>>>>>>> GameTrak


 119 003e 17E0     		b	.L6
 120              	.LVL8:
 121              	.L10:
 970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait until End of Conversion flag is raised */
 972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
 975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 122              		.loc 1 975 0
 123 0040 B4F1FF3F 		cmp	r4, #-1
 124 0044 0ED0     		beq	.L8
 976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 125              		.loc 1 977 0
 126 0046 24B1     		cbz	r4, .L9
 127              		.loc 1 977 0 is_stmt 0 discriminator 1
 128 0048 FFF7FEFF 		bl	HAL_GetTick
 129              	.LVL9:
 130 004c 801B     		subs	r0, r0, r6
 131 004e 8442     		cmp	r4, r0
 132 0050 08D2     		bcs	.L8
 133              	.L9:
 978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
 979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
 980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 134              		.loc 1 980 0 is_stmt 1
 135 0052 AB6A     		ldr	r3, [r5, #40]
 136 0054 43F00403 		orr	r3, r3, #4
 137 0058 AB62     		str	r3, [r5, #40]
 981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
 983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 138              		.loc 1 983 0
 139 005a 0023     		movs	r3, #0
 140 005c 85F82430 		strb	r3, [r5, #36]
 984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
 985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 141              		.loc 1 985 0
 142 0060 0320     		movs	r0, #3
 143 0062 7BE0     		b	.L5
 144              	.L8:
 972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 145              		.loc 1 972 0
 146 0064 2B68     		ldr	r3, [r5]
 147 0066 1B68     		ldr	r3, [r3]
 148 0068 13F0020F 		tst	r3, #2
 149 006c E8D0     		beq	.L10
 150 006e 51E0     		b	.L11
 151              	.LVL10:
 152              	.L6:
 986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
 987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 21
=======
ARM GAS  /tmp/ccWElble.s 			page 21
>>>>>>> GameTrak


 992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Replace polling by wait for maximum conversion time */
 993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
 995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
 996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 153              		.loc 1 997 0
 154 0070 3B4B     		ldr	r3, .L28
 155 0072 1F68     		ldr	r7, [r3]
 156 0074 0220     		movs	r0, #2
 157              	.LVL11:
 158 0076 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 159              	.LVL12:
 160 007a B7FBF0F7 		udiv	r7, r7, r0
 998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 161              		.loc 1 998 0
 162 007e 2B68     		ldr	r3, [r5]
 163 0080 1969     		ldr	r1, [r3, #16]
 164 0082 384A     		ldr	r2, .L28+4
 165 0084 1142     		tst	r1, r2
 166 0086 0ED1     		bne	.L12
 167              		.loc 1 998 0 is_stmt 0 discriminator 1
 168 0088 D968     		ldr	r1, [r3, #12]
 169 008a 02F15C42 		add	r2, r2, #-603979776
 170 008e 1142     		tst	r1, r2
 171 0090 09D1     		bne	.L12
 172              		.loc 1 998 0 discriminator 3
 173 0092 1969     		ldr	r1, [r3, #16]
 174 0094 344A     		ldr	r2, .L28+8
 175 0096 1142     		tst	r1, r2
 176 0098 18D1     		bne	.L19
 177              		.loc 1 998 0 discriminator 5
 178 009a DA68     		ldr	r2, [r3, #12]
 179 009c 334B     		ldr	r3, .L28+12
 180 009e 1A42     		tst	r2, r3
 181 00a0 16D0     		beq	.L20
 182              		.loc 1 998 0
 183 00a2 2920     		movs	r0, #41
 184 00a4 1BE0     		b	.L13
 185              	.L12:
 186              		.loc 1 998 0 discriminator 4
 187 00a6 1969     		ldr	r1, [r3, #16]
 188 00a8 2F4A     		ldr	r2, .L28+8
 189 00aa 1142     		tst	r1, r2
 190 00ac 04D1     		bne	.L14
 191              		.loc 1 998 0 discriminator 11
 192 00ae D968     		ldr	r1, [r3, #12]
 193 00b0 02F16E42 		add	r2, r2, #-301989888
 194 00b4 1142     		tst	r1, r2
 195 00b6 0DD0     		beq	.L21
 196              	.L14:
 197              		.loc 1 998 0 discriminator 14
 198 00b8 1969     		ldr	r1, [r3, #16]
 199 00ba 2D4A     		ldr	r2, .L28+16
 200 00bc 0A40     		ands	r2, r2, r1
 201 00be 5AB9     		cbnz	r2, .L22
 202              		.loc 1 998 0 discriminator 15
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 22
=======
ARM GAS  /tmp/ccWElble.s 			page 22
>>>>>>> GameTrak


 203 00c0 DA68     		ldr	r2, [r3, #12]
 204 00c2 2B4B     		ldr	r3, .L28+16
 205 00c4 1340     		ands	r3, r3, r2
 206 00c6 4BB1     		cbz	r3, .L23
 207              		.loc 1 998 0
 208 00c8 FC20     		movs	r0, #252
 209 00ca 08E0     		b	.L13
 210              	.L19:
 211 00cc 2920     		movs	r0, #41
 212 00ce 06E0     		b	.L13
 213              	.L20:
 214 00d0 1420     		movs	r0, #20
 215 00d2 04E0     		b	.L13
 216              	.L21:
 217 00d4 5420     		movs	r0, #84
 218 00d6 02E0     		b	.L13
 219              	.L22:
 220 00d8 FC20     		movs	r0, #252
 221 00da 00E0     		b	.L13
 222              	.L23:
 223 00dc 5420     		movs	r0, #84
 224              	.L13:
 996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 225              		.loc 1 996 0 is_stmt 1
 226 00de 07FB00F7 		mul	r7, r7, r0
 227              	.LVL13:
 999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 228              		.loc 1 1000 0
 229 00e2 14E0     		b	.L15
 230              	.L18:
1001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 231              		.loc 1 1003 0
 232 00e4 B4F1FF3F 		cmp	r4, #-1
 233 00e8 0ED0     		beq	.L16
1004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 234              		.loc 1 1005 0
 235 00ea 24B1     		cbz	r4, .L17
 236              		.loc 1 1005 0 is_stmt 0 discriminator 1
 237 00ec FFF7FEFF 		bl	HAL_GetTick
 238              	.LVL14:
 239 00f0 801B     		subs	r0, r0, r6
 240 00f2 8442     		cmp	r4, r0
 241 00f4 08D2     		bcs	.L16
 242              	.L17:
1006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 243              		.loc 1 1008 0 is_stmt 1
 244 00f6 AB6A     		ldr	r3, [r5, #40]
 245 00f8 43F00403 		orr	r3, r3, #4
 246 00fc AB62     		str	r3, [r5, #40]
1009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
1010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 23
=======
ARM GAS  /tmp/ccWElble.s 			page 23
>>>>>>> GameTrak


1011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 247              		.loc 1 1011 0
 248 00fe 0023     		movs	r3, #0
 249 0100 85F82430 		strb	r3, [r5, #36]
1012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           
1013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 250              		.loc 1 1013 0
 251 0104 0320     		movs	r0, #3
 252 0106 29E0     		b	.L5
 253              	.L16:
1014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Conversion_Timeout_CPU_cycles ++;
 254              		.loc 1 1016 0
 255 0108 019B     		ldr	r3, [sp, #4]
 256 010a 0133     		adds	r3, r3, #1
 257 010c 0193     		str	r3, [sp, #4]
 258              	.L15:
1000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 259              		.loc 1 1000 0
 260 010e 019B     		ldr	r3, [sp, #4]
 261 0110 9F42     		cmp	r7, r3
 262 0112 E7D8     		bhi	.L18
 263              	.LVL15:
 264              	.L11:
1017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear regular group conversion flag */
1021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 265              		.loc 1 1021 0
 266 0114 2B68     		ldr	r3, [r5]
 267 0116 6FF01202 		mvn	r2, #18
 268 011a 1A60     		str	r2, [r3]
1022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update ADC state machine */
1024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 269              		.loc 1 1024 0
 270 011c AB6A     		ldr	r3, [r5, #40]
 271 011e 43F40073 		orr	r3, r3, #512
 272 0122 AB62     		str	r3, [r5, #40]
1025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: On STM32F1 devices, in case of sequencer enabled                   */
1029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       at the end of the sequence.                                        */
1031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 273              		.loc 1 1031 0
 274 0124 2B68     		ldr	r3, [r5]
 275 0126 9B68     		ldr	r3, [r3, #8]
 276 0128 03F46023 		and	r3, r3, #917504
 277 012c B3F5602F 		cmp	r3, #917504
 278 0130 0FD1     		bne	.L24
1032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 279              		.loc 1 1032 0 discriminator 1
 280 0132 EB68     		ldr	r3, [r5, #12]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 24
=======
ARM GAS  /tmp/ccWElble.s 			page 24
>>>>>>> GameTrak


1031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 281              		.loc 1 1031 0 discriminator 1
 282 0134 7BB9     		cbnz	r3, .L25
1033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {   
1034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 283              		.loc 1 1035 0
 284 0136 AB6A     		ldr	r3, [r5, #40]
 285 0138 23F48073 		bic	r3, r3, #256
 286 013c AB62     		str	r3, [r5, #40]
1036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 287              		.loc 1 1037 0
 288 013e AB6A     		ldr	r3, [r5, #40]
 289 0140 13F4805F 		tst	r3, #4096
 290 0144 09D1     		bne	.L26
1038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     { 
1039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 291              		.loc 1 1039 0
 292 0146 AB6A     		ldr	r3, [r5, #40]
 293 0148 43F00103 		orr	r3, r3, #1
 294 014c AB62     		str	r3, [r5, #40]
1040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 295              		.loc 1 1044 0
 296 014e 0020     		movs	r0, #0
 297 0150 04E0     		b	.L5
 298              	.L24:
 299 0152 0020     		movs	r0, #0
 300 0154 02E0     		b	.L5
 301              	.L25:
 302 0156 0020     		movs	r0, #0
 303 0158 00E0     		b	.L5
 304              	.L26:
 305 015a 0020     		movs	r0, #0
 306              	.LVL16:
 307              	.L5:
1045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 308              		.loc 1 1045 0
 309 015c 03B0     		add	sp, sp, #12
 310              	.LCFI2:
 311              		.cfi_def_cfa_offset 20
 312              		@ sp needed
 313 015e F0BD     		pop	{r4, r5, r6, r7, pc}
 314              	.LVL17:
 315              	.L29:
 316              		.align	2
 317              	.L28:
 318 0160 00000000 		.word	SystemCoreClock
 319 0164 24499224 		.word	613566756
 320 0168 92244912 		.word	306783378
 321 016c 92244900 		.word	4793490
 322 0170 49922400 		.word	2396745
 323              		.cfi_endproc
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 25
=======
ARM GAS  /tmp/ccWElble.s 			page 25
>>>>>>> GameTrak


 324              	.LFE70:
 326              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 327              		.align	2
 328              		.global	HAL_ADC_PollForEvent
 329              		.thumb
 330              		.thumb_func
 332              	HAL_ADC_PollForEvent:
 333              	.LFB71:
1046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 334              		.loc 1 1057 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              	.LVL18:
 339 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 340              	.LCFI3:
 341              		.cfi_def_cfa_offset 24
 342              		.cfi_offset 3, -24
 343              		.cfi_offset 4, -20
 344              		.cfi_offset 5, -16
 345              		.cfi_offset 6, -12
 346              		.cfi_offset 7, -8
 347              		.cfi_offset 14, -4
 348 0002 0446     		mov	r4, r0
 349 0004 0E46     		mov	r6, r1
 350 0006 1546     		mov	r5, r2
 351              	.LVL19:
1058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0; 
1059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 352              		.loc 1 1065 0
 353 0008 FFF7FEFF 		bl	HAL_GetTick
 354              	.LVL20:
 355 000c 0746     		mov	r7, r0
 356              	.LVL21:
1066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check selected event flag */
1068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 357              		.loc 1 1068 0
 358 000e 11E0     		b	.L32
 359              	.LVL22:
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 26
=======
ARM GAS  /tmp/ccWElble.s 			page 26
>>>>>>> GameTrak


 360              	.L35:
1069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 361              		.loc 1 1071 0
 362 0010 B5F1FF3F 		cmp	r5, #-1
 363 0014 0ED0     		beq	.L32
1072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 364              		.loc 1 1073 0
 365 0016 25B1     		cbz	r5, .L33
 366              		.loc 1 1073 0 is_stmt 0 discriminator 1
 367 0018 FFF7FEFF 		bl	HAL_GetTick
 368              	.LVL23:
 369 001c C01B     		subs	r0, r0, r7
 370 001e 8542     		cmp	r5, r0
 371 0020 08D2     		bcs	.L32
 372              	.L33:
1074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 373              		.loc 1 1076 0 is_stmt 1
 374 0022 A36A     		ldr	r3, [r4, #40]
 375 0024 43F00403 		orr	r3, r3, #4
 376 0028 A362     		str	r3, [r4, #40]
1077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 377              		.loc 1 1079 0
 378 002a 0023     		movs	r3, #0
 379 002c 84F82430 		strb	r3, [r4, #36]
1080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_TIMEOUT;
 380              		.loc 1 1081 0
 381 0030 0320     		movs	r0, #3
 382 0032 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 383              	.LVL24:
 384              	.L32:
1068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 385              		.loc 1 1068 0
 386 0034 2368     		ldr	r3, [r4]
 387 0036 1A68     		ldr	r2, [r3]
 388 0038 36EA0202 		bics	r2, r6, r2
 389 003c E8D1     		bne	.L35
1082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
1088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 390              		.loc 1 1088 0
 391 003e A26A     		ldr	r2, [r4, #40]
 392 0040 42F48032 		orr	r2, r2, #65536
 393 0044 A262     		str	r2, [r4, #40]
1089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear ADC analog watchdog flag */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 27
=======
ARM GAS  /tmp/ccWElble.s 			page 27
>>>>>>> GameTrak


1091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 394              		.loc 1 1091 0
 395 0046 6FF00102 		mvn	r2, #1
 396 004a 1A60     		str	r2, [r3]
1092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 397              		.loc 1 1094 0
 398 004c 0020     		movs	r0, #0
1095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 399              		.loc 1 1095 0
 400 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 401              		.cfi_endproc
 402              	.LFE71:
 404              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 405              		.align	2
 406              		.global	HAL_ADC_GetValue
 407              		.thumb
 408              		.thumb_func
 410              	HAL_ADC_GetValue:
 411              	.LFB76:
1096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1098:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1099:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
1117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
1126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 28
=======
ARM GAS  /tmp/ccWElble.s 			page 28
>>>>>>> GameTrak


1132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
1176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
1179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
1188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 29
=======
ARM GAS  /tmp/ccWElble.s 			page 29
>>>>>>> GameTrak


1189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
1192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
1197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 30
=======
ARM GAS  /tmp/ccWElble.s 			page 30
>>>>>>> GameTrak


1246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         through DMA.
1252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA transfer complete
1254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA half transfer
1255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
1258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC2 converted data can be transferred in dual ADC mode using DMA
1261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of ADC1 (ADC master in multimode).
1262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In case of using ADC1 with DMA on a device featuring 2 ADC
1263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         instances: ADC1 conversion register DR contains ADC1 conversion 
1264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         result (ADC1 register DR bits 0 to 11) and, additionally, ADC2 last
1265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion result (ADC1 register DR bits 16 to 27). Therefore, to
1266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         have DMA transferring the conversion results of ADC1 only, DMA must
1267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be configured to transfer size: half word.
1268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if multimode is disabled (for devices with several ADC)     */
1281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If multimode is enabled, dedicated function multimode conversion         */
1282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* start DMA must be used.                                                  */
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
1284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process locked */
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_LOCK(hadc);
1287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC peripheral */
1289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state                                                        */
1295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 31
=======
ARM GAS  /tmp/ccWElble.s 			page 31
>>>>>>> GameTrak


1303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
1305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
1324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* State machine update: Check if an injected conversion is ongoing */
1330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC error code fields related to conversions on group regular */
1333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC all error code fields */
1338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
1339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA error callback */
1353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 32
=======
ARM GAS  /tmp/ccWElble.s 			page 32
>>>>>>> GameTrak


1360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* operations)                                                          */
1362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
1363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable ADC DMA mode */
1365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
1366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start the DMA channel */
1368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* trigger event.                                                       */
1374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
1375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with SW start */
1377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
1378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with external trigger */
1382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
1383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
1394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC peripheral.
1404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
1409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 33
=======
ARM GAS  /tmp/ccWElble.s 			page 33
>>>>>>> GameTrak


1417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
1433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if DMA channel effectively disabled */
1439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            to flag EOC.
1469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 34
=======
ARM GAS  /tmp/ccWElble.s 			page 34
>>>>>>> GameTrak


1474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 412              		.loc 1 1480 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417              	.LVL25:
1481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC converted value */ 
1488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->Instance->DR;
 418              		.loc 1 1488 0
 419 0000 0368     		ldr	r3, [r0]
 420 0002 D86C     		ldr	r0, [r3, #76]
 421              	.LVL26:
1489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 422              		.loc 1 1489 0
 423 0004 7047     		bx	lr
 424              		.cfi_endproc
 425              	.LFE76:
 427 0006 00BF     		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 428              		.align	2
 429              		.weak	HAL_ADC_ConvCpltCallback
 430              		.thumb
 431              		.thumb_func
 433              	HAL_ADC_ConvCpltCallback:
 434              	.LFB78:
1490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
1506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
1508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 35
=======
ARM GAS  /tmp/ccWElble.s 			page 35
>>>>>>> GameTrak


1510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
1522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
1523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group regular */
1525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
1529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */
1537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
1538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag */
1540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
1541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
1546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
1548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
1554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
1564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
1565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
1566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 36
=======
ARM GAS  /tmp/ccWElble.s 			page 36
>>>>>>> GameTrak


1567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group injected */
1569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
1573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
1575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
1576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */ 
1581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
1582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
1585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
1592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
1594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Level out of window callback */ 
1597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
1598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 435              		.loc 1 1612 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440              	.LVL27:
 441 0000 7047     		bx	lr
 442              		.cfi_endproc
 443              	.LFE78:
 445 0002 00BF     		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 446              		.align	2
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 37
=======
ARM GAS  /tmp/ccWElble.s 			page 37
>>>>>>> GameTrak


 447              		.global	ADC_DMAConvCplt
 448              		.thumb
 449              		.thumb_func
 451              	ADC_DMAConvCplt:
 452              	.LFB88:
1613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */
1618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 38
=======
ARM GAS  /tmp/ccWElble.s 			page 38
>>>>>>> GameTrak


1665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral Control functions
1670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure channels on regular group
1677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure the analog watchdog
1678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         group.
1686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the ADC.
1695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
1700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** { 
1704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
1706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Regular sequence configuration */
1718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 1 to 6 */
1719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Rank < 7)
1720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 39
=======
ARM GAS  /tmp/ccWElble.s 			page 39
>>>>>>> GameTrak


1722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
1723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
1724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 7 to 12 */
1726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (sConfig->Rank < 13)
1727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
1729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
1730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
1731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 13 to 16 */
1733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
1736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
1737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
1738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Channel sampling time configuration */
1742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For channels 10 to 17 */
1743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Channel >= ADC_CHANNEL_10)
1744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
1746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
1747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
1748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else /* For channels 0 to 9 */
1750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
1752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
1753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
1754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
1758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
1759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
1760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Instance == ADC1)
1765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
1767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
1769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
1771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
1775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0)
1776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             wait_loop_index--;
1778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 40
=======
ARM GAS  /tmp/ccWElble.s 			page 40
>>>>>>> GameTrak


1779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
1785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
1788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
1796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
1801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         is on going.
1802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
1803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
1804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
1805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
1806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
1807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
1808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
1810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
1817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
1819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
1820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
1822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
1823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
1824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog configuration */
1832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
1834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
1835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 41
=======
ARM GAS  /tmp/ccWElble.s 			page 41
>>>>>>> GameTrak


1836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
1846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
1847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    one or all channels.                                                  */
1848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
1849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
1850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   MODIFY_REG(hadc->Instance->CR1            ,
1851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
1852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_JAWDEN |
1853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDEN  |
1854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDCH                  ,
1855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->WatchdogMode |
1856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->Channel        );
1857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the high threshold */
1859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
1860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the low threshold */
1862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
1863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
1869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
1878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral State functions
1879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim
1881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
1883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
1885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
1886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     peripheral.
1887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC state
1888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC error code
1889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 42
=======
ARM GAS  /tmp/ccWElble.s 			page 42
>>>>>>> GameTrak


1893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  return the ADC state
1896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL state
1898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->State;
1903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Return the ADC error code
1907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC Error Code
1909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
1913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
1924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
1929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
1930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
1931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
1935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
1937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
1938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
1940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
1941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
1942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
1943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
1944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the Peripheral */
1946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 43
=======
ARM GAS  /tmp/ccWElble.s 			page 43
>>>>>>> GameTrak


1950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
1951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0)
1952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       wait_loop_index--;
1954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
1957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
1958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
1960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
1961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
1963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
1965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Process unlocked */
1971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
1974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
1979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
1980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
1984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
1985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         stopped to disable the ADC.
1986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
1990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
1991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
1992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
1994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
1995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC peripheral */
1997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
1998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
2001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
2004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 44
=======
ARM GAS  /tmp/ccWElble.s 			page 44
>>>>>>> GameTrak


2007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
2008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         return HAL_ERROR;
2014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
2020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
2021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 453              		.loc 1 2028 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              	.LVL28:
 458              		.loc 1 2028 0
 459 0000 08B5     		push	{r3, lr}
 460              	.LCFI4:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 3, -8
 463              		.cfi_offset 14, -4
2029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 464              		.loc 1 2030 0
 465 0002 436A     		ldr	r3, [r0, #36]
 466              	.LVL29:
2031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
2032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 467              		.loc 1 2033 0
 468 0004 9A6A     		ldr	r2, [r3, #40]
 469 0006 12F0500F 		tst	r2, #80
 470 000a 1CD1     		bne	.L40
2034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine */
2036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 471              		.loc 1 2036 0
 472 000c 9A6A     		ldr	r2, [r3, #40]
 473 000e 42F40072 		orr	r2, r2, #512
 474 0012 9A62     		str	r2, [r3, #40]
2037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: On STM32F1 devices, in case of sequencer enabled                 */
2041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       (several ranks selected), end of conversion flag is raised       */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 45
=======
ARM GAS  /tmp/ccWElble.s 			page 45
>>>>>>> GameTrak


2042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       at the end of the sequence.                                      */
2043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 475              		.loc 1 2043 0
 476 0014 1A68     		ldr	r2, [r3]
 477 0016 9268     		ldr	r2, [r2, #8]
 478 0018 02F46022 		and	r2, r2, #917504
 479 001c B2F5602F 		cmp	r2, #917504
 480 0020 0DD1     		bne	.L41
2044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 481              		.loc 1 2044 0 discriminator 1
 482 0022 DA68     		ldr	r2, [r3, #12]
2043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 483              		.loc 1 2043 0 discriminator 1
 484 0024 5AB9     		cbnz	r2, .L41
2045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
2047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 485              		.loc 1 2047 0
 486 0026 9A6A     		ldr	r2, [r3, #40]
 487 0028 22F48072 		bic	r2, r2, #256
 488 002c 9A62     		str	r2, [r3, #40]
2048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 489              		.loc 1 2049 0
 490 002e 9A6A     		ldr	r2, [r3, #40]
 491 0030 12F4805F 		tst	r2, #4096
 492 0034 03D1     		bne	.L41
2050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 493              		.loc 1 2051 0
 494 0036 9A6A     		ldr	r2, [r3, #40]
 495 0038 42F00102 		orr	r2, r2, #1
 496 003c 9A62     		str	r2, [r3, #40]
 497              	.L41:
2052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Conversion complete callback */
2056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc); 
 498              		.loc 1 2056 0
 499 003e 1846     		mov	r0, r3
 500              	.LVL30:
 501 0040 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 502              	.LVL31:
 503 0044 08BD     		pop	{r3, pc}
 504              	.LVL32:
 505              	.L40:
2057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Call DMA error callback */
2061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 506              		.loc 1 2061 0
 507 0046 1B6A     		ldr	r3, [r3, #32]
 508              	.LVL33:
 509 0048 1B6B     		ldr	r3, [r3, #48]
 510 004a 9847     		blx	r3
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 46
=======
ARM GAS  /tmp/ccWElble.s 			page 46
>>>>>>> GameTrak


 511              	.LVL34:
 512 004c 08BD     		pop	{r3, pc}
 513              		.cfi_endproc
 514              	.LFE88:
 516 004e 00BF     		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 517              		.align	2
 518              		.weak	HAL_ADC_ConvHalfCpltCallback
 519              		.thumb
 520              		.thumb_func
 522              	HAL_ADC_ConvHalfCpltCallback:
 523              	.LFB79:
1626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 524              		.loc 1 1626 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 0
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              		@ link register save eliminated.
 529              	.LVL35:
 530 0000 7047     		bx	lr
 531              		.cfi_endproc
 532              	.LFE79:
 534 0002 00BF     		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 535              		.align	2
 536              		.global	ADC_DMAHalfConvCplt
 537              		.thumb
 538              		.thumb_func
 540              	ADC_DMAHalfConvCplt:
 541              	.LFB89:
2062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
2064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 542              		.loc 1 2071 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 0
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546              	.LVL36:
 547              		.loc 1 2071 0
 548 0000 08B5     		push	{r3, lr}
 549              	.LCFI5:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 3, -8
 552              		.cfi_offset 14, -4
 553              	.LVL37:
2072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Half conversion callback */
2076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 554              		.loc 1 2076 0
 555 0002 406A     		ldr	r0, [r0, #36]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 47
=======
ARM GAS  /tmp/ccWElble.s 			page 47
>>>>>>> GameTrak


 556              	.LVL38:
 557 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 558              	.LVL39:
 559 0008 08BD     		pop	{r3, pc}
 560              		.cfi_endproc
 561              	.LFE89:
 563 000a 00BF     		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 564              		.align	2
 565              		.weak	HAL_ADC_LevelOutOfWindowCallback
 566              		.thumb
 567              		.thumb_func
 569              	HAL_ADC_LevelOutOfWindowCallback:
 570              	.LFB80:
1640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 571              		.loc 1 1640 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 576              	.LVL40:
 577 0000 7047     		bx	lr
 578              		.cfi_endproc
 579              	.LFE80:
 581 0002 00BF     		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 582              		.align	2
 583              		.global	HAL_ADC_IRQHandler
 584              		.thumb
 585              		.thumb_func
 587              	HAL_ADC_IRQHandler:
 588              	.LFB77:
1497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 589              		.loc 1 1497 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593              	.LVL41:
1497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 594              		.loc 1 1497 0
 595 0000 10B5     		push	{r4, lr}
 596              	.LCFI6:
 597              		.cfi_def_cfa_offset 8
 598              		.cfi_offset 4, -8
 599              		.cfi_offset 14, -4
 600 0002 0446     		mov	r4, r0
1505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 601              		.loc 1 1505 0
 602 0004 0368     		ldr	r3, [r0]
 603 0006 5A68     		ldr	r2, [r3, #4]
 604 0008 12F0200F 		tst	r2, #32
 605 000c 2AD0     		beq	.L49
1507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 606              		.loc 1 1507 0
 607 000e 1A68     		ldr	r2, [r3]
 608 0010 12F0020F 		tst	r2, #2
 609 0014 26D0     		beq	.L49
1510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 610              		.loc 1 1510 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 48
=======
ARM GAS  /tmp/ccWElble.s 			page 48
>>>>>>> GameTrak


 611 0016 826A     		ldr	r2, [r0, #40]
 612 0018 12F0100F 		tst	r2, #16
 613 001c 03D1     		bne	.L50
1513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 614              		.loc 1 1513 0
 615 001e 826A     		ldr	r2, [r0, #40]
 616 0020 42F40072 		orr	r2, r2, #512
 617 0024 8262     		str	r2, [r0, #40]
 618              	.L50:
1521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 619              		.loc 1 1521 0
 620 0026 9A68     		ldr	r2, [r3, #8]
 621 0028 02F46022 		and	r2, r2, #917504
 622 002c B2F5602F 		cmp	r2, #917504
 623 0030 11D1     		bne	.L51
1522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 624              		.loc 1 1522 0 discriminator 1
 625 0032 E268     		ldr	r2, [r4, #12]
1521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 626              		.loc 1 1521 0 discriminator 1
 627 0034 7AB9     		cbnz	r2, .L51
1525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 628              		.loc 1 1525 0
 629 0036 5A68     		ldr	r2, [r3, #4]
 630 0038 22F02002 		bic	r2, r2, #32
 631 003c 5A60     		str	r2, [r3, #4]
1528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 632              		.loc 1 1528 0
 633 003e A36A     		ldr	r3, [r4, #40]
 634 0040 23F48073 		bic	r3, r3, #256
 635 0044 A362     		str	r3, [r4, #40]
1530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
 636              		.loc 1 1530 0
 637 0046 A36A     		ldr	r3, [r4, #40]
 638 0048 13F4805F 		tst	r3, #4096
 639 004c 03D1     		bne	.L51
1532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
 640              		.loc 1 1532 0
 641 004e A36A     		ldr	r3, [r4, #40]
 642 0050 43F00103 		orr	r3, r3, #1
 643 0054 A362     		str	r3, [r4, #40]
 644              	.L51:
1537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 645              		.loc 1 1537 0
 646 0056 2046     		mov	r0, r4
 647              	.LVL42:
 648 0058 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 649              	.LVL43:
1540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 650              		.loc 1 1540 0
 651 005c 2368     		ldr	r3, [r4]
 652 005e 6FF01202 		mvn	r2, #18
 653 0062 1A60     		str	r2, [r3]
 654              	.L49:
1545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 655              		.loc 1 1545 0
 656 0064 2368     		ldr	r3, [r4]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 49
=======
ARM GAS  /tmp/ccWElble.s 			page 49
>>>>>>> GameTrak


 657 0066 5A68     		ldr	r2, [r3, #4]
 658 0068 12F0800F 		tst	r2, #128
 659 006c 34D0     		beq	.L52
1547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 660              		.loc 1 1547 0
 661 006e 1A68     		ldr	r2, [r3]
 662 0070 12F0040F 		tst	r2, #4
 663 0074 30D0     		beq	.L52
1550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 664              		.loc 1 1550 0
 665 0076 A26A     		ldr	r2, [r4, #40]
 666 0078 12F0100F 		tst	r2, #16
 667 007c 03D1     		bne	.L53
1553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 668              		.loc 1 1553 0
 669 007e A26A     		ldr	r2, [r4, #40]
 670 0080 42F40052 		orr	r2, r2, #8192
 671 0084 A262     		str	r2, [r4, #40]
 672              	.L53:
1563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 673              		.loc 1 1563 0
 674 0086 9A68     		ldr	r2, [r3, #8]
 675 0088 02F4E042 		and	r2, r2, #28672
 676 008c B2F5E04F 		cmp	r2, #28672
 677 0090 0BD0     		beq	.L54
1564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 678              		.loc 1 1564 0 discriminator 1
 679 0092 5A68     		ldr	r2, [r3, #4]
1563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 680              		.loc 1 1563 0 discriminator 1
 681 0094 12F4806F 		tst	r2, #1024
 682 0098 17D1     		bne	.L55
1565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 683              		.loc 1 1565 0
 684 009a 9A68     		ldr	r2, [r3, #8]
 685 009c 02F46022 		and	r2, r2, #917504
1564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 686              		.loc 1 1564 0
 687 00a0 B2F5602F 		cmp	r2, #917504
 688 00a4 11D1     		bne	.L55
1566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 689              		.loc 1 1566 0
 690 00a6 E268     		ldr	r2, [r4, #12]
1565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 691              		.loc 1 1565 0
 692 00a8 7AB9     		cbnz	r2, .L55
 693              	.L54:
1569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 694              		.loc 1 1569 0
 695 00aa 5A68     		ldr	r2, [r3, #4]
 696 00ac 22F08002 		bic	r2, r2, #128
 697 00b0 5A60     		str	r2, [r3, #4]
1572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 698              		.loc 1 1572 0
 699 00b2 A36A     		ldr	r3, [r4, #40]
 700 00b4 23F48053 		bic	r3, r3, #4096
 701 00b8 A362     		str	r3, [r4, #40]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 50
=======
ARM GAS  /tmp/ccWElble.s 			page 50
>>>>>>> GameTrak


1574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
 702              		.loc 1 1574 0
 703 00ba A36A     		ldr	r3, [r4, #40]
 704 00bc 13F4807F 		tst	r3, #256
 705 00c0 03D1     		bne	.L55
1576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
 706              		.loc 1 1576 0
 707 00c2 A36A     		ldr	r3, [r4, #40]
 708 00c4 43F00103 		orr	r3, r3, #1
 709 00c8 A362     		str	r3, [r4, #40]
 710              	.L55:
1581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 711              		.loc 1 1581 0
 712 00ca 2046     		mov	r0, r4
 713 00cc FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 714              	.LVL44:
1584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 715              		.loc 1 1584 0
 716 00d0 2368     		ldr	r3, [r4]
 717 00d2 6FF00C02 		mvn	r2, #12
 718 00d6 1A60     		str	r2, [r3]
 719              	.L52:
1589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 720              		.loc 1 1589 0
 721 00d8 2368     		ldr	r3, [r4]
 722 00da 5A68     		ldr	r2, [r3, #4]
 723 00dc 12F0400F 		tst	r2, #64
 724 00e0 0ED0     		beq	.L48
1591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 725              		.loc 1 1591 0
 726 00e2 1B68     		ldr	r3, [r3]
 727 00e4 13F0010F 		tst	r3, #1
 728 00e8 0AD0     		beq	.L48
1594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 729              		.loc 1 1594 0
 730 00ea A36A     		ldr	r3, [r4, #40]
 731 00ec 43F48033 		orr	r3, r3, #65536
 732 00f0 A362     		str	r3, [r4, #40]
1597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 733              		.loc 1 1597 0
 734 00f2 2046     		mov	r0, r4
 735 00f4 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 736              	.LVL45:
1600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 737              		.loc 1 1600 0
 738 00f8 2368     		ldr	r3, [r4]
 739 00fa 6FF00102 		mvn	r2, #1
 740 00fe 1A60     		str	r2, [r3]
 741              	.L48:
 742 0100 10BD     		pop	{r4, pc}
 743              		.cfi_endproc
 744              	.LFE77:
 746 0102 00BF     		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 747              		.align	2
 748              		.weak	HAL_ADC_ErrorCallback
 749              		.thumb
 750              		.thumb_func
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 51
=======
ARM GAS  /tmp/ccWElble.s 			page 51
>>>>>>> GameTrak


 752              	HAL_ADC_ErrorCallback:
 753              	.LFB81:
1655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 754              		.loc 1 1655 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 759              	.LVL46:
 760 0000 7047     		bx	lr
 761              		.cfi_endproc
 762              	.LFE81:
 764 0002 00BF     		.section	.text.ADC_DMAError,"ax",%progbits
 765              		.align	2
 766              		.global	ADC_DMAError
 767              		.thumb
 768              		.thumb_func
 770              	ADC_DMAError:
 771              	.LFB90:
2077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
2078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA error callback 
2081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 772              		.loc 1 2085 0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 776              	.LVL47:
 777              		.loc 1 2085 0
 778 0000 08B5     		push	{r3, lr}
 779              	.LCFI7:
 780              		.cfi_def_cfa_offset 8
 781              		.cfi_offset 3, -8
 782              		.cfi_offset 14, -4
2086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 783              		.loc 1 2087 0
 784 0002 406A     		ldr	r0, [r0, #36]
 785              	.LVL48:
2088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
2090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 786              		.loc 1 2090 0
 787 0004 836A     		ldr	r3, [r0, #40]
 788 0006 43F04003 		orr	r3, r3, #64
 789 000a 8362     		str	r3, [r0, #40]
2091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 790              		.loc 1 2093 0
 791 000c C36A     		ldr	r3, [r0, #44]
 792 000e 43F00403 		orr	r3, r3, #4
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 52
=======
ARM GAS  /tmp/ccWElble.s 			page 52
>>>>>>> GameTrak


 793 0012 C362     		str	r3, [r0, #44]
2094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Error callback */
2096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 794              		.loc 1 2096 0
 795 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 796              	.LVL49:
 797 0018 08BD     		pop	{r3, pc}
 798              		.cfi_endproc
 799              	.LFE90:
 801 001a 00BF     		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 802              		.align	2
 803              		.global	HAL_ADC_ConfigChannel
 804              		.thumb
 805              		.thumb_func
 807              	HAL_ADC_ConfigChannel:
 808              	.LFB82:
1703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 809              		.loc 1 1703 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 8
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              		@ link register save eliminated.
 814              	.LVL50:
 815 0000 F0B4     		push	{r4, r5, r6, r7}
 816              	.LCFI8:
 817              		.cfi_def_cfa_offset 16
 818              		.cfi_offset 4, -16
 819              		.cfi_offset 5, -12
 820              		.cfi_offset 6, -8
 821              		.cfi_offset 7, -4
 822 0002 82B0     		sub	sp, sp, #8
 823              	.LCFI9:
 824              		.cfi_def_cfa_offset 24
 825              	.LVL51:
1705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 826              		.loc 1 1705 0
 827 0004 0023     		movs	r3, #0
 828 0006 0193     		str	r3, [sp, #4]
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 829              		.loc 1 1714 0
 830 0008 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 831 000c 012B     		cmp	r3, #1
 832 000e 00F0C780 		beq	.L72
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 833              		.loc 1 1714 0 is_stmt 0 discriminator 2
 834 0012 0123     		movs	r3, #1
 835 0014 80F82430 		strb	r3, [r0, #36]
1719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 836              		.loc 1 1719 0 is_stmt 1 discriminator 2
 837 0018 4B68     		ldr	r3, [r1, #4]
 838 001a 062B     		cmp	r3, #6
 839 001c 1BD8     		bhi	.L63
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
 840              		.loc 1 1721 0
 841 001e 0668     		ldr	r6, [r0]
 842 0020 756B     		ldr	r5, [r6, #52]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 53
=======
ARM GAS  /tmp/ccWElble.s 			page 53
>>>>>>> GameTrak


 843              	.LVL52:
 844              	.LBB28:
 845              	.LBB29:
 846              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 54
=======
ARM GAS  /tmp/ccWElble.s 			page 54
>>>>>>> GameTrak


  54:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 55
=======
ARM GAS  /tmp/ccWElble.s 			page 55
>>>>>>> GameTrak


 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 56
=======
ARM GAS  /tmp/ccWElble.s 			page 56
>>>>>>> GameTrak


 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 57
=======
ARM GAS  /tmp/ccWElble.s 			page 57
>>>>>>> GameTrak


 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 58
=======
ARM GAS  /tmp/ccWElble.s 			page 58
>>>>>>> GameTrak


 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 59
=======
ARM GAS  /tmp/ccWElble.s 			page 59
>>>>>>> GameTrak


 339:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:./Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 60
=======
ARM GAS  /tmp/ccWElble.s 			page 60
>>>>>>> GameTrak


 396:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:./Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:./Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:./Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:./Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 61
=======
ARM GAS  /tmp/ccWElble.s 			page 61
>>>>>>> GameTrak


 453:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:./Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 62
=======
ARM GAS  /tmp/ccWElble.s 			page 62
>>>>>>> GameTrak


 510:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:./Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 847              		.loc 2 531 0
 848 0022 4FF47872 		mov	r2, #992
 849              		.syntax unified
 850              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 851 0026 92FAA2F4 		rbit r4, r2
 852              	@ 0 "" 2
 853              	.LVL53:
 854              		.thumb
 855              		.syntax unified
 856              	.LBE29:
 857              	.LBE28:
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
 858              		.loc 1 1721 0
 859 002a B4FA84F4 		clz	r4, r4
 860 002e 013B     		subs	r3, r3, #1
 861 0030 03FB04F4 		mul	r4, r3, r4
 862 0034 1F27     		movs	r7, #31
 863 0036 07FA04F4 		lsl	r4, r7, r4
 864 003a 25EA0404 		bic	r4, r5, r4
 865 003e 0D68     		ldr	r5, [r1]
 866              	.LVL54:
 867              	.LBB30:
 868              	.LBB31:
 869              		.loc 2 531 0
 870              		.syntax unified
 871              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 872 0040 92FAA2F2 		rbit r2, r2
 873              	@ 0 "" 2
 874              	.LVL55:
 875              		.thumb
 876              		.syntax unified
 877              	.LBE31:
 878              	.LBE30:
1721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
 879              		.loc 1 1721 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 63
=======
ARM GAS  /tmp/ccWElble.s 			page 63
>>>>>>> GameTrak


 880 0044 B2FA82F2 		clz	r2, r2
 881 0048 03FB02F2 		mul	r2, r3, r2
 882 004c 05FA02F2 		lsl	r2, r5, r2
 883 0050 2243     		orrs	r2, r2, r4
 884 0052 7263     		str	r2, [r6, #52]
 885 0054 37E0     		b	.L64
 886              	.L63:
1726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 887              		.loc 1 1726 0
 888 0056 0C2B     		cmp	r3, #12
 889 0058 1AD8     		bhi	.L65
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
 890              		.loc 1 1728 0
 891 005a 0668     		ldr	r6, [r0]
 892 005c 376B     		ldr	r7, [r6, #48]
 893              	.LVL56:
 894              	.LBB32:
 895              	.LBB33:
 896              		.loc 2 531 0
 897 005e 4FF47872 		mov	r2, #992
 898              		.syntax unified
 899              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 900 0062 92FAA2F5 		rbit r5, r2
 901              	@ 0 "" 2
 902              	.LVL57:
 903              		.thumb
 904              		.syntax unified
 905              	.LBE33:
 906              	.LBE32:
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
 907              		.loc 1 1728 0
 908 0066 B5FA85F5 		clz	r5, r5
 909 006a 073B     		subs	r3, r3, #7
 910 006c 03FB05F5 		mul	r5, r3, r5
 911 0070 1F24     		movs	r4, #31
 912 0072 04FA05F5 		lsl	r5, r4, r5
 913 0076 27EA0505 		bic	r5, r7, r5
 914 007a 0C68     		ldr	r4, [r1]
 915              	.LVL58:
 916              	.LBB34:
 917              	.LBB35:
 918              		.loc 2 531 0
 919              		.syntax unified
 920              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 921 007c 92FAA2F2 		rbit r2, r2
 922              	@ 0 "" 2
 923              	.LVL59:
 924              		.thumb
 925              		.syntax unified
 926              	.LBE35:
 927              	.LBE34:
1728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
 928              		.loc 1 1728 0
 929 0080 B2FA82F2 		clz	r2, r2
 930 0084 03FB02F3 		mul	r3, r3, r2
 931 0088 9C40     		lsls	r4, r4, r3
 932 008a 2C43     		orrs	r4, r4, r5
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 64
=======
ARM GAS  /tmp/ccWElble.s 			page 64
>>>>>>> GameTrak


 933 008c 3463     		str	r4, [r6, #48]
 934 008e 1AE0     		b	.L64
 935              	.L65:
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
 936              		.loc 1 1735 0
 937 0090 0668     		ldr	r6, [r0]
 938 0092 F46A     		ldr	r4, [r6, #44]
 939              	.LVL60:
 940              	.LBB36:
 941              	.LBB37:
 942              		.loc 2 531 0
 943 0094 4FF47872 		mov	r2, #992
 944              		.syntax unified
 945              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 946 0098 92FAA2F5 		rbit r5, r2
 947              	@ 0 "" 2
 948              	.LVL61:
 949              		.thumb
 950              		.syntax unified
 951              	.LBE37:
 952              	.LBE36:
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
 953              		.loc 1 1735 0
 954 009c B5FA85F5 		clz	r5, r5
 955 00a0 0D3B     		subs	r3, r3, #13
 956 00a2 03FB05F5 		mul	r5, r3, r5
 957 00a6 1F27     		movs	r7, #31
 958 00a8 07FA05F5 		lsl	r5, r7, r5
 959 00ac 24EA0505 		bic	r5, r4, r5
 960 00b0 0C68     		ldr	r4, [r1]
 961              	.LVL62:
 962              	.LBB38:
 963              	.LBB39:
 964              		.loc 2 531 0
 965              		.syntax unified
 966              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 967 00b2 92FAA2F2 		rbit r2, r2
 968              	@ 0 "" 2
 969              	.LVL63:
 970              		.thumb
 971              		.syntax unified
 972              	.LBE39:
 973              	.LBE38:
1735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
 974              		.loc 1 1735 0
 975 00b6 B2FA82F2 		clz	r2, r2
 976 00ba 03FB02F3 		mul	r3, r3, r2
 977 00be 04FA03F3 		lsl	r3, r4, r3
 978 00c2 2B43     		orrs	r3, r3, r5
 979 00c4 F362     		str	r3, [r6, #44]
 980              	.L64:
1743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 981              		.loc 1 1743 0
 982 00c6 0D68     		ldr	r5, [r1]
 983 00c8 092D     		cmp	r5, #9
 984 00ca 1BD9     		bls	.L66
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 65
=======
ARM GAS  /tmp/ccWElble.s 			page 65
>>>>>>> GameTrak


 985              		.loc 1 1745 0
 986 00cc 0668     		ldr	r6, [r0]
 987 00ce F768     		ldr	r7, [r6, #12]
 988              	.LVL64:
 989              	.LBB40:
 990              	.LBB41:
 991              		.loc 2 531 0
 992 00d0 3822     		movs	r2, #56
 993              		.syntax unified
 994              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 995 00d2 92FAA2F4 		rbit r4, r2
 996              	@ 0 "" 2
 997              	.LVL65:
 998              		.thumb
 999              		.syntax unified
 1000              	.LBE41:
 1001              	.LBE40:
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
 1002              		.loc 1 1745 0
 1003 00d6 B4FA84F4 		clz	r4, r4
 1004 00da A5F10A03 		sub	r3, r5, #10
 1005 00de 03FB04F4 		mul	r4, r3, r4
 1006 00e2 0725     		movs	r5, #7
 1007 00e4 05FA04F4 		lsl	r4, r5, r4
 1008 00e8 27EA0404 		bic	r4, r7, r4
 1009 00ec 8D68     		ldr	r5, [r1, #8]
 1010              	.LVL66:
 1011              	.LBB42:
 1012              	.LBB43:
 1013              		.loc 2 531 0
 1014              		.syntax unified
 1015              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1016 00ee 92FAA2F2 		rbit r2, r2
 1017              	@ 0 "" 2
 1018              	.LVL67:
 1019              		.thumb
 1020              		.syntax unified
 1021              	.LBE43:
 1022              	.LBE42:
1745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
 1023              		.loc 1 1745 0
 1024 00f2 B2FA82F2 		clz	r2, r2
 1025 00f6 03FB02F3 		mul	r3, r3, r2
 1026 00fa 05FA03F2 		lsl	r2, r5, r3
 1027 00fe 2243     		orrs	r2, r2, r4
 1028 0100 F260     		str	r2, [r6, #12]
 1029 0102 18E0     		b	.L67
 1030              	.L66:
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
 1031              		.loc 1 1751 0
 1032 0104 0768     		ldr	r7, [r0]
 1033 0106 3E69     		ldr	r6, [r7, #16]
 1034              	.LVL68:
 1035              	.LBB44:
 1036              	.LBB45:
 1037              		.loc 2 531 0
 1038 0108 3822     		movs	r2, #56
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 66
=======
ARM GAS  /tmp/ccWElble.s 			page 66
>>>>>>> GameTrak


 1039              		.syntax unified
 1040              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1041 010a 92FAA2F4 		rbit r4, r2
 1042              	@ 0 "" 2
 1043              	.LVL69:
 1044              		.thumb
 1045              		.syntax unified
 1046              	.LBE45:
 1047              	.LBE44:
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
 1048              		.loc 1 1751 0
 1049 010e B4FA84F4 		clz	r4, r4
 1050 0112 05FB04F4 		mul	r4, r5, r4
 1051 0116 0723     		movs	r3, #7
 1052 0118 03FA04F4 		lsl	r4, r3, r4
 1053 011c 26EA0404 		bic	r4, r6, r4
 1054 0120 8E68     		ldr	r6, [r1, #8]
 1055              	.LVL70:
 1056              	.LBB46:
 1057              	.LBB47:
 1058              		.loc 2 531 0
 1059              		.syntax unified
 1060              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1061 0122 92FAA2F2 		rbit r2, r2
 1062              	@ 0 "" 2
 1063              	.LVL71:
 1064              		.thumb
 1065              		.syntax unified
 1066              	.LBE47:
 1067              	.LBE46:
1751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
 1068              		.loc 1 1751 0
 1069 0126 B2FA82F2 		clz	r2, r2
 1070 012a 05FB02F3 		mul	r3, r5, r2
 1071 012e 06FA03F3 		lsl	r3, r6, r3
 1072 0132 2343     		orrs	r3, r3, r4
 1073 0134 3B61     		str	r3, [r7, #16]
 1074              	.L67:
1758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 1075              		.loc 1 1758 0
 1076 0136 0B68     		ldr	r3, [r1]
 1077 0138 103B     		subs	r3, r3, #16
 1078 013a 012B     		cmp	r3, #1
 1079 013c 26D8     		bhi	.L73
1764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1080              		.loc 1 1764 0
 1081 013e 0368     		ldr	r3, [r0]
 1082 0140 194A     		ldr	r2, .L77
 1083 0142 9342     		cmp	r3, r2
 1084 0144 1CD1     		bne	.L69
1766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1085              		.loc 1 1766 0
 1086 0146 9A68     		ldr	r2, [r3, #8]
 1087 0148 12F4000F 		tst	r2, #8388608
 1088 014c 20D1     		bne	.L74
1768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 1089              		.loc 1 1768 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 67
=======
ARM GAS  /tmp/ccWElble.s 			page 67
>>>>>>> GameTrak


 1090 014e 9A68     		ldr	r2, [r3, #8]
 1091 0150 42F40002 		orr	r2, r2, #8388608
 1092 0154 9A60     		str	r2, [r3, #8]
1770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
 1093              		.loc 1 1770 0
 1094 0156 0B68     		ldr	r3, [r1]
 1095 0158 102B     		cmp	r3, #16
 1096 015a 1BD1     		bne	.L75
1774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0)
 1097              		.loc 1 1774 0
 1098 015c 134B     		ldr	r3, .L77+4
 1099 015e 1B68     		ldr	r3, [r3]
 1100 0160 134A     		ldr	r2, .L77+8
 1101 0162 A2FB0323 		umull	r2, r3, r2, r3
 1102 0166 9B0C     		lsrs	r3, r3, #18
 1103 0168 03EB8303 		add	r3, r3, r3, lsl #2
 1104 016c 5A00     		lsls	r2, r3, #1
 1105 016e 0192     		str	r2, [sp, #4]
1775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
 1106              		.loc 1 1775 0
 1107 0170 02E0     		b	.L70
 1108              	.L71:
1777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
 1109              		.loc 1 1777 0
 1110 0172 019B     		ldr	r3, [sp, #4]
 1111 0174 013B     		subs	r3, r3, #1
 1112 0176 0193     		str	r3, [sp, #4]
 1113              	.L70:
1775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
 1114              		.loc 1 1775 0
 1115 0178 019B     		ldr	r3, [sp, #4]
 1116 017a 002B     		cmp	r3, #0
 1117 017c F9D1     		bne	.L71
 1118 017e 0AE0     		b	.L68
 1119              	.L69:
1785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1120              		.loc 1 1785 0
 1121 0180 836A     		ldr	r3, [r0, #40]
 1122 0182 43F02003 		orr	r3, r3, #32
 1123 0186 8362     		str	r3, [r0, #40]
 1124              	.LVL72:
1787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1125              		.loc 1 1787 0
 1126 0188 0123     		movs	r3, #1
 1127 018a 04E0     		b	.L68
 1128              	.LVL73:
 1129              	.L73:
1704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 1130              		.loc 1 1704 0
 1131 018c 0023     		movs	r3, #0
 1132 018e 02E0     		b	.L68
 1133              	.L74:
 1134 0190 0023     		movs	r3, #0
 1135 0192 00E0     		b	.L68
 1136              	.L75:
 1137 0194 0023     		movs	r3, #0
 1138              	.LVL74:
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 68
=======
ARM GAS  /tmp/ccWElble.s 			page 68
>>>>>>> GameTrak


 1139              	.L68:
1792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1140              		.loc 1 1792 0
 1141 0196 0022     		movs	r2, #0
 1142 0198 80F82420 		strb	r2, [r0, #36]
1795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1143              		.loc 1 1795 0
 1144 019c 1846     		mov	r0, r3
 1145              	.LVL75:
 1146 019e 00E0     		b	.L62
 1147              	.LVL76:
 1148              	.L72:
1714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1149              		.loc 1 1714 0
 1150 01a0 0220     		movs	r0, #2
 1151              	.LVL77:
 1152              	.L62:
1796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1153              		.loc 1 1796 0
 1154 01a2 02B0     		add	sp, sp, #8
 1155              	.LCFI10:
 1156              		.cfi_def_cfa_offset 16
 1157              		@ sp needed
 1158 01a4 F0BC     		pop	{r4, r5, r6, r7}
 1159              	.LCFI11:
 1160              		.cfi_restore 7
 1161              		.cfi_restore 6
 1162              		.cfi_restore 5
 1163              		.cfi_restore 4
 1164              		.cfi_def_cfa_offset 0
 1165 01a6 7047     		bx	lr
 1166              	.L78:
 1167              		.align	2
 1168              	.L77:
 1169 01a8 00240140 		.word	1073816576
 1170 01ac 00000000 		.word	SystemCoreClock
 1171 01b0 83DE1B43 		.word	1125899907
 1172              		.cfi_endproc
 1173              	.LFE82:
 1175              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 1176              		.align	2
 1177              		.global	HAL_ADC_AnalogWDGConfig
 1178              		.thumb
 1179              		.thumb_func
 1181              	HAL_ADC_AnalogWDGConfig:
 1182              	.LFB83:
1813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 1183              		.loc 1 1813 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              		@ link register save eliminated.
 1188              	.LVL78:
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1189              		.loc 1 1829 0
 1190 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1191 0004 012B     		cmp	r3, #1
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 69
=======
ARM GAS  /tmp/ccWElble.s 			page 69
>>>>>>> GameTrak


 1192 0006 25D0     		beq	.L83
1813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 1193              		.loc 1 1813 0 discriminator 2
 1194 0008 30B4     		push	{r4, r5}
 1195              	.LCFI12:
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 4, -8
 1198              		.cfi_offset 5, -4
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1199              		.loc 1 1829 0 discriminator 2
 1200 000a 0123     		movs	r3, #1
 1201 000c 80F82430 		strb	r3, [r0, #36]
1834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1202              		.loc 1 1834 0 discriminator 2
 1203 0010 8B68     		ldr	r3, [r1, #8]
 1204 0012 012B     		cmp	r3, #1
 1205 0014 05D1     		bne	.L81
1837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1206              		.loc 1 1837 0
 1207 0016 0268     		ldr	r2, [r0]
 1208 0018 5368     		ldr	r3, [r2, #4]
 1209 001a 43F04003 		orr	r3, r3, #64
 1210 001e 5360     		str	r3, [r2, #4]
 1211 0020 04E0     		b	.L82
 1212              	.L81:
1842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1213              		.loc 1 1842 0
 1214 0022 0268     		ldr	r2, [r0]
 1215 0024 5368     		ldr	r3, [r2, #4]
 1216 0026 23F04003 		bic	r3, r3, #64
 1217 002a 5360     		str	r3, [r2, #4]
 1218              	.L82:
1850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
 1219              		.loc 1 1850 0
 1220 002c 0468     		ldr	r4, [r0]
 1221 002e 6368     		ldr	r3, [r4, #4]
 1222 0030 0A4A     		ldr	r2, .L86
 1223 0032 1A40     		ands	r2, r2, r3
 1224 0034 0D68     		ldr	r5, [r1]
 1225 0036 4B68     		ldr	r3, [r1, #4]
 1226 0038 2B43     		orrs	r3, r3, r5
 1227 003a 1343     		orrs	r3, r3, r2
 1228 003c 6360     		str	r3, [r4, #4]
1859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1229              		.loc 1 1859 0
 1230 003e 0368     		ldr	r3, [r0]
 1231 0040 CA68     		ldr	r2, [r1, #12]
 1232 0042 5A62     		str	r2, [r3, #36]
1862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1233              		.loc 1 1862 0
 1234 0044 0368     		ldr	r3, [r0]
 1235 0046 0A69     		ldr	r2, [r1, #16]
 1236 0048 9A62     		str	r2, [r3, #40]
1865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1237              		.loc 1 1865 0
 1238 004a 0023     		movs	r3, #0
 1239 004c 80F82430 		strb	r3, [r0, #36]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 70
=======
ARM GAS  /tmp/ccWElble.s 			page 70
>>>>>>> GameTrak


1868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1240              		.loc 1 1868 0
 1241 0050 1846     		mov	r0, r3
 1242              	.LVL79:
 1243 0052 01E0     		b	.L80
 1244              	.LVL80:
 1245              	.L83:
 1246              	.LCFI13:
 1247              		.cfi_def_cfa_offset 0
 1248              		.cfi_restore 4
 1249              		.cfi_restore 5
1829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1250              		.loc 1 1829 0
 1251 0054 0220     		movs	r0, #2
 1252              	.LVL81:
 1253 0056 7047     		bx	lr
 1254              	.L80:
 1255              	.LCFI14:
 1256              		.cfi_def_cfa_offset 8
 1257              		.cfi_offset 4, -8
 1258              		.cfi_offset 5, -4
1869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1259              		.loc 1 1869 0
 1260 0058 30BC     		pop	{r4, r5}
 1261              	.LCFI15:
 1262              		.cfi_restore 5
 1263              		.cfi_restore 4
 1264              		.cfi_def_cfa_offset 0
 1265 005a 7047     		bx	lr
 1266              	.L87:
 1267              		.align	2
 1268              	.L86:
 1269 005c E0FD3FFF 		.word	-12583456
 1270              		.cfi_endproc
 1271              	.LFE83:
 1273              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 1274              		.align	2
 1275              		.global	HAL_ADC_GetState
 1276              		.thumb
 1277              		.thumb_func
 1279              	HAL_ADC_GetState:
 1280              	.LFB84:
1900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
 1281              		.loc 1 1900 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 1285              		@ link register save eliminated.
 1286              	.LVL82:
1902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1287              		.loc 1 1902 0
 1288 0000 806A     		ldr	r0, [r0, #40]
 1289              	.LVL83:
1903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1290              		.loc 1 1903 0
 1291 0002 7047     		bx	lr
 1292              		.cfi_endproc
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 71
=======
ARM GAS  /tmp/ccWElble.s 			page 71
>>>>>>> GameTrak


 1293              	.LFE84:
 1295              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 1296              		.align	2
 1297              		.global	HAL_ADC_GetError
 1298              		.thumb
 1299              		.thumb_func
 1301              	HAL_ADC_GetError:
 1302              	.LFB85:
1911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
 1303              		.loc 1 1911 0
 1304              		.cfi_startproc
 1305              		@ args = 0, pretend = 0, frame = 0
 1306              		@ frame_needed = 0, uses_anonymous_args = 0
 1307              		@ link register save eliminated.
 1308              	.LVL84:
1912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1309              		.loc 1 1912 0
 1310 0000 C06A     		ldr	r0, [r0, #44]
 1311              	.LVL85:
1913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1312              		.loc 1 1913 0
 1313 0002 7047     		bx	lr
 1314              		.cfi_endproc
 1315              	.LFE85:
 1317              		.section	.text.ADC_Enable,"ax",%progbits
 1318              		.align	2
 1319              		.global	ADC_Enable
 1320              		.thumb
 1321              		.thumb_func
 1323              	ADC_Enable:
 1324              	.LFB86:
1935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 1325              		.loc 1 1935 0
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 8
 1328              		@ frame_needed = 0, uses_anonymous_args = 0
 1329              	.LVL86:
 1330 0000 30B5     		push	{r4, r5, lr}
 1331              	.LCFI16:
 1332              		.cfi_def_cfa_offset 12
 1333              		.cfi_offset 4, -12
 1334              		.cfi_offset 5, -8
 1335              		.cfi_offset 14, -4
 1336 0002 83B0     		sub	sp, sp, #12
 1337              	.LCFI17:
 1338              		.cfi_def_cfa_offset 24
 1339              	.LVL87:
1937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1340              		.loc 1 1937 0
 1341 0004 0023     		movs	r3, #0
 1342 0006 0193     		str	r3, [sp, #4]
1943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1343              		.loc 1 1943 0
 1344 0008 0368     		ldr	r3, [r0]
 1345 000a 9A68     		ldr	r2, [r3, #8]
 1346 000c 12F0010F 		tst	r2, #1
 1347 0010 2FD1     		bne	.L96
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 72
=======
ARM GAS  /tmp/ccWElble.s 			page 72
>>>>>>> GameTrak


1946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1348              		.loc 1 1946 0
 1349 0012 9A68     		ldr	r2, [r3, #8]
 1350 0014 42F00102 		orr	r2, r2, #1
 1351 0018 9A60     		str	r2, [r3, #8]
1950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0)
 1352              		.loc 1 1950 0
 1353 001a 174B     		ldr	r3, .L98
 1354 001c 1B68     		ldr	r3, [r3]
 1355 001e 174A     		ldr	r2, .L98+4
 1356 0020 A2FB0323 		umull	r2, r3, r2, r3
 1357 0024 9B0C     		lsrs	r3, r3, #18
 1358 0026 0193     		str	r3, [sp, #4]
1951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1359              		.loc 1 1951 0
 1360 0028 02E0     		b	.L92
 1361              	.L93:
1953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1362              		.loc 1 1953 0
 1363 002a 019B     		ldr	r3, [sp, #4]
 1364 002c 013B     		subs	r3, r3, #1
 1365 002e 0193     		str	r3, [sp, #4]
 1366              	.L92:
1951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1367              		.loc 1 1951 0
 1368 0030 019B     		ldr	r3, [sp, #4]
 1369 0032 002B     		cmp	r3, #0
 1370 0034 F9D1     		bne	.L93
 1371 0036 0446     		mov	r4, r0
1957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1372              		.loc 1 1957 0
 1373 0038 FFF7FEFF 		bl	HAL_GetTick
 1374              	.LVL88:
 1375 003c 0546     		mov	r5, r0
 1376              	.LVL89:
1960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1377              		.loc 1 1960 0
 1378 003e 11E0     		b	.L94
 1379              	.LVL90:
 1380              	.L95:
1962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1381              		.loc 1 1962 0
 1382 0040 FFF7FEFF 		bl	HAL_GetTick
 1383              	.LVL91:
 1384 0044 401B     		subs	r0, r0, r5
 1385 0046 0228     		cmp	r0, #2
 1386 0048 0CD9     		bls	.L94
1965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1387              		.loc 1 1965 0
 1388 004a A36A     		ldr	r3, [r4, #40]
 1389 004c 43F01003 		orr	r3, r3, #16
 1390 0050 A362     		str	r3, [r4, #40]
1968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 1391              		.loc 1 1968 0
 1392 0052 E36A     		ldr	r3, [r4, #44]
 1393 0054 43F00103 		orr	r3, r3, #1
 1394 0058 E362     		str	r3, [r4, #44]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 73
=======
ARM GAS  /tmp/ccWElble.s 			page 73
>>>>>>> GameTrak


1971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1395              		.loc 1 1971 0
 1396 005a 0023     		movs	r3, #0
 1397 005c 84F82430 		strb	r3, [r4, #36]
1973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1398              		.loc 1 1973 0
 1399 0060 0120     		movs	r0, #1
 1400 0062 07E0     		b	.L91
 1401              	.L94:
1960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1402              		.loc 1 1960 0
 1403 0064 2368     		ldr	r3, [r4]
 1404 0066 9B68     		ldr	r3, [r3, #8]
 1405 0068 13F0010F 		tst	r3, #1
 1406 006c E8D0     		beq	.L95
1979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1407              		.loc 1 1979 0
 1408 006e 0020     		movs	r0, #0
 1409 0070 00E0     		b	.L91
 1410              	.LVL92:
 1411              	.L96:
 1412 0072 0020     		movs	r0, #0
 1413              	.LVL93:
 1414              	.L91:
1980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1415              		.loc 1 1980 0
 1416 0074 03B0     		add	sp, sp, #12
 1417              	.LCFI18:
 1418              		.cfi_def_cfa_offset 12
 1419              		@ sp needed
 1420 0076 30BD     		pop	{r4, r5, pc}
 1421              	.L99:
 1422              		.align	2
 1423              	.L98:
 1424 0078 00000000 		.word	SystemCoreClock
 1425 007c 83DE1B43 		.word	1125899907
 1426              		.cfi_endproc
 1427              	.LFE86:
 1429              		.section	.text.HAL_ADC_Start,"ax",%progbits
 1430              		.align	2
 1431              		.global	HAL_ADC_Start
 1432              		.thumb
 1433              		.thumb_func
 1435              	HAL_ADC_Start:
 1436              	.LFB68:
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1437              		.loc 1 769 0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 0
 1440              		@ frame_needed = 0, uses_anonymous_args = 0
 1441              	.LVL94:
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 1442              		.loc 1 776 0
 1443 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1444 0004 012B     		cmp	r3, #1
 1445 0006 71D0     		beq	.L111
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 74
=======
ARM GAS  /tmp/ccWElble.s 			page 74
>>>>>>> GameTrak


 1446              		.loc 1 769 0 discriminator 2
 1447 0008 10B5     		push	{r4, lr}
 1448              	.LCFI19:
 1449              		.cfi_def_cfa_offset 8
 1450              		.cfi_offset 4, -8
 1451              		.cfi_offset 14, -4
 1452 000a 0446     		mov	r4, r0
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
 1453              		.loc 1 776 0 discriminator 2
 1454 000c 0123     		movs	r3, #1
 1455 000e 80F82430 		strb	r3, [r0, #36]
 779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1456              		.loc 1 779 0 discriminator 2
 1457 0012 FFF7FEFF 		bl	ADC_Enable
 1458              	.LVL95:
 782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1459              		.loc 1 782 0 discriminator 2
 1460 0016 0346     		mov	r3, r0
 1461 0018 0028     		cmp	r0, #0
 1462 001a 63D1     		bne	.L102
 787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
 1463              		.loc 1 787 0
 1464 001c A26A     		ldr	r2, [r4, #40]
 1465 001e 22F44072 		bic	r2, r2, #768
 1466 0022 22F00102 		bic	r2, r2, #1
 1467 0026 42F48072 		orr	r2, r2, #256
 1468 002a A262     		str	r2, [r4, #40]
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1469              		.loc 1 794 0
 1470 002c 2268     		ldr	r2, [r4]
 1471 002e 3049     		ldr	r1, .L114
 1472 0030 8A42     		cmp	r2, r1
 1473 0032 05D1     		bne	.L103
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1474              		.loc 1 794 0 is_stmt 0 discriminator 1
 1475 0034 A1F58061 		sub	r1, r1, #1024
 1476 0038 4968     		ldr	r1, [r1, #4]
 1477 003a 11F4702F 		tst	r1, #983040
 1478 003e 0ED1     		bne	.L104
 1479              	.L103:
 797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1480              		.loc 1 797 0 is_stmt 1
 1481 0040 A16A     		ldr	r1, [r4, #40]
 1482 0042 21F48011 		bic	r1, r1, #1048576
 1483 0046 A162     		str	r1, [r4, #40]
 801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1484              		.loc 1 801 0
 1485 0048 5168     		ldr	r1, [r2, #4]
 1486 004a 11F4806F 		tst	r1, #1024
 1487 004e 1CD0     		beq	.L105
 803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1488              		.loc 1 803 0
 1489 0050 A16A     		ldr	r1, [r4, #40]
 1490 0052 21F44051 		bic	r1, r1, #12288
 1491 0056 41F48051 		orr	r1, r1, #4096
 1492 005a A162     		str	r1, [r4, #40]
 1493 005c 15E0     		b	.L105
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 75
=======
ARM GAS  /tmp/ccWElble.s 			page 75
>>>>>>> GameTrak


 1494              	.L104:
 809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1495              		.loc 1 809 0
 1496 005e A16A     		ldr	r1, [r4, #40]
 1497 0060 41F48011 		orr	r1, r1, #1048576
 1498 0064 A162     		str	r1, [r4, #40]
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1499              		.loc 1 813 0
 1500 0066 2349     		ldr	r1, .L114+4
 1501 0068 8A42     		cmp	r2, r1
 1502 006a 03D0     		beq	.L106
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1503              		.loc 1 813 0 is_stmt 0 discriminator 2
 1504 006c 01F58061 		add	r1, r1, #1024
 1505 0070 8A42     		cmp	r2, r1
 1506 0072 0AD1     		bne	.L105
 1507              	.L106:
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1508              		.loc 1 813 0 discriminator 3
 1509 0074 1F49     		ldr	r1, .L114+4
 1510 0076 4968     		ldr	r1, [r1, #4]
 1511 0078 11F4806F 		tst	r1, #1024
 1512 007c 05D0     		beq	.L105
 815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1513              		.loc 1 815 0 is_stmt 1
 1514 007e A16A     		ldr	r1, [r4, #40]
 1515 0080 21F44051 		bic	r1, r1, #12288
 1516 0084 41F48051 		orr	r1, r1, #4096
 1517 0088 A162     		str	r1, [r4, #40]
 1518              	.L105:
 820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1519              		.loc 1 820 0
 1520 008a A16A     		ldr	r1, [r4, #40]
 1521 008c 11F4805F 		tst	r1, #4096
 1522 0090 04D0     		beq	.L107
 823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1523              		.loc 1 823 0
 1524 0092 E16A     		ldr	r1, [r4, #44]
 1525 0094 21F00601 		bic	r1, r1, #6
 1526 0098 E162     		str	r1, [r4, #44]
 1527 009a 01E0     		b	.L108
 1528              	.L107:
 828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1529              		.loc 1 828 0
 1530 009c 0021     		movs	r1, #0
 1531 009e E162     		str	r1, [r4, #44]
 1532              	.L108:
 834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1533              		.loc 1 834 0
 1534 00a0 0021     		movs	r1, #0
 1535 00a2 84F82410 		strb	r1, [r4, #36]
 838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1536              		.loc 1 838 0
 1537 00a6 6FF00201 		mvn	r1, #2
 1538 00aa 1160     		str	r1, [r2]
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1539              		.loc 1 850 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 76
=======
ARM GAS  /tmp/ccWElble.s 			page 76
>>>>>>> GameTrak


 1540 00ac 2268     		ldr	r2, [r4]
 1541 00ae 9168     		ldr	r1, [r2, #8]
 1542 00b0 01F46021 		and	r1, r1, #917504
 1543 00b4 B1F5602F 		cmp	r1, #917504
 1544 00b8 0ED1     		bne	.L109
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1545              		.loc 1 850 0 is_stmt 0 discriminator 1
 1546 00ba 0D49     		ldr	r1, .L114
 1547 00bc 8A42     		cmp	r2, r1
 1548 00be 05D1     		bne	.L110
 851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1549              		.loc 1 851 0 is_stmt 1 discriminator 2
 1550 00c0 A1F58061 		sub	r1, r1, #1024
 1551 00c4 4968     		ldr	r1, [r1, #4]
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1552              		.loc 1 850 0 discriminator 2
 1553 00c6 11F4702F 		tst	r1, #983040
 1554 00ca 05D1     		bne	.L109
 1555              	.L110:
 854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1556              		.loc 1 854 0
 1557 00cc 9168     		ldr	r1, [r2, #8]
 1558 00ce 41F4A001 		orr	r1, r1, #5242880
 1559 00d2 9160     		str	r1, [r2, #8]
 869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1560              		.loc 1 869 0
 1561 00d4 1846     		mov	r0, r3
 1562              	.LVL96:
 854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1563              		.loc 1 854 0
 1564 00d6 10BD     		pop	{r4, pc}
 1565              	.LVL97:
 1566              	.L109:
 859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1567              		.loc 1 859 0
 1568 00d8 9168     		ldr	r1, [r2, #8]
 1569 00da 41F48011 		orr	r1, r1, #1048576
 1570 00de 9160     		str	r1, [r2, #8]
 869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1571              		.loc 1 869 0
 1572 00e0 1846     		mov	r0, r3
 1573              	.LVL98:
 1574 00e2 10BD     		pop	{r4, pc}
 1575              	.LVL99:
 1576              	.L102:
 865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1577              		.loc 1 865 0
 1578 00e4 0022     		movs	r2, #0
 1579 00e6 84F82420 		strb	r2, [r4, #36]
 1580 00ea 10BD     		pop	{r4, pc}
 1581              	.LVL100:
 1582              	.L111:
 1583              	.LCFI20:
 1584              		.cfi_def_cfa_offset 0
 1585              		.cfi_restore 4
 1586              		.cfi_restore 14
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 77
=======
ARM GAS  /tmp/ccWElble.s 			page 77
>>>>>>> GameTrak


 1587              		.loc 1 776 0
 1588 00ec 0220     		movs	r0, #2
 1589              	.LVL101:
 1590 00ee 7047     		bx	lr
 1591              	.L115:
 1592              		.align	2
 1593              	.L114:
 1594 00f0 00280140 		.word	1073817600
 1595 00f4 00240140 		.word	1073816576
 1596              		.cfi_endproc
 1597              	.LFE68:
 1599              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1600              		.align	2
 1601              		.global	HAL_ADC_Start_IT
 1602              		.thumb
 1603              		.thumb_func
 1605              	HAL_ADC_Start_IT:
 1606              	.LFB72:
1106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1607              		.loc 1 1106 0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 1611              	.LVL102:
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1612              		.loc 1 1113 0
 1613 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1614 0004 012B     		cmp	r3, #1
 1615 0006 76D0     		beq	.L127
1106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1616              		.loc 1 1106 0 discriminator 2
 1617 0008 10B5     		push	{r4, lr}
 1618              	.LCFI21:
 1619              		.cfi_def_cfa_offset 8
 1620              		.cfi_offset 4, -8
 1621              		.cfi_offset 14, -4
 1622 000a 0446     		mov	r4, r0
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1623              		.loc 1 1113 0 discriminator 2
 1624 000c 0123     		movs	r3, #1
 1625 000e 80F82430 		strb	r3, [r0, #36]
1116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 1626              		.loc 1 1116 0 discriminator 2
 1627 0012 FFF7FEFF 		bl	ADC_Enable
 1628              	.LVL103:
1119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1629              		.loc 1 1119 0 discriminator 2
 1630 0016 0346     		mov	r3, r0
 1631 0018 0028     		cmp	r0, #0
 1632 001a 68D1     		bne	.L118
1124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
 1633              		.loc 1 1124 0
 1634 001c A26A     		ldr	r2, [r4, #40]
 1635 001e 22F47062 		bic	r2, r2, #3840
 1636 0022 22F00102 		bic	r2, r2, #1
 1637 0026 42F48072 		orr	r2, r2, #256
 1638 002a A262     		str	r2, [r4, #40]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 78
=======
ARM GAS  /tmp/ccWElble.s 			page 78
>>>>>>> GameTrak


1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1639              		.loc 1 1131 0
 1640 002c 2268     		ldr	r2, [r4]
 1641 002e 3349     		ldr	r1, .L130
 1642 0030 8A42     		cmp	r2, r1
 1643 0032 05D1     		bne	.L119
1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1644              		.loc 1 1131 0 is_stmt 0 discriminator 1
 1645 0034 A1F58061 		sub	r1, r1, #1024
 1646 0038 4968     		ldr	r1, [r1, #4]
 1647 003a 11F4702F 		tst	r1, #983040
 1648 003e 0ED1     		bne	.L120
 1649              	.L119:
1134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1650              		.loc 1 1134 0 is_stmt 1
 1651 0040 A16A     		ldr	r1, [r4, #40]
 1652 0042 21F48011 		bic	r1, r1, #1048576
 1653 0046 A162     		str	r1, [r4, #40]
1138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1654              		.loc 1 1138 0
 1655 0048 5168     		ldr	r1, [r2, #4]
 1656 004a 11F4806F 		tst	r1, #1024
 1657 004e 1CD0     		beq	.L121
1140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1658              		.loc 1 1140 0
 1659 0050 A16A     		ldr	r1, [r4, #40]
 1660 0052 21F44051 		bic	r1, r1, #12288
 1661 0056 41F48051 		orr	r1, r1, #4096
 1662 005a A162     		str	r1, [r4, #40]
 1663 005c 15E0     		b	.L121
 1664              	.L120:
1146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1665              		.loc 1 1146 0
 1666 005e A16A     		ldr	r1, [r4, #40]
 1667 0060 41F48011 		orr	r1, r1, #1048576
 1668 0064 A162     		str	r1, [r4, #40]
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1669              		.loc 1 1150 0
 1670 0066 2649     		ldr	r1, .L130+4
 1671 0068 8A42     		cmp	r2, r1
 1672 006a 03D0     		beq	.L122
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1673              		.loc 1 1150 0 is_stmt 0 discriminator 2
 1674 006c 01F58061 		add	r1, r1, #1024
 1675 0070 8A42     		cmp	r2, r1
 1676 0072 0AD1     		bne	.L121
 1677              	.L122:
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1678              		.loc 1 1150 0 discriminator 3
 1679 0074 2249     		ldr	r1, .L130+4
 1680 0076 4968     		ldr	r1, [r1, #4]
 1681 0078 11F4806F 		tst	r1, #1024
 1682 007c 05D0     		beq	.L121
1152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1683              		.loc 1 1152 0 is_stmt 1
 1684 007e A16A     		ldr	r1, [r4, #40]
 1685 0080 21F44051 		bic	r1, r1, #12288
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 79
=======
ARM GAS  /tmp/ccWElble.s 			page 79
>>>>>>> GameTrak


 1686 0084 41F48051 		orr	r1, r1, #4096
 1687 0088 A162     		str	r1, [r4, #40]
 1688              	.L121:
1157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1689              		.loc 1 1157 0
 1690 008a A16A     		ldr	r1, [r4, #40]
 1691 008c 11F4805F 		tst	r1, #4096
 1692 0090 04D0     		beq	.L123
1160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1693              		.loc 1 1160 0
 1694 0092 E16A     		ldr	r1, [r4, #44]
 1695 0094 21F00601 		bic	r1, r1, #6
 1696 0098 E162     		str	r1, [r4, #44]
 1697 009a 01E0     		b	.L124
 1698              	.L123:
1165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1699              		.loc 1 1165 0
 1700 009c 0021     		movs	r1, #0
 1701 009e E162     		str	r1, [r4, #44]
 1702              	.L124:
1171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1703              		.loc 1 1171 0
 1704 00a0 0021     		movs	r1, #0
 1705 00a2 84F82410 		strb	r1, [r4, #36]
1175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1706              		.loc 1 1175 0
 1707 00a6 6FF00201 		mvn	r1, #2
 1708 00aa 1160     		str	r1, [r2]
1178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1709              		.loc 1 1178 0
 1710 00ac 2168     		ldr	r1, [r4]
 1711 00ae 4A68     		ldr	r2, [r1, #4]
 1712 00b0 42F02002 		orr	r2, r2, #32
 1713 00b4 4A60     		str	r2, [r1, #4]
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1714              		.loc 1 1187 0
 1715 00b6 2268     		ldr	r2, [r4]
 1716 00b8 9168     		ldr	r1, [r2, #8]
 1717 00ba 01F46021 		and	r1, r1, #917504
 1718 00be B1F5602F 		cmp	r1, #917504
 1719 00c2 0ED1     		bne	.L125
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1720              		.loc 1 1187 0 is_stmt 0 discriminator 1
 1721 00c4 0D49     		ldr	r1, .L130
 1722 00c6 8A42     		cmp	r2, r1
 1723 00c8 05D1     		bne	.L126
1188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1724              		.loc 1 1188 0 is_stmt 1 discriminator 2
 1725 00ca A1F58061 		sub	r1, r1, #1024
 1726 00ce 4968     		ldr	r1, [r1, #4]
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1727              		.loc 1 1187 0 discriminator 2
 1728 00d0 11F4702F 		tst	r1, #983040
 1729 00d4 05D1     		bne	.L125
 1730              	.L126:
1191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1731              		.loc 1 1191 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 80
=======
ARM GAS  /tmp/ccWElble.s 			page 80
>>>>>>> GameTrak


 1732 00d6 9168     		ldr	r1, [r2, #8]
 1733 00d8 41F4A001 		orr	r1, r1, #5242880
 1734 00dc 9160     		str	r1, [r2, #8]
1206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1735              		.loc 1 1206 0
 1736 00de 1846     		mov	r0, r3
 1737              	.LVL104:
1191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1738              		.loc 1 1191 0
 1739 00e0 10BD     		pop	{r4, pc}
 1740              	.LVL105:
 1741              	.L125:
1196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1742              		.loc 1 1196 0
 1743 00e2 9168     		ldr	r1, [r2, #8]
 1744 00e4 41F48011 		orr	r1, r1, #1048576
 1745 00e8 9160     		str	r1, [r2, #8]
1206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1746              		.loc 1 1206 0
 1747 00ea 1846     		mov	r0, r3
 1748              	.LVL106:
 1749 00ec 10BD     		pop	{r4, pc}
 1750              	.LVL107:
 1751              	.L118:
1202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1752              		.loc 1 1202 0
 1753 00ee 0022     		movs	r2, #0
 1754 00f0 84F82420 		strb	r2, [r4, #36]
 1755 00f4 10BD     		pop	{r4, pc}
 1756              	.LVL108:
 1757              	.L127:
 1758              	.LCFI22:
 1759              		.cfi_def_cfa_offset 0
 1760              		.cfi_restore 4
 1761              		.cfi_restore 14
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1762              		.loc 1 1113 0
 1763 00f6 0220     		movs	r0, #2
 1764              	.LVL109:
 1765 00f8 7047     		bx	lr
 1766              	.L131:
 1767 00fa 00BF     		.align	2
 1768              	.L130:
 1769 00fc 00280140 		.word	1073817600
 1770 0100 00240140 		.word	1073816576
 1771              		.cfi_endproc
 1772              	.LFE72:
 1774              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1775              		.align	2
 1776              		.global	HAL_ADC_Start_DMA
 1777              		.thumb
 1778              		.thumb_func
 1780              	HAL_ADC_Start_DMA:
 1781              	.LFB74:
1274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1782              		.loc 1 1274 0
 1783              		.cfi_startproc
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 81
=======
ARM GAS  /tmp/ccWElble.s 			page 81
>>>>>>> GameTrak


 1784              		@ args = 0, pretend = 0, frame = 0
 1785              		@ frame_needed = 0, uses_anonymous_args = 0
 1786              	.LVL110:
 1787 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1788              	.LCFI23:
 1789              		.cfi_def_cfa_offset 24
 1790              		.cfi_offset 3, -24
 1791              		.cfi_offset 4, -20
 1792              		.cfi_offset 5, -16
 1793              		.cfi_offset 6, -12
 1794              		.cfi_offset 7, -8
 1795              		.cfi_offset 14, -4
 1796              	.LVL111:
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1797              		.loc 1 1283 0
 1798 0002 0468     		ldr	r4, [r0]
 1799 0004 4A4D     		ldr	r5, .L147
 1800 0006 AC42     		cmp	r4, r5
 1801 0008 03D0     		beq	.L133
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1802              		.loc 1 1283 0 is_stmt 0 discriminator 1
 1803 000a 05F58065 		add	r5, r5, #1024
 1804 000e AC42     		cmp	r4, r5
 1805 0010 05D1     		bne	.L134
 1806              	.L133:
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1807              		.loc 1 1283 0 discriminator 3
 1808 0012 474B     		ldr	r3, .L147
 1809 0014 5B68     		ldr	r3, [r3, #4]
 1810 0016 13F4702F 		tst	r3, #983040
 1811 001a 40F08580 		bne	.L144
 1812              	.L134:
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1813              		.loc 1 1286 0 is_stmt 1
 1814 001e 90F82440 		ldrb	r4, [r0, #36]	@ zero_extendqisi2
 1815 0022 012C     		cmp	r4, #1
 1816 0024 00F08280 		beq	.L145
 1817 0028 1746     		mov	r7, r2
 1818 002a 0E46     		mov	r6, r1
 1819 002c 0446     		mov	r4, r0
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1820              		.loc 1 1286 0 is_stmt 0 discriminator 2
 1821 002e 0123     		movs	r3, #1
 1822 0030 80F82430 		strb	r3, [r0, #36]
1289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1823              		.loc 1 1289 0 is_stmt 1 discriminator 2
 1824 0034 FFF7FEFF 		bl	ADC_Enable
 1825              	.LVL112:
1292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1826              		.loc 1 1292 0 discriminator 2
 1827 0038 0546     		mov	r5, r0
 1828 003a 0028     		cmp	r0, #0
 1829 003c 70D1     		bne	.L136
1297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 1830              		.loc 1 1297 0
 1831 003e A36A     		ldr	r3, [r4, #40]
 1832 0040 23F47063 		bic	r3, r3, #3840
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 82
=======
ARM GAS  /tmp/ccWElble.s 			page 82
>>>>>>> GameTrak


 1833 0044 23F00103 		bic	r3, r3, #1
 1834 0048 43F48073 		orr	r3, r3, #256
 1835 004c A362     		str	r3, [r4, #40]
1304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1836              		.loc 1 1304 0
 1837 004e 2268     		ldr	r2, [r4]
 1838 0050 384B     		ldr	r3, .L147+4
 1839 0052 9A42     		cmp	r2, r3
 1840 0054 05D1     		bne	.L137
1304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1841              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1842 0056 A3F58063 		sub	r3, r3, #1024
 1843 005a 5B68     		ldr	r3, [r3, #4]
 1844 005c 13F4702F 		tst	r3, #983040
 1845 0060 0ED1     		bne	.L138
 1846              	.L137:
1307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1847              		.loc 1 1307 0 is_stmt 1
 1848 0062 A36A     		ldr	r3, [r4, #40]
 1849 0064 23F48013 		bic	r3, r3, #1048576
 1850 0068 A362     		str	r3, [r4, #40]
1311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1851              		.loc 1 1311 0
 1852 006a 5368     		ldr	r3, [r2, #4]
 1853 006c 13F4806F 		tst	r3, #1024
 1854 0070 1CD0     		beq	.L139
1313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1855              		.loc 1 1313 0
 1856 0072 A36A     		ldr	r3, [r4, #40]
 1857 0074 23F44053 		bic	r3, r3, #12288
 1858 0078 43F48053 		orr	r3, r3, #4096
 1859 007c A362     		str	r3, [r4, #40]
 1860 007e 15E0     		b	.L139
 1861              	.L138:
1319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1862              		.loc 1 1319 0
 1863 0080 A36A     		ldr	r3, [r4, #40]
 1864 0082 43F48013 		orr	r3, r3, #1048576
 1865 0086 A362     		str	r3, [r4, #40]
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1866              		.loc 1 1323 0
 1867 0088 294B     		ldr	r3, .L147
 1868 008a 9A42     		cmp	r2, r3
 1869 008c 03D0     		beq	.L140
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1870              		.loc 1 1323 0 is_stmt 0 discriminator 2
 1871 008e 03F58063 		add	r3, r3, #1024
 1872 0092 9A42     		cmp	r2, r3
 1873 0094 0AD1     		bne	.L139
 1874              	.L140:
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1875              		.loc 1 1323 0 discriminator 3
 1876 0096 264B     		ldr	r3, .L147
 1877 0098 5B68     		ldr	r3, [r3, #4]
 1878 009a 13F4806F 		tst	r3, #1024
 1879 009e 05D0     		beq	.L139
1325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 83
=======
ARM GAS  /tmp/ccWElble.s 			page 83
>>>>>>> GameTrak


 1880              		.loc 1 1325 0 is_stmt 1
 1881 00a0 A36A     		ldr	r3, [r4, #40]
 1882 00a2 23F44053 		bic	r3, r3, #12288
 1883 00a6 43F48053 		orr	r3, r3, #4096
 1884 00aa A362     		str	r3, [r4, #40]
 1885              	.L139:
1330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1886              		.loc 1 1330 0
 1887 00ac A36A     		ldr	r3, [r4, #40]
 1888 00ae 13F4805F 		tst	r3, #4096
 1889 00b2 04D0     		beq	.L141
1333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1890              		.loc 1 1333 0
 1891 00b4 E36A     		ldr	r3, [r4, #44]
 1892 00b6 23F00603 		bic	r3, r3, #6
 1893 00ba E362     		str	r3, [r4, #44]
 1894 00bc 01E0     		b	.L142
 1895              	.L141:
1338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1896              		.loc 1 1338 0
 1897 00be 0023     		movs	r3, #0
 1898 00c0 E362     		str	r3, [r4, #44]
 1899              	.L142:
1344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1900              		.loc 1 1344 0
 1901 00c2 0023     		movs	r3, #0
 1902 00c4 84F82430 		strb	r3, [r4, #36]
1347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1903              		.loc 1 1347 0
 1904 00c8 236A     		ldr	r3, [r4, #32]
 1905 00ca 1B4A     		ldr	r2, .L147+8
 1906 00cc 9A62     		str	r2, [r3, #40]
1350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1907              		.loc 1 1350 0
 1908 00ce 236A     		ldr	r3, [r4, #32]
 1909 00d0 1A4A     		ldr	r2, .L147+12
 1910 00d2 DA62     		str	r2, [r3, #44]
1353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1911              		.loc 1 1353 0
 1912 00d4 236A     		ldr	r3, [r4, #32]
 1913 00d6 1A4A     		ldr	r2, .L147+16
 1914 00d8 1A63     		str	r2, [r3, #48]
1362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1915              		.loc 1 1362 0
 1916 00da 2368     		ldr	r3, [r4]
 1917 00dc 6FF00202 		mvn	r2, #2
 1918 00e0 1A60     		str	r2, [r3]
1365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1919              		.loc 1 1365 0
 1920 00e2 2268     		ldr	r2, [r4]
 1921 00e4 9368     		ldr	r3, [r2, #8]
 1922 00e6 43F48073 		orr	r3, r3, #256
 1923 00ea 9360     		str	r3, [r2, #8]
1368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 1924              		.loc 1 1368 0
 1925 00ec 2168     		ldr	r1, [r4]
 1926 00ee 3B46     		mov	r3, r7
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 84
=======
ARM GAS  /tmp/ccWElble.s 			page 84
>>>>>>> GameTrak


 1927 00f0 3246     		mov	r2, r6
 1928 00f2 4C31     		adds	r1, r1, #76
 1929 00f4 206A     		ldr	r0, [r4, #32]
 1930              	.LVL113:
 1931 00f6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1932              	.LVL114:
1374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1933              		.loc 1 1374 0
 1934 00fa 2268     		ldr	r2, [r4]
 1935 00fc 9368     		ldr	r3, [r2, #8]
 1936 00fe 03F46023 		and	r3, r3, #917504
 1937 0102 B3F5602F 		cmp	r3, #917504
 1938 0106 05D1     		bne	.L143
1377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1939              		.loc 1 1377 0
 1940 0108 9368     		ldr	r3, [r2, #8]
 1941 010a 43F4A003 		orr	r3, r3, #5242880
 1942 010e 9360     		str	r3, [r2, #8]
1289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1943              		.loc 1 1289 0
 1944 0110 2846     		mov	r0, r5
 1945 0112 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1946              	.LVL115:
 1947              	.L143:
1382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 1948              		.loc 1 1382 0
 1949 0114 9368     		ldr	r3, [r2, #8]
 1950 0116 43F48013 		orr	r3, r3, #1048576
 1951 011a 9360     		str	r3, [r2, #8]
1289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1952              		.loc 1 1289 0
 1953 011c 2846     		mov	r0, r5
 1954 011e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1955              	.LVL116:
 1956              	.L136:
1388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 1957              		.loc 1 1388 0
 1958 0120 0023     		movs	r3, #0
 1959 0122 84F82430 		strb	r3, [r4, #36]
 1960 0126 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1961              	.LVL117:
 1962              	.L144:
1393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 1963              		.loc 1 1393 0
 1964 0128 0120     		movs	r0, #1
 1965              	.LVL118:
 1966 012a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1967              	.LVL119:
 1968              	.L145:
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 1969              		.loc 1 1286 0
 1970 012c 0220     		movs	r0, #2
 1971              	.LVL120:
1398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 1972              		.loc 1 1398 0
 1973 012e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1974              	.L148:
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 85
=======
ARM GAS  /tmp/ccWElble.s 			page 85
>>>>>>> GameTrak


 1975              		.align	2
 1976              	.L147:
 1977 0130 00240140 		.word	1073816576
 1978 0134 00280140 		.word	1073817600
 1979 0138 00000000 		.word	ADC_DMAConvCplt
 1980 013c 00000000 		.word	ADC_DMAHalfConvCplt
 1981 0140 00000000 		.word	ADC_DMAError
 1982              		.cfi_endproc
 1983              	.LFE74:
 1985              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 1986              		.align	2
 1987              		.global	ADC_ConversionStop_Disable
 1988              		.thumb
 1989              		.thumb_func
 1991              	ADC_ConversionStop_Disable:
 1992              	.LFB87:
1990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0;
 1993              		.loc 1 1990 0
 1994              		.cfi_startproc
 1995              		@ args = 0, pretend = 0, frame = 0
 1996              		@ frame_needed = 0, uses_anonymous_args = 0
 1997              	.LVL121:
 1998 0000 38B5     		push	{r3, r4, r5, lr}
 1999              	.LCFI24:
 2000              		.cfi_def_cfa_offset 16
 2001              		.cfi_offset 3, -16
 2002              		.cfi_offset 4, -12
 2003              		.cfi_offset 5, -8
 2004              		.cfi_offset 14, -4
 2005              	.LVL122:
1994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2006              		.loc 1 1994 0
 2007 0002 0368     		ldr	r3, [r0]
 2008 0004 9A68     		ldr	r2, [r3, #8]
 2009 0006 12F0010F 		tst	r2, #1
 2010 000a 1ED0     		beq	.L153
 2011 000c 0446     		mov	r4, r0
1997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
 2012              		.loc 1 1997 0
 2013 000e 9A68     		ldr	r2, [r3, #8]
 2014 0010 22F00102 		bic	r2, r2, #1
 2015 0014 9A60     		str	r2, [r3, #8]
2000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2016              		.loc 1 2000 0
 2017 0016 FFF7FEFF 		bl	HAL_GetTick
 2018              	.LVL123:
 2019 001a 0546     		mov	r5, r0
 2020              	.LVL124:
2003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2021              		.loc 1 2003 0
 2022 001c 0EE0     		b	.L151
 2023              	.LVL125:
 2024              	.L152:
2005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 2025              		.loc 1 2005 0
 2026 001e FFF7FEFF 		bl	HAL_GetTick
 2027              	.LVL126:
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 86
=======
ARM GAS  /tmp/ccWElble.s 			page 86
>>>>>>> GameTrak


 2028 0022 401B     		subs	r0, r0, r5
 2029 0024 0228     		cmp	r0, #2
 2030 0026 09D9     		bls	.L151
2008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 2031              		.loc 1 2008 0
 2032 0028 A36A     		ldr	r3, [r4, #40]
 2033 002a 43F01003 		orr	r3, r3, #16
 2034 002e A362     		str	r3, [r4, #40]
2011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 2035              		.loc 1 2011 0
 2036 0030 E36A     		ldr	r3, [r4, #44]
 2037 0032 43F00103 		orr	r3, r3, #1
 2038 0036 E362     		str	r3, [r4, #44]
2013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 2039              		.loc 1 2013 0
 2040 0038 0120     		movs	r0, #1
 2041 003a 38BD     		pop	{r3, r4, r5, pc}
 2042              	.LVL127:
 2043              	.L151:
2003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2044              		.loc 1 2003 0
 2045 003c 2368     		ldr	r3, [r4]
 2046 003e 9B68     		ldr	r3, [r3, #8]
 2047 0040 13F0010F 		tst	r3, #1
 2048 0044 EBD1     		bne	.L152
2019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2049              		.loc 1 2019 0
 2050 0046 0020     		movs	r0, #0
 2051 0048 38BD     		pop	{r3, r4, r5, pc}
 2052              	.LVL128:
 2053              	.L153:
 2054 004a 0020     		movs	r0, #0
 2055              	.LVL129:
2020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 2056              		.loc 1 2020 0
 2057 004c 38BD     		pop	{r3, r4, r5, pc}
 2058              		.cfi_endproc
 2059              	.LFE87:
 2061 004e 00BF     		.section	.text.HAL_ADC_Init,"ax",%progbits
 2062              		.align	2
 2063              		.global	HAL_ADC_Init
 2064              		.thumb
 2065              		.thumb_func
 2067              	HAL_ADC_Init:
 2068              	.LFB64:
 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2069              		.loc 1 375 0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 0
 2072              		@ frame_needed = 0, uses_anonymous_args = 0
 2073              	.LVL130:
 382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2074              		.loc 1 382 0
 2075 0000 0028     		cmp	r0, #0
 2076 0002 00F09D80 		beq	.L167
 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2077              		.loc 1 375 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 87
=======
ARM GAS  /tmp/ccWElble.s 			page 87
>>>>>>> GameTrak


 2078 0006 70B5     		push	{r4, r5, r6, lr}
 2079              	.LCFI25:
 2080              		.cfi_def_cfa_offset 16
 2081              		.cfi_offset 4, -16
 2082              		.cfi_offset 5, -12
 2083              		.cfi_offset 6, -8
 2084              		.cfi_offset 14, -4
 2085 0008 0446     		mov	r4, r0
 411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2086              		.loc 1 411 0
 2087 000a 836A     		ldr	r3, [r0, #40]
 2088 000c 23B9     		cbnz	r3, .L157
 414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2089              		.loc 1 414 0
 2090 000e C362     		str	r3, [r0, #44]
 417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2091              		.loc 1 417 0
 2092 0010 80F82430 		strb	r3, [r0, #36]
 420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 2093              		.loc 1 420 0
 2094 0014 FFF7FEFF 		bl	HAL_ADC_MspInit
 2095              	.LVL131:
 2096              	.L157:
 428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2097              		.loc 1 428 0
 2098 0018 2046     		mov	r0, r4
 2099 001a FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2100              	.LVL132:
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 2101              		.loc 1 433 0
 2102 001e A36A     		ldr	r3, [r4, #40]
 2103 0020 13F0100F 		tst	r3, #16
 2104 0024 40F08680 		bne	.L158
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 2105              		.loc 1 433 0 is_stmt 0 discriminator 1
 2106 0028 0028     		cmp	r0, #0
 2107 002a 40F08380 		bne	.L158
 437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2108              		.loc 1 437 0 is_stmt 1
 2109 002e A36A     		ldr	r3, [r4, #40]
 2110 0030 23F48853 		bic	r3, r3, #4352
 2111 0034 23F00203 		bic	r3, r3, #2
 2112 0038 43F00203 		orr	r3, r3, #2
 2113 003c A362     		str	r3, [r4, #40]
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 2114              		.loc 1 453 0
 2115 003e 6368     		ldr	r3, [r4, #4]
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2116              		.loc 1 454 0
 2117 0040 2168     		ldr	r1, [r4]
 2118 0042 404A     		ldr	r2, .L173
 2119 0044 9142     		cmp	r1, r2
 2120 0046 06D1     		bne	.L159
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2121              		.loc 1 454 0 is_stmt 0 discriminator 1
 2122 0048 E269     		ldr	r2, [r4, #28]
 2123 004a B2F5402F 		cmp	r2, #786432
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 88
=======
ARM GAS  /tmp/ccWElble.s 			page 88
>>>>>>> GameTrak


 2124 004e 03D1     		bne	.L160
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2125              		.loc 1 454 0
 2126 0050 4FF40022 		mov	r2, #524288
 2127 0054 00E0     		b	.L160
 2128              	.L159:
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2129              		.loc 1 454 0 discriminator 2
 2130 0056 E269     		ldr	r2, [r4, #28]
 2131              	.L160:
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 2132              		.loc 1 453 0 is_stmt 1
 2133 0058 1A43     		orrs	r2, r2, r3
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2134              		.loc 1 455 0
 2135 005a E568     		ldr	r5, [r4, #12]
 2136              	.LVL133:
 2137              	.LBB48:
 2138              	.LBB49:
 2139              		.loc 2 531 0
 2140 005c 0223     		movs	r3, #2
 2141              		.syntax unified
 2142              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2143 005e 93FAA3F3 		rbit r3, r3
 2144              	@ 0 "" 2
 2145              	.LVL134:
 2146              		.thumb
 2147              		.syntax unified
 2148              	.LBE49:
 2149              	.LBE48:
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2150              		.loc 1 455 0
 2151 0062 B3FA83F3 		clz	r3, r3
 2152 0066 05FA03F3 		lsl	r3, r5, r3
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 2153              		.loc 1 454 0
 2154 006a 1343     		orrs	r3, r3, r2
 2155              	.LVL135:
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2156              		.loc 1 461 0
 2157 006c A268     		ldr	r2, [r4, #8]
 2158 006e B2F5807F 		cmp	r2, #256
 2159 0072 04D0     		beq	.L168
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2160              		.loc 1 461 0 is_stmt 0 discriminator 2
 2161 0074 012A     		cmp	r2, #1
 2162 0076 05D1     		bne	.L169
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2163              		.loc 1 461 0
 2164 0078 4FF48076 		mov	r6, #256
 2165 007c 03E0     		b	.L161
 2166              	.L168:
 2167 007e 4FF48076 		mov	r6, #256
 2168 0082 00E0     		b	.L161
 2169              	.L169:
 2170 0084 0026     		movs	r6, #0
 2171              	.L161:
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 89
=======
ARM GAS  /tmp/ccWElble.s 			page 89
>>>>>>> GameTrak


 2172              	.LVL136:
 466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2173              		.loc 1 466 0 is_stmt 1 discriminator 6
 2174 0086 6269     		ldr	r2, [r4, #20]
 2175 0088 012A     		cmp	r2, #1
 2176 008a 15D1     		bne	.L162
 468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 2177              		.loc 1 468 0
 2178 008c 65B9     		cbnz	r5, .L163
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 2179              		.loc 1 472 0
 2180 008e A269     		ldr	r2, [r4, #24]
 2181 0090 013A     		subs	r2, r2, #1
 2182              	.LVL137:
 2183              	.LBB50:
 2184              	.LBB51:
 2185              		.loc 2 531 0
 2186 0092 4FF46045 		mov	r5, #57344
 2187              		.syntax unified
 2188              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2189 0096 95FAA5F5 		rbit r5, r5
 2190              	@ 0 "" 2
 2191              	.LVL138:
 2192              		.thumb
 2193              		.syntax unified
 2194              	.LBE51:
 2195              	.LBE50:
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 2196              		.loc 1 472 0
 2197 009a B5FA85F5 		clz	r5, r5
 2198 009e AA40     		lsls	r2, r2, r5
 2199 00a0 42F40062 		orr	r2, r2, #2048
 2200 00a4 1643     		orrs	r6, r6, r2
 2201              	.LVL139:
 2202 00a6 07E0     		b	.L162
 2203              	.L163:
 481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 2204              		.loc 1 481 0
 2205 00a8 A26A     		ldr	r2, [r4, #40]
 2206 00aa 42F02002 		orr	r2, r2, #32
 2207 00ae A262     		str	r2, [r4, #40]
 484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 2208              		.loc 1 484 0
 2209 00b0 E26A     		ldr	r2, [r4, #44]
 2210 00b2 42F00102 		orr	r2, r2, #1
 2211 00b6 E262     		str	r2, [r4, #44]
 2212              	.L162:
 489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
 2213              		.loc 1 489 0
 2214 00b8 4A68     		ldr	r2, [r1, #4]
 2215 00ba 22F46942 		bic	r2, r2, #59648
 2216 00be 3243     		orrs	r2, r2, r6
 2217 00c0 4A60     		str	r2, [r1, #4]
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 2218              		.loc 1 496 0
 2219 00c2 2168     		ldr	r1, [r4]
 2220 00c4 8D68     		ldr	r5, [r1, #8]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 90
=======
ARM GAS  /tmp/ccWElble.s 			page 90
>>>>>>> GameTrak


 2221 00c6 204A     		ldr	r2, .L173+4
 2222 00c8 2A40     		ands	r2, r2, r5
 2223 00ca 1A43     		orrs	r2, r2, r3
 2224 00cc 8A60     		str	r2, [r1, #8]
 512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2225              		.loc 1 512 0
 2226 00ce A268     		ldr	r2, [r4, #8]
 2227 00d0 B2F5807F 		cmp	r2, #256
 2228 00d4 01D0     		beq	.L164
 512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2229              		.loc 1 512 0 is_stmt 0 discriminator 1
 2230 00d6 012A     		cmp	r2, #1
 2231 00d8 0AD1     		bne	.L170
 2232              	.L164:
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 2233              		.loc 1 514 0 is_stmt 1
 2234 00da 2269     		ldr	r2, [r4, #16]
 2235 00dc 013A     		subs	r2, r2, #1
 2236              	.LVL140:
 2237              	.LBB52:
 2238              	.LBB53:
 2239              		.loc 2 531 0
 2240 00de 4FF47001 		mov	r1, #15728640
 2241              		.syntax unified
 2242              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2243 00e2 91FAA1F1 		rbit r1, r1
 2244              	@ 0 "" 2
 2245              	.LVL141:
 2246              		.thumb
 2247              		.syntax unified
 2248              	.LBE53:
 2249              	.LBE52:
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 2250              		.loc 1 514 0
 2251 00e6 B1FA81F1 		clz	r1, r1
 2252 00ea 02FA01F1 		lsl	r1, r2, r1
 2253              	.LVL142:
 2254 00ee 00E0     		b	.L165
 2255              	.LVL143:
 2256              	.L170:
 379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2257              		.loc 1 379 0
 2258 00f0 0021     		movs	r1, #0
 2259              	.LVL144:
 2260              	.L165:
 517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 2261              		.loc 1 517 0
 2262 00f2 2568     		ldr	r5, [r4]
 2263 00f4 EA6A     		ldr	r2, [r5, #44]
 2264 00f6 22F47002 		bic	r2, r2, #15728640
 2265 00fa 0A43     		orrs	r2, r2, r1
 2266 00fc EA62     		str	r2, [r5, #44]
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 2267              		.loc 1 527 0
 2268 00fe 2268     		ldr	r2, [r4]
 2269 0100 9168     		ldr	r1, [r2, #8]
 2270              	.LVL145:
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 91
=======
ARM GAS  /tmp/ccWElble.s 			page 91
>>>>>>> GameTrak


 2271 0102 124A     		ldr	r2, .L173+8
 2272 0104 0A40     		ands	r2, r2, r1
 2273 0106 9342     		cmp	r3, r2
 2274 0108 08D1     		bne	.L166
 534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 2275              		.loc 1 534 0
 2276 010a 0023     		movs	r3, #0
 2277              	.LVL146:
 2278 010c E362     		str	r3, [r4, #44]
 537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 2279              		.loc 1 537 0
 2280 010e A36A     		ldr	r3, [r4, #40]
 2281 0110 23F00303 		bic	r3, r3, #3
 2282 0114 43F00103 		orr	r3, r3, #1
 2283 0118 A362     		str	r3, [r4, #40]
 2284 011a 70BD     		pop	{r4, r5, r6, pc}
 2285              	.LVL147:
 2286              	.L166:
 544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 2287              		.loc 1 544 0
 2288 011c A36A     		ldr	r3, [r4, #40]
 2289              	.LVL148:
 2290 011e 23F01203 		bic	r3, r3, #18
 2291 0122 43F01003 		orr	r3, r3, #16
 2292 0126 A362     		str	r3, [r4, #40]
 549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 2293              		.loc 1 549 0
 2294 0128 E36A     		ldr	r3, [r4, #44]
 2295 012a 43F00103 		orr	r3, r3, #1
 2296 012e E362     		str	r3, [r4, #44]
 2297              	.LVL149:
 551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 2298              		.loc 1 551 0
 2299 0130 0120     		movs	r0, #1
 2300 0132 70BD     		pop	{r4, r5, r6, pc}
 2301              	.LVL150:
 2302              	.L158:
 558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 2303              		.loc 1 558 0
 2304 0134 A36A     		ldr	r3, [r4, #40]
 2305 0136 43F01003 		orr	r3, r3, #16
 2306 013a A362     		str	r3, [r4, #40]
 2307              	.LVL151:
 560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 2308              		.loc 1 560 0
 2309 013c 0120     		movs	r0, #1
 2310 013e 70BD     		pop	{r4, r5, r6, pc}
 2311              	.LVL152:
 2312              	.L167:
 2313              	.LCFI26:
 2314              		.cfi_def_cfa_offset 0
 2315              		.cfi_restore 4
 2316              		.cfi_restore 5
 2317              		.cfi_restore 6
 2318              		.cfi_restore 14
 384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 2319              		.loc 1 384 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 92
=======
ARM GAS  /tmp/ccWElble.s 			page 92
>>>>>>> GameTrak


 2320 0140 0120     		movs	r0, #1
 2321              	.LVL153:
 2322 0142 7047     		bx	lr
 2323              	.L174:
 2324              		.align	2
 2325              	.L173:
 2326 0144 003C0140 		.word	1073822720
 2327 0148 FDF7E1FF 		.word	-1968131
 2328 014c FE0E1FFF 		.word	-14741762
 2329              		.cfi_endproc
 2330              	.LFE64:
 2332              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 2333              		.align	2
 2334              		.global	HAL_ADC_DeInit
 2335              		.thumb
 2336              		.thumb_func
 2338              	HAL_ADC_DeInit:
 2339              	.LFB65:
 576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2340              		.loc 1 576 0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 0
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 2344              	.LVL154:
 580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2345              		.loc 1 580 0
 2346 0000 0028     		cmp	r0, #0
 2347 0002 75D0     		beq	.L178
 576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2348              		.loc 1 576 0
 2349 0004 38B5     		push	{r3, r4, r5, lr}
 2350              	.LCFI27:
 2351              		.cfi_def_cfa_offset 16
 2352              		.cfi_offset 3, -16
 2353              		.cfi_offset 4, -12
 2354              		.cfi_offset 5, -8
 2355              		.cfi_offset 14, -4
 2356 0006 0446     		mov	r4, r0
 589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2357              		.loc 1 589 0
 2358 0008 836A     		ldr	r3, [r0, #40]
 2359 000a 43F00203 		orr	r3, r3, #2
 2360 000e 8362     		str	r3, [r0, #40]
 593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2361              		.loc 1 593 0
 2362 0010 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2363              	.LVL155:
 598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2364              		.loc 1 598 0
 2365 0014 0546     		mov	r5, r0
 2366 0016 0028     		cmp	r0, #0
 2367 0018 65D1     		bne	.L177
 606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 2368              		.loc 1 606 0
 2369 001a 2368     		ldr	r3, [r4]
 2370 001c 6FF01F02 		mvn	r2, #31
 2371 0020 1A60     		str	r2, [r3]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 93
=======
ARM GAS  /tmp/ccWElble.s 			page 93
>>>>>>> GameTrak


 610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 2372              		.loc 1 610 0
 2373 0022 2268     		ldr	r2, [r4]
 2374 0024 5168     		ldr	r1, [r2, #4]
 2375 0026 334B     		ldr	r3, .L181
 2376 0028 0B40     		ands	r3, r3, r1
 2377 002a 5360     		str	r3, [r2, #4]
 616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 2378              		.loc 1 616 0
 2379 002c 2268     		ldr	r2, [r4]
 2380 002e 9168     		ldr	r1, [r2, #8]
 2381 0030 314B     		ldr	r3, .L181+4
 2382 0032 0B40     		ands	r3, r3, r1
 2383 0034 9360     		str	r3, [r2, #8]
 623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 2384              		.loc 1 623 0
 2385 0036 2268     		ldr	r2, [r4]
 2386 0038 D368     		ldr	r3, [r2, #12]
 2387 003a 03F07F43 		and	r3, r3, #-16777216
 2388 003e D360     		str	r3, [r2, #12]
 628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 2389              		.loc 1 628 0
 2390 0040 2268     		ldr	r2, [r4]
 2391 0042 1369     		ldr	r3, [r2, #16]
 2392 0044 03F04043 		and	r3, r3, #-1073741824
 2393 0048 1361     		str	r3, [r2, #16]
 634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 2394              		.loc 1 634 0
 2395 004a 2268     		ldr	r2, [r4]
 2396 004c 5369     		ldr	r3, [r2, #20]
 2397 004e 23F47F63 		bic	r3, r3, #4080
 2398 0052 23F00F03 		bic	r3, r3, #15
 2399 0056 5361     		str	r3, [r2, #20]
 636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 2400              		.loc 1 636 0
 2401 0058 2268     		ldr	r2, [r4]
 2402 005a 9369     		ldr	r3, [r2, #24]
 2403 005c 23F47F63 		bic	r3, r3, #4080
 2404 0060 23F00F03 		bic	r3, r3, #15
 2405 0064 9361     		str	r3, [r2, #24]
 638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 2406              		.loc 1 638 0
 2407 0066 2268     		ldr	r2, [r4]
 2408 0068 D369     		ldr	r3, [r2, #28]
 2409 006a 23F47F63 		bic	r3, r3, #4080
 2410 006e 23F00F03 		bic	r3, r3, #15
 2411 0072 D361     		str	r3, [r2, #28]
 640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2412              		.loc 1 640 0
 2413 0074 2268     		ldr	r2, [r4]
 2414 0076 136A     		ldr	r3, [r2, #32]
 2415 0078 23F47F63 		bic	r3, r3, #4080
 2416 007c 23F00F03 		bic	r3, r3, #15
 2417 0080 1362     		str	r3, [r2, #32]
 643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 2418              		.loc 1 643 0
 2419 0082 2268     		ldr	r2, [r4]
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 94
=======
ARM GAS  /tmp/ccWElble.s 			page 94
>>>>>>> GameTrak


 2420 0084 536A     		ldr	r3, [r2, #36]
 2421 0086 23F47F63 		bic	r3, r3, #4080
 2422 008a 23F00F03 		bic	r3, r3, #15
 2423 008e 5362     		str	r3, [r2, #36]
 645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2424              		.loc 1 645 0
 2425 0090 2268     		ldr	r2, [r4]
 2426 0092 936A     		ldr	r3, [r2, #40]
 2427 0094 23F47F63 		bic	r3, r3, #4080
 2428 0098 23F00F03 		bic	r3, r3, #15
 2429 009c 9362     		str	r3, [r2, #40]
 648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 2430              		.loc 1 648 0
 2431 009e 2268     		ldr	r2, [r4]
 2432 00a0 D36A     		ldr	r3, [r2, #44]
 2433 00a2 03F07F43 		and	r3, r3, #-16777216
 2434 00a6 D362     		str	r3, [r2, #44]
 653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 2435              		.loc 1 653 0
 2436 00a8 2268     		ldr	r2, [r4]
 2437 00aa D36A     		ldr	r3, [r2, #44]
 2438 00ac 03F07F43 		and	r3, r3, #-16777216
 2439 00b0 D362     		str	r3, [r2, #44]
 658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 2440              		.loc 1 658 0
 2441 00b2 2268     		ldr	r2, [r4]
 2442 00b4 136B     		ldr	r3, [r2, #48]
 2443 00b6 03F04043 		and	r3, r3, #-1073741824
 2444 00ba 1363     		str	r3, [r2, #48]
 662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 2445              		.loc 1 662 0
 2446 00bc 2268     		ldr	r2, [r4]
 2447 00be 536B     		ldr	r3, [r2, #52]
 2448 00c0 03F04043 		and	r3, r3, #-1073741824
 2449 00c4 5363     		str	r3, [r2, #52]
 666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 2450              		.loc 1 666 0
 2451 00c6 2268     		ldr	r2, [r4]
 2452 00c8 936B     		ldr	r3, [r2, #56]
 2453 00ca 9B0D     		lsrs	r3, r3, #22
 2454 00cc 9B05     		lsls	r3, r3, #22
 2455 00ce 9363     		str	r3, [r2, #56]
 671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 2456              		.loc 1 671 0
 2457 00d0 2268     		ldr	r2, [r4]
 2458 00d2 936B     		ldr	r3, [r2, #56]
 2459 00d4 9B0D     		lsrs	r3, r3, #22
 2460 00d6 9B05     		lsls	r3, r3, #22
 2461 00d8 9363     		str	r3, [r2, #56]
 691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2462              		.loc 1 691 0
 2463 00da 2046     		mov	r0, r4
 2464              	.LVL156:
 2465 00dc FFF7FEFF 		bl	HAL_ADC_MspDeInit
 2466              	.LVL157:
 694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2467              		.loc 1 694 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 95
=======
ARM GAS  /tmp/ccWElble.s 			page 95
>>>>>>> GameTrak


 2468 00e0 0023     		movs	r3, #0
 2469 00e2 E362     		str	r3, [r4, #44]
 697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2470              		.loc 1 697 0
 2471 00e4 A362     		str	r3, [r4, #40]
 2472              	.L177:
 702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2473              		.loc 1 702 0
 2474 00e6 0023     		movs	r3, #0
 2475 00e8 84F82430 		strb	r3, [r4, #36]
 705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2476              		.loc 1 705 0
 2477 00ec 2846     		mov	r0, r5
 2478 00ee 38BD     		pop	{r3, r4, r5, pc}
 2479              	.LVL158:
 2480              	.L178:
 2481              	.LCFI28:
 2482              		.cfi_def_cfa_offset 0
 2483              		.cfi_restore 3
 2484              		.cfi_restore 4
 2485              		.cfi_restore 5
 2486              		.cfi_restore 14
 582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 2487              		.loc 1 582 0
 2488 00f0 0120     		movs	r0, #1
 2489              	.LVL159:
 2490 00f2 7047     		bx	lr
 2491              	.L182:
 2492              		.align	2
 2493              	.L181:
 2494 00f4 00003FFF 		.word	-12648448
 2495 00f8 F00601FF 		.word	-16709904
 2496              		.cfi_endproc
 2497              	.LFE65:
 2499              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 2500              		.align	2
 2501              		.global	HAL_ADC_Stop
 2502              		.thumb
 2503              		.thumb_func
 2505              	HAL_ADC_Stop:
 2506              	.LFB69:
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2507              		.loc 1 882 0
 2508              		.cfi_startproc
 2509              		@ args = 0, pretend = 0, frame = 0
 2510              		@ frame_needed = 0, uses_anonymous_args = 0
 2511              	.LVL160:
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2512              		.loc 1 889 0
 2513 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 2514 0004 012B     		cmp	r3, #1
 2515 0006 15D0     		beq	.L186
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2516              		.loc 1 882 0 discriminator 2
 2517 0008 10B5     		push	{r4, lr}
 2518              	.LCFI29:
 2519              		.cfi_def_cfa_offset 8
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 96
=======
ARM GAS  /tmp/ccWElble.s 			page 96
>>>>>>> GameTrak


 2520              		.cfi_offset 4, -8
 2521              		.cfi_offset 14, -4
 2522 000a 0446     		mov	r4, r0
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2523              		.loc 1 889 0 discriminator 2
 2524 000c 0123     		movs	r3, #1
 2525 000e 80F82430 		strb	r3, [r0, #36]
 893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2526              		.loc 1 893 0 discriminator 2
 2527 0012 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2528              	.LVL161:
 896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2529              		.loc 1 896 0 discriminator 2
 2530 0016 0346     		mov	r3, r0
 2531 0018 38B9     		cbnz	r0, .L185
 899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2532              		.loc 1 899 0
 2533 001a A26A     		ldr	r2, [r4, #40]
 2534 001c 22F48852 		bic	r2, r2, #4352
 2535 0020 22F00102 		bic	r2, r2, #1
 2536 0024 42F00102 		orr	r2, r2, #1
 2537 0028 A262     		str	r2, [r4, #40]
 2538              	.L185:
 905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2539              		.loc 1 905 0
 2540 002a 0022     		movs	r2, #0
 2541 002c 84F82420 		strb	r2, [r4, #36]
 908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2542              		.loc 1 908 0
 2543 0030 1846     		mov	r0, r3
 2544              	.LVL162:
 2545 0032 10BD     		pop	{r4, pc}
 2546              	.LVL163:
 2547              	.L186:
 2548              	.LCFI30:
 2549              		.cfi_def_cfa_offset 0
 2550              		.cfi_restore 4
 2551              		.cfi_restore 14
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2552              		.loc 1 889 0
 2553 0034 0220     		movs	r0, #2
 2554              	.LVL164:
 2555 0036 7047     		bx	lr
 2556              		.cfi_endproc
 2557              	.LFE69:
 2559              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 2560              		.align	2
 2561              		.global	HAL_ADC_Stop_IT
 2562              		.thumb
 2563              		.thumb_func
 2565              	HAL_ADC_Stop_IT:
 2566              	.LFB73:
1217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2567              		.loc 1 1217 0
 2568              		.cfi_startproc
 2569              		@ args = 0, pretend = 0, frame = 0
 2570              		@ frame_needed = 0, uses_anonymous_args = 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 97
=======
ARM GAS  /tmp/ccWElble.s 			page 97
>>>>>>> GameTrak


 2571              	.LVL165:
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2572              		.loc 1 1224 0
 2573 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 2574 0004 012B     		cmp	r3, #1
 2575 0006 1AD0     		beq	.L192
1217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2576              		.loc 1 1217 0 discriminator 2
 2577 0008 10B5     		push	{r4, lr}
 2578              	.LCFI31:
 2579              		.cfi_def_cfa_offset 8
 2580              		.cfi_offset 4, -8
 2581              		.cfi_offset 14, -4
 2582 000a 0446     		mov	r4, r0
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2583              		.loc 1 1224 0 discriminator 2
 2584 000c 0123     		movs	r3, #1
 2585 000e 80F82430 		strb	r3, [r0, #36]
1228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2586              		.loc 1 1228 0 discriminator 2
 2587 0012 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2588              	.LVL166:
1231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2589              		.loc 1 1231 0 discriminator 2
 2590 0016 0346     		mov	r3, r0
 2591 0018 60B9     		cbnz	r0, .L191
1234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2592              		.loc 1 1234 0
 2593 001a 2168     		ldr	r1, [r4]
 2594 001c 4A68     		ldr	r2, [r1, #4]
 2595 001e 22F02002 		bic	r2, r2, #32
 2596 0022 4A60     		str	r2, [r1, #4]
1237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2597              		.loc 1 1237 0
 2598 0024 A26A     		ldr	r2, [r4, #40]
 2599 0026 22F48852 		bic	r2, r2, #4352
 2600 002a 22F00102 		bic	r2, r2, #1
 2601 002e 42F00102 		orr	r2, r2, #1
 2602 0032 A262     		str	r2, [r4, #40]
 2603              	.L191:
1243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2604              		.loc 1 1243 0
 2605 0034 0022     		movs	r2, #0
 2606 0036 84F82420 		strb	r2, [r4, #36]
1246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2607              		.loc 1 1246 0
 2608 003a 1846     		mov	r0, r3
 2609              	.LVL167:
 2610 003c 10BD     		pop	{r4, pc}
 2611              	.LVL168:
 2612              	.L192:
 2613              	.LCFI32:
 2614              		.cfi_def_cfa_offset 0
 2615              		.cfi_restore 4
 2616              		.cfi_restore 14
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2617              		.loc 1 1224 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 98
=======
ARM GAS  /tmp/ccWElble.s 			page 98
>>>>>>> GameTrak


 2618 003e 0220     		movs	r0, #2
 2619              	.LVL169:
 2620 0040 7047     		bx	lr
 2621              		.cfi_endproc
 2622              	.LFE73:
 2624 0042 00BF     		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 2625              		.align	2
 2626              		.global	HAL_ADC_Stop_DMA
 2627              		.thumb
 2628              		.thumb_func
 2630              	HAL_ADC_Stop_DMA:
 2631              	.LFB75:
1415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2632              		.loc 1 1415 0
 2633              		.cfi_startproc
 2634              		@ args = 0, pretend = 0, frame = 0
 2635              		@ frame_needed = 0, uses_anonymous_args = 0
 2636              	.LVL170:
1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2637              		.loc 1 1422 0
 2638 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 2639 0004 012B     		cmp	r3, #1
 2640 0006 24D0     		beq	.L199
1415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2641              		.loc 1 1415 0 discriminator 2
 2642 0008 10B5     		push	{r4, lr}
 2643              	.LCFI33:
 2644              		.cfi_def_cfa_offset 8
 2645              		.cfi_offset 4, -8
 2646              		.cfi_offset 14, -4
 2647 000a 0446     		mov	r4, r0
1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2648              		.loc 1 1422 0 discriminator 2
 2649 000c 0123     		movs	r3, #1
 2650 000e 80F82430 		strb	r3, [r0, #36]
1426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2651              		.loc 1 1426 0 discriminator 2
 2652 0012 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2653              	.LVL171:
1429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 2654              		.loc 1 1429 0 discriminator 2
 2655 0016 0346     		mov	r3, r0
 2656 0018 B0B9     		cbnz	r0, .L197
1432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2657              		.loc 1 1432 0
 2658 001a 2268     		ldr	r2, [r4]
 2659 001c 9368     		ldr	r3, [r2, #8]
 2660 001e 23F48073 		bic	r3, r3, #256
 2661 0022 9360     		str	r3, [r2, #8]
1436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2662              		.loc 1 1436 0
 2663 0024 206A     		ldr	r0, [r4, #32]
 2664              	.LVL172:
 2665 0026 FFF7FEFF 		bl	HAL_DMA_Abort
 2666              	.LVL173:
1439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 2667              		.loc 1 1439 0
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 99
=======
ARM GAS  /tmp/ccWElble.s 			page 99
>>>>>>> GameTrak


 2668 002a 0346     		mov	r3, r0
 2669 002c 40B9     		cbnz	r0, .L198
1442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2670              		.loc 1 1442 0
 2671 002e A26A     		ldr	r2, [r4, #40]
 2672 0030 22F48852 		bic	r2, r2, #4352
 2673 0034 22F00102 		bic	r2, r2, #1
 2674 0038 42F00102 		orr	r2, r2, #1
 2675 003c A262     		str	r2, [r4, #40]
 2676 003e 03E0     		b	.L197
 2677              	.L198:
1449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 2678              		.loc 1 1449 0
 2679 0040 A26A     		ldr	r2, [r4, #40]
 2680 0042 42F04002 		orr	r2, r2, #64
 2681 0046 A262     		str	r2, [r4, #40]
 2682              	.L197:
 2683              	.LVL174:
1454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 2684              		.loc 1 1454 0
 2685 0048 0022     		movs	r2, #0
 2686 004a 84F82420 		strb	r2, [r4, #36]
1457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2687              		.loc 1 1457 0
 2688 004e 1846     		mov	r0, r3
 2689 0050 10BD     		pop	{r4, pc}
 2690              	.LVL175:
 2691              	.L199:
 2692              	.LCFI34:
 2693              		.cfi_def_cfa_offset 0
 2694              		.cfi_restore 4
 2695              		.cfi_restore 14
1422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 2696              		.loc 1 1422 0
 2697 0052 0220     		movs	r0, #2
 2698              	.LVL176:
 2699 0054 7047     		bx	lr
 2700              		.cfi_endproc
 2701              	.LFE75:
 2703 0056 00BF     		.text
 2704              	.Letext0:
 2705              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 2706              		.file 4 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 2707              		.file 5 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 2708              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2709              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2710              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 2711              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 2712              		.file 10 "./Drivers/CMSIS/Include/core_cm3.h"
 2713              		.file 11 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 2714              		.file 12 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2715              		.file 13 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2716              		.file 14 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
<<<<<<< HEAD
ARM GAS  /tmp/ccs5kO1h.s 			page 100
=======
ARM GAS  /tmp/ccWElble.s 			page 100
>>>>>>> GameTrak


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal_adc.c
<<<<<<< HEAD
     /tmp/ccs5kO1h.s:20     .text.HAL_ADC_MspInit:00000000 $t
     /tmp/ccs5kO1h.s:25     .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
     /tmp/ccs5kO1h.s:39     .text.HAL_ADC_MspDeInit:00000000 $t
     /tmp/ccs5kO1h.s:44     .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
     /tmp/ccs5kO1h.s:57     .text.HAL_ADC_PollForConversion:00000000 $t
     /tmp/ccs5kO1h.s:62     .text.HAL_ADC_PollForConversion:00000000 HAL_ADC_PollForConversion
     /tmp/ccs5kO1h.s:318    .text.HAL_ADC_PollForConversion:00000160 $d
     /tmp/ccs5kO1h.s:327    .text.HAL_ADC_PollForEvent:00000000 $t
     /tmp/ccs5kO1h.s:332    .text.HAL_ADC_PollForEvent:00000000 HAL_ADC_PollForEvent
     /tmp/ccs5kO1h.s:405    .text.HAL_ADC_GetValue:00000000 $t
     /tmp/ccs5kO1h.s:410    .text.HAL_ADC_GetValue:00000000 HAL_ADC_GetValue
     /tmp/ccs5kO1h.s:428    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccs5kO1h.s:433    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccs5kO1h.s:446    .text.ADC_DMAConvCplt:00000000 $t
     /tmp/ccs5kO1h.s:451    .text.ADC_DMAConvCplt:00000000 ADC_DMAConvCplt
     /tmp/ccs5kO1h.s:517    .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
     /tmp/ccs5kO1h.s:522    .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccs5kO1h.s:535    .text.ADC_DMAHalfConvCplt:00000000 $t
     /tmp/ccs5kO1h.s:540    .text.ADC_DMAHalfConvCplt:00000000 ADC_DMAHalfConvCplt
     /tmp/ccs5kO1h.s:564    .text.HAL_ADC_LevelOutOfWindowCallback:00000000 $t
     /tmp/ccs5kO1h.s:569    .text.HAL_ADC_LevelOutOfWindowCallback:00000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccs5kO1h.s:582    .text.HAL_ADC_IRQHandler:00000000 $t
     /tmp/ccs5kO1h.s:587    .text.HAL_ADC_IRQHandler:00000000 HAL_ADC_IRQHandler
     /tmp/ccs5kO1h.s:747    .text.HAL_ADC_ErrorCallback:00000000 $t
     /tmp/ccs5kO1h.s:752    .text.HAL_ADC_ErrorCallback:00000000 HAL_ADC_ErrorCallback
     /tmp/ccs5kO1h.s:765    .text.ADC_DMAError:00000000 $t
     /tmp/ccs5kO1h.s:770    .text.ADC_DMAError:00000000 ADC_DMAError
     /tmp/ccs5kO1h.s:802    .text.HAL_ADC_ConfigChannel:00000000 $t
     /tmp/ccs5kO1h.s:807    .text.HAL_ADC_ConfigChannel:00000000 HAL_ADC_ConfigChannel
     /tmp/ccs5kO1h.s:1169   .text.HAL_ADC_ConfigChannel:000001a8 $d
     /tmp/ccs5kO1h.s:1176   .text.HAL_ADC_AnalogWDGConfig:00000000 $t
     /tmp/ccs5kO1h.s:1181   .text.HAL_ADC_AnalogWDGConfig:00000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccs5kO1h.s:1269   .text.HAL_ADC_AnalogWDGConfig:0000005c $d
     /tmp/ccs5kO1h.s:1274   .text.HAL_ADC_GetState:00000000 $t
     /tmp/ccs5kO1h.s:1279   .text.HAL_ADC_GetState:00000000 HAL_ADC_GetState
     /tmp/ccs5kO1h.s:1296   .text.HAL_ADC_GetError:00000000 $t
     /tmp/ccs5kO1h.s:1301   .text.HAL_ADC_GetError:00000000 HAL_ADC_GetError
     /tmp/ccs5kO1h.s:1318   .text.ADC_Enable:00000000 $t
     /tmp/ccs5kO1h.s:1323   .text.ADC_Enable:00000000 ADC_Enable
     /tmp/ccs5kO1h.s:1424   .text.ADC_Enable:00000078 $d
     /tmp/ccs5kO1h.s:1430   .text.HAL_ADC_Start:00000000 $t
     /tmp/ccs5kO1h.s:1435   .text.HAL_ADC_Start:00000000 HAL_ADC_Start
     /tmp/ccs5kO1h.s:1594   .text.HAL_ADC_Start:000000f0 $d
     /tmp/ccs5kO1h.s:1600   .text.HAL_ADC_Start_IT:00000000 $t
     /tmp/ccs5kO1h.s:1605   .text.HAL_ADC_Start_IT:00000000 HAL_ADC_Start_IT
     /tmp/ccs5kO1h.s:1769   .text.HAL_ADC_Start_IT:000000fc $d
     /tmp/ccs5kO1h.s:1775   .text.HAL_ADC_Start_DMA:00000000 $t
     /tmp/ccs5kO1h.s:1780   .text.HAL_ADC_Start_DMA:00000000 HAL_ADC_Start_DMA
     /tmp/ccs5kO1h.s:1977   .text.HAL_ADC_Start_DMA:00000130 $d
     /tmp/ccs5kO1h.s:1986   .text.ADC_ConversionStop_Disable:00000000 $t
     /tmp/ccs5kO1h.s:1991   .text.ADC_ConversionStop_Disable:00000000 ADC_ConversionStop_Disable
     /tmp/ccs5kO1h.s:2062   .text.HAL_ADC_Init:00000000 $t
     /tmp/ccs5kO1h.s:2067   .text.HAL_ADC_Init:00000000 HAL_ADC_Init
     /tmp/ccs5kO1h.s:2326   .text.HAL_ADC_Init:00000144 $d
     /tmp/ccs5kO1h.s:2333   .text.HAL_ADC_DeInit:00000000 $t
ARM GAS  /tmp/ccs5kO1h.s 			page 101


     /tmp/ccs5kO1h.s:2338   .text.HAL_ADC_DeInit:00000000 HAL_ADC_DeInit
     /tmp/ccs5kO1h.s:2494   .text.HAL_ADC_DeInit:000000f4 $d
     /tmp/ccs5kO1h.s:2500   .text.HAL_ADC_Stop:00000000 $t
     /tmp/ccs5kO1h.s:2505   .text.HAL_ADC_Stop:00000000 HAL_ADC_Stop
     /tmp/ccs5kO1h.s:2560   .text.HAL_ADC_Stop_IT:00000000 $t
     /tmp/ccs5kO1h.s:2565   .text.HAL_ADC_Stop_IT:00000000 HAL_ADC_Stop_IT
     /tmp/ccs5kO1h.s:2625   .text.HAL_ADC_Stop_DMA:00000000 $t
     /tmp/ccs5kO1h.s:2630   .text.HAL_ADC_Stop_DMA:00000000 HAL_ADC_Stop_DMA
=======
     /tmp/ccWElble.s:20     .text.HAL_ADC_MspInit:00000000 $t
     /tmp/ccWElble.s:25     .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
     /tmp/ccWElble.s:39     .text.HAL_ADC_MspDeInit:00000000 $t
     /tmp/ccWElble.s:44     .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
     /tmp/ccWElble.s:57     .text.HAL_ADC_PollForConversion:00000000 $t
     /tmp/ccWElble.s:62     .text.HAL_ADC_PollForConversion:00000000 HAL_ADC_PollForConversion
     /tmp/ccWElble.s:318    .text.HAL_ADC_PollForConversion:00000160 $d
     /tmp/ccWElble.s:327    .text.HAL_ADC_PollForEvent:00000000 $t
     /tmp/ccWElble.s:332    .text.HAL_ADC_PollForEvent:00000000 HAL_ADC_PollForEvent
     /tmp/ccWElble.s:405    .text.HAL_ADC_GetValue:00000000 $t
     /tmp/ccWElble.s:410    .text.HAL_ADC_GetValue:00000000 HAL_ADC_GetValue
     /tmp/ccWElble.s:428    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccWElble.s:433    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccWElble.s:446    .text.ADC_DMAConvCplt:00000000 $t
     /tmp/ccWElble.s:451    .text.ADC_DMAConvCplt:00000000 ADC_DMAConvCplt
     /tmp/ccWElble.s:517    .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
     /tmp/ccWElble.s:522    .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccWElble.s:535    .text.ADC_DMAHalfConvCplt:00000000 $t
     /tmp/ccWElble.s:540    .text.ADC_DMAHalfConvCplt:00000000 ADC_DMAHalfConvCplt
     /tmp/ccWElble.s:564    .text.HAL_ADC_LevelOutOfWindowCallback:00000000 $t
     /tmp/ccWElble.s:569    .text.HAL_ADC_LevelOutOfWindowCallback:00000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccWElble.s:582    .text.HAL_ADC_IRQHandler:00000000 $t
     /tmp/ccWElble.s:587    .text.HAL_ADC_IRQHandler:00000000 HAL_ADC_IRQHandler
     /tmp/ccWElble.s:747    .text.HAL_ADC_ErrorCallback:00000000 $t
     /tmp/ccWElble.s:752    .text.HAL_ADC_ErrorCallback:00000000 HAL_ADC_ErrorCallback
     /tmp/ccWElble.s:765    .text.ADC_DMAError:00000000 $t
     /tmp/ccWElble.s:770    .text.ADC_DMAError:00000000 ADC_DMAError
     /tmp/ccWElble.s:802    .text.HAL_ADC_ConfigChannel:00000000 $t
     /tmp/ccWElble.s:807    .text.HAL_ADC_ConfigChannel:00000000 HAL_ADC_ConfigChannel
     /tmp/ccWElble.s:1169   .text.HAL_ADC_ConfigChannel:000001a8 $d
     /tmp/ccWElble.s:1176   .text.HAL_ADC_AnalogWDGConfig:00000000 $t
     /tmp/ccWElble.s:1181   .text.HAL_ADC_AnalogWDGConfig:00000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccWElble.s:1269   .text.HAL_ADC_AnalogWDGConfig:0000005c $d
     /tmp/ccWElble.s:1274   .text.HAL_ADC_GetState:00000000 $t
     /tmp/ccWElble.s:1279   .text.HAL_ADC_GetState:00000000 HAL_ADC_GetState
     /tmp/ccWElble.s:1296   .text.HAL_ADC_GetError:00000000 $t
     /tmp/ccWElble.s:1301   .text.HAL_ADC_GetError:00000000 HAL_ADC_GetError
     /tmp/ccWElble.s:1318   .text.ADC_Enable:00000000 $t
     /tmp/ccWElble.s:1323   .text.ADC_Enable:00000000 ADC_Enable
     /tmp/ccWElble.s:1424   .text.ADC_Enable:00000078 $d
     /tmp/ccWElble.s:1430   .text.HAL_ADC_Start:00000000 $t
     /tmp/ccWElble.s:1435   .text.HAL_ADC_Start:00000000 HAL_ADC_Start
     /tmp/ccWElble.s:1594   .text.HAL_ADC_Start:000000f0 $d
     /tmp/ccWElble.s:1600   .text.HAL_ADC_Start_IT:00000000 $t
     /tmp/ccWElble.s:1605   .text.HAL_ADC_Start_IT:00000000 HAL_ADC_Start_IT
     /tmp/ccWElble.s:1769   .text.HAL_ADC_Start_IT:000000fc $d
     /tmp/ccWElble.s:1775   .text.HAL_ADC_Start_DMA:00000000 $t
     /tmp/ccWElble.s:1780   .text.HAL_ADC_Start_DMA:00000000 HAL_ADC_Start_DMA
     /tmp/ccWElble.s:1977   .text.HAL_ADC_Start_DMA:00000130 $d
     /tmp/ccWElble.s:1986   .text.ADC_ConversionStop_Disable:00000000 $t
     /tmp/ccWElble.s:1991   .text.ADC_ConversionStop_Disable:00000000 ADC_ConversionStop_Disable
     /tmp/ccWElble.s:2062   .text.HAL_ADC_Init:00000000 $t
     /tmp/ccWElble.s:2067   .text.HAL_ADC_Init:00000000 HAL_ADC_Init
     /tmp/ccWElble.s:2326   .text.HAL_ADC_Init:00000144 $d
     /tmp/ccWElble.s:2333   .text.HAL_ADC_DeInit:00000000 $t
ARM GAS  /tmp/ccWElble.s 			page 101


     /tmp/ccWElble.s:2338   .text.HAL_ADC_DeInit:00000000 HAL_ADC_DeInit
     /tmp/ccWElble.s:2494   .text.HAL_ADC_DeInit:000000f4 $d
     /tmp/ccWElble.s:2500   .text.HAL_ADC_Stop:00000000 $t
     /tmp/ccWElble.s:2505   .text.HAL_ADC_Stop:00000000 HAL_ADC_Stop
     /tmp/ccWElble.s:2560   .text.HAL_ADC_Stop_IT:00000000 $t
     /tmp/ccWElble.s:2565   .text.HAL_ADC_Stop_IT:00000000 HAL_ADC_Stop_IT
     /tmp/ccWElble.s:2625   .text.HAL_ADC_Stop_DMA:00000000 $t
     /tmp/ccWElble.s:2630   .text.HAL_ADC_Stop_DMA:00000000 HAL_ADC_Stop_DMA
>>>>>>> GameTrak
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
SystemCoreClock
HAL_ADCEx_InjectedConvCpltCallback
HAL_DMA_Start_IT
HAL_DMA_Abort
