ARM GAS  /tmp/ccwfR6Sc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC_R.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_R_init,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_R_init
  22              		.thumb
  23              		.thumb_func
  25              	ADC_R_init:
  26              	.LFB64:
  27              		.file 1 "./Src/ADC_R.c"
   1:./Src/ADC_R.c **** #include "ADC_R.h"
   2:./Src/ADC_R.c **** 
   3:./Src/ADC_R.c **** 
   4:./Src/ADC_R.c **** ADC_HandleTypeDef hadc1;
   5:./Src/ADC_R.c **** DMA_HandleTypeDef hdma_adc1;
   6:./Src/ADC_R.c **** 
   7:./Src/ADC_R.c **** 
   8:./Src/ADC_R.c ****  volatile __IO uint16_t buffer[3];
   9:./Src/ADC_R.c ****  
  10:./Src/ADC_R.c **** volatile __IO struct ADC_Rdati adc_Rdati;
  11:./Src/ADC_R.c **** 
  12:./Src/ADC_R.c **** // ----------------------PUBLIC----------------------
  13:./Src/ADC_R.c **** void ADC_R_init(void){
  28              		.loc 1 13 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40              	.LBB2:
  14:./Src/ADC_R.c **** 
  15:./Src/ADC_R.c ****   ADC_ChannelConfTypeDef sConfig;
  16:./Src/ADC_R.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
  41              		.loc 1 16 0
  42 0004 234B     		ldr	r3, .L6
ARM GAS  /tmp/ccwfR6Sc.s 			page 2


  43 0006 5A69     		ldr	r2, [r3, #20]
  44 0008 42F00102 		orr	r2, r2, #1
  45 000c 5A61     		str	r2, [r3, #20]
  46 000e 5B69     		ldr	r3, [r3, #20]
  47 0010 03F00103 		and	r3, r3, #1
  48 0014 0093     		str	r3, [sp]
  49 0016 009B     		ldr	r3, [sp]
  50              	.LBE2:
  17:./Src/ADC_R.c ****   /* DMA interrupt init */
  18:./Src/ADC_R.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
  19:./Src/ADC_R.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 2);
  51              		.loc 1 19 0
  52 0018 0222     		movs	r2, #2
  53 001a 0121     		movs	r1, #1
  54 001c 0B20     		movs	r0, #11
  55 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
  56              	.LVL0:
  20:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  57              		.loc 1 20 0
  58 0022 0B20     		movs	r0, #11
  59 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  60              	.LVL1:
  21:./Src/ADC_R.c ****   
  22:./Src/ADC_R.c ****   hadc1.Instance = ADC1;
  61              		.loc 1 22 0
  62 0028 1B48     		ldr	r0, .L6+4
  63 002a 1C4B     		ldr	r3, .L6+8
  64 002c 0360     		str	r3, [r0]
  23:./Src/ADC_R.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  65              		.loc 1 23 0
  66 002e 4FF48073 		mov	r3, #256
  67 0032 8360     		str	r3, [r0, #8]
  24:./Src/ADC_R.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
  68              		.loc 1 24 0
  69 0034 0023     		movs	r3, #0
  70 0036 C360     		str	r3, [r0, #12]
  25:./Src/ADC_R.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
  71              		.loc 1 25 0
  72 0038 4361     		str	r3, [r0, #20]
  26:./Src/ADC_R.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  73              		.loc 1 26 0
  74 003a 4FF46022 		mov	r2, #917504
  75 003e C261     		str	r2, [r0, #28]
  27:./Src/ADC_R.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  76              		.loc 1 27 0
  77 0040 4360     		str	r3, [r0, #4]
  28:./Src/ADC_R.c ****   hadc1.Init.NbrOfConversion = 2;
  78              		.loc 1 28 0
  79 0042 0223     		movs	r3, #2
  80 0044 0361     		str	r3, [r0, #16]
  29:./Src/ADC_R.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
  81              		.loc 1 29 0
  82 0046 FFF7FEFF 		bl	HAL_ADC_Init
  83              	.LVL2:
  84 004a 08B1     		cbz	r0, .L2
  30:./Src/ADC_R.c ****   {
  31:./Src/ADC_R.c ****     Error_Handler();
ARM GAS  /tmp/ccwfR6Sc.s 			page 3


  85              		.loc 1 31 0
  86 004c FFF7FEFF 		bl	Error_Handler
  87              	.LVL3:
  88              	.L2:
  32:./Src/ADC_R.c ****   }
  33:./Src/ADC_R.c ****   /*
  34:./Src/ADC_R.c ****   sConfig.Channel = ADC_CHANNEL_10;
  35:./Src/ADC_R.c ****   sConfig.Rank = 1;
  36:./Src/ADC_R.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  37:./Src/ADC_R.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  38:./Src/ADC_R.c ****   {
  39:./Src/ADC_R.c ****     Error_Handler();
  40:./Src/ADC_R.c ****   }
  41:./Src/ADC_R.c **** */
  42:./Src/ADC_R.c ****     /**Configure Regular Channel 
  43:./Src/ADC_R.c ****     */
  44:./Src/ADC_R.c ****   sConfig.Channel = ADC_CHANNEL_11;
  89              		.loc 1 44 0
  90 0050 0B23     		movs	r3, #11
  91 0052 0193     		str	r3, [sp, #4]
  45:./Src/ADC_R.c ****   sConfig.Rank = 1;
  92              		.loc 1 45 0
  93 0054 0123     		movs	r3, #1
  94 0056 0293     		str	r3, [sp, #8]
  46:./Src/ADC_R.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  95              		.loc 1 46 0
  96 0058 01A9     		add	r1, sp, #4
  97 005a 0F48     		ldr	r0, .L6+4
  98 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
  99              	.LVL4:
 100 0060 08B1     		cbz	r0, .L3
  47:./Src/ADC_R.c ****   {
  48:./Src/ADC_R.c ****     Error_Handler();
 101              		.loc 1 48 0
 102 0062 FFF7FEFF 		bl	Error_Handler
 103              	.LVL5:
 104              	.L3:
  49:./Src/ADC_R.c ****   }
  50:./Src/ADC_R.c **** 
  51:./Src/ADC_R.c ****     /**Configure Regular Channel 
  52:./Src/ADC_R.c ****     */
  53:./Src/ADC_R.c ****   sConfig.Channel = ADC_CHANNEL_12;
 105              		.loc 1 53 0
 106 0066 0C23     		movs	r3, #12
 107 0068 0193     		str	r3, [sp, #4]
  54:./Src/ADC_R.c ****   sConfig.Rank = 2;
 108              		.loc 1 54 0
 109 006a 0223     		movs	r3, #2
 110 006c 0293     		str	r3, [sp, #8]
  55:./Src/ADC_R.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 111              		.loc 1 55 0
 112 006e 01A9     		add	r1, sp, #4
 113 0070 0948     		ldr	r0, .L6+4
 114 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 115              	.LVL6:
 116 0076 08B1     		cbz	r0, .L4
  56:./Src/ADC_R.c ****   {
ARM GAS  /tmp/ccwfR6Sc.s 			page 4


  57:./Src/ADC_R.c ****     Error_Handler();
 117              		.loc 1 57 0
 118 0078 FFF7FEFF 		bl	Error_Handler
 119              	.LVL7:
 120              	.L4:
  58:./Src/ADC_R.c ****   }  
  59:./Src/ADC_R.c ****   
  60:./Src/ADC_R.c ****   HAL_ADC_Start(&hadc1);
 121              		.loc 1 60 0
 122 007c 064C     		ldr	r4, .L6+4
 123 007e 2046     		mov	r0, r4
 124 0080 FFF7FEFF 		bl	HAL_ADC_Start
 125              	.LVL8:
  61:./Src/ADC_R.c ****   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_Rdati.data, 2);
 126              		.loc 1 61 0
 127 0084 0222     		movs	r2, #2
 128 0086 0649     		ldr	r1, .L6+12
 129 0088 2046     		mov	r0, r4
 130 008a FFF7FEFF 		bl	HAL_ADC_Start_DMA
 131              	.LVL9:
  62:./Src/ADC_R.c ****   
  63:./Src/ADC_R.c **** }
 132              		.loc 1 63 0
 133 008e 04B0     		add	sp, sp, #16
 134              	.LCFI2:
 135              		.cfi_def_cfa_offset 8
 136              		@ sp needed
 137 0090 10BD     		pop	{r4, pc}
 138              	.L7:
 139 0092 00BF     		.align	2
 140              	.L6:
 141 0094 00100240 		.word	1073876992
 142 0098 00000000 		.word	hadc1
 143 009c 00240140 		.word	1073816576
 144 00a0 00000000 		.word	adc_Rdati
 145              		.cfi_endproc
 146              	.LFE64:
 148              		.global	__aeabi_ui2f
 149              		.global	__aeabi_f2d
 150              		.global	__aeabi_dmul
 151              		.global	__aeabi_d2f
 152              		.section	.text.GET_BATTERY_VOLT,"ax",%progbits
 153              		.align	2
 154              		.global	GET_BATTERY_VOLT
 155              		.thumb
 156              		.thumb_func
 158              	GET_BATTERY_VOLT:
 159              	.LFB65:
  64:./Src/ADC_R.c **** 
  65:./Src/ADC_R.c **** 
  66:./Src/ADC_R.c **** 
  67:./Src/ADC_R.c **** // ------------NORMALIZATE----------------
  68:./Src/ADC_R.c **** float GET_BATTERY_VOLT(void){
 160              		.loc 1 68 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccwfR6Sc.s 			page 5


 164 0000 10B5     		push	{r4, lr}
 165              	.LCFI3:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
  69:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 169              		.loc 1 69 0
 170 0002 0B20     		movs	r0, #11
 171 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 172              	.LVL10:
  70:./Src/ADC_R.c ****   uint16_t data = adc_Rdati.data[0];
 173              		.loc 1 70 0
 174 0008 0B4B     		ldr	r3, .L10+8
 175 000a 1C88     		ldrh	r4, [r3]
 176 000c A4B2     		uxth	r4, r4
 177              	.LVL11:
  71:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 178              		.loc 1 71 0
 179 000e 0B20     		movs	r0, #11
 180 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 181              	.LVL12:
  72:./Src/ADC_R.c ****   return (float)data * ADC_BATTERY_VOLT;
 182              		.loc 1 72 0
 183 0014 2046     		mov	r0, r4
 184 0016 FFF7FEFF 		bl	__aeabi_ui2f
 185              	.LVL13:
 186 001a FFF7FEFF 		bl	__aeabi_f2d
 187              	.LVL14:
 188 001e 04A3     		adr	r3, .L10
 189 0020 D3E90023 		ldrd	r2, [r3]
 190 0024 FFF7FEFF 		bl	__aeabi_dmul
 191              	.LVL15:
 192 0028 FFF7FEFF 		bl	__aeabi_d2f
 193              	.LVL16:
  73:./Src/ADC_R.c **** }
 194              		.loc 1 73 0
 195 002c 10BD     		pop	{r4, pc}
 196              	.LVL17:
 197              	.L11:
 198 002e 00BF     		.align	3
 199              	.L10:
 200 0030 F5E4E827 		.word	669574389
 201 0034 181C9B3F 		.word	1067129880
 202 0038 00000000 		.word	adc_Rdati
 203              		.cfi_endproc
 204              	.LFE65:
 206              		.global	__aeabi_i2d
 207              		.section	.text.GET_MOTOR_R_AMP,"ax",%progbits
 208              		.align	2
 209              		.global	GET_MOTOR_R_AMP
 210              		.thumb
 211              		.thumb_func
 213              	GET_MOTOR_R_AMP:
 214              	.LFB66:
  74:./Src/ADC_R.c **** float GET_MOTOR_R_AMP(void){  
 215              		.loc 1 74 0
 216              		.cfi_startproc
ARM GAS  /tmp/ccwfR6Sc.s 			page 6


 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219 0000 10B5     		push	{r4, lr}
 220              	.LCFI4:
 221              		.cfi_def_cfa_offset 8
 222              		.cfi_offset 4, -8
 223              		.cfi_offset 14, -4
  75:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 224              		.loc 1 75 0
 225 0002 0B20     		movs	r0, #11
 226 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 227              	.LVL18:
  76:./Src/ADC_R.c ****   uint16_t data = adc_Rdati.data[1];
 228              		.loc 1 76 0
 229 0008 0D4B     		ldr	r3, .L16+8
 230 000a 5C88     		ldrh	r4, [r3, #2]
 231 000c A4B2     		uxth	r4, r4
 232              	.LVL19:
  77:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);    
 233              		.loc 1 77 0
 234 000e 0B20     		movs	r0, #11
 235 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 236              	.LVL20:
  78:./Src/ADC_R.c ****   if(data<ADC_MOTOR_R_CENTER){
 237              		.loc 1 78 0
 238 0014 40F27B73 		movw	r3, #1915
 239 0018 9C42     		cmp	r4, r3
 240 001a 0BD9     		bls	.L14
  79:./Src/ADC_R.c ****     return 0.0;
  80:./Src/ADC_R.c ****   }
  81:./Src/ADC_R.c ****   return (data - ADC_MOTOR_R_CENTER) * MOTOR_R_AMP_CONV_AMP;
 241              		.loc 1 81 0
 242 001c A4F27C70 		subw	r0, r4, #1916
 243 0020 FFF7FEFF 		bl	__aeabi_i2d
 244              	.LVL21:
 245 0024 04A3     		adr	r3, .L16
 246 0026 D3E90023 		ldrd	r2, [r3]
 247 002a FFF7FEFF 		bl	__aeabi_dmul
 248              	.LVL22:
 249 002e FFF7FEFF 		bl	__aeabi_d2f
 250              	.LVL23:
 251 0032 10BD     		pop	{r4, pc}
 252              	.LVL24:
 253              	.L14:
  79:./Src/ADC_R.c ****     return 0.0;
 254              		.loc 1 79 0
 255 0034 0020     		movs	r0, #0
  82:./Src/ADC_R.c **** }
 256              		.loc 1 82 0
 257 0036 10BD     		pop	{r4, pc}
 258              	.LVL25:
 259              	.L17:
 260              		.align	3
 261              	.L16:
 262 0038 D2131C3D 		.word	1025250258
 263 003c C1D1933F 		.word	1066652097
 264 0040 00000000 		.word	adc_Rdati
ARM GAS  /tmp/ccwfR6Sc.s 			page 7


 265              		.cfi_endproc
 266              	.LFE66:
 268              		.section	.text.ADC_MOTOR_RIGHT_IS_CONV,"ax",%progbits
 269              		.align	2
 270              		.global	ADC_MOTOR_RIGHT_IS_CONV
 271              		.thumb
 272              		.thumb_func
 274              	ADC_MOTOR_RIGHT_IS_CONV:
 275              	.LFB67:
  83:./Src/ADC_R.c **** // ------------RAW----------------
  84:./Src/ADC_R.c **** uint8_t ADC_MOTOR_RIGHT_IS_CONV(void){
 276              		.loc 1 84 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280 0000 10B5     		push	{r4, lr}
 281              	.LCFI5:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 4, -8
 284              		.cfi_offset 14, -4
 285              	.LVL26:
  85:./Src/ADC_R.c ****   uint8_t data=0;
  86:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 286              		.loc 1 86 0
 287 0002 0B20     		movs	r0, #11
 288 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 289              	.LVL27:
  87:./Src/ADC_R.c ****   data = adc_Rdati.convflag;
 290              		.loc 1 87 0
 291 0008 034B     		ldr	r3, .L20
 292 000a 9C79     		ldrb	r4, [r3, #6]	@ zero_extendqisi2
 293 000c E4B2     		uxtb	r4, r4
 294              	.LVL28:
  88:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 295              		.loc 1 88 0
 296 000e 0B20     		movs	r0, #11
 297 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 298              	.LVL29:
  89:./Src/ADC_R.c ****   return data;  
  90:./Src/ADC_R.c **** }
 299              		.loc 1 90 0
 300 0014 2046     		mov	r0, r4
 301 0016 10BD     		pop	{r4, pc}
 302              	.LVL30:
 303              	.L21:
 304              		.align	2
 305              	.L20:
 306 0018 00000000 		.word	adc_Rdati
 307              		.cfi_endproc
 308              	.LFE67:
 310              		.section	.text.ADC_MOTOR_RIGHT,"ax",%progbits
 311              		.align	2
 312              		.global	ADC_MOTOR_RIGHT
 313              		.thumb
 314              		.thumb_func
 316              	ADC_MOTOR_RIGHT:
 317              	.LFB68:
ARM GAS  /tmp/ccwfR6Sc.s 			page 8


  91:./Src/ADC_R.c **** 
  92:./Src/ADC_R.c **** uint16_t ADC_MOTOR_RIGHT(void){
 318              		.loc 1 92 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322 0000 10B5     		push	{r4, lr}
 323              	.LCFI6:
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 4, -8
 326              		.cfi_offset 14, -4
 327              	.LVL31:
  93:./Src/ADC_R.c ****   uint16_t data=0;
  94:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 328              		.loc 1 94 0
 329 0002 0B20     		movs	r0, #11
 330 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 331              	.LVL32:
  95:./Src/ADC_R.c ****   data = adc_Rdati.data[1];
 332              		.loc 1 95 0
 333 0008 034B     		ldr	r3, .L24
 334 000a 5C88     		ldrh	r4, [r3, #2]
 335 000c A4B2     		uxth	r4, r4
 336              	.LVL33:
  96:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 337              		.loc 1 96 0
 338 000e 0B20     		movs	r0, #11
 339 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 340              	.LVL34:
  97:./Src/ADC_R.c ****   return data;  
  98:./Src/ADC_R.c **** }
 341              		.loc 1 98 0
 342 0014 2046     		mov	r0, r4
 343 0016 10BD     		pop	{r4, pc}
 344              	.LVL35:
 345              	.L25:
 346              		.align	2
 347              	.L24:
 348 0018 00000000 		.word	adc_Rdati
 349              		.cfi_endproc
 350              	.LFE68:
 352              		.section	.text.ADC_BATTERY,"ax",%progbits
 353              		.align	2
 354              		.global	ADC_BATTERY
 355              		.thumb
 356              		.thumb_func
 358              	ADC_BATTERY:
 359              	.LFB69:
  99:./Src/ADC_R.c **** uint16_t ADC_BATTERY(void){
 360              		.loc 1 99 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 10B5     		push	{r4, lr}
 365              	.LCFI7:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 4, -8
ARM GAS  /tmp/ccwfR6Sc.s 			page 9


 368              		.cfi_offset 14, -4
 369              	.LVL36:
 100:./Src/ADC_R.c ****   uint16_t data=0;
 101:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 370              		.loc 1 101 0
 371 0002 0B20     		movs	r0, #11
 372 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 373              	.LVL37:
 102:./Src/ADC_R.c ****   data = adc_Rdati.data[0];
 374              		.loc 1 102 0
 375 0008 034B     		ldr	r3, .L28
 376 000a 1C88     		ldrh	r4, [r3]
 377 000c A4B2     		uxth	r4, r4
 378              	.LVL38:
 103:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 379              		.loc 1 103 0
 380 000e 0B20     		movs	r0, #11
 381 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 382              	.LVL39:
 104:./Src/ADC_R.c ****   return data;  
 105:./Src/ADC_R.c **** }
 383              		.loc 1 105 0
 384 0014 2046     		mov	r0, r4
 385 0016 10BD     		pop	{r4, pc}
 386              	.LVL40:
 387              	.L29:
 388              		.align	2
 389              	.L28:
 390 0018 00000000 		.word	adc_Rdati
 391              		.cfi_endproc
 392              	.LFE69:
 394              		.section	.text.ADC_R_ResetFlag,"ax",%progbits
 395              		.align	2
 396              		.global	ADC_R_ResetFlag
 397              		.thumb
 398              		.thumb_func
 400              	ADC_R_ResetFlag:
 401              	.LFB70:
 106:./Src/ADC_R.c **** 
 107:./Src/ADC_R.c **** 
 108:./Src/ADC_R.c **** void ADC_R_ResetFlag(void){
 402              		.loc 1 108 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406 0000 08B5     		push	{r3, lr}
 407              	.LCFI8:
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 3, -8
 410              		.cfi_offset 14, -4
 109:./Src/ADC_R.c ****   HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);  
 411              		.loc 1 109 0
 412 0002 0B20     		movs	r0, #11
 413 0004 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 414              	.LVL41:
 110:./Src/ADC_R.c ****   adc_Rdati.convflag = 0;
 415              		.loc 1 110 0
ARM GAS  /tmp/ccwfR6Sc.s 			page 10


 416 0008 0022     		movs	r2, #0
 417 000a 034B     		ldr	r3, .L32
 418 000c 9A71     		strb	r2, [r3, #6]
 111:./Src/ADC_R.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);  
 419              		.loc 1 111 0
 420 000e 0B20     		movs	r0, #11
 421 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 422              	.LVL42:
 423 0014 08BD     		pop	{r3, pc}
 424              	.L33:
 425 0016 00BF     		.align	2
 426              	.L32:
 427 0018 00000000 		.word	adc_Rdati
 428              		.cfi_endproc
 429              	.LFE70:
 431              		.section	.text.ADC_R_callback,"ax",%progbits
 432              		.align	2
 433              		.global	ADC_R_callback
 434              		.thumb
 435              		.thumb_func
 437              	ADC_R_callback:
 438              	.LFB71:
 112:./Src/ADC_R.c **** }
 113:./Src/ADC_R.c **** 
 114:./Src/ADC_R.c **** // ----------------------PRIVATE----------------------
 115:./Src/ADC_R.c **** 
 116:./Src/ADC_R.c **** 
 117:./Src/ADC_R.c **** 
 118:./Src/ADC_R.c **** void ADC_R_callback(void){
 439              		.loc 1 118 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 119:./Src/ADC_R.c ****   adc_Rdati.convflag = 1;
 444              		.loc 1 119 0
 445 0000 0122     		movs	r2, #1
 446 0002 014B     		ldr	r3, .L35
 447 0004 9A71     		strb	r2, [r3, #6]
 448 0006 7047     		bx	lr
 449              	.L36:
 450              		.align	2
 451              	.L35:
 452 0008 00000000 		.word	adc_Rdati
 453              		.cfi_endproc
 454              	.LFE71:
 456              		.comm	adc_Rdati,8,4
 457              		.comm	buffer,6,4
 458              		.comm	hdma_adc1,56,4
 459              		.comm	hadc1,48,4
 460              		.text
 461              	.Letext0:
 462              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 463              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 464              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 465              		.file 5 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 466              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
ARM GAS  /tmp/ccwfR6Sc.s 			page 11


 467              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 468              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 469              		.file 9 "./Inc/ADC_R.h"
 470              		.file 10 "./Drivers/CMSIS/Include/core_cm3.h"
 471              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccwfR6Sc.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 ADC_R.c
     /tmp/ccwfR6Sc.s:20     .text.ADC_R_init:00000000 $t
     /tmp/ccwfR6Sc.s:25     .text.ADC_R_init:00000000 ADC_R_init
     /tmp/ccwfR6Sc.s:141    .text.ADC_R_init:00000094 $d
                            *COM*:00000030 hadc1
                            *COM*:00000008 adc_Rdati
     /tmp/ccwfR6Sc.s:153    .text.GET_BATTERY_VOLT:00000000 $t
     /tmp/ccwfR6Sc.s:158    .text.GET_BATTERY_VOLT:00000000 GET_BATTERY_VOLT
     /tmp/ccwfR6Sc.s:200    .text.GET_BATTERY_VOLT:00000030 $d
     /tmp/ccwfR6Sc.s:208    .text.GET_MOTOR_R_AMP:00000000 $t
     /tmp/ccwfR6Sc.s:213    .text.GET_MOTOR_R_AMP:00000000 GET_MOTOR_R_AMP
     /tmp/ccwfR6Sc.s:262    .text.GET_MOTOR_R_AMP:00000038 $d
     /tmp/ccwfR6Sc.s:269    .text.ADC_MOTOR_RIGHT_IS_CONV:00000000 $t
     /tmp/ccwfR6Sc.s:274    .text.ADC_MOTOR_RIGHT_IS_CONV:00000000 ADC_MOTOR_RIGHT_IS_CONV
     /tmp/ccwfR6Sc.s:306    .text.ADC_MOTOR_RIGHT_IS_CONV:00000018 $d
     /tmp/ccwfR6Sc.s:311    .text.ADC_MOTOR_RIGHT:00000000 $t
     /tmp/ccwfR6Sc.s:316    .text.ADC_MOTOR_RIGHT:00000000 ADC_MOTOR_RIGHT
     /tmp/ccwfR6Sc.s:348    .text.ADC_MOTOR_RIGHT:00000018 $d
     /tmp/ccwfR6Sc.s:353    .text.ADC_BATTERY:00000000 $t
     /tmp/ccwfR6Sc.s:358    .text.ADC_BATTERY:00000000 ADC_BATTERY
     /tmp/ccwfR6Sc.s:390    .text.ADC_BATTERY:00000018 $d
     /tmp/ccwfR6Sc.s:395    .text.ADC_R_ResetFlag:00000000 $t
     /tmp/ccwfR6Sc.s:400    .text.ADC_R_ResetFlag:00000000 ADC_R_ResetFlag
     /tmp/ccwfR6Sc.s:427    .text.ADC_R_ResetFlag:00000018 $d
     /tmp/ccwfR6Sc.s:432    .text.ADC_R_callback:00000000 $t
     /tmp/ccwfR6Sc.s:437    .text.ADC_R_callback:00000000 ADC_R_callback
     /tmp/ccwfR6Sc.s:452    .text.ADC_R_callback:00000008 $d
                            *COM*:00000006 buffer
                            *COM*:00000038 hdma_adc1
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
Error_Handler
HAL_ADC_ConfigChannel
HAL_ADC_Start
HAL_ADC_Start_DMA
__aeabi_ui2f
__aeabi_f2d
__aeabi_dmul
__aeabi_d2f
HAL_NVIC_DisableIRQ
__aeabi_i2d
