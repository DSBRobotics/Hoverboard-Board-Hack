ARM GAS  /tmp/ccOEBSXE.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"eeprom.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.EE_VerifyPageFullyErased,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	EE_VerifyPageFullyErased:
  25              	.LFB65:
  26              		.file 1 "./Src/eeprom.c"
   1:./Src/eeprom.c **** /**
   2:./Src/eeprom.c ****   ******************************************************************************
   3:./Src/eeprom.c ****   * @file    EEPROM_Emulation/src/eeprom.c 
   4:./Src/eeprom.c ****   * @author  MCD Application Team
   5:./Src/eeprom.c ****   * @version V1.3.0
   6:./Src/eeprom.c ****   * @date    18-December-2015
   7:./Src/eeprom.c ****   * @brief   This file provides all the EEPROM emulation firmware functions.
   8:./Src/eeprom.c ****   ******************************************************************************
   9:./Src/eeprom.c ****   * @attention
  10:./Src/eeprom.c ****   *
  11:./Src/eeprom.c ****   * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
  12:./Src/eeprom.c ****   *
  13:./Src/eeprom.c ****   * Redistribution and use in source and binary forms, with or without modification,
  14:./Src/eeprom.c ****   * are permitted provided that the following conditions are met:
  15:./Src/eeprom.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  16:./Src/eeprom.c ****   *      this list of conditions and the following disclaimer.
  17:./Src/eeprom.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  18:./Src/eeprom.c ****   *      this list of conditions and the following disclaimer in the documentation
  19:./Src/eeprom.c ****   *      and/or other materials provided with the distribution.
  20:./Src/eeprom.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  21:./Src/eeprom.c ****   *      may be used to endorse or promote products derived from this software
  22:./Src/eeprom.c ****   *      without specific prior written permission.
  23:./Src/eeprom.c ****   *
  24:./Src/eeprom.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./Src/eeprom.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./Src/eeprom.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  27:./Src/eeprom.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  28:./Src/eeprom.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  29:./Src/eeprom.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  30:./Src/eeprom.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  31:./Src/eeprom.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  32:./Src/eeprom.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccOEBSXE.s 			page 2


  33:./Src/eeprom.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:./Src/eeprom.c ****   *
  35:./Src/eeprom.c ****   ******************************************************************************
  36:./Src/eeprom.c ****   */ 
  37:./Src/eeprom.c **** 
  38:./Src/eeprom.c **** /** @addtogroup EEPROM_Emulation
  39:./Src/eeprom.c ****   * @{
  40:./Src/eeprom.c ****   */ 
  41:./Src/eeprom.c **** 
  42:./Src/eeprom.c **** /* Includes ------------------------------------------------------------------*/
  43:./Src/eeprom.c **** #include "eeprom.h"
  44:./Src/eeprom.c **** 
  45:./Src/eeprom.c **** /* Private typedef -----------------------------------------------------------*/
  46:./Src/eeprom.c **** /* Private define ------------------------------------------------------------*/
  47:./Src/eeprom.c **** /* Private macro -------------------------------------------------------------*/
  48:./Src/eeprom.c **** /* Private variables ---------------------------------------------------------*/
  49:./Src/eeprom.c **** 
  50:./Src/eeprom.c **** /* Global variable used to store variable value in read sequence */
  51:./Src/eeprom.c **** uint16_t DataVar = 0;
  52:./Src/eeprom.c **** 
  53:./Src/eeprom.c **** /* Virtual address defined by the user: 0xFFFF value is prohibited */
  54:./Src/eeprom.c **** extern uint16_t VirtAddVarTab[NB_OF_VAR];
  55:./Src/eeprom.c **** 
  56:./Src/eeprom.c **** /* Private function prototypes -----------------------------------------------*/
  57:./Src/eeprom.c **** /* Private functions ---------------------------------------------------------*/
  58:./Src/eeprom.c **** static HAL_StatusTypeDef EE_Format(void);
  59:./Src/eeprom.c **** static uint16_t EE_FindValidPage(uint8_t Operation);
  60:./Src/eeprom.c **** static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data);
  61:./Src/eeprom.c **** static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data);
  62:./Src/eeprom.c **** static uint16_t EE_VerifyPageFullyErased(uint32_t Address);
  63:./Src/eeprom.c **** 
  64:./Src/eeprom.c **** /**
  65:./Src/eeprom.c ****   * @brief  Restore the pages to a known good state in case of page's status
  66:./Src/eeprom.c ****   *   corruption after a power loss.
  67:./Src/eeprom.c ****   * @param  None.
  68:./Src/eeprom.c ****   * @retval - Flash error code: on write Flash error
  69:./Src/eeprom.c ****   *         - FLASH_COMPLETE: on success
  70:./Src/eeprom.c ****   */
  71:./Src/eeprom.c **** uint16_t EE_Init(void)
  72:./Src/eeprom.c **** {
  73:./Src/eeprom.c ****   uint16_t pagestatus0 = 6, pagestatus1 = 6;
  74:./Src/eeprom.c ****   uint16_t varidx = 0;
  75:./Src/eeprom.c ****   uint16_t eepromstatus = 0, readstatus = 0;
  76:./Src/eeprom.c ****   int16_t x = -1;
  77:./Src/eeprom.c ****   HAL_StatusTypeDef  flashstatus;
  78:./Src/eeprom.c ****   uint32_t page_error = 0;
  79:./Src/eeprom.c ****   FLASH_EraseInitTypeDef s_eraseinit;
  80:./Src/eeprom.c **** 
  81:./Src/eeprom.c **** 
  82:./Src/eeprom.c ****   /* Get Page0 status */
  83:./Src/eeprom.c ****   pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
  84:./Src/eeprom.c ****   /* Get Page1 status */
  85:./Src/eeprom.c ****   pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
  86:./Src/eeprom.c **** 
  87:./Src/eeprom.c ****   /* Fill EraseInit structure*/
  88:./Src/eeprom.c ****   s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
  89:./Src/eeprom.c ****   s_eraseinit.PageAddress = PAGE0_ID;
ARM GAS  /tmp/ccOEBSXE.s 			page 3


  90:./Src/eeprom.c ****   s_eraseinit.NbPages     = 1;
  91:./Src/eeprom.c ****   
  92:./Src/eeprom.c ****   /* Check for invalid header states and repair if necessary */
  93:./Src/eeprom.c ****   switch (pagestatus0)
  94:./Src/eeprom.c ****   {
  95:./Src/eeprom.c ****     case ERASED:
  96:./Src/eeprom.c ****       if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
  97:./Src/eeprom.c ****       {
  98:./Src/eeprom.c ****           /* Erase Page0 */
  99:./Src/eeprom.c ****         if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 100:./Src/eeprom.c ****         {
 101:./Src/eeprom.c ****           flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 102:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 103:./Src/eeprom.c ****           if (flashstatus != HAL_OK)
 104:./Src/eeprom.c ****           {
 105:./Src/eeprom.c ****             return flashstatus;
 106:./Src/eeprom.c ****           }
 107:./Src/eeprom.c ****         }
 108:./Src/eeprom.c ****       }
 109:./Src/eeprom.c ****       else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 110:./Src/eeprom.c ****       {
 111:./Src/eeprom.c ****         /* Erase Page0 */
 112:./Src/eeprom.c ****         if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 113:./Src/eeprom.c ****         { 
 114:./Src/eeprom.c ****           flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 115:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 116:./Src/eeprom.c ****           if (flashstatus != HAL_OK)
 117:./Src/eeprom.c ****           {
 118:./Src/eeprom.c ****             return flashstatus;
 119:./Src/eeprom.c ****           }
 120:./Src/eeprom.c ****         }
 121:./Src/eeprom.c ****         /* Mark Page1 as valid */
 122:./Src/eeprom.c ****         flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE)
 123:./Src/eeprom.c ****         /* If program operation was failed, a Flash error code is returned */
 124:./Src/eeprom.c ****         if (flashstatus != HAL_OK)
 125:./Src/eeprom.c ****         {
 126:./Src/eeprom.c ****           return flashstatus;
 127:./Src/eeprom.c ****         }
 128:./Src/eeprom.c ****       }
 129:./Src/eeprom.c ****       else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
 130:./Src/eeprom.c ****       {
 131:./Src/eeprom.c ****         /* Erase both Page0 and Page1 and set Page0 as valid page */
 132:./Src/eeprom.c ****         flashstatus = EE_Format();
 133:./Src/eeprom.c ****         /* If erase/program operation was failed, a Flash error code is returned */
 134:./Src/eeprom.c ****         if (flashstatus != HAL_OK)
 135:./Src/eeprom.c ****         {
 136:./Src/eeprom.c ****           return flashstatus;
 137:./Src/eeprom.c ****         }
 138:./Src/eeprom.c ****       }
 139:./Src/eeprom.c ****       break;
 140:./Src/eeprom.c **** 
 141:./Src/eeprom.c ****     case RECEIVE_DATA:
 142:./Src/eeprom.c ****       if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 143:./Src/eeprom.c ****       {
 144:./Src/eeprom.c ****         /* Transfer data from Page1 to Page0 */
 145:./Src/eeprom.c ****         for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 146:./Src/eeprom.c ****         {
ARM GAS  /tmp/ccOEBSXE.s 			page 4


 147:./Src/eeprom.c ****           if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 148:./Src/eeprom.c ****           {
 149:./Src/eeprom.c ****             x = varidx;
 150:./Src/eeprom.c ****           }
 151:./Src/eeprom.c ****           if (varidx != x)
 152:./Src/eeprom.c ****           {
 153:./Src/eeprom.c ****             /* Read the last variables' updates */
 154:./Src/eeprom.c ****             readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 155:./Src/eeprom.c ****             /* In case variable corresponding to the virtual address was found */
 156:./Src/eeprom.c ****             if (readstatus != 0x1)
 157:./Src/eeprom.c ****             {
 158:./Src/eeprom.c ****               /* Transfer the variable to the Page0 */
 159:./Src/eeprom.c ****               eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 160:./Src/eeprom.c ****               /* If program operation was failed, a Flash error code is returned */
 161:./Src/eeprom.c ****               if (eepromstatus != HAL_OK)
 162:./Src/eeprom.c ****               {
 163:./Src/eeprom.c ****                 return eepromstatus;
 164:./Src/eeprom.c ****               }
 165:./Src/eeprom.c ****             }
 166:./Src/eeprom.c ****           }
 167:./Src/eeprom.c ****         }
 168:./Src/eeprom.c ****         /* Mark Page0 as valid */
 169:./Src/eeprom.c ****         flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE)
 170:./Src/eeprom.c ****         /* If program operation was failed, a Flash error code is returned */
 171:./Src/eeprom.c ****         if (flashstatus != HAL_OK)
 172:./Src/eeprom.c ****         {
 173:./Src/eeprom.c ****           return flashstatus;
 174:./Src/eeprom.c ****         }
 175:./Src/eeprom.c ****         s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 176:./Src/eeprom.c ****         s_eraseinit.PageAddress = PAGE1_ID;
 177:./Src/eeprom.c ****         s_eraseinit.NbPages     = 1;
 178:./Src/eeprom.c ****         /* Erase Page1 */
 179:./Src/eeprom.c ****         if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 180:./Src/eeprom.c ****         { 
 181:./Src/eeprom.c ****           flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 182:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 183:./Src/eeprom.c ****           if (flashstatus != HAL_OK)
 184:./Src/eeprom.c ****           {
 185:./Src/eeprom.c ****             return flashstatus;
 186:./Src/eeprom.c ****           }
 187:./Src/eeprom.c ****         }
 188:./Src/eeprom.c ****       }
 189:./Src/eeprom.c ****       else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 190:./Src/eeprom.c ****       {
 191:./Src/eeprom.c ****         s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 192:./Src/eeprom.c ****         s_eraseinit.PageAddress = PAGE1_ID;
 193:./Src/eeprom.c ****         s_eraseinit.NbPages     = 1;
 194:./Src/eeprom.c ****         /* Erase Page1 */
 195:./Src/eeprom.c ****         if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 196:./Src/eeprom.c ****         { 
 197:./Src/eeprom.c ****           flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 198:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 199:./Src/eeprom.c ****           if (flashstatus != HAL_OK)
 200:./Src/eeprom.c ****           {
 201:./Src/eeprom.c ****             return flashstatus;
 202:./Src/eeprom.c ****           }
 203:./Src/eeprom.c ****         }
ARM GAS  /tmp/ccOEBSXE.s 			page 5


 204:./Src/eeprom.c ****         /* Mark Page0 as valid */
 205:./Src/eeprom.c ****         flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE)
 206:./Src/eeprom.c ****         /* If program operation was failed, a Flash error code is returned */
 207:./Src/eeprom.c ****         if (flashstatus != HAL_OK)
 208:./Src/eeprom.c ****         {
 209:./Src/eeprom.c ****           return flashstatus;
 210:./Src/eeprom.c ****         }
 211:./Src/eeprom.c ****       }
 212:./Src/eeprom.c ****       else /* Invalid state -> format eeprom */
 213:./Src/eeprom.c ****       {
 214:./Src/eeprom.c ****         /* Erase both Page0 and Page1 and set Page0 as valid page */
 215:./Src/eeprom.c ****         flashstatus = EE_Format();
 216:./Src/eeprom.c ****         /* If erase/program operation was failed, a Flash error code is returned */
 217:./Src/eeprom.c ****         if (flashstatus != HAL_OK)
 218:./Src/eeprom.c ****         {
 219:./Src/eeprom.c ****           return flashstatus;
 220:./Src/eeprom.c ****         }
 221:./Src/eeprom.c ****       }
 222:./Src/eeprom.c ****       break;
 223:./Src/eeprom.c **** 
 224:./Src/eeprom.c ****     case VALID_PAGE:
 225:./Src/eeprom.c ****       if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 226:./Src/eeprom.c ****       {
 227:./Src/eeprom.c ****         /* Erase both Page0 and Page1 and set Page0 as valid page */
 228:./Src/eeprom.c ****         flashstatus = EE_Format();
 229:./Src/eeprom.c ****         /* If erase/program operation was failed, a Flash error code is returned */
 230:./Src/eeprom.c ****         if (flashstatus != HAL_OK)
 231:./Src/eeprom.c ****         {
 232:./Src/eeprom.c ****           return flashstatus;
 233:./Src/eeprom.c ****         }
 234:./Src/eeprom.c ****       }
 235:./Src/eeprom.c ****       else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 236:./Src/eeprom.c ****       {
 237:./Src/eeprom.c ****         s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 238:./Src/eeprom.c ****         s_eraseinit.PageAddress = PAGE1_ID;
 239:./Src/eeprom.c ****         s_eraseinit.NbPages     = 1;
 240:./Src/eeprom.c ****         /* Erase Page1 */
 241:./Src/eeprom.c ****         if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 242:./Src/eeprom.c ****         { 
 243:./Src/eeprom.c ****           flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 244:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 245:./Src/eeprom.c ****           if (flashstatus != HAL_OK)
 246:./Src/eeprom.c ****           {
 247:./Src/eeprom.c ****             return flashstatus;
 248:./Src/eeprom.c ****           }
 249:./Src/eeprom.c ****         }
 250:./Src/eeprom.c ****       }
 251:./Src/eeprom.c ****       else /* Page0 valid, Page1 receive */
 252:./Src/eeprom.c ****       {
 253:./Src/eeprom.c ****         /* Transfer data from Page0 to Page1 */
 254:./Src/eeprom.c ****         for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 255:./Src/eeprom.c ****         {
 256:./Src/eeprom.c ****           if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 257:./Src/eeprom.c ****           {
 258:./Src/eeprom.c ****             x = varidx;
 259:./Src/eeprom.c ****           }
 260:./Src/eeprom.c ****           if (varidx != x)
ARM GAS  /tmp/ccOEBSXE.s 			page 6


 261:./Src/eeprom.c ****           {
 262:./Src/eeprom.c ****             /* Read the last variables' updates */
 263:./Src/eeprom.c ****             readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 264:./Src/eeprom.c ****             /* In case variable corresponding to the virtual address was found */
 265:./Src/eeprom.c ****             if (readstatus != 0x1)
 266:./Src/eeprom.c ****             {
 267:./Src/eeprom.c ****               /* Transfer the variable to the Page1 */
 268:./Src/eeprom.c ****               eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 269:./Src/eeprom.c ****               /* If program operation was failed, a Flash error code is returned */
 270:./Src/eeprom.c ****               if (eepromstatus != HAL_OK)
 271:./Src/eeprom.c ****               {
 272:./Src/eeprom.c ****                 return eepromstatus;
 273:./Src/eeprom.c ****               }
 274:./Src/eeprom.c ****             }
 275:./Src/eeprom.c ****           }
 276:./Src/eeprom.c ****         }
 277:./Src/eeprom.c ****         /* Mark Page1 as valid */
 278:./Src/eeprom.c ****         flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE)
 279:./Src/eeprom.c ****         /* If program operation was failed, a Flash error code is returned */
 280:./Src/eeprom.c ****         if (flashstatus != HAL_OK)
 281:./Src/eeprom.c ****         {
 282:./Src/eeprom.c ****           return flashstatus;
 283:./Src/eeprom.c ****         }
 284:./Src/eeprom.c ****         s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 285:./Src/eeprom.c ****         s_eraseinit.PageAddress = PAGE0_ID;
 286:./Src/eeprom.c ****         s_eraseinit.NbPages     = 1;
 287:./Src/eeprom.c ****         /* Erase Page0 */
 288:./Src/eeprom.c ****         if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 289:./Src/eeprom.c ****         { 
 290:./Src/eeprom.c ****           flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 291:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 292:./Src/eeprom.c ****           if (flashstatus != HAL_OK)
 293:./Src/eeprom.c ****           {
 294:./Src/eeprom.c ****             return flashstatus;
 295:./Src/eeprom.c ****           }
 296:./Src/eeprom.c ****         }
 297:./Src/eeprom.c ****       }
 298:./Src/eeprom.c ****       break;
 299:./Src/eeprom.c **** 
 300:./Src/eeprom.c ****     default:  /* Any other state -> format eeprom */
 301:./Src/eeprom.c ****       /* Erase both Page0 and Page1 and set Page0 as valid page */
 302:./Src/eeprom.c ****       flashstatus = EE_Format();
 303:./Src/eeprom.c ****       /* If erase/program operation was failed, a Flash error code is returned */
 304:./Src/eeprom.c ****       if (flashstatus != HAL_OK)
 305:./Src/eeprom.c ****       {
 306:./Src/eeprom.c ****         return flashstatus;
 307:./Src/eeprom.c ****       }
 308:./Src/eeprom.c ****       break;
 309:./Src/eeprom.c ****   }
 310:./Src/eeprom.c **** 
 311:./Src/eeprom.c ****   return HAL_OK;
 312:./Src/eeprom.c **** }
 313:./Src/eeprom.c **** 
 314:./Src/eeprom.c **** /**
 315:./Src/eeprom.c ****   * @brief  Verify if specified page is fully erased.
 316:./Src/eeprom.c ****   * @param  Address: page address
 317:./Src/eeprom.c ****   *   This parameter can be one of the following values:
ARM GAS  /tmp/ccOEBSXE.s 			page 7


 318:./Src/eeprom.c ****   *     @arg PAGE0_BASE_ADDRESS: Page0 base address
 319:./Src/eeprom.c ****   *     @arg PAGE1_BASE_ADDRESS: Page1 base address
 320:./Src/eeprom.c ****   * @retval page fully erased status:
 321:./Src/eeprom.c ****   *           - 0: if Page not erased
 322:./Src/eeprom.c ****   *           - 1: if Page erased
 323:./Src/eeprom.c ****   */
 324:./Src/eeprom.c **** uint16_t EE_VerifyPageFullyErased(uint32_t Address)
 325:./Src/eeprom.c **** {
  27              		.loc 1 325 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 326:./Src/eeprom.c ****   uint32_t readstatus = 1;
 327:./Src/eeprom.c ****   uint16_t addressvalue = 0x5555;
 328:./Src/eeprom.c ****     
 329:./Src/eeprom.c ****   /* Check each active page address starting from end */
 330:./Src/eeprom.c ****   while (Address <= PAGE0_END_ADDRESS)
  33              		.loc 1 330 0
  34 0000 06E0     		b	.L2
  35              	.LVL1:
  36              	.L4:
 331:./Src/eeprom.c ****   {
 332:./Src/eeprom.c ****     /* Get the current location content to be compared with virtual address */
 333:./Src/eeprom.c ****     addressvalue = (*(__IO uint16_t*)Address);
  37              		.loc 1 333 0
  38 0002 0388     		ldrh	r3, [r0]
  39 0004 9BB2     		uxth	r3, r3
  40              	.LVL2:
 334:./Src/eeprom.c **** 
 335:./Src/eeprom.c ****     /* Compare the read address with the virtual address */
 336:./Src/eeprom.c ****     if (addressvalue != ERASED)
  41              		.loc 1 336 0
  42 0006 4FF6FF72 		movw	r2, #65535
  43 000a 9342     		cmp	r3, r2
  44 000c 05D1     		bne	.L5
 337:./Src/eeprom.c ****     {
 338:./Src/eeprom.c ****       
 339:./Src/eeprom.c ****       /* In case variable value is read, reset readstatus flag */
 340:./Src/eeprom.c ****       readstatus = 0;
 341:./Src/eeprom.c **** 
 342:./Src/eeprom.c ****       break;
 343:./Src/eeprom.c ****     }
 344:./Src/eeprom.c ****     /* Next address location */
 345:./Src/eeprom.c ****     Address = Address + 4;
  45              		.loc 1 345 0
  46 000e 0430     		adds	r0, r0, #4
  47              	.LVL3:
  48              	.L2:
 330:./Src/eeprom.c ****   {
  49              		.loc 1 330 0
  50 0010 034B     		ldr	r3, .L6
  51 0012 9842     		cmp	r0, r3
  52 0014 F5D9     		bls	.L4
 326:./Src/eeprom.c ****   uint16_t addressvalue = 0x5555;
  53              		.loc 1 326 0
ARM GAS  /tmp/ccOEBSXE.s 			page 8


  54 0016 0120     		movs	r0, #1
  55              	.LVL4:
  56 0018 7047     		bx	lr
  57              	.LVL5:
  58              	.L5:
 340:./Src/eeprom.c **** 
  59              		.loc 1 340 0
  60 001a 0020     		movs	r0, #0
  61              	.LVL6:
 346:./Src/eeprom.c ****   }
 347:./Src/eeprom.c ****   
 348:./Src/eeprom.c ****   /* Return readstatus value: (0: Page not erased, 1: Page erased) */
 349:./Src/eeprom.c ****   return readstatus;
 350:./Src/eeprom.c **** }
  62              		.loc 1 350 0
  63 001c 7047     		bx	lr
  64              	.L7:
  65 001e 00BF     		.align	2
  66              	.L6:
  67 0020 FF870008 		.word	134252543
  68              		.cfi_endproc
  69              	.LFE65:
  71              		.section	.text.EE_FindValidPage,"ax",%progbits
  72              		.align	2
  73              		.thumb
  74              		.thumb_func
  76              	EE_FindValidPage:
  77              	.LFB69:
 351:./Src/eeprom.c **** 
 352:./Src/eeprom.c **** /**
 353:./Src/eeprom.c ****   * @brief  Returns the last stored variable data, if found, which correspond to
 354:./Src/eeprom.c ****   *   the passed virtual address
 355:./Src/eeprom.c ****   * @param  VirtAddress: Variable virtual address
 356:./Src/eeprom.c ****   * @param  Data: Global variable contains the read variable value
 357:./Src/eeprom.c ****   * @retval Success or error status:
 358:./Src/eeprom.c ****   *           - 0: if variable was found
 359:./Src/eeprom.c ****   *           - 1: if the variable was not found
 360:./Src/eeprom.c ****   *           - NO_VALID_PAGE: if no valid page was found.
 361:./Src/eeprom.c ****   */
 362:./Src/eeprom.c **** uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
 363:./Src/eeprom.c **** {
 364:./Src/eeprom.c ****   uint16_t validpage = PAGE0;
 365:./Src/eeprom.c ****   uint16_t addressvalue = 0x5555, readstatus = 1;
 366:./Src/eeprom.c ****   uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 367:./Src/eeprom.c **** 
 368:./Src/eeprom.c ****   /* Get active Page for read operation */
 369:./Src/eeprom.c ****   validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 370:./Src/eeprom.c **** 
 371:./Src/eeprom.c ****   /* Check if there is no valid page */
 372:./Src/eeprom.c ****   if (validpage == NO_VALID_PAGE)
 373:./Src/eeprom.c ****   {
 374:./Src/eeprom.c ****     return  NO_VALID_PAGE;
 375:./Src/eeprom.c ****   }
 376:./Src/eeprom.c **** 
 377:./Src/eeprom.c ****   /* Get the valid Page start Address */
 378:./Src/eeprom.c ****   PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 379:./Src/eeprom.c **** 
ARM GAS  /tmp/ccOEBSXE.s 			page 9


 380:./Src/eeprom.c ****   /* Get the valid Page end Address */
 381:./Src/eeprom.c ****   address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 382:./Src/eeprom.c **** 
 383:./Src/eeprom.c ****   /* Check each active page address starting from end */
 384:./Src/eeprom.c ****   while (address > (PageStartAddress + 2))
 385:./Src/eeprom.c ****   {
 386:./Src/eeprom.c ****     /* Get the current location content to be compared with virtual address */
 387:./Src/eeprom.c ****     addressvalue = (*(__IO uint16_t*)address);
 388:./Src/eeprom.c **** 
 389:./Src/eeprom.c ****     /* Compare the read address with the virtual address */
 390:./Src/eeprom.c ****     if (addressvalue == VirtAddress)
 391:./Src/eeprom.c ****     {
 392:./Src/eeprom.c ****       /* Get content of Address-2 which is variable value */
 393:./Src/eeprom.c ****       *Data = (*(__IO uint16_t*)(address - 2));
 394:./Src/eeprom.c **** 
 395:./Src/eeprom.c ****       /* In case variable value is read, reset readstatus flag */
 396:./Src/eeprom.c ****       readstatus = 0;
 397:./Src/eeprom.c **** 
 398:./Src/eeprom.c ****       break;
 399:./Src/eeprom.c ****     }
 400:./Src/eeprom.c ****     else
 401:./Src/eeprom.c ****     {
 402:./Src/eeprom.c ****       /* Next address location */
 403:./Src/eeprom.c ****       address = address - 4;
 404:./Src/eeprom.c ****     }
 405:./Src/eeprom.c ****   }
 406:./Src/eeprom.c **** 
 407:./Src/eeprom.c ****   /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
 408:./Src/eeprom.c ****   return readstatus;
 409:./Src/eeprom.c **** }
 410:./Src/eeprom.c **** 
 411:./Src/eeprom.c **** /**
 412:./Src/eeprom.c ****   * @brief  Writes/upadtes variable data in EEPROM.
 413:./Src/eeprom.c ****   * @param  VirtAddress: Variable virtual address
 414:./Src/eeprom.c ****   * @param  Data: 16 bit data to be written
 415:./Src/eeprom.c ****   * @retval Success or error status:
 416:./Src/eeprom.c ****   *           - FLASH_COMPLETE: on success
 417:./Src/eeprom.c ****   *           - PAGE_FULL: if valid page is full
 418:./Src/eeprom.c ****   *           - NO_VALID_PAGE: if no valid page was found
 419:./Src/eeprom.c ****   *           - Flash error code: on write Flash error
 420:./Src/eeprom.c ****   */
 421:./Src/eeprom.c **** uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
 422:./Src/eeprom.c **** {
 423:./Src/eeprom.c ****   uint16_t Status = 0;
 424:./Src/eeprom.c **** 
 425:./Src/eeprom.c ****   /* Write the variable virtual address and value in the EEPROM */
 426:./Src/eeprom.c ****   Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 427:./Src/eeprom.c **** 
 428:./Src/eeprom.c ****   /* In case the EEPROM active page is full */
 429:./Src/eeprom.c ****   if (Status == PAGE_FULL)
 430:./Src/eeprom.c ****   {
 431:./Src/eeprom.c ****     /* Perform Page transfer */
 432:./Src/eeprom.c ****     Status = EE_PageTransfer(VirtAddress, Data);
 433:./Src/eeprom.c ****   }
 434:./Src/eeprom.c **** 
 435:./Src/eeprom.c ****   /* Return last operation status */
 436:./Src/eeprom.c ****   return Status;
ARM GAS  /tmp/ccOEBSXE.s 			page 10


 437:./Src/eeprom.c **** }
 438:./Src/eeprom.c **** 
 439:./Src/eeprom.c **** /**
 440:./Src/eeprom.c ****   * @brief  Erases PAGE and PAGE1 and writes VALID_PAGE header to PAGE
 441:./Src/eeprom.c ****   * @param  None
 442:./Src/eeprom.c ****   * @retval Status of the last operation (Flash write or erase) done during
 443:./Src/eeprom.c ****   *         EEPROM formating
 444:./Src/eeprom.c ****   */
 445:./Src/eeprom.c **** static HAL_StatusTypeDef EE_Format(void)
 446:./Src/eeprom.c **** {
 447:./Src/eeprom.c ****   HAL_StatusTypeDef flashstatus = HAL_OK;
 448:./Src/eeprom.c ****   uint32_t page_error = 0;
 449:./Src/eeprom.c ****   FLASH_EraseInitTypeDef s_eraseinit;
 450:./Src/eeprom.c **** 
 451:./Src/eeprom.c ****   s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 452:./Src/eeprom.c ****   s_eraseinit.PageAddress = PAGE0_ID;
 453:./Src/eeprom.c ****   s_eraseinit.NbPages     = 1;
 454:./Src/eeprom.c ****   /* Erase Page0 */
 455:./Src/eeprom.c ****   if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 456:./Src/eeprom.c ****   {
 457:./Src/eeprom.c ****     flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 458:./Src/eeprom.c ****     /* If erase operation was failed, a Flash error code is returned */
 459:./Src/eeprom.c ****     if (flashstatus != HAL_OK)
 460:./Src/eeprom.c ****     {
 461:./Src/eeprom.c ****       return flashstatus;
 462:./Src/eeprom.c ****     }
 463:./Src/eeprom.c ****   }
 464:./Src/eeprom.c ****   /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
 465:./Src/eeprom.c ****   flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 466:./Src/eeprom.c ****   /* If program operation was failed, a Flash error code is returned */
 467:./Src/eeprom.c ****   if (flashstatus != HAL_OK)
 468:./Src/eeprom.c ****   {
 469:./Src/eeprom.c ****     return flashstatus;
 470:./Src/eeprom.c ****   }
 471:./Src/eeprom.c **** 
 472:./Src/eeprom.c ****   s_eraseinit.PageAddress = PAGE1_ID;
 473:./Src/eeprom.c ****   /* Erase Page1 */
 474:./Src/eeprom.c ****   if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 475:./Src/eeprom.c ****   {  
 476:./Src/eeprom.c ****     flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 477:./Src/eeprom.c ****     /* If erase operation was failed, a Flash error code is returned */
 478:./Src/eeprom.c ****     if (flashstatus != HAL_OK)
 479:./Src/eeprom.c ****     {
 480:./Src/eeprom.c ****       return flashstatus;
 481:./Src/eeprom.c ****     }
 482:./Src/eeprom.c ****   }
 483:./Src/eeprom.c ****   
 484:./Src/eeprom.c ****   return HAL_OK;
 485:./Src/eeprom.c **** }
 486:./Src/eeprom.c **** 
 487:./Src/eeprom.c **** /**
 488:./Src/eeprom.c ****   * @brief  Find valid Page for write or read operation
 489:./Src/eeprom.c ****   * @param  Operation: operation to achieve on the valid page.
 490:./Src/eeprom.c ****   *   This parameter can be one of the following values:
 491:./Src/eeprom.c ****   *     @arg READ_FROM_VALID_PAGE: read operation from valid page
 492:./Src/eeprom.c ****   *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
 493:./Src/eeprom.c ****   * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
ARM GAS  /tmp/ccOEBSXE.s 			page 11


 494:./Src/eeprom.c ****   *   of no valid page was found
 495:./Src/eeprom.c ****   */
 496:./Src/eeprom.c **** static uint16_t EE_FindValidPage(uint8_t Operation)
 497:./Src/eeprom.c **** {
  78              		.loc 1 497 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL7:
 498:./Src/eeprom.c ****   uint16_t pagestatus0 = 6, pagestatus1 = 6;
 499:./Src/eeprom.c **** 
 500:./Src/eeprom.c ****   /* Get Page0 actual status */
 501:./Src/eeprom.c ****   pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
  84              		.loc 1 501 0
  85 0000 134B     		ldr	r3, .L20
  86 0002 1B88     		ldrh	r3, [r3]
  87 0004 9BB2     		uxth	r3, r3
  88              	.LVL8:
 502:./Src/eeprom.c **** 
 503:./Src/eeprom.c ****   /* Get Page1 actual status */
 504:./Src/eeprom.c ****   pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
  89              		.loc 1 504 0
  90 0006 134A     		ldr	r2, .L20+4
  91 0008 1288     		ldrh	r2, [r2]
  92 000a 92B2     		uxth	r2, r2
  93              	.LVL9:
 505:./Src/eeprom.c **** 
 506:./Src/eeprom.c ****   /* Write or read operation */
 507:./Src/eeprom.c ****   switch (Operation)
  94              		.loc 1 507 0
  95 000c 78B1     		cbz	r0, .L10
  96 000e 0128     		cmp	r0, #1
  97 0010 11D1     		bne	.L19
 508:./Src/eeprom.c ****   {
 509:./Src/eeprom.c ****     case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
 510:./Src/eeprom.c ****       if (pagestatus1 == VALID_PAGE)
  98              		.loc 1 510 0
  99 0012 2AB9     		cbnz	r2, .L12
 511:./Src/eeprom.c ****       {
 512:./Src/eeprom.c ****         /* Page0 receiving data */
 513:./Src/eeprom.c ****         if (pagestatus0 == RECEIVE_DATA)
 100              		.loc 1 513 0
 101 0014 4EF6EE62 		movw	r2, #61166
 102              	.LVL10:
 103 0018 9342     		cmp	r3, r2
 104 001a 0ED1     		bne	.L14
 514:./Src/eeprom.c ****         {
 515:./Src/eeprom.c ****           return PAGE0;         /* Page0 valid */
 105              		.loc 1 515 0
 106 001c 0020     		movs	r0, #0
 107              	.LVL11:
 108 001e 7047     		bx	lr
 109              	.LVL12:
 110              	.L12:
 516:./Src/eeprom.c ****         }
 517:./Src/eeprom.c ****         else
ARM GAS  /tmp/ccOEBSXE.s 			page 12


 518:./Src/eeprom.c ****         {
 519:./Src/eeprom.c ****           return PAGE1;         /* Page1 valid */
 520:./Src/eeprom.c ****         }
 521:./Src/eeprom.c ****       }
 522:./Src/eeprom.c ****       else if (pagestatus0 == VALID_PAGE)
 111              		.loc 1 522 0
 112 0020 6BB9     		cbnz	r3, .L15
 523:./Src/eeprom.c ****       {
 524:./Src/eeprom.c ****         /* Page1 receiving data */
 525:./Src/eeprom.c ****         if (pagestatus1 == RECEIVE_DATA)
 113              		.loc 1 525 0
 114 0022 4EF6EE63 		movw	r3, #61166
 115              	.LVL13:
 116 0026 9A42     		cmp	r2, r3
 117 0028 0BD1     		bne	.L16
 526:./Src/eeprom.c ****         {
 527:./Src/eeprom.c ****           return PAGE1;         /* Page1 valid */
 118              		.loc 1 527 0
 119 002a 4020     		movs	r0, #64
 120              	.LVL14:
 121 002c 7047     		bx	lr
 122              	.LVL15:
 123              	.L10:
 528:./Src/eeprom.c ****         }
 529:./Src/eeprom.c ****         else
 530:./Src/eeprom.c ****         {
 531:./Src/eeprom.c ****           return PAGE0;         /* Page0 valid */
 532:./Src/eeprom.c ****         }
 533:./Src/eeprom.c ****       }
 534:./Src/eeprom.c ****       else
 535:./Src/eeprom.c ****       {
 536:./Src/eeprom.c ****         return NO_VALID_PAGE;   /* No valid Page */
 537:./Src/eeprom.c ****       }
 538:./Src/eeprom.c **** 
 539:./Src/eeprom.c ****     case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
 540:./Src/eeprom.c ****       if (pagestatus0 == VALID_PAGE)
 124              		.loc 1 540 0
 125 002e 53B1     		cbz	r3, .L17
 541:./Src/eeprom.c ****       {
 542:./Src/eeprom.c ****         return PAGE0;           /* Page0 valid */
 543:./Src/eeprom.c ****       }
 544:./Src/eeprom.c ****       else if (pagestatus1 == VALID_PAGE)
 126              		.loc 1 544 0
 127 0030 5AB9     		cbnz	r2, .L18
 545:./Src/eeprom.c ****       {
 546:./Src/eeprom.c ****         return PAGE1;           /* Page1 valid */
 128              		.loc 1 546 0
 129 0032 4020     		movs	r0, #64
 130              	.LVL16:
 131 0034 7047     		bx	lr
 132              	.LVL17:
 133              	.L19:
 547:./Src/eeprom.c ****       }
 548:./Src/eeprom.c ****       else
 549:./Src/eeprom.c ****       {
 550:./Src/eeprom.c ****         return NO_VALID_PAGE ;  /* No valid Page */
 551:./Src/eeprom.c ****       }
ARM GAS  /tmp/ccOEBSXE.s 			page 13


 552:./Src/eeprom.c **** 
 553:./Src/eeprom.c ****     default:
 554:./Src/eeprom.c ****       return PAGE0;             /* Page0 valid */
 134              		.loc 1 554 0
 135 0036 0020     		movs	r0, #0
 136              	.LVL18:
 137 0038 7047     		bx	lr
 138              	.LVL19:
 139              	.L14:
 519:./Src/eeprom.c ****         }
 140              		.loc 1 519 0
 141 003a 4020     		movs	r0, #64
 142              	.LVL20:
 143 003c 7047     		bx	lr
 144              	.LVL21:
 145              	.L15:
 536:./Src/eeprom.c ****       }
 146              		.loc 1 536 0
 147 003e AB20     		movs	r0, #171
 148              	.LVL22:
 149 0040 7047     		bx	lr
 150              	.LVL23:
 151              	.L16:
 531:./Src/eeprom.c ****         }
 152              		.loc 1 531 0
 153 0042 0020     		movs	r0, #0
 154              	.LVL24:
 155 0044 7047     		bx	lr
 156              	.LVL25:
 157              	.L17:
 542:./Src/eeprom.c ****       }
 158              		.loc 1 542 0
 159 0046 0020     		movs	r0, #0
 160              	.LVL26:
 161 0048 7047     		bx	lr
 162              	.LVL27:
 163              	.L18:
 550:./Src/eeprom.c ****       }
 164              		.loc 1 550 0
 165 004a AB20     		movs	r0, #171
 166              	.LVL28:
 555:./Src/eeprom.c ****   }
 556:./Src/eeprom.c **** }
 167              		.loc 1 556 0
 168 004c 7047     		bx	lr
 169              	.L21:
 170 004e 00BF     		.align	2
 171              	.L20:
 172 0050 00800008 		.word	134250496
 173 0054 00800108 		.word	134316032
 174              		.cfi_endproc
 175              	.LFE69:
 177              		.section	.text.EE_VerifyPageFullWriteVariable,"ax",%progbits
 178              		.align	2
 179              		.thumb
 180              		.thumb_func
 182              	EE_VerifyPageFullWriteVariable:
ARM GAS  /tmp/ccOEBSXE.s 			page 14


 183              	.LFB70:
 557:./Src/eeprom.c **** 
 558:./Src/eeprom.c **** /**
 559:./Src/eeprom.c ****   * @brief  Verify if active page is full and Writes variable in EEPROM.
 560:./Src/eeprom.c ****   * @param  VirtAddress: 16 bit virtual address of the variable
 561:./Src/eeprom.c ****   * @param  Data: 16 bit data to be written as variable value
 562:./Src/eeprom.c ****   * @retval Success or error status:
 563:./Src/eeprom.c ****   *           - FLASH_COMPLETE: on success
 564:./Src/eeprom.c ****   *           - PAGE_FULL: if valid page is full
 565:./Src/eeprom.c ****   *           - NO_VALID_PAGE: if no valid page was found
 566:./Src/eeprom.c ****   *           - Flash error code: on write Flash error
 567:./Src/eeprom.c ****   */
 568:./Src/eeprom.c **** static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
 569:./Src/eeprom.c **** {
 184              		.loc 1 569 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              	.LVL29:
 189 0000 70B5     		push	{r4, r5, r6, lr}
 190              	.LCFI0:
 191              		.cfi_def_cfa_offset 16
 192              		.cfi_offset 4, -16
 193              		.cfi_offset 5, -12
 194              		.cfi_offset 6, -8
 195              		.cfi_offset 14, -4
 196 0002 0546     		mov	r5, r0
 197 0004 0E46     		mov	r6, r1
 198              	.LVL30:
 570:./Src/eeprom.c ****   HAL_StatusTypeDef flashstatus = HAL_OK;
 571:./Src/eeprom.c ****   uint16_t validpage = PAGE0;
 572:./Src/eeprom.c ****   uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 573:./Src/eeprom.c **** 
 574:./Src/eeprom.c ****   /* Get valid Page for write operation */
 575:./Src/eeprom.c ****   validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 199              		.loc 1 575 0
 200 0006 0120     		movs	r0, #1
 201              	.LVL31:
 202 0008 FFF7FEFF 		bl	EE_FindValidPage
 203              	.LVL32:
 576:./Src/eeprom.c ****   
 577:./Src/eeprom.c ****   /* Check if there is no valid page */
 578:./Src/eeprom.c ****   if (validpage == NO_VALID_PAGE)
 204              		.loc 1 578 0
 205 000c AB28     		cmp	r0, #171
 206 000e 22D0     		beq	.L28
 579:./Src/eeprom.c ****   {
 580:./Src/eeprom.c ****     return  NO_VALID_PAGE;
 581:./Src/eeprom.c ****   }
 582:./Src/eeprom.c **** 
 583:./Src/eeprom.c ****   /* Get the valid Page start address */
 584:./Src/eeprom.c ****   address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 207              		.loc 1 584 0
 208 0010 00F58034 		add	r4, r0, #65536
 209 0014 1034     		adds	r4, r4, #16
 210 0016 E402     		lsls	r4, r4, #11
 211              	.LVL33:
ARM GAS  /tmp/ccOEBSXE.s 			page 15


 585:./Src/eeprom.c **** 
 586:./Src/eeprom.c ****   /* Get the valid Page end address */
 587:./Src/eeprom.c ****   pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE))
 212              		.loc 1 587 0
 213 0018 0130     		adds	r0, r0, #1
 214              	.LVL34:
 215 001a 104B     		ldr	r3, .L30
 216 001c 03EBC020 		add	r0, r3, r0, lsl #11
 217              	.LVL35:
 588:./Src/eeprom.c **** 
 589:./Src/eeprom.c ****   /* Check each active page address starting from begining */
 590:./Src/eeprom.c ****   while (address < pageendaddress)
 218              		.loc 1 590 0
 219 0020 15E0     		b	.L24
 220              	.L27:
 591:./Src/eeprom.c ****   {
 592:./Src/eeprom.c ****     /* Verify if address and address+2 contents are 0xFFFFFFFF */
 593:./Src/eeprom.c ****     if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 221              		.loc 1 593 0
 222 0022 2368     		ldr	r3, [r4]
 223 0024 B3F1FF3F 		cmp	r3, #-1
 224 0028 10D1     		bne	.L25
 594:./Src/eeprom.c ****     {
 595:./Src/eeprom.c ****       /* Set variable data */
 596:./Src/eeprom.c ****       flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 225              		.loc 1 596 0
 226 002a B2B2     		uxth	r2, r6
 227 002c 0023     		movs	r3, #0
 228 002e 2146     		mov	r1, r4
 229 0030 0120     		movs	r0, #1
 230              	.LVL36:
 231 0032 FFF7FEFF 		bl	HAL_FLASH_Program
 232              	.LVL37:
 597:./Src/eeprom.c ****       /* If program operation was failed, a Flash error code is returned */
 598:./Src/eeprom.c ****       if (flashstatus != HAL_OK)
 233              		.loc 1 598 0
 234 0036 08B1     		cbz	r0, .L26
 599:./Src/eeprom.c ****       {
 600:./Src/eeprom.c ****         return flashstatus;
 235              		.loc 1 600 0
 236 0038 80B2     		uxth	r0, r0
 237              	.LVL38:
 238 003a 70BD     		pop	{r4, r5, r6, pc}
 239              	.LVL39:
 240              	.L26:
 601:./Src/eeprom.c ****       }
 602:./Src/eeprom.c ****       /* Set variable virtual address */
 603:./Src/eeprom.c ****       flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 241              		.loc 1 603 0
 242 003c AAB2     		uxth	r2, r5
 243 003e 0023     		movs	r3, #0
 244 0040 A11C     		adds	r1, r4, #2
 245 0042 0120     		movs	r0, #1
 246              	.LVL40:
 247 0044 FFF7FEFF 		bl	HAL_FLASH_Program
 248              	.LVL41:
 604:./Src/eeprom.c ****       /* Return program operation status */
ARM GAS  /tmp/ccOEBSXE.s 			page 16


 605:./Src/eeprom.c ****       return flashstatus;
 249              		.loc 1 605 0
 250 0048 80B2     		uxth	r0, r0
 251              	.LVL42:
 252 004a 70BD     		pop	{r4, r5, r6, pc}
 253              	.LVL43:
 254              	.L25:
 606:./Src/eeprom.c ****     }
 607:./Src/eeprom.c ****     else
 608:./Src/eeprom.c ****     {
 609:./Src/eeprom.c ****       /* Next address location */
 610:./Src/eeprom.c ****       address = address + 4;
 255              		.loc 1 610 0
 256 004c 0434     		adds	r4, r4, #4
 257              	.LVL44:
 258              	.L24:
 590:./Src/eeprom.c ****   {
 259              		.loc 1 590 0
 260 004e 8442     		cmp	r4, r0
 261 0050 E7D3     		bcc	.L27
 611:./Src/eeprom.c ****     }
 612:./Src/eeprom.c ****   }
 613:./Src/eeprom.c **** 
 614:./Src/eeprom.c ****   /* Return PAGE_FULL in case the valid page is full */
 615:./Src/eeprom.c ****   return PAGE_FULL;
 262              		.loc 1 615 0
 263 0052 8020     		movs	r0, #128
 264              	.LVL45:
 265 0054 70BD     		pop	{r4, r5, r6, pc}
 266              	.LVL46:
 267              	.L28:
 580:./Src/eeprom.c ****   }
 268              		.loc 1 580 0
 269 0056 AB20     		movs	r0, #171
 270              	.LVL47:
 616:./Src/eeprom.c **** }
 271              		.loc 1 616 0
 272 0058 70BD     		pop	{r4, r5, r6, pc}
 273              	.L31:
 274 005a 00BF     		.align	2
 275              	.L30:
 276 005c FF7F0008 		.word	134250495
 277              		.cfi_endproc
 278              	.LFE70:
 280              		.section	.text.EE_Format,"ax",%progbits
 281              		.align	2
 282              		.thumb
 283              		.thumb_func
 285              	EE_Format:
 286              	.LFB68:
 446:./Src/eeprom.c ****   HAL_StatusTypeDef flashstatus = HAL_OK;
 287              		.loc 1 446 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 24
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291 0000 00B5     		push	{lr}
 292              	.LCFI1:
ARM GAS  /tmp/ccOEBSXE.s 			page 17


 293              		.cfi_def_cfa_offset 4
 294              		.cfi_offset 14, -4
 295 0002 87B0     		sub	sp, sp, #28
 296              	.LCFI2:
 297              		.cfi_def_cfa_offset 32
 298              	.LVL48:
 448:./Src/eeprom.c ****   FLASH_EraseInitTypeDef s_eraseinit;
 299              		.loc 1 448 0
 300 0004 0023     		movs	r3, #0
 301 0006 0593     		str	r3, [sp, #20]
 451:./Src/eeprom.c ****   s_eraseinit.PageAddress = PAGE0_ID;
 302              		.loc 1 451 0
 303 0008 0193     		str	r3, [sp, #4]
 452:./Src/eeprom.c ****   s_eraseinit.NbPages     = 1;
 304              		.loc 1 452 0
 305 000a 1348     		ldr	r0, .L40
 306 000c 0390     		str	r0, [sp, #12]
 453:./Src/eeprom.c ****   /* Erase Page0 */
 307              		.loc 1 453 0
 308 000e 0123     		movs	r3, #1
 309 0010 0493     		str	r3, [sp, #16]
 455:./Src/eeprom.c ****   {
 310              		.loc 1 455 0
 311 0012 FFF7FEFF 		bl	EE_VerifyPageFullyErased
 312              	.LVL49:
 313 0016 20B9     		cbnz	r0, .L33
 457:./Src/eeprom.c ****     /* If erase operation was failed, a Flash error code is returned */
 314              		.loc 1 457 0
 315 0018 05A9     		add	r1, sp, #20
 316 001a 01A8     		add	r0, sp, #4
 317 001c FFF7FEFF 		bl	HAL_FLASHEx_Erase
 318              	.LVL50:
 459:./Src/eeprom.c ****     {
 319              		.loc 1 459 0
 320 0020 88B9     		cbnz	r0, .L35
 321              	.LVL51:
 322              	.L33:
 465:./Src/eeprom.c ****   /* If program operation was failed, a Flash error code is returned */
 323              		.loc 1 465 0
 324 0022 0022     		movs	r2, #0
 325 0024 0023     		movs	r3, #0
 326 0026 0C49     		ldr	r1, .L40
 327 0028 0120     		movs	r0, #1
 328 002a FFF7FEFF 		bl	HAL_FLASH_Program
 329              	.LVL52:
 467:./Src/eeprom.c ****   {
 330              		.loc 1 467 0
 331 002e 58B9     		cbnz	r0, .L36
 472:./Src/eeprom.c ****   /* Erase Page1 */
 332              		.loc 1 472 0
 333 0030 0A48     		ldr	r0, .L40+4
 334              	.LVL53:
 335 0032 0390     		str	r0, [sp, #12]
 474:./Src/eeprom.c ****   {  
 336              		.loc 1 474 0
 337 0034 FFF7FEFF 		bl	EE_VerifyPageFullyErased
 338              	.LVL54:
ARM GAS  /tmp/ccOEBSXE.s 			page 18


 339 0038 38B9     		cbnz	r0, .L37
 476:./Src/eeprom.c ****     /* If erase operation was failed, a Flash error code is returned */
 340              		.loc 1 476 0
 341 003a 05A9     		add	r1, sp, #20
 342 003c 01A8     		add	r0, sp, #4
 343 003e FFF7FEFF 		bl	HAL_FLASHEx_Erase
 344              	.LVL55:
 478:./Src/eeprom.c ****     {
 345              		.loc 1 478 0
 346 0042 20B1     		cbz	r0, .L38
 347 0044 04E0     		b	.L34
 348              	.L35:
 349 0046 03E0     		b	.L34
 350              	.L36:
 351 0048 02E0     		b	.L34
 352              	.LVL56:
 353              	.L37:
 484:./Src/eeprom.c **** }
 354              		.loc 1 484 0
 355 004a 0020     		movs	r0, #0
 356 004c 00E0     		b	.L34
 357              	.LVL57:
 358              	.L38:
 359 004e 0020     		movs	r0, #0
 360              	.LVL58:
 361              	.L34:
 485:./Src/eeprom.c **** 
 362              		.loc 1 485 0
 363 0050 07B0     		add	sp, sp, #28
 364              	.LCFI3:
 365              		.cfi_def_cfa_offset 4
 366              		@ sp needed
 367 0052 5DF804FB 		ldr	pc, [sp], #4
 368              	.L41:
 369 0056 00BF     		.align	2
 370              	.L40:
 371 0058 00800008 		.word	134250496
 372 005c 00800108 		.word	134316032
 373              		.cfi_endproc
 374              	.LFE68:
 376              		.section	.text.EE_ReadVariable,"ax",%progbits
 377              		.align	2
 378              		.global	EE_ReadVariable
 379              		.thumb
 380              		.thumb_func
 382              	EE_ReadVariable:
 383              	.LFB66:
 363:./Src/eeprom.c ****   uint16_t validpage = PAGE0;
 384              		.loc 1 363 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              	.LVL59:
 389 0000 38B5     		push	{r3, r4, r5, lr}
 390              	.LCFI4:
 391              		.cfi_def_cfa_offset 16
 392              		.cfi_offset 3, -16
ARM GAS  /tmp/ccOEBSXE.s 			page 19


 393              		.cfi_offset 4, -12
 394              		.cfi_offset 5, -8
 395              		.cfi_offset 14, -4
 396 0002 0446     		mov	r4, r0
 397 0004 0D46     		mov	r5, r1
 398              	.LVL60:
 369:./Src/eeprom.c **** 
 399              		.loc 1 369 0
 400 0006 0020     		movs	r0, #0
 401              	.LVL61:
 402 0008 FFF7FEFF 		bl	EE_FindValidPage
 403              	.LVL62:
 372:./Src/eeprom.c ****   {
 404              		.loc 1 372 0
 405 000c AB28     		cmp	r0, #171
 406 000e 17D0     		beq	.L47
 378:./Src/eeprom.c **** 
 407              		.loc 1 378 0
 408 0010 00F58032 		add	r2, r0, #65536
 409 0014 1032     		adds	r2, r2, #16
 410 0016 D202     		lsls	r2, r2, #11
 411              	.LVL63:
 381:./Src/eeprom.c **** 
 412              		.loc 1 381 0
 413 0018 0130     		adds	r0, r0, #1
 414              	.LVL64:
 415 001a 0A4B     		ldr	r3, .L49
 416 001c 03EBC020 		add	r0, r3, r0, lsl #11
 417              	.LVL65:
 384:./Src/eeprom.c ****   {
 418              		.loc 1 384 0
 419 0020 09E0     		b	.L44
 420              	.LVL66:
 421              	.L46:
 387:./Src/eeprom.c **** 
 422              		.loc 1 387 0
 423 0022 0388     		ldrh	r3, [r0]
 424 0024 9BB2     		uxth	r3, r3
 425              	.LVL67:
 390:./Src/eeprom.c ****     {
 426              		.loc 1 390 0
 427 0026 A342     		cmp	r3, r4
 428 0028 04D1     		bne	.L45
 393:./Src/eeprom.c **** 
 429              		.loc 1 393 0
 430 002a 30F8023C 		ldrh	r3, [r0, #-2]
 431              	.LVL68:
 432 002e 2B80     		strh	r3, [r5]	@ movhi
 433              	.LVL69:
 396:./Src/eeprom.c **** 
 434              		.loc 1 396 0
 435 0030 0020     		movs	r0, #0
 436              	.LVL70:
 398:./Src/eeprom.c ****     }
 437              		.loc 1 398 0
 438 0032 38BD     		pop	{r3, r4, r5, pc}
 439              	.LVL71:
ARM GAS  /tmp/ccOEBSXE.s 			page 20


 440              	.L45:
 403:./Src/eeprom.c ****     }
 441              		.loc 1 403 0
 442 0034 0438     		subs	r0, r0, #4
 443              	.LVL72:
 444              	.L44:
 384:./Src/eeprom.c ****   {
 445              		.loc 1 384 0
 446 0036 931C     		adds	r3, r2, #2
 447 0038 9842     		cmp	r0, r3
 448 003a F2D8     		bhi	.L46
 365:./Src/eeprom.c ****   uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 449              		.loc 1 365 0
 450 003c 0120     		movs	r0, #1
 451              	.LVL73:
 452 003e 38BD     		pop	{r3, r4, r5, pc}
 453              	.LVL74:
 454              	.L47:
 374:./Src/eeprom.c ****   }
 455              		.loc 1 374 0
 456 0040 AB20     		movs	r0, #171
 457              	.LVL75:
 409:./Src/eeprom.c **** 
 458              		.loc 1 409 0
 459 0042 38BD     		pop	{r3, r4, r5, pc}
 460              	.LVL76:
 461              	.L50:
 462              		.align	2
 463              	.L49:
 464 0044 FE7F0008 		.word	134250494
 465              		.cfi_endproc
 466              	.LFE66:
 468              		.section	.text.EE_Init,"ax",%progbits
 469              		.align	2
 470              		.global	EE_Init
 471              		.thumb
 472              		.thumb_func
 474              	EE_Init:
 475              	.LFB64:
  72:./Src/eeprom.c ****   uint16_t pagestatus0 = 6, pagestatus1 = 6;
 476              		.loc 1 72 0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 24
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480 0000 70B5     		push	{r4, r5, r6, lr}
 481              	.LCFI5:
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 4, -16
 484              		.cfi_offset 5, -12
 485              		.cfi_offset 6, -8
 486              		.cfi_offset 14, -4
 487 0002 86B0     		sub	sp, sp, #24
 488              	.LCFI6:
 489              		.cfi_def_cfa_offset 40
 490              	.LVL77:
  78:./Src/eeprom.c ****   FLASH_EraseInitTypeDef s_eraseinit;
 491              		.loc 1 78 0
ARM GAS  /tmp/ccOEBSXE.s 			page 21


 492 0004 0020     		movs	r0, #0
 493 0006 0590     		str	r0, [sp, #20]
  83:./Src/eeprom.c ****   /* Get Page1 status */
 494              		.loc 1 83 0
 495 0008 8E49     		ldr	r1, .L91
 496 000a 0B88     		ldrh	r3, [r1]
 497 000c 9BB2     		uxth	r3, r3
 498              	.LVL78:
  85:./Src/eeprom.c **** 
 499              		.loc 1 85 0
 500 000e 8E4A     		ldr	r2, .L91+4
 501 0010 1288     		ldrh	r2, [r2]
 502 0012 92B2     		uxth	r2, r2
 503              	.LVL79:
  88:./Src/eeprom.c ****   s_eraseinit.PageAddress = PAGE0_ID;
 504              		.loc 1 88 0
 505 0014 0190     		str	r0, [sp, #4]
  89:./Src/eeprom.c ****   s_eraseinit.NbPages     = 1;
 506              		.loc 1 89 0
 507 0016 0391     		str	r1, [sp, #12]
  90:./Src/eeprom.c ****   
 508              		.loc 1 90 0
 509 0018 0121     		movs	r1, #1
 510 001a 0491     		str	r1, [sp, #16]
  93:./Src/eeprom.c ****   {
 511              		.loc 1 93 0
 512 001c 4EF6EE61 		movw	r1, #61166
 513 0020 8B42     		cmp	r3, r1
 514 0022 39D0     		beq	.L53
 515 0024 4FF6FF71 		movw	r1, #65535
 516 0028 8B42     		cmp	r3, r1
 517 002a 03D0     		beq	.L54
 518 002c 002B     		cmp	r3, #0
 519 002e 40F0EE80 		bne	.L88
 520 0032 95E0     		b	.L55
 521              	.L54:
  96:./Src/eeprom.c ****       {
 522              		.loc 1 96 0
 523 0034 7AB9     		cbnz	r2, .L56
  99:./Src/eeprom.c ****         {
 524              		.loc 1 99 0
 525 0036 8348     		ldr	r0, .L91
 526 0038 FFF7FEFF 		bl	EE_VerifyPageFullyErased
 527              	.LVL80:
 528 003c 0446     		mov	r4, r0
 529 003e 0028     		cmp	r0, #0
 530 0040 40F0EA80 		bne	.L74
 101:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 531              		.loc 1 101 0
 532 0044 05A9     		add	r1, sp, #20
 533 0046 01A8     		add	r0, sp, #4
 534 0048 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 535              	.LVL81:
 103:./Src/eeprom.c ****           {
 536              		.loc 1 103 0
 537 004c 0028     		cmp	r0, #0
 538 004e 00F0F680 		beq	.L57
ARM GAS  /tmp/ccOEBSXE.s 			page 22


 105:./Src/eeprom.c ****           }
 539              		.loc 1 105 0
 540 0052 84B2     		uxth	r4, r0
 541 0054 F3E0     		b	.L57
 542              	.LVL82:
 543              	.L56:
 109:./Src/eeprom.c ****       {
 544              		.loc 1 109 0
 545 0056 4EF6EE63 		movw	r3, #61166
 546              	.LVL83:
 547 005a 9A42     		cmp	r2, r3
 548 005c 15D1     		bne	.L58
 112:./Src/eeprom.c ****         { 
 549              		.loc 1 112 0
 550 005e 7948     		ldr	r0, .L91
 551 0060 FFF7FEFF 		bl	EE_VerifyPageFullyErased
 552              	.LVL84:
 553 0064 30B9     		cbnz	r0, .L59
 114:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 554              		.loc 1 114 0
 555 0066 05A9     		add	r1, sp, #20
 556 0068 01A8     		add	r0, sp, #4
 557 006a FFF7FEFF 		bl	HAL_FLASHEx_Erase
 558              	.LVL85:
 116:./Src/eeprom.c ****           {
 559              		.loc 1 116 0
 560 006e 08B1     		cbz	r0, .L59
 118:./Src/eeprom.c ****           }
 561              		.loc 1 118 0
 562 0070 84B2     		uxth	r4, r0
 563 0072 E4E0     		b	.L57
 564              	.LVL86:
 565              	.L59:
 122:./Src/eeprom.c ****         /* If program operation was failed, a Flash error code is returned */
 566              		.loc 1 122 0
 567 0074 0022     		movs	r2, #0
 568 0076 0023     		movs	r3, #0
 569 0078 7349     		ldr	r1, .L91+4
 570 007a 0120     		movs	r0, #1
 571 007c FFF7FEFF 		bl	HAL_FLASH_Program
 572              	.LVL87:
 124:./Src/eeprom.c ****         {
 573              		.loc 1 124 0
 574 0080 0028     		cmp	r0, #0
 575 0082 00F0CB80 		beq	.L75
 126:./Src/eeprom.c ****         }
 576              		.loc 1 126 0
 577 0086 84B2     		uxth	r4, r0
 578 0088 D9E0     		b	.L57
 579              	.LVL88:
 580              	.L58:
 132:./Src/eeprom.c ****         /* If erase/program operation was failed, a Flash error code is returned */
 581              		.loc 1 132 0
 582 008a FFF7FEFF 		bl	EE_Format
 583              	.LVL89:
 134:./Src/eeprom.c ****         {
 584              		.loc 1 134 0
ARM GAS  /tmp/ccOEBSXE.s 			page 23


 585 008e 0028     		cmp	r0, #0
 586 0090 00F0C680 		beq	.L76
 136:./Src/eeprom.c ****         }
 587              		.loc 1 136 0
 588 0094 84B2     		uxth	r4, r0
 589 0096 D2E0     		b	.L57
 590              	.LVL90:
 591              	.L53:
 142:./Src/eeprom.c ****       {
 592              		.loc 1 142 0
 593 0098 FAB1     		cbz	r2, .L77
 594 009a 41E0     		b	.L89
 595              	.LVL91:
 596              	.L64:
 147:./Src/eeprom.c ****           {
 597              		.loc 1 147 0
 598 009c 6B4B     		ldr	r3, .L91+8
 599 009e 1B88     		ldrh	r3, [r3]
 600 00a0 9BB2     		uxth	r3, r3
 601 00a2 2C46     		mov	r4, r5
 602 00a4 6A4A     		ldr	r2, .L91+12
 603 00a6 32F81500 		ldrh	r0, [r2, r5, lsl #1]
 604 00aa 8342     		cmp	r3, r0
 605 00ac 00D1     		bne	.L62
 149:./Src/eeprom.c ****           }
 606              		.loc 1 149 0
 607 00ae 2EB2     		sxth	r6, r5
 608              	.LVL92:
 609              	.L62:
 151:./Src/eeprom.c ****           {
 610              		.loc 1 151 0
 611 00b0 B442     		cmp	r4, r6
 612 00b2 0FD0     		beq	.L63
 154:./Src/eeprom.c ****             /* In case variable corresponding to the virtual address was found */
 613              		.loc 1 154 0
 614 00b4 6749     		ldr	r1, .L91+16
 615 00b6 FFF7FEFF 		bl	EE_ReadVariable
 616              	.LVL93:
 156:./Src/eeprom.c ****             {
 617              		.loc 1 156 0
 618 00ba 0128     		cmp	r0, #1
 619 00bc 0AD0     		beq	.L63
 159:./Src/eeprom.c ****               /* If program operation was failed, a Flash error code is returned */
 620              		.loc 1 159 0
 621 00be 654B     		ldr	r3, .L91+16
 622 00c0 1988     		ldrh	r1, [r3]
 623 00c2 634B     		ldr	r3, .L91+12
 624 00c4 33F81400 		ldrh	r0, [r3, r4, lsl #1]
 625              	.LVL94:
 626 00c8 FFF7FEFF 		bl	EE_VerifyPageFullWriteVariable
 627              	.LVL95:
 161:./Src/eeprom.c ****               {
 628              		.loc 1 161 0
 629 00cc 0446     		mov	r4, r0
 630 00ce 0028     		cmp	r0, #0
 631 00d0 40F0B580 		bne	.L57
 632              	.LVL96:
ARM GAS  /tmp/ccOEBSXE.s 			page 24


 633              	.L63:
 145:./Src/eeprom.c ****         {
 634              		.loc 1 145 0 discriminator 2
 635 00d4 0135     		adds	r5, r5, #1
 636              	.LVL97:
 637 00d6 ADB2     		uxth	r5, r5
 638              	.LVL98:
 639 00d8 02E0     		b	.L60
 640              	.LVL99:
 641              	.L77:
 642 00da 4FF0FF36 		mov	r6, #-1
 643 00de 0025     		movs	r5, #0
 644              	.LVL100:
 645              	.L60:
 145:./Src/eeprom.c ****         {
 646              		.loc 1 145 0 is_stmt 0 discriminator 1
 647 00e0 022D     		cmp	r5, #2
 648 00e2 DBD9     		bls	.L64
 169:./Src/eeprom.c ****         /* If program operation was failed, a Flash error code is returned */
 649              		.loc 1 169 0 is_stmt 1
 650 00e4 0022     		movs	r2, #0
 651 00e6 0023     		movs	r3, #0
 652 00e8 5649     		ldr	r1, .L91
 653 00ea 0120     		movs	r0, #1
 654 00ec FFF7FEFF 		bl	HAL_FLASH_Program
 655              	.LVL101:
 171:./Src/eeprom.c ****         {
 656              		.loc 1 171 0
 657 00f0 08B1     		cbz	r0, .L65
 173:./Src/eeprom.c ****         }
 658              		.loc 1 173 0
 659 00f2 84B2     		uxth	r4, r0
 660 00f4 A3E0     		b	.L57
 661              	.L65:
 175:./Src/eeprom.c ****         s_eraseinit.PageAddress = PAGE1_ID;
 662              		.loc 1 175 0
 663 00f6 0023     		movs	r3, #0
 664 00f8 0193     		str	r3, [sp, #4]
 176:./Src/eeprom.c ****         s_eraseinit.NbPages     = 1;
 665              		.loc 1 176 0
 666 00fa 5348     		ldr	r0, .L91+4
 667              	.LVL102:
 668 00fc 0390     		str	r0, [sp, #12]
 177:./Src/eeprom.c ****         /* Erase Page1 */
 669              		.loc 1 177 0
 670 00fe 0123     		movs	r3, #1
 671 0100 0493     		str	r3, [sp, #16]
 179:./Src/eeprom.c ****         { 
 672              		.loc 1 179 0
 673 0102 FFF7FEFF 		bl	EE_VerifyPageFullyErased
 674              	.LVL103:
 675 0106 0446     		mov	r4, r0
 676 0108 0028     		cmp	r0, #0
 677 010a 40F08B80 		bne	.L79
 181:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 678              		.loc 1 181 0
 679 010e 05A9     		add	r1, sp, #20
ARM GAS  /tmp/ccOEBSXE.s 			page 25


 680 0110 01A8     		add	r0, sp, #4
 681 0112 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 682              	.LVL104:
 183:./Src/eeprom.c ****           {
 683              		.loc 1 183 0
 684 0116 0028     		cmp	r0, #0
 685 0118 00F09180 		beq	.L57
 185:./Src/eeprom.c ****           }
 686              		.loc 1 185 0
 687 011c 84B2     		uxth	r4, r0
 688 011e 8EE0     		b	.L57
 689              	.LVL105:
 690              	.L89:
 189:./Src/eeprom.c ****       {
 691              		.loc 1 189 0
 692 0120 4FF6FF73 		movw	r3, #65535
 693              	.LVL106:
 694 0124 9A42     		cmp	r2, r3
 695 0126 15D1     		bne	.L66
 192:./Src/eeprom.c ****         s_eraseinit.NbPages     = 1;
 696              		.loc 1 192 0
 697 0128 4748     		ldr	r0, .L91+4
 698 012a 0390     		str	r0, [sp, #12]
 195:./Src/eeprom.c ****         { 
 699              		.loc 1 195 0
 700 012c FFF7FEFF 		bl	EE_VerifyPageFullyErased
 701              	.LVL107:
 702 0130 30B9     		cbnz	r0, .L67
 197:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 703              		.loc 1 197 0
 704 0132 05A9     		add	r1, sp, #20
 705 0134 01A8     		add	r0, sp, #4
 706 0136 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 707              	.LVL108:
 199:./Src/eeprom.c ****           {
 708              		.loc 1 199 0
 709 013a 08B1     		cbz	r0, .L67
 201:./Src/eeprom.c ****           }
 710              		.loc 1 201 0
 711 013c 84B2     		uxth	r4, r0
 712 013e 7EE0     		b	.L57
 713              	.LVL109:
 714              	.L67:
 205:./Src/eeprom.c ****         /* If program operation was failed, a Flash error code is returned */
 715              		.loc 1 205 0
 716 0140 0022     		movs	r2, #0
 717 0142 0023     		movs	r3, #0
 718 0144 3F49     		ldr	r1, .L91
 719 0146 0120     		movs	r0, #1
 720 0148 FFF7FEFF 		bl	HAL_FLASH_Program
 721              	.LVL110:
 207:./Src/eeprom.c ****         {
 722              		.loc 1 207 0
 723 014c 0028     		cmp	r0, #0
 724 014e 6BD0     		beq	.L80
 209:./Src/eeprom.c ****         }
 725              		.loc 1 209 0
ARM GAS  /tmp/ccOEBSXE.s 			page 26


 726 0150 84B2     		uxth	r4, r0
 727 0152 74E0     		b	.L57
 728              	.LVL111:
 729              	.L66:
 215:./Src/eeprom.c ****         /* If erase/program operation was failed, a Flash error code is returned */
 730              		.loc 1 215 0
 731 0154 FFF7FEFF 		bl	EE_Format
 732              	.LVL112:
 217:./Src/eeprom.c ****         {
 733              		.loc 1 217 0
 734 0158 0028     		cmp	r0, #0
 735 015a 67D0     		beq	.L81
 219:./Src/eeprom.c ****         }
 736              		.loc 1 219 0
 737 015c 84B2     		uxth	r4, r0
 738 015e 6EE0     		b	.L57
 739              	.LVL113:
 740              	.L55:
 225:./Src/eeprom.c ****       {
 741              		.loc 1 225 0
 742 0160 2AB9     		cbnz	r2, .L68
 228:./Src/eeprom.c ****         /* If erase/program operation was failed, a Flash error code is returned */
 743              		.loc 1 228 0
 744 0162 FFF7FEFF 		bl	EE_Format
 745              	.LVL114:
 230:./Src/eeprom.c ****         {
 746              		.loc 1 230 0
 747 0166 0028     		cmp	r0, #0
 748 0168 62D0     		beq	.L82
 232:./Src/eeprom.c ****         }
 749              		.loc 1 232 0
 750 016a 84B2     		uxth	r4, r0
 751 016c 67E0     		b	.L57
 752              	.LVL115:
 753              	.L68:
 235:./Src/eeprom.c ****       {
 754              		.loc 1 235 0
 755 016e 4FF6FF73 		movw	r3, #65535
 756              	.LVL116:
 757 0172 9A42     		cmp	r2, r3
 758 0174 2CD1     		bne	.L83
 238:./Src/eeprom.c ****         s_eraseinit.NbPages     = 1;
 759              		.loc 1 238 0
 760 0176 3448     		ldr	r0, .L91+4
 761 0178 0390     		str	r0, [sp, #12]
 241:./Src/eeprom.c ****         { 
 762              		.loc 1 241 0
 763 017a FFF7FEFF 		bl	EE_VerifyPageFullyErased
 764              	.LVL117:
 765 017e 0446     		mov	r4, r0
 766 0180 0028     		cmp	r0, #0
 767 0182 57D1     		bne	.L84
 243:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 768              		.loc 1 243 0
 769 0184 05A9     		add	r1, sp, #20
 770 0186 01A8     		add	r0, sp, #4
 771 0188 FFF7FEFF 		bl	HAL_FLASHEx_Erase
ARM GAS  /tmp/ccOEBSXE.s 			page 27


 772              	.LVL118:
 245:./Src/eeprom.c ****           {
 773              		.loc 1 245 0
 774 018c 0028     		cmp	r0, #0
 775 018e 56D0     		beq	.L57
 247:./Src/eeprom.c ****           }
 776              		.loc 1 247 0
 777 0190 84B2     		uxth	r4, r0
 778 0192 54E0     		b	.L57
 779              	.LVL119:
 780              	.L72:
 256:./Src/eeprom.c ****           {
 781              		.loc 1 256 0
 782 0194 304B     		ldr	r3, .L91+20
 783 0196 1B88     		ldrh	r3, [r3]
 784 0198 9BB2     		uxth	r3, r3
 785 019a 2C46     		mov	r4, r5
 786 019c 2C4A     		ldr	r2, .L91+12
 787 019e 32F81500 		ldrh	r0, [r2, r5, lsl #1]
 788 01a2 8342     		cmp	r3, r0
 789 01a4 00D1     		bne	.L70
 258:./Src/eeprom.c ****           }
 790              		.loc 1 258 0
 791 01a6 2EB2     		sxth	r6, r5
 792              	.LVL120:
 793              	.L70:
 260:./Src/eeprom.c ****           {
 794              		.loc 1 260 0
 795 01a8 B442     		cmp	r4, r6
 796 01aa 0ED0     		beq	.L71
 263:./Src/eeprom.c ****             /* In case variable corresponding to the virtual address was found */
 797              		.loc 1 263 0
 798 01ac 2949     		ldr	r1, .L91+16
 799 01ae FFF7FEFF 		bl	EE_ReadVariable
 800              	.LVL121:
 265:./Src/eeprom.c ****             {
 801              		.loc 1 265 0
 802 01b2 0128     		cmp	r0, #1
 803 01b4 09D0     		beq	.L71
 268:./Src/eeprom.c ****               /* If program operation was failed, a Flash error code is returned */
 804              		.loc 1 268 0
 805 01b6 274B     		ldr	r3, .L91+16
 806 01b8 1988     		ldrh	r1, [r3]
 807 01ba 254B     		ldr	r3, .L91+12
 808 01bc 33F81400 		ldrh	r0, [r3, r4, lsl #1]
 809              	.LVL122:
 810 01c0 FFF7FEFF 		bl	EE_VerifyPageFullWriteVariable
 811              	.LVL123:
 270:./Src/eeprom.c ****               {
 812              		.loc 1 270 0
 813 01c4 0446     		mov	r4, r0
 814 01c6 0028     		cmp	r0, #0
 815 01c8 39D1     		bne	.L57
 816              	.LVL124:
 817              	.L71:
 254:./Src/eeprom.c ****         {
 818              		.loc 1 254 0 discriminator 2
ARM GAS  /tmp/ccOEBSXE.s 			page 28


 819 01ca 0135     		adds	r5, r5, #1
 820              	.LVL125:
 821 01cc ADB2     		uxth	r5, r5
 822              	.LVL126:
 823 01ce 02E0     		b	.L69
 824              	.LVL127:
 825              	.L83:
 826 01d0 4FF0FF36 		mov	r6, #-1
 827 01d4 0025     		movs	r5, #0
 828              	.LVL128:
 829              	.L69:
 254:./Src/eeprom.c ****         {
 830              		.loc 1 254 0 is_stmt 0 discriminator 1
 831 01d6 022D     		cmp	r5, #2
 832 01d8 DCD9     		bls	.L72
 278:./Src/eeprom.c ****         /* If program operation was failed, a Flash error code is returned */
 833              		.loc 1 278 0 is_stmt 1
 834 01da 0022     		movs	r2, #0
 835 01dc 0023     		movs	r3, #0
 836 01de 1A49     		ldr	r1, .L91+4
 837 01e0 0120     		movs	r0, #1
 838 01e2 FFF7FEFF 		bl	HAL_FLASH_Program
 839              	.LVL129:
 280:./Src/eeprom.c ****         {
 840              		.loc 1 280 0
 841 01e6 08B1     		cbz	r0, .L73
 282:./Src/eeprom.c ****         }
 842              		.loc 1 282 0
 843 01e8 84B2     		uxth	r4, r0
 844 01ea 28E0     		b	.L57
 845              	.L73:
 284:./Src/eeprom.c ****         s_eraseinit.PageAddress = PAGE0_ID;
 846              		.loc 1 284 0
 847 01ec 0023     		movs	r3, #0
 848 01ee 0193     		str	r3, [sp, #4]
 285:./Src/eeprom.c ****         s_eraseinit.NbPages     = 1;
 849              		.loc 1 285 0
 850 01f0 1448     		ldr	r0, .L91
 851              	.LVL130:
 852 01f2 0390     		str	r0, [sp, #12]
 286:./Src/eeprom.c ****         /* Erase Page0 */
 853              		.loc 1 286 0
 854 01f4 0123     		movs	r3, #1
 855 01f6 0493     		str	r3, [sp, #16]
 288:./Src/eeprom.c ****         { 
 856              		.loc 1 288 0
 857 01f8 FFF7FEFF 		bl	EE_VerifyPageFullyErased
 858              	.LVL131:
 859 01fc 0446     		mov	r4, r0
 860 01fe D8B9     		cbnz	r0, .L86
 290:./Src/eeprom.c ****           /* If erase operation was failed, a Flash error code is returned */
 861              		.loc 1 290 0
 862 0200 05A9     		add	r1, sp, #20
 863 0202 01A8     		add	r0, sp, #4
 864 0204 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 865              	.LVL132:
 292:./Src/eeprom.c ****           {
ARM GAS  /tmp/ccOEBSXE.s 			page 29


 866              		.loc 1 292 0
 867 0208 C8B1     		cbz	r0, .L57
 294:./Src/eeprom.c ****           }
 868              		.loc 1 294 0
 869 020a 84B2     		uxth	r4, r0
 870 020c 17E0     		b	.L57
 871              	.LVL133:
 872              	.L88:
 302:./Src/eeprom.c ****       /* If erase/program operation was failed, a Flash error code is returned */
 873              		.loc 1 302 0
 874 020e FFF7FEFF 		bl	EE_Format
 875              	.LVL134:
 304:./Src/eeprom.c ****       {
 876              		.loc 1 304 0
 877 0212 98B1     		cbz	r0, .L87
 306:./Src/eeprom.c ****       }
 878              		.loc 1 306 0
 879 0214 84B2     		uxth	r4, r0
 880 0216 12E0     		b	.L57
 881              	.LVL135:
 882              	.L74:
 311:./Src/eeprom.c **** }
 883              		.loc 1 311 0
 884 0218 0024     		movs	r4, #0
 885 021a 10E0     		b	.L57
 886              	.LVL136:
 887              	.L75:
 888 021c 0024     		movs	r4, #0
 889 021e 0EE0     		b	.L57
 890              	.L76:
 891 0220 0024     		movs	r4, #0
 892 0222 0CE0     		b	.L57
 893              	.LVL137:
 894              	.L79:
 895 0224 0024     		movs	r4, #0
 896 0226 0AE0     		b	.L57
 897              	.LVL138:
 898              	.L80:
 899 0228 0024     		movs	r4, #0
 900 022a 08E0     		b	.L57
 901              	.L81:
 902 022c 0024     		movs	r4, #0
 903 022e 06E0     		b	.L57
 904              	.L82:
 905 0230 0024     		movs	r4, #0
 906 0232 04E0     		b	.L57
 907              	.LVL139:
 908              	.L84:
 909 0234 0024     		movs	r4, #0
 910 0236 02E0     		b	.L57
 911              	.LVL140:
 912              	.L86:
 913 0238 0024     		movs	r4, #0
 914 023a 00E0     		b	.L57
 915              	.LVL141:
 916              	.L87:
 917 023c 0024     		movs	r4, #0
ARM GAS  /tmp/ccOEBSXE.s 			page 30


 918              	.LVL142:
 919              	.L57:
 312:./Src/eeprom.c **** 
 920              		.loc 1 312 0
 921 023e 2046     		mov	r0, r4
 922 0240 06B0     		add	sp, sp, #24
 923              	.LCFI7:
 924              		.cfi_def_cfa_offset 16
 925              		@ sp needed
 926 0242 70BD     		pop	{r4, r5, r6, pc}
 927              	.L92:
 928              		.align	2
 929              	.L91:
 930 0244 00800008 		.word	134250496
 931 0248 00800108 		.word	134316032
 932 024c 06800008 		.word	134250502
 933 0250 00000000 		.word	VirtAddVarTab
 934 0254 00000000 		.word	.LANCHOR0
 935 0258 06800108 		.word	134316038
 936              		.cfi_endproc
 937              	.LFE64:
 939              		.section	.text.EE_PageTransfer,"ax",%progbits
 940              		.align	2
 941              		.thumb
 942              		.thumb_func
 944              	EE_PageTransfer:
 945              	.LFB71:
 617:./Src/eeprom.c **** 
 618:./Src/eeprom.c **** /**
 619:./Src/eeprom.c ****   * @brief  Transfers last updated variables data from the full Page to
 620:./Src/eeprom.c ****   *   an empty one.
 621:./Src/eeprom.c ****   * @param  VirtAddress: 16 bit virtual address of the variable
 622:./Src/eeprom.c ****   * @param  Data: 16 bit data to be written as variable value
 623:./Src/eeprom.c ****   * @retval Success or error status:
 624:./Src/eeprom.c ****   *           - FLASH_COMPLETE: on success
 625:./Src/eeprom.c ****   *           - PAGE_FULL: if valid page is full
 626:./Src/eeprom.c ****   *           - NO_VALID_PAGE: if no valid page was found
 627:./Src/eeprom.c ****   *           - Flash error code: on write Flash error
 628:./Src/eeprom.c ****   */
 629:./Src/eeprom.c **** static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
 630:./Src/eeprom.c **** {
 946              		.loc 1 630 0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 24
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950              	.LVL143:
 951 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 952              	.LCFI8:
 953              		.cfi_def_cfa_offset 24
 954              		.cfi_offset 4, -24
 955              		.cfi_offset 5, -20
 956              		.cfi_offset 6, -16
 957              		.cfi_offset 7, -12
 958              		.cfi_offset 8, -8
 959              		.cfi_offset 14, -4
 960 0004 86B0     		sub	sp, sp, #24
 961              	.LCFI9:
ARM GAS  /tmp/ccOEBSXE.s 			page 31


 962              		.cfi_def_cfa_offset 48
 963 0006 0546     		mov	r5, r0
 964 0008 0C46     		mov	r4, r1
 965              	.LVL144:
 631:./Src/eeprom.c ****   HAL_StatusTypeDef flashstatus = HAL_OK;
 632:./Src/eeprom.c ****   uint32_t newpageaddress = EEPROM_START_ADDRESS;
 633:./Src/eeprom.c ****   uint32_t oldpageid = 0;
 634:./Src/eeprom.c ****   uint16_t validpage = PAGE0, varidx = 0;
 635:./Src/eeprom.c ****   uint16_t eepromstatus = 0, readstatus = 0;
 636:./Src/eeprom.c ****   uint32_t page_error = 0;
 966              		.loc 1 636 0
 967 000a 0020     		movs	r0, #0
 968              	.LVL145:
 969 000c 0590     		str	r0, [sp, #20]
 637:./Src/eeprom.c ****   FLASH_EraseInitTypeDef s_eraseinit;
 638:./Src/eeprom.c **** 
 639:./Src/eeprom.c ****   /* Get active Page for read operation */
 640:./Src/eeprom.c ****   validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 970              		.loc 1 640 0
 971 000e FFF7FEFF 		bl	EE_FindValidPage
 972              	.LVL146:
 641:./Src/eeprom.c **** 
 642:./Src/eeprom.c ****   if (validpage == PAGE1)       /* Page1 valid */
 973              		.loc 1 642 0
 974 0012 4028     		cmp	r0, #64
 975 0014 04D0     		beq	.L102
 643:./Src/eeprom.c ****   {
 644:./Src/eeprom.c ****     /* New page address where variable will be moved to */
 645:./Src/eeprom.c ****     newpageaddress = PAGE0_BASE_ADDRESS;
 646:./Src/eeprom.c **** 
 647:./Src/eeprom.c ****     /* Old page ID where variable will be taken from */
 648:./Src/eeprom.c ****     oldpageid = PAGE1_ID;
 649:./Src/eeprom.c ****   }
 650:./Src/eeprom.c ****   else if (validpage == PAGE0)  /* Page0 valid */
 976              		.loc 1 650 0
 977 0016 0028     		cmp	r0, #0
 978 0018 42D1     		bne	.L103
 651:./Src/eeprom.c ****   {
 652:./Src/eeprom.c ****     /* New page address  where variable will be moved to */
 653:./Src/eeprom.c ****     newpageaddress = PAGE1_BASE_ADDRESS;
 654:./Src/eeprom.c **** 
 655:./Src/eeprom.c ****     /* Old page ID where variable will be taken from */
 656:./Src/eeprom.c ****     oldpageid = PAGE0_ID;
 979              		.loc 1 656 0
 980 001a 244F     		ldr	r7, .L107
 653:./Src/eeprom.c **** 
 981              		.loc 1 653 0
 982 001c 244E     		ldr	r6, .L107+4
 983 001e 01E0     		b	.L94
 984              	.L102:
 648:./Src/eeprom.c ****   }
 985              		.loc 1 648 0
 986 0020 234F     		ldr	r7, .L107+4
 645:./Src/eeprom.c **** 
 987              		.loc 1 645 0
 988 0022 224E     		ldr	r6, .L107
 989              	.L94:
ARM GAS  /tmp/ccOEBSXE.s 			page 32


 990              	.LVL147:
 657:./Src/eeprom.c ****   }
 658:./Src/eeprom.c ****   else
 659:./Src/eeprom.c ****   {
 660:./Src/eeprom.c ****     return NO_VALID_PAGE;       /* No valid Page */
 661:./Src/eeprom.c ****   }
 662:./Src/eeprom.c **** 
 663:./Src/eeprom.c ****   /* Set the new Page status to RECEIVE_DATA status */
 664:./Src/eeprom.c ****   flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 991              		.loc 1 664 0
 992 0024 4EF6EE62 		movw	r2, #61166
 993 0028 0023     		movs	r3, #0
 994 002a 3146     		mov	r1, r6
 995 002c 0120     		movs	r0, #1
 996              	.LVL148:
 997 002e FFF7FEFF 		bl	HAL_FLASH_Program
 998              	.LVL149:
 665:./Src/eeprom.c ****   /* If program operation was failed, a Flash error code is returned */
 666:./Src/eeprom.c ****   if (flashstatus != HAL_OK)
 999              		.loc 1 666 0
 1000 0032 08B1     		cbz	r0, .L96
 667:./Src/eeprom.c ****   {
 668:./Src/eeprom.c ****     return flashstatus;
 1001              		.loc 1 668 0
 1002 0034 80B2     		uxth	r0, r0
 1003              	.LVL150:
 1004 0036 36E0     		b	.L95
 1005              	.LVL151:
 1006              	.L96:
 669:./Src/eeprom.c ****   }
 670:./Src/eeprom.c ****   
 671:./Src/eeprom.c ****   /* Write the variable passed as parameter in the new active page */
 672:./Src/eeprom.c ****   eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 1007              		.loc 1 672 0
 1008 0038 2146     		mov	r1, r4
 1009 003a 2846     		mov	r0, r5
 1010              	.LVL152:
 1011 003c FFF7FEFF 		bl	EE_VerifyPageFullWriteVariable
 1012              	.LVL153:
 673:./Src/eeprom.c ****   /* If program operation was failed, a Flash error code is returned */
 674:./Src/eeprom.c ****   if (eepromstatus != HAL_OK)
 1013              		.loc 1 674 0
 1014 0040 80BB     		cbnz	r0, .L104
 1015 0042 0024     		movs	r4, #0
 1016 0044 13E0     		b	.L97
 1017              	.LVL154:
 1018              	.L99:
 675:./Src/eeprom.c ****   {
 676:./Src/eeprom.c ****     return eepromstatus;
 677:./Src/eeprom.c ****   }
 678:./Src/eeprom.c **** 
 679:./Src/eeprom.c ****   /* Transfer process: transfer variables from old to the new active page */
 680:./Src/eeprom.c ****   for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 681:./Src/eeprom.c ****   {
 682:./Src/eeprom.c ****     if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as para
 1019              		.loc 1 682 0
 1020 0046 1B4B     		ldr	r3, .L107+8
ARM GAS  /tmp/ccOEBSXE.s 			page 33


 1021 0048 33F81400 		ldrh	r0, [r3, r4, lsl #1]
 1022 004c 8542     		cmp	r5, r0
 1023 004e 0CD0     		beq	.L98
 683:./Src/eeprom.c ****     {
 684:./Src/eeprom.c ****       /* Read the other last variable updates */
 685:./Src/eeprom.c ****       readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 1024              		.loc 1 685 0
 1025 0050 1949     		ldr	r1, .L107+12
 1026 0052 FFF7FEFF 		bl	EE_ReadVariable
 1027              	.LVL155:
 686:./Src/eeprom.c ****       /* In case variable corresponding to the virtual address was found */
 687:./Src/eeprom.c ****       if (readstatus != 0x1)
 1028              		.loc 1 687 0
 1029 0056 0128     		cmp	r0, #1
 1030 0058 07D0     		beq	.L98
 688:./Src/eeprom.c ****       {
 689:./Src/eeprom.c ****         /* Transfer the variable to the new active page */
 690:./Src/eeprom.c ****         eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 1031              		.loc 1 690 0
 1032 005a 174B     		ldr	r3, .L107+12
 1033 005c 1988     		ldrh	r1, [r3]
 1034 005e 154B     		ldr	r3, .L107+8
 1035 0060 33F81400 		ldrh	r0, [r3, r4, lsl #1]
 1036              	.LVL156:
 1037 0064 FFF7FEFF 		bl	EE_VerifyPageFullWriteVariable
 1038              	.LVL157:
 691:./Src/eeprom.c ****         /* If program operation was failed, a Flash error code is returned */
 692:./Src/eeprom.c ****         if (eepromstatus != HAL_OK)
 1039              		.loc 1 692 0
 1040 0068 E8B9     		cbnz	r0, .L105
 1041              	.LVL158:
 1042              	.L98:
 680:./Src/eeprom.c ****   {
 1043              		.loc 1 680 0 discriminator 2
 1044 006a 0134     		adds	r4, r4, #1
 1045              	.LVL159:
 1046 006c A4B2     		uxth	r4, r4
 1047              	.LVL160:
 1048              	.L97:
 680:./Src/eeprom.c ****   {
 1049              		.loc 1 680 0 is_stmt 0 discriminator 1
 1050 006e 022C     		cmp	r4, #2
 1051 0070 E9D9     		bls	.L99
 693:./Src/eeprom.c ****         {
 694:./Src/eeprom.c ****           return eepromstatus;
 695:./Src/eeprom.c ****         }
 696:./Src/eeprom.c ****       }
 697:./Src/eeprom.c ****     }
 698:./Src/eeprom.c ****   }
 699:./Src/eeprom.c **** 
 700:./Src/eeprom.c ****   s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 1052              		.loc 1 700 0 is_stmt 1
 1053 0072 0023     		movs	r3, #0
 1054 0074 0193     		str	r3, [sp, #4]
 701:./Src/eeprom.c ****   s_eraseinit.PageAddress = oldpageid;
 1055              		.loc 1 701 0
 1056 0076 0397     		str	r7, [sp, #12]
ARM GAS  /tmp/ccOEBSXE.s 			page 34


 702:./Src/eeprom.c ****   s_eraseinit.NbPages     = 1;
 1057              		.loc 1 702 0
 1058 0078 0123     		movs	r3, #1
 1059 007a 0493     		str	r3, [sp, #16]
 703:./Src/eeprom.c ****   
 704:./Src/eeprom.c ****   /* Erase the old Page: Set old Page status to ERASED status */
 705:./Src/eeprom.c ****   flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 1060              		.loc 1 705 0
 1061 007c 05A9     		add	r1, sp, #20
 1062 007e 01A8     		add	r0, sp, #4
 1063 0080 FFF7FEFF 		bl	HAL_FLASHEx_Erase
 1064              	.LVL161:
 706:./Src/eeprom.c ****   /* If erase operation was failed, a Flash error code is returned */
 707:./Src/eeprom.c ****   if (flashstatus != HAL_OK)
 1065              		.loc 1 707 0
 1066 0084 08B1     		cbz	r0, .L100
 708:./Src/eeprom.c ****   {
 709:./Src/eeprom.c ****     return flashstatus;
 1067              		.loc 1 709 0
 1068 0086 80B2     		uxth	r0, r0
 1069              	.LVL162:
 1070 0088 0DE0     		b	.L95
 1071              	.LVL163:
 1072              	.L100:
 710:./Src/eeprom.c ****   }
 711:./Src/eeprom.c **** 
 712:./Src/eeprom.c ****   /* Set new Page status to VALID_PAGE status */
 713:./Src/eeprom.c ****   flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 1073              		.loc 1 713 0
 1074 008a 0022     		movs	r2, #0
 1075 008c 0023     		movs	r3, #0
 1076 008e 3146     		mov	r1, r6
 1077 0090 0120     		movs	r0, #1
 1078              	.LVL164:
 1079 0092 FFF7FEFF 		bl	HAL_FLASH_Program
 1080              	.LVL165:
 714:./Src/eeprom.c ****   /* If program operation was failed, a Flash error code is returned */
 715:./Src/eeprom.c ****   if (flashstatus != HAL_OK)
 1081              		.loc 1 715 0
 1082 0096 08B1     		cbz	r0, .L101
 716:./Src/eeprom.c ****   {
 717:./Src/eeprom.c ****     return flashstatus;
 1083              		.loc 1 717 0
 1084 0098 80B2     		uxth	r0, r0
 1085              	.LVL166:
 1086 009a 04E0     		b	.L95
 1087              	.LVL167:
 1088              	.L101:
 718:./Src/eeprom.c ****   }
 719:./Src/eeprom.c ****   
 720:./Src/eeprom.c ****   
 721:./Src/eeprom.c **** 
 722:./Src/eeprom.c ****   /* Return last operation flash status */
 723:./Src/eeprom.c ****   return flashstatus;
 1089              		.loc 1 723 0
 1090 009c 80B2     		uxth	r0, r0
 1091              	.LVL168:
ARM GAS  /tmp/ccOEBSXE.s 			page 35


 1092 009e 02E0     		b	.L95
 1093              	.LVL169:
 1094              	.L103:
 660:./Src/eeprom.c ****   }
 1095              		.loc 1 660 0
 1096 00a0 AB20     		movs	r0, #171
 1097              	.LVL170:
 1098 00a2 00E0     		b	.L95
 1099              	.LVL171:
 1100              	.L104:
 1101 00a4 FFE7     		b	.L95
 1102              	.LVL172:
 1103              	.L105:
 1104              	.L95:
 724:./Src/eeprom.c **** }
 1105              		.loc 1 724 0
 1106 00a6 06B0     		add	sp, sp, #24
 1107              	.LCFI10:
 1108              		.cfi_def_cfa_offset 24
 1109              		@ sp needed
 1110 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1111              	.L108:
 1112              		.align	2
 1113              	.L107:
 1114 00ac 00800008 		.word	134250496
 1115 00b0 00800108 		.word	134316032
 1116 00b4 00000000 		.word	VirtAddVarTab
 1117 00b8 00000000 		.word	.LANCHOR0
 1118              		.cfi_endproc
 1119              	.LFE71:
 1121              		.section	.text.EE_WriteVariable,"ax",%progbits
 1122              		.align	2
 1123              		.global	EE_WriteVariable
 1124              		.thumb
 1125              		.thumb_func
 1127              	EE_WriteVariable:
 1128              	.LFB67:
 422:./Src/eeprom.c ****   uint16_t Status = 0;
 1129              		.loc 1 422 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              	.LVL173:
 1134 0000 38B5     		push	{r3, r4, r5, lr}
 1135              	.LCFI11:
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 3, -16
 1138              		.cfi_offset 4, -12
 1139              		.cfi_offset 5, -8
 1140              		.cfi_offset 14, -4
 1141 0002 0446     		mov	r4, r0
 1142 0004 0D46     		mov	r5, r1
 1143              	.LVL174:
 426:./Src/eeprom.c **** 
 1144              		.loc 1 426 0
 1145 0006 FFF7FEFF 		bl	EE_VerifyPageFullWriteVariable
 1146              	.LVL175:
ARM GAS  /tmp/ccOEBSXE.s 			page 36


 429:./Src/eeprom.c ****   {
 1147              		.loc 1 429 0
 1148 000a 8028     		cmp	r0, #128
 1149 000c 03D1     		bne	.L110
 432:./Src/eeprom.c ****   }
 1150              		.loc 1 432 0
 1151 000e 2946     		mov	r1, r5
 1152 0010 2046     		mov	r0, r4
 1153              	.LVL176:
 1154 0012 FFF7FEFF 		bl	EE_PageTransfer
 1155              	.LVL177:
 1156              	.L110:
 437:./Src/eeprom.c **** 
 1157              		.loc 1 437 0
 1158 0016 38BD     		pop	{r3, r4, r5, pc}
 1159              		.cfi_endproc
 1160              	.LFE67:
 1162              		.global	DataVar
 1163              		.section	.bss.DataVar,"aw",%nobits
 1164              		.align	1
 1165              		.set	.LANCHOR0,. + 0
 1168              	DataVar:
 1169 0000 0000     		.space	2
 1170              		.text
 1171              	.Letext0:
 1172              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1173              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1174              		.file 4 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1175              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash_ex.h"
 1176              		.file 6 "./Drivers/CMSIS/Include/core_cm3.h"
 1177              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash.h"
ARM GAS  /tmp/ccOEBSXE.s 			page 37


DEFINED SYMBOLS
                            *ABS*:00000000 eeprom.c
     /tmp/ccOEBSXE.s:20     .text.EE_VerifyPageFullyErased:00000000 $t
     /tmp/ccOEBSXE.s:24     .text.EE_VerifyPageFullyErased:00000000 EE_VerifyPageFullyErased
     /tmp/ccOEBSXE.s:67     .text.EE_VerifyPageFullyErased:00000020 $d
     /tmp/ccOEBSXE.s:72     .text.EE_FindValidPage:00000000 $t
     /tmp/ccOEBSXE.s:76     .text.EE_FindValidPage:00000000 EE_FindValidPage
     /tmp/ccOEBSXE.s:172    .text.EE_FindValidPage:00000050 $d
     /tmp/ccOEBSXE.s:178    .text.EE_VerifyPageFullWriteVariable:00000000 $t
     /tmp/ccOEBSXE.s:182    .text.EE_VerifyPageFullWriteVariable:00000000 EE_VerifyPageFullWriteVariable
     /tmp/ccOEBSXE.s:276    .text.EE_VerifyPageFullWriteVariable:0000005c $d
     /tmp/ccOEBSXE.s:281    .text.EE_Format:00000000 $t
     /tmp/ccOEBSXE.s:285    .text.EE_Format:00000000 EE_Format
     /tmp/ccOEBSXE.s:371    .text.EE_Format:00000058 $d
     /tmp/ccOEBSXE.s:377    .text.EE_ReadVariable:00000000 $t
     /tmp/ccOEBSXE.s:382    .text.EE_ReadVariable:00000000 EE_ReadVariable
     /tmp/ccOEBSXE.s:464    .text.EE_ReadVariable:00000044 $d
     /tmp/ccOEBSXE.s:469    .text.EE_Init:00000000 $t
     /tmp/ccOEBSXE.s:474    .text.EE_Init:00000000 EE_Init
     /tmp/ccOEBSXE.s:930    .text.EE_Init:00000244 $d
     /tmp/ccOEBSXE.s:940    .text.EE_PageTransfer:00000000 $t
     /tmp/ccOEBSXE.s:944    .text.EE_PageTransfer:00000000 EE_PageTransfer
     /tmp/ccOEBSXE.s:1114   .text.EE_PageTransfer:000000ac $d
     /tmp/ccOEBSXE.s:1122   .text.EE_WriteVariable:00000000 $t
     /tmp/ccOEBSXE.s:1127   .text.EE_WriteVariable:00000000 EE_WriteVariable
     /tmp/ccOEBSXE.s:1168   .bss.DataVar:00000000 DataVar
     /tmp/ccOEBSXE.s:1164   .bss.DataVar:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_FLASH_Program
HAL_FLASHEx_Erase
VirtAddVarTab
