ARM GAS  /tmp/ccHWF1AX.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_hal_adc_ex.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_ADCEx_Calibration_Start,"ax",%progbits
  19              		.align	2
  20              		.global	HAL_ADCEx_Calibration_Start
  21              		.thumb
  22              		.thumb_func
  24              	HAL_ADCEx_Calibration_Start:
  25              	.LFB63:
  26              		.file 1 "./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c"
   1:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
   2:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
   3:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @file    stm32f1xx_hal_adc_ex.c
   4:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @version V1.0.4
   6:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @date    29-April-2016
   7:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   9:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          peripheral:
  10:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *           + Operation functions
  11:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of injected
  12:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *                group, using 2 possible modes: polling, interruption.
  13:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Multimode feature (available on devices with 2 ADCs or more)
  14:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Calibration (ADC automatic self-calibration)
  15:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *           + Control functions
  16:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *             ++ Channels configuration on injected group
  17:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file 
  18:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          "stm32f1xx_hal_adc.c".
  19:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  20:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   @verbatim
  21:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   [..] 
  22:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  23:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       available in file of generic functions "stm32f1xx_hal_adc.c".
  24:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   [..]
  25:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   @endverbatim
  26:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************
  27:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @attention
  28:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  29:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  30:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  31:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  32:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * are permitted provided that the following conditions are met:
ARM GAS  /tmp/ccHWF1AX.s 			page 2


  33:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  34:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer.
  35:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  36:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  37:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      and/or other materials provided with the distribution.
  38:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  39:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      may be used to endorse or promote products derived from this software
  40:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *      without specific prior written permission.
  41:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  42:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  43:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  44:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  45:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  46:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  47:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  48:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  49:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  50:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  51:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  52:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
  53:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ******************************************************************************  
  54:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  55:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  56:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  57:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #include "stm32f1xx_hal.h"
  58:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  59:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @addtogroup STM32F1xx_HAL_Driver
  60:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  61:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  62:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  63:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  64:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief ADC Extension HAL module driver
  65:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  66:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  67:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  68:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  69:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  70:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  71:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  72:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADCEx Private Constants
  73:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
  74:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  75:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  76:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Delay for ADC calibration:                                               */
  77:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Hardware prerequisite before starting a calibration: the ADC must have   */
  78:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* been in power-on state for at least two ADC clock cycles.                */
  79:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ADC clock cycles                                                   */
  80:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES       ((uint32_t) 2)
  81:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  82:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Timeout value for ADC calibration                                        */
  83:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Value defined to be higher than worst cases: low clocks freq,            */
  84:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* maximum prescaler.                                                       */
  85:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
  86:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
  87:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: ms                                                                 */
  88:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_CALIBRATION_TIMEOUT         ((uint32_t) 10)
  89:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccHWF1AX.s 			page 3


  90:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Delay for temperature sensor stabilization time.                         */
  91:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
  92:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Unit: us                                                                 */
  93:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   #define ADC_TEMPSENSOR_DELAY_US         ((uint32_t) 10)
  94:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  95:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
  96:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @}
  97:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
  98:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
  99:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
 100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
 101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
 102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /* Private functions ---------------------------------------------------------*/
 103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADCEx Exported Functions
 105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
 106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 Extended Extended IO operation functions
 109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  *  @brief    Extended Extended Input and Output operation functions
 110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  *
 111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @verbatim    
 112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
 113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       ##### IO operation functions #####
 114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
 115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group.
 117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group.
 118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Poll for conversion complete on injected group.
 119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of injected channel conversion.
 120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start conversion of injected group and enable interruptions.
 121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop conversion of injected group and disable interruptions.
 122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Start multimode and enable DMA transfer.
 124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Stop multimode and disable ADC DMA transfer.
 125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
 126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Perform the ADC self-calibration for single or differential ending.
 128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Get calibration factors for single or differential ending.
 129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Set calibration factors for single or differential ending.
 130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @endverbatim
 132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
 133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
 137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
 138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
 139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         During calibration process, ADC is enabled. ADC is let enabled at
 140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         the completion of this function.
 141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
 145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
  27              		.loc 1 145 0
ARM GAS  /tmp/ccHWF1AX.s 			page 4


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 82B0     		sub	sp, sp, #8
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42              	.LVL1:
 146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
  43              		.loc 1 148 0
  44 0004 0023     		movs	r3, #0
  45 0006 0193     		str	r3, [sp, #4]
 149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
  46              		.loc 1 154 0
  47 0008 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
  48 000c 012B     		cmp	r3, #1
  49 000e 69D0     		beq	.L10
  50 0010 0446     		mov	r4, r0
  51              		.loc 1 154 0 is_stmt 0 discriminator 2
  52 0012 0123     		movs	r3, #1
  53 0014 80F82430 		strb	r3, [r0, #36]
 155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* 1. Calibration prerequisite:                                             */
 157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
 158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*      mode before ADC enable                                              */
 159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups       */
 160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC peripheral */
 161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  54              		.loc 1 161 0 is_stmt 1 discriminator 2
  55 0018 FFF7FEFF 		bl	ADC_ConversionStop_Disable
  56              	.LVL2:
 162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
  57              		.loc 1 164 0 discriminator 2
  58 001c 0546     		mov	r5, r0
  59 001e 0028     		cmp	r0, #0
  60 0020 5BD1     		bne	.L3
 165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
  61              		.loc 1 167 0
  62 0022 A36A     		ldr	r3, [r4, #40]
ARM GAS  /tmp/ccHWF1AX.s 			page 5


  63 0024 23F48853 		bic	r3, r3, #4352
  64 0028 23F00203 		bic	r3, r3, #2
  65 002c 43F00203 		orr	r3, r3, #2
  66 0030 A362     		str	r3, [r4, #40]
 168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Hardware prerequisite: delay before starting the calibration.          */
 172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
 173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay */
 174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     wait_loop_index = ((SystemCoreClock
 175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
  67              		.loc 1 175 0
  68 0032 2E4B     		ldr	r3, .L12
  69 0034 1E68     		ldr	r6, [r3]
  70 0036 0220     		movs	r0, #2
  71              	.LVL3:
  72 0038 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
  73              	.LVL4:
  74 003c B6FBF0F0 		udiv	r0, r6, r0
 176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                        * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
  75              		.loc 1 176 0
  76 0040 4000     		lsls	r0, r0, #1
 174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
  77              		.loc 1 174 0
  78 0042 0190     		str	r0, [sp, #4]
 177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(wait_loop_index != 0)
  79              		.loc 1 178 0
  80 0044 02E0     		b	.L4
  81              	.L5:
 179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       wait_loop_index--;
  82              		.loc 1 180 0
  83 0046 019B     		ldr	r3, [sp, #4]
  84 0048 013B     		subs	r3, r3, #1
  85 004a 0193     		str	r3, [sp, #4]
  86              	.L4:
 178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
  87              		.loc 1 178 0
  88 004c 019B     		ldr	r3, [sp, #4]
  89 004e 002B     		cmp	r3, #0
  90 0050 F9D1     		bne	.L5
 181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 2. Enable the ADC peripheral */
 184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_Enable(hadc);
  91              		.loc 1 184 0
  92 0052 2046     		mov	r0, r4
  93 0054 FFF7FEFF 		bl	ADC_Enable
  94              	.LVL5:
 185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 3. Resets ADC calibration registers */  
 187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
  95              		.loc 1 187 0
  96 0058 2268     		ldr	r2, [r4]
  97 005a 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/ccHWF1AX.s 			page 6


  98 005c 43F00803 		orr	r3, r3, #8
  99 0060 9360     		str	r3, [r2, #8]
 188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 100              		.loc 1 189 0
 101 0062 FFF7FEFF 		bl	HAL_GetTick
 102              	.LVL6:
 103 0066 0646     		mov	r6, r0
 104              	.LVL7:
 190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration reset completion */
 192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 105              		.loc 1 192 0
 106 0068 0FE0     		b	.L6
 107              	.LVL8:
 108              	.L7:
 193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 109              		.loc 1 194 0
 110 006a FFF7FEFF 		bl	HAL_GetTick
 111              	.LVL9:
 112 006e 801B     		subs	r0, r0, r6
 113 0070 0A28     		cmp	r0, #10
 114 0072 0AD9     		bls	.L6
 195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 115              		.loc 1 197 0
 116 0074 A36A     		ldr	r3, [r4, #40]
 117 0076 23F01203 		bic	r3, r3, #18
 118 007a 43F01003 		orr	r3, r3, #16
 119 007e A362     		str	r3, [r4, #40]
 198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 120              		.loc 1 202 0
 121 0080 0023     		movs	r3, #0
 122 0082 84F82430 		strb	r3, [r4, #36]
 203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 123              		.loc 1 204 0
 124 0086 0120     		movs	r0, #1
 125 0088 2DE0     		b	.L2
 126              	.L6:
 192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 127              		.loc 1 192 0
 128 008a 2368     		ldr	r3, [r4]
 129 008c 9A68     		ldr	r2, [r3, #8]
 130 008e 12F0080F 		tst	r2, #8
 131 0092 EAD1     		bne	.L7
 205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* 4. Start ADC calibration */
ARM GAS  /tmp/ccHWF1AX.s 			page 7


 210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 132              		.loc 1 210 0
 133 0094 9A68     		ldr	r2, [r3, #8]
 134 0096 42F00402 		orr	r2, r2, #4
 135 009a 9A60     		str	r2, [r3, #8]
 211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();  
 136              		.loc 1 212 0
 137 009c FFF7FEFF 		bl	HAL_GetTick
 138              	.LVL10:
 139 00a0 0646     		mov	r6, r0
 140              	.LVL11:
 213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait for calibration completion */
 215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 141              		.loc 1 215 0
 142 00a2 0FE0     		b	.L8
 143              	.LVL12:
 144              	.L9:
 216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 145              		.loc 1 217 0
 146 00a4 FFF7FEFF 		bl	HAL_GetTick
 147              	.LVL13:
 148 00a8 801B     		subs	r0, r0, r6
 149 00aa 0A28     		cmp	r0, #10
 150 00ac 0AD9     		bls	.L8
 218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 151              		.loc 1 220 0
 152 00ae A36A     		ldr	r3, [r4, #40]
 153 00b0 23F01203 		bic	r3, r3, #18
 154 00b4 43F01003 		orr	r3, r3, #16
 155 00b8 A362     		str	r3, [r4, #40]
 221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 156              		.loc 1 225 0
 157 00ba 0023     		movs	r3, #0
 158 00bc 84F82430 		strb	r3, [r4, #36]
 226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 159              		.loc 1 227 0
 160 00c0 0120     		movs	r0, #1
 161 00c2 10E0     		b	.L2
 162              	.L8:
 215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 163              		.loc 1 215 0
 164 00c4 2368     		ldr	r3, [r4]
 165 00c6 9B68     		ldr	r3, [r3, #8]
 166 00c8 13F0040F 		tst	r3, #4
 167 00cc EAD1     		bne	.L9
 228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/ccHWF1AX.s 			page 8


 230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 168              		.loc 1 232 0
 169 00ce A36A     		ldr	r3, [r4, #40]
 170 00d0 23F00303 		bic	r3, r3, #3
 171 00d4 43F00103 		orr	r3, r3, #1
 172 00d8 A362     		str	r3, [r4, #40]
 173              	.LVL14:
 174              	.L3:
 233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 175              		.loc 1 238 0
 176 00da 0023     		movs	r3, #0
 177 00dc 84F82430 		strb	r3, [r4, #36]
 239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 178              		.loc 1 241 0
 179 00e0 2846     		mov	r0, r5
 180 00e2 00E0     		b	.L2
 181              	.LVL15:
 182              	.L10:
 154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 183              		.loc 1 154 0
 184 00e4 0220     		movs	r0, #2
 185              	.LVL16:
 186              	.L2:
 242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 187              		.loc 1 242 0
 188 00e6 02B0     		add	sp, sp, #8
 189              	.LCFI2:
 190              		.cfi_def_cfa_offset 16
 191              		@ sp needed
 192 00e8 70BD     		pop	{r4, r5, r6, pc}
 193              	.L13:
 194 00ea 00BF     		.align	2
 195              	.L12:
 196 00ec 00000000 		.word	SystemCoreClock
 197              		.cfi_endproc
 198              	.LFE63:
 200              		.section	.text.HAL_ADCEx_InjectedStart,"ax",%progbits
 201              		.align	2
 202              		.global	HAL_ADCEx_InjectedStart
 203              		.thumb
 204              		.thumb_func
 206              	HAL_ADCEx_InjectedStart:
 207              	.LFB64:
 243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group.
 246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function: None.
 247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
ARM GAS  /tmp/ccHWF1AX.s 			page 9


 248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
 251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 208              		.loc 1 251 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              	.LVL17:
 252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 213              		.loc 1 258 0
 214 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 215 0004 012B     		cmp	r3, #1
 216 0006 53D0     		beq	.L24
 251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 217              		.loc 1 251 0 discriminator 2
 218 0008 10B5     		push	{r4, lr}
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 4, -8
 222              		.cfi_offset 14, -4
 223 000a 0446     		mov	r4, r0
 224              		.loc 1 258 0 discriminator 2
 225 000c 0123     		movs	r3, #1
 226 000e 80F82430 		strb	r3, [r0, #36]
 259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 227              		.loc 1 261 0 discriminator 2
 228 0012 FFF7FEFF 		bl	ADC_Enable
 229              	.LVL18:
 262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 230              		.loc 1 264 0 discriminator 2
 231 0016 0346     		mov	r3, r0
 232 0018 0028     		cmp	r0, #0
 233 001a 44D1     		bne	.L16
 265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
 268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 234              		.loc 1 269 0
 235 001c A26A     		ldr	r2, [r4, #40]
 236 001e 22F44052 		bic	r2, r2, #12288
 237 0022 22F00102 		bic	r2, r2, #1
 238 0026 42F48052 		orr	r2, r2, #4096
 239 002a A262     		str	r2, [r4, #40]
 270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
ARM GAS  /tmp/ccHWF1AX.s 			page 10


 272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 240              		.loc 1 275 0
 241 002c 2168     		ldr	r1, [r4]
 242 002e 214A     		ldr	r2, .L27
 243 0030 9142     		cmp	r1, r2
 244 0032 05D1     		bne	.L17
 245              		.loc 1 275 0 is_stmt 0 discriminator 1
 246 0034 A2F58062 		sub	r2, r2, #1024
 247 0038 5268     		ldr	r2, [r2, #4]
 248 003a 12F4702F 		tst	r2, #983040
 249 003e 04D1     		bne	.L18
 250              	.L17:
 276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 251              		.loc 1 277 0 is_stmt 1
 252 0040 A26A     		ldr	r2, [r4, #40]
 253 0042 22F48012 		bic	r2, r2, #1048576
 254 0046 A262     		str	r2, [r4, #40]
 255 0048 03E0     		b	.L19
 256              	.L18:
 278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 257              		.loc 1 281 0
 258 004a A26A     		ldr	r2, [r4, #40]
 259 004c 42F48012 		orr	r2, r2, #1048576
 260 0050 A262     		str	r2, [r4, #40]
 261              	.L19:
 282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 262              		.loc 1 288 0
 263 0052 A26A     		ldr	r2, [r4, #40]
 264 0054 12F4807F 		tst	r2, #256
 265 0058 01D1     		bne	.L20
 289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 266              		.loc 1 291 0
 267 005a 0022     		movs	r2, #0
 268 005c E262     		str	r2, [r4, #44]
 269              	.L20:
 292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 270              		.loc 1 297 0
ARM GAS  /tmp/ccHWF1AX.s 			page 11


 271 005e 0022     		movs	r2, #0
 272 0060 84F82420 		strb	r2, [r4, #36]
 298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 273              		.loc 1 301 0
 274 0064 6FF00402 		mvn	r2, #4
 275 0068 0A60     		str	r2, [r1]
 302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable conversion of injected group.                                   */
 304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If software start has been selected, conversion starts immediately.    */
 305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
 310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* slave, ADC is enabled only (conversion is not started). If ADC is      */
 311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* master, ADC is enabled and conversion is started.                      */
 312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 276              		.loc 1 312 0
 277 006a 2268     		ldr	r2, [r4]
 278 006c 5168     		ldr	r1, [r2, #4]
 279 006e 11F4806F 		tst	r1, #1024
 280 0072 1BD1     		bne	.L21
 313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 281              		.loc 1 314 0
 282 0074 9168     		ldr	r1, [r2, #8]
 283 0076 01F4E041 		and	r1, r1, #28672
 284 007a B1F5E04F 		cmp	r1, #28672
 285 007e 0DD1     		bne	.L22
 286              		.loc 1 314 0 is_stmt 0 discriminator 1
 287 0080 0C49     		ldr	r1, .L27
 288 0082 8A42     		cmp	r2, r1
 289 0084 05D1     		bne	.L23
 315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 290              		.loc 1 315 0 is_stmt 1 discriminator 2
 291 0086 A1F58061 		sub	r1, r1, #1024
 292 008a 4968     		ldr	r1, [r1, #4]
 314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 293              		.loc 1 314 0 discriminator 2
 294 008c 11F4702F 		tst	r1, #983040
 295 0090 04D1     		bne	.L22
 296              	.L23:
 316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 297              		.loc 1 318 0
 298 0092 9168     		ldr	r1, [r2, #8]
 299 0094 41F40211 		orr	r1, r1, #2129920
 300 0098 9160     		str	r1, [r2, #8]
 301 009a 07E0     		b	.L21
 302              	.L22:
 319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
 321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
ARM GAS  /tmp/ccHWF1AX.s 			page 12


 322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
 323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 303              		.loc 1 323 0
 304 009c 9168     		ldr	r1, [r2, #8]
 305 009e 41F40041 		orr	r1, r1, #32768
 306 00a2 9160     		str	r1, [r2, #8]
 307 00a4 02E0     		b	.L21
 308              	.L16:
 324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 309              		.loc 1 330 0
 310 00a6 0022     		movs	r2, #0
 311 00a8 84F82420 		strb	r2, [r4, #36]
 312              	.L21:
 331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 313              		.loc 1 334 0
 314 00ac 1846     		mov	r0, r3
 315              	.LVL19:
 316 00ae 10BD     		pop	{r4, pc}
 317              	.LVL20:
 318              	.L24:
 319              	.LCFI4:
 320              		.cfi_def_cfa_offset 0
 321              		.cfi_restore 4
 322              		.cfi_restore 14
 258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 323              		.loc 1 258 0
 324 00b0 0220     		movs	r0, #2
 325              	.LVL21:
 326 00b2 7047     		bx	lr
 327              	.L28:
 328              		.align	2
 329              	.L27:
 330 00b4 00280140 		.word	1073817600
 331              		.cfi_endproc
 332              	.LFE64:
 334              		.section	.text.HAL_ADCEx_InjectedStop,"ax",%progbits
 335              		.align	2
 336              		.global	HAL_ADCEx_InjectedStop
 337              		.thumb
 338              		.thumb_func
 340              	HAL_ADCEx_InjectedStop:
 341              	.LFB65:
 335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
 339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         no regular conversion is on going.
 340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
ARM GAS  /tmp/ccHWF1AX.s 			page 13


 341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
 346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
 350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 342              		.loc 1 350 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              	.LVL22:
 351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 347              		.loc 1 357 0
 348 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 349 0004 012B     		cmp	r3, #1
 350 0006 24D0     		beq	.L33
 350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 351              		.loc 1 350 0 discriminator 2
 352 0008 10B5     		push	{r4, lr}
 353              	.LCFI5:
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 4, -8
 356              		.cfi_offset 14, -4
 357 000a 0446     		mov	r4, r0
 358              		.loc 1 357 0 discriminator 2
 359 000c 0123     		movs	r3, #1
 360 000e 80F82430 		strb	r3, [r0, #36]
 358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
 363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
 365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 361              		.loc 1 365 0 discriminator 2
 362 0012 836A     		ldr	r3, [r0, #40]
 363 0014 13F4807F 		tst	r3, #256
 364 0018 11D1     		bne	.L31
 366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 365              		.loc 1 366 0 discriminator 1
 366 001a 0368     		ldr	r3, [r0]
 367 001c 5B68     		ldr	r3, [r3, #4]
 365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 368              		.loc 1 365 0 discriminator 1
 369 001e 13F4806F 		tst	r3, #1024
 370 0022 0CD1     		bne	.L31
ARM GAS  /tmp/ccHWF1AX.s 			page 14


 367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 371              		.loc 1 370 0
 372 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 373              	.LVL23:
 371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 374              		.loc 1 373 0
 375 0028 0346     		mov	r3, r0
 376 002a 68B9     		cbnz	r0, .L32
 374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 377              		.loc 1 376 0
 378 002c A26A     		ldr	r2, [r4, #40]
 379 002e 22F48852 		bic	r2, r2, #4352
 380 0032 22F00102 		bic	r2, r2, #1
 381 0036 42F00102 		orr	r2, r2, #1
 382 003a A262     		str	r2, [r4, #40]
 383 003c 04E0     		b	.L32
 384              	.LVL24:
 385              	.L31:
 377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 386              		.loc 1 384 0
 387 003e A36A     		ldr	r3, [r4, #40]
 388 0040 43F02003 		orr	r3, r3, #32
 389 0044 A362     		str	r3, [r4, #40]
 390              	.LVL25:
 385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 391              		.loc 1 386 0
 392 0046 0123     		movs	r3, #1
 393              	.LVL26:
 394              	.L32:
 387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 395              		.loc 1 390 0
 396 0048 0022     		movs	r2, #0
 397 004a 84F82420 		strb	r2, [r4, #36]
 391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 398              		.loc 1 393 0
 399 004e 1846     		mov	r0, r3
 400 0050 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccHWF1AX.s 			page 15


 401              	.LVL27:
 402              	.L33:
 403              	.LCFI6:
 404              		.cfi_def_cfa_offset 0
 405              		.cfi_restore 4
 406              		.cfi_restore 14
 357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 407              		.loc 1 357 0
 408 0052 0220     		movs	r0, #2
 409              	.LVL28:
 410 0054 7047     		bx	lr
 411              		.cfi_endproc
 412              	.LFE65:
 414 0056 00BF     		.section	.text.HAL_ADCEx_InjectedPollForConversion,"ax",%progbits
 415              		.align	2
 416              		.global	HAL_ADCEx_InjectedPollForConversion
 417              		.thumb
 418              		.thumb_func
 420              	HAL_ADCEx_InjectedPollForConversion:
 421              	.LFB66:
 394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
 398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  Timeout: Timeout value in millisecond.
 400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
 401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 422              		.loc 1 403 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 8
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              	.LVL29:
 427 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 428              	.LCFI7:
 429              		.cfi_def_cfa_offset 20
 430              		.cfi_offset 4, -20
 431              		.cfi_offset 5, -16
 432              		.cfi_offset 6, -12
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 83B0     		sub	sp, sp, #12
 436              	.LCFI8:
 437              		.cfi_def_cfa_offset 32
 438 0004 0546     		mov	r5, r0
 439 0006 0C46     		mov	r4, r1
 404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tickstart;
 405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
 407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
 440              		.loc 1 408 0
 441 0008 0023     		movs	r3, #0
 442 000a 0193     		str	r3, [sp, #4]
 443              	.LVL30:
ARM GAS  /tmp/ccHWF1AX.s 			page 16


 409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0;
 410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Get timeout */
 415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();  
 444              		.loc 1 415 0
 445 000c FFF7FEFF 		bl	HAL_GetTick
 446              	.LVL31:
 447 0010 0646     		mov	r6, r0
 448              	.LVL32:
 416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      
 417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
 418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion.                                                              */
 419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* For injected group, flag JEOC is set only at the end of the sequence,    */
 420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* not for each conversion within the sequence.                             */
 421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - If single conversion for injected group (scan mode disabled or        */
 422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion ==1), flag JEOC is used to determine the      */
 423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    conversion completion.                                                */
 424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - If sequence conversion for injected group (scan mode enabled and      */
 425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    InjectedNbrOfConversion >=2), flag JEOC is set only at the end of the */
 426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    sequence.                                                             */
 427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
 428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
 429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
 430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
 431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    As flag JEOC is not set after each conversion, no timeout status can  */
 432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*    be set.                                                               */
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 449              		.loc 1 433 0
 450 0012 2B68     		ldr	r3, [r5]
 451 0014 9B6B     		ldr	r3, [r3, #56]
 452 0016 13F4401F 		tst	r3, #3145728
 453 001a 12D0     		beq	.L39
 454 001c 17E0     		b	.L63
 455              	.LVL33:
 456              	.L42:
 434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Wait until End of Conversion flag is raised */
 436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 457              		.loc 1 439 0
 458 001e B4F1FF3F 		cmp	r4, #-1
 459 0022 0ED0     		beq	.L39
 440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 460              		.loc 1 441 0
 461 0024 24B1     		cbz	r4, .L40
 462              		.loc 1 441 0 is_stmt 0 discriminator 1
 463 0026 FFF7FEFF 		bl	HAL_GetTick
 464              	.LVL34:
 465 002a 801B     		subs	r0, r0, r6
 466 002c A042     		cmp	r0, r4
 467 002e 08D9     		bls	.L39
ARM GAS  /tmp/ccHWF1AX.s 			page 17


 468              	.L40:
 442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
 443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 469              		.loc 1 444 0 is_stmt 1
 470 0030 AB6A     		ldr	r3, [r5, #40]
 471 0032 43F00403 		orr	r3, r3, #4
 472 0036 AB62     		str	r3, [r5, #40]
 445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 473              		.loc 1 447 0
 474 0038 0023     		movs	r3, #0
 475 003a 85F82430 		strb	r3, [r5, #36]
 448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 476              		.loc 1 449 0
 477 003e 0320     		movs	r0, #3
 478 0040 87E0     		b	.L41
 479              	.L39:
 436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 480              		.loc 1 436 0
 481 0042 2B68     		ldr	r3, [r5]
 482 0044 1B68     		ldr	r3, [r3]
 483 0046 13F0040F 		tst	r3, #4
 484 004a E8D0     		beq	.L42
 485 004c 51E0     		b	.L43
 486              	.LVL35:
 487              	.L63:
 450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
 451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Replace polling by wait for maximum conversion time */
 457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
 458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
 459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
 460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 488              		.loc 1 461 0
 489 004e 424B     		ldr	r3, .L65
 490 0050 1F68     		ldr	r7, [r3]
 491 0052 0220     		movs	r0, #2
 492              	.LVL36:
 493 0054 FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 494              	.LVL37:
 495 0058 B7FBF0F0 		udiv	r0, r7, r0
 462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 496              		.loc 1 462 0
 497 005c 2B68     		ldr	r3, [r5]
 498 005e 1969     		ldr	r1, [r3, #16]
 499 0060 3E4A     		ldr	r2, .L65+4
 500 0062 1142     		tst	r1, r2
 501 0064 12D1     		bne	.L44
 502              		.loc 1 462 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccHWF1AX.s 			page 18


 503 0066 D968     		ldr	r1, [r3, #12]
 504 0068 02F15C42 		add	r2, r2, #-603979776
 505 006c 1142     		tst	r1, r2
 506 006e 0DD1     		bne	.L44
 507              		.loc 1 462 0 discriminator 3
 508 0070 1969     		ldr	r1, [r3, #16]
 509 0072 3B4A     		ldr	r2, .L65+8
 510 0074 1142     		tst	r1, r2
 511 0076 05D1     		bne	.L54
 512              		.loc 1 462 0 discriminator 5
 513 0078 DA68     		ldr	r2, [r3, #12]
 514 007a 3A4B     		ldr	r3, .L65+12
 515 007c 1A42     		tst	r2, r3
 516 007e 03D0     		beq	.L55
 517              		.loc 1 462 0
 518 0080 2923     		movs	r3, #41
 519 0082 1BE0     		b	.L46
 520              	.L54:
 521 0084 2923     		movs	r3, #41
 522 0086 19E0     		b	.L46
 523              	.L55:
 524 0088 1423     		movs	r3, #20
 525 008a 17E0     		b	.L46
 526              	.L44:
 527              		.loc 1 462 0 discriminator 4
 528 008c 1969     		ldr	r1, [r3, #16]
 529 008e 344A     		ldr	r2, .L65+8
 530 0090 1142     		tst	r1, r2
 531 0092 04D1     		bne	.L47
 532              		.loc 1 462 0 discriminator 11
 533 0094 D968     		ldr	r1, [r3, #12]
 534 0096 02F16E42 		add	r2, r2, #-301989888
 535 009a 1142     		tst	r1, r2
 536 009c 09D0     		beq	.L56
 537              	.L47:
 538              		.loc 1 462 0 discriminator 14
 539 009e 1969     		ldr	r1, [r3, #16]
 540 00a0 314A     		ldr	r2, .L65+16
 541 00a2 0A40     		ands	r2, r2, r1
 542 00a4 3AB9     		cbnz	r2, .L57
 543              		.loc 1 462 0 discriminator 15
 544 00a6 DA68     		ldr	r2, [r3, #12]
 545 00a8 2F4B     		ldr	r3, .L65+16
 546 00aa 1340     		ands	r3, r3, r2
 547 00ac 2BB1     		cbz	r3, .L58
 548              		.loc 1 462 0
 549 00ae FC23     		movs	r3, #252
 550 00b0 04E0     		b	.L46
 551              	.L56:
 552 00b2 5423     		movs	r3, #84
 553 00b4 02E0     		b	.L46
 554              	.L57:
 555 00b6 FC23     		movs	r3, #252
 556 00b8 00E0     		b	.L46
 557              	.L58:
 558 00ba 5423     		movs	r3, #84
 559              	.L46:
ARM GAS  /tmp/ccHWF1AX.s 			page 19


 460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 560              		.loc 1 460 0 is_stmt 1
 561 00bc 03FB00F7 		mul	r7, r3, r0
 562              	.LVL38:
 463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 563              		.loc 1 464 0
 564 00c0 14E0     		b	.L49
 565              	.L52:
 465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if timeout is disabled (set to infinite wait) */
 467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if(Timeout != HAL_MAX_DELAY)
 566              		.loc 1 467 0
 567 00c2 B4F1FF3F 		cmp	r4, #-1
 568 00c6 0ED0     		beq	.L50
 468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 569              		.loc 1 469 0
 570 00c8 24B1     		cbz	r4, .L51
 571              		.loc 1 469 0 is_stmt 0 discriminator 1
 572 00ca FFF7FEFF 		bl	HAL_GetTick
 573              	.LVL39:
 574 00ce 801B     		subs	r0, r0, r6
 575 00d0 A042     		cmp	r0, r4
 576 00d2 08D9     		bls	.L50
 577              	.L51:
 470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
 471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Update ADC state machine to timeout */
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 578              		.loc 1 472 0 is_stmt 1
 579 00d4 AB6A     		ldr	r3, [r5, #40]
 580 00d6 43F00403 		orr	r3, r3, #4
 581 00da AB62     		str	r3, [r5, #40]
 473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Process unlocked */
 475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           __HAL_UNLOCK(hadc);
 582              		.loc 1 475 0
 583 00dc 0023     		movs	r3, #0
 584 00de 85F82430 		strb	r3, [r5, #36]
 476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           
 477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           return HAL_TIMEOUT;
 585              		.loc 1 477 0
 586 00e2 0320     		movs	r0, #3
 587 00e4 35E0     		b	.L41
 588              	.L50:
 478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
 479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       Conversion_Timeout_CPU_cycles ++;
 589              		.loc 1 480 0
 590 00e6 019B     		ldr	r3, [sp, #4]
 591 00e8 0133     		adds	r3, r3, #1
 592 00ea 0193     		str	r3, [sp, #4]
 593              	.L49:
 464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 594              		.loc 1 464 0
 595 00ec 019B     		ldr	r3, [sp, #4]
 596 00ee BB42     		cmp	r3, r7
ARM GAS  /tmp/ccHWF1AX.s 			page 20


 597 00f0 E7D3     		bcc	.L52
 598              	.LVL40:
 599              	.L43:
 481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Clear injected group conversion flag */
 485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
 486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* simultaneously.                                                          */
 487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 600              		.loc 1 487 0
 601 00f2 2B68     		ldr	r3, [r5]
 602 00f4 6FF00E02 		mvn	r2, #14
 603 00f8 1A60     		str	r2, [r3]
 488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Update ADC state machine */
 490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 604              		.loc 1 490 0
 605 00fa AB6A     		ldr	r3, [r5, #40]
 606 00fc 43F40053 		orr	r3, r3, #8192
 607 0100 AB62     		str	r3, [r5, #40]
 491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
 493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
 494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* from group regular.                                                      */
 495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 608              		.loc 1 495 0
 609 0102 2A68     		ldr	r2, [r5]
 610 0104 9368     		ldr	r3, [r2, #8]
 611 0106 03F4E043 		and	r3, r3, #28672
 612 010a B3F5E04F 		cmp	r3, #28672
 613 010e 0BD0     		beq	.L53
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 614              		.loc 1 496 0 discriminator 1
 615 0110 5368     		ldr	r3, [r2, #4]
 495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 616              		.loc 1 495 0 discriminator 1
 617 0112 13F4806F 		tst	r3, #1024
 618 0116 15D1     		bne	.L59
 497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 619              		.loc 1 497 0
 620 0118 9368     		ldr	r3, [r2, #8]
 621 011a 03F46023 		and	r3, r3, #917504
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 622              		.loc 1 496 0
 623 011e B3F5602F 		cmp	r3, #917504
 624 0122 11D1     		bne	.L60
 498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 625              		.loc 1 498 0
 626 0124 EB68     		ldr	r3, [r5, #12]
 497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 627              		.loc 1 497 0
 628 0126 8BB9     		cbnz	r3, .L61
 629              	.L53:
 499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state */
 501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
ARM GAS  /tmp/ccHWF1AX.s 			page 21


 630              		.loc 1 501 0
 631 0128 AB6A     		ldr	r3, [r5, #40]
 632 012a 23F48053 		bic	r3, r3, #4096
 633 012e AB62     		str	r3, [r5, #40]
 502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 634              		.loc 1 503 0
 635 0130 AB6A     		ldr	r3, [r5, #40]
 636 0132 13F4807F 		tst	r3, #256
 637 0136 0BD1     		bne	.L62
 504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 638              		.loc 1 505 0
 639 0138 AB6A     		ldr	r3, [r5, #40]
 640 013a 43F00103 		orr	r3, r3, #1
 641 013e AB62     		str	r3, [r5, #40]
 506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 507:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 508:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 509:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC state */
 510:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return HAL_OK;
 642              		.loc 1 510 0
 643 0140 0020     		movs	r0, #0
 644 0142 06E0     		b	.L41
 645              	.L59:
 646 0144 0020     		movs	r0, #0
 647 0146 04E0     		b	.L41
 648              	.L60:
 649 0148 0020     		movs	r0, #0
 650 014a 02E0     		b	.L41
 651              	.L61:
 652 014c 0020     		movs	r0, #0
 653 014e 00E0     		b	.L41
 654              	.L62:
 655 0150 0020     		movs	r0, #0
 656              	.L41:
 511:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 657              		.loc 1 511 0
 658 0152 03B0     		add	sp, sp, #12
 659              	.LCFI9:
 660              		.cfi_def_cfa_offset 20
 661              		@ sp needed
 662 0154 F0BD     		pop	{r4, r5, r6, r7, pc}
 663              	.LVL41:
 664              	.L66:
 665 0156 00BF     		.align	2
 666              	.L65:
 667 0158 00000000 		.word	SystemCoreClock
 668 015c 24499224 		.word	613566756
 669 0160 92244912 		.word	306783378
 670 0164 92244900 		.word	4793490
 671 0168 49922400 		.word	2396745
 672              		.cfi_endproc
 673              	.LFE66:
 675              		.section	.text.HAL_ADCEx_InjectedStart_IT,"ax",%progbits
 676              		.align	2
 677              		.global	HAL_ADCEx_InjectedStart_IT
ARM GAS  /tmp/ccHWF1AX.s 			page 22


 678              		.thumb
 679              		.thumb_func
 681              	HAL_ADCEx_InjectedStart_IT:
 682              	.LFB67:
 512:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 513:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 514:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of injected group with interruption.
 515:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - JEOC (end of conversion of injected group)
 516:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 517:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 518:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status.
 519:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 520:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
 521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 683              		.loc 1 521 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL42:
 522:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 523:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 524:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 525:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 526:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 527:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 688              		.loc 1 528 0
 689 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 690 0004 012B     		cmp	r3, #1
 691 0006 58D0     		beq	.L77
 521:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 692              		.loc 1 521 0 discriminator 2
 693 0008 10B5     		push	{r4, lr}
 694              	.LCFI10:
 695              		.cfi_def_cfa_offset 8
 696              		.cfi_offset 4, -8
 697              		.cfi_offset 14, -4
 698 000a 0446     		mov	r4, r0
 699              		.loc 1 528 0 discriminator 2
 700 000c 0123     		movs	r3, #1
 701 000e 80F82430 		strb	r3, [r0, #36]
 529:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 530:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 531:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 702              		.loc 1 531 0 discriminator 2
 703 0012 FFF7FEFF 		bl	ADC_Enable
 704              	.LVL43:
 532:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 533:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if ADC is effectively enabled */
 534:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 705              		.loc 1 534 0 discriminator 2
 706 0016 0346     		mov	r3, r0
 707 0018 0028     		cmp	r0, #0
 708 001a 49D1     		bne	.L69
 535:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 536:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state                                                          */
 537:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to injected group conversion results    */
ARM GAS  /tmp/ccHWF1AX.s 			page 23


 538:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to injected operation                     */
 539:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 709              		.loc 1 539 0
 710 001c A26A     		ldr	r2, [r4, #40]
 711 001e 22F44052 		bic	r2, r2, #12288
 712 0022 22F00102 		bic	r2, r2, #1
 713 0026 42F48052 		orr	r2, r2, #4096
 714 002a A262     		str	r2, [r4, #40]
 540:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 541:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_INJ_BUSY);
 542:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 543:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Case of independent mode or multimode (for devices with several ADCs): */
 544:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set multimode state.                                                   */
 545:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 715              		.loc 1 545 0
 716 002c 2168     		ldr	r1, [r4]
 717 002e 244A     		ldr	r2, .L80
 718 0030 9142     		cmp	r1, r2
 719 0032 05D1     		bne	.L70
 720              		.loc 1 545 0 is_stmt 0 discriminator 1
 721 0034 A2F58062 		sub	r2, r2, #1024
 722 0038 5268     		ldr	r2, [r2, #4]
 723 003a 12F4702F 		tst	r2, #983040
 724 003e 04D1     		bne	.L71
 725              	.L70:
 546:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 547:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 726              		.loc 1 547 0 is_stmt 1
 727 0040 A26A     		ldr	r2, [r4, #40]
 728 0042 22F48012 		bic	r2, r2, #1048576
 729 0046 A262     		str	r2, [r4, #40]
 730 0048 03E0     		b	.L72
 731              	.L71:
 548:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 549:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 550:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 551:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 732              		.loc 1 551 0
 733 004a A26A     		ldr	r2, [r4, #40]
 734 004c 42F48012 		orr	r2, r2, #1048576
 735 0050 A262     		str	r2, [r4, #40]
 736              	.L72:
 552:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 553:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 554:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if a regular conversion is ongoing */
 555:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: On this device, there is no ADC error code fields related to     */
 556:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       conversions on group injected only. In case of conversion on     */
 557:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       going on group regular, no error code is reset.                  */
 558:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 737              		.loc 1 558 0
 738 0052 A26A     		ldr	r2, [r4, #40]
 739 0054 12F4807F 		tst	r2, #256
 740 0058 01D1     		bne	.L73
 559:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 560:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Reset ADC all error code fields */
 561:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 741              		.loc 1 561 0
ARM GAS  /tmp/ccHWF1AX.s 			page 24


 742 005a 0022     		movs	r2, #0
 743 005c E262     		str	r2, [r4, #44]
 744              	.L73:
 562:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 563:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 564:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 565:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 566:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 567:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 745              		.loc 1 567 0
 746 005e 0022     		movs	r2, #0
 747 0060 84F82420 		strb	r2, [r4, #36]
 568:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 569:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear injected group conversion flag */
 570:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 571:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 748              		.loc 1 571 0
 749 0064 6FF00402 		mvn	r2, #4
 750 0068 0A60     		str	r2, [r1]
 572:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 573:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable end of conversion interrupt for injected channels */
 574:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 751              		.loc 1 574 0
 752 006a 2168     		ldr	r1, [r4]
 753 006c 4A68     		ldr	r2, [r1, #4]
 754 006e 42F08002 		orr	r2, r2, #128
 755 0072 4A60     		str	r2, [r1, #4]
 575:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 576:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of injected group if software start has been selected */
 577:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* and if automatic injected conversion is disabled.                      */
 578:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 579:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 580:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If automatic injected conversion is enabled, conversion will start     */
 581:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* after next regular group conversion.                                   */
 582:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 756              		.loc 1 582 0
 757 0074 2268     		ldr	r2, [r4]
 758 0076 5168     		ldr	r1, [r2, #4]
 759 0078 11F4806F 		tst	r1, #1024
 760 007c 1BD1     		bne	.L74
 583:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 761              		.loc 1 584 0
 762 007e 9168     		ldr	r1, [r2, #8]
 763 0080 01F4E041 		and	r1, r1, #28672
 764 0084 B1F5E04F 		cmp	r1, #28672
 765 0088 0DD1     		bne	.L75
 766              		.loc 1 584 0 is_stmt 0 discriminator 1
 767 008a 0D49     		ldr	r1, .L80
 768 008c 8A42     		cmp	r2, r1
 769 008e 05D1     		bne	.L76
 585:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 770              		.loc 1 585 0 is_stmt 1 discriminator 2
 771 0090 A1F58061 		sub	r1, r1, #1024
 772 0094 4968     		ldr	r1, [r1, #4]
 584:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 773              		.loc 1 584 0 discriminator 2
ARM GAS  /tmp/ccHWF1AX.s 			page 25


 774 0096 11F4702F 		tst	r1, #983040
 775 009a 04D1     		bne	.L75
 776              	.L76:
 586:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 587:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with SW start */
 588:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 777              		.loc 1 588 0
 778 009c 9168     		ldr	r1, [r2, #8]
 779 009e 41F40211 		orr	r1, r1, #2129920
 780 00a2 9160     		str	r1, [r2, #8]
 781 00a4 07E0     		b	.L74
 782              	.L75:
 589:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 590:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
 591:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 592:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Start ADC conversion on injected group with external trigger */
 593:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 783              		.loc 1 593 0
 784 00a6 9168     		ldr	r1, [r2, #8]
 785 00a8 41F40041 		orr	r1, r1, #32768
 786 00ac 9160     		str	r1, [r2, #8]
 787 00ae 02E0     		b	.L74
 788              	.L69:
 594:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 595:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 596:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 597:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 598:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 599:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 600:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 789              		.loc 1 600 0
 790 00b0 0022     		movs	r2, #0
 791 00b2 84F82420 		strb	r2, [r4, #36]
 792              	.L74:
 601:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 602:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 603:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 604:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 793              		.loc 1 604 0
 794 00b6 1846     		mov	r0, r3
 795              	.LVL44:
 796 00b8 10BD     		pop	{r4, pc}
 797              	.LVL45:
 798              	.L77:
 799              	.LCFI11:
 800              		.cfi_def_cfa_offset 0
 801              		.cfi_restore 4
 802              		.cfi_restore 14
 528:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 803              		.loc 1 528 0
 804 00ba 0220     		movs	r0, #2
 805              	.LVL46:
 806 00bc 7047     		bx	lr
 807              	.L81:
 808 00be 00BF     		.align	2
 809              	.L80:
 810 00c0 00280140 		.word	1073817600
ARM GAS  /tmp/ccHWF1AX.s 			page 26


 811              		.cfi_endproc
 812              	.LFE67:
 814              		.section	.text.HAL_ADCEx_InjectedStop_IT,"ax",%progbits
 815              		.align	2
 816              		.global	HAL_ADCEx_InjectedStop_IT
 817              		.thumb
 818              		.thumb_func
 820              	HAL_ADCEx_InjectedStop_IT:
 821              	.LFB68:
 605:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 606:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 607:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 608:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of 
 609:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
 610:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         is on going.
 611:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on 
 612:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 613:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 614:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 615:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 616:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 617:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 618:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 619:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
 620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 822              		.loc 1 620 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              	.LVL47:
 621:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 622:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 623:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 624:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 625:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 626:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 827              		.loc 1 627 0
 828 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 829 0004 012B     		cmp	r3, #1
 830 0006 29D0     		beq	.L86
 620:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 831              		.loc 1 620 0 discriminator 2
 832 0008 10B5     		push	{r4, lr}
 833              	.LCFI12:
 834              		.cfi_def_cfa_offset 8
 835              		.cfi_offset 4, -8
 836              		.cfi_offset 14, -4
 837 000a 0446     		mov	r4, r0
 838              		.loc 1 627 0 discriminator 2
 839 000c 0123     		movs	r3, #1
 840 000e 80F82430 		strb	r3, [r0, #36]
 628:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 629:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion and disable ADC peripheral                     */
 630:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Conditioned to:                                                          */
 631:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - No conversion on the other group (regular group) is intended to        */
 632:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   continue (injected and regular groups stop conversion and ADC disable  */
ARM GAS  /tmp/ccHWF1AX.s 			page 27


 633:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   are common)                                                            */
 634:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
 635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 841              		.loc 1 635 0 discriminator 2
 842 0012 836A     		ldr	r3, [r0, #40]
 843 0014 13F4807F 		tst	r3, #256
 844 0018 16D1     		bne	.L84
 636:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 845              		.loc 1 636 0 discriminator 1
 846 001a 0368     		ldr	r3, [r0]
 847 001c 5B68     		ldr	r3, [r3, #4]
 635:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****      HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 848              		.loc 1 635 0 discriminator 1
 849 001e 13F4806F 		tst	r3, #1024
 850 0022 11D1     		bne	.L84
 637:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 638:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Stop potential conversion on going, on regular and injected groups */
 639:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC peripheral */
 640:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 851              		.loc 1 640 0
 852 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 853              	.LVL48:
 641:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 642:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if ADC is effectively disabled */
 643:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 854              		.loc 1 643 0
 855 0028 0346     		mov	r3, r0
 856 002a 90B9     		cbnz	r0, .L85
 644:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 645:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Disable ADC end of conversion interrupt for injected channels */
 646:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 857              		.loc 1 646 0
 858 002c 2168     		ldr	r1, [r4]
 859 002e 4A68     		ldr	r2, [r1, #4]
 860 0030 22F08002 		bic	r2, r2, #128
 861 0034 4A60     		str	r2, [r1, #4]
 647:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 648:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set ADC state */
 649:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 862              		.loc 1 649 0
 863 0036 A26A     		ldr	r2, [r4, #40]
 864 0038 22F48852 		bic	r2, r2, #4352
 865 003c 22F00102 		bic	r2, r2, #1
 866 0040 42F00102 		orr	r2, r2, #1
 867 0044 A262     		str	r2, [r4, #40]
 868 0046 04E0     		b	.L85
 869              	.LVL49:
 870              	.L84:
 650:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 651:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 652:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 653:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 654:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 655:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 656:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 657:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 871              		.loc 1 657 0
ARM GAS  /tmp/ccHWF1AX.s 			page 28


 872 0048 A36A     		ldr	r3, [r4, #40]
 873 004a 43F02003 		orr	r3, r3, #32
 874 004e A362     		str	r3, [r4, #40]
 875              	.LVL50:
 658:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 659:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 876              		.loc 1 659 0
 877 0050 0123     		movs	r3, #1
 878              	.LVL51:
 879              	.L85:
 660:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 661:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 662:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 663:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 880              		.loc 1 663 0
 881 0052 0022     		movs	r2, #0
 882 0054 84F82420 		strb	r2, [r4, #36]
 664:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 665:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 666:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 883              		.loc 1 666 0
 884 0058 1846     		mov	r0, r3
 885 005a 10BD     		pop	{r4, pc}
 886              	.LVL52:
 887              	.L86:
 888              	.LCFI13:
 889              		.cfi_def_cfa_offset 0
 890              		.cfi_restore 4
 891              		.cfi_restore 14
 627:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 892              		.loc 1 627 0
 893 005c 0220     		movs	r0, #2
 894              	.LVL53:
 895 005e 7047     		bx	lr
 896              		.cfi_endproc
 897              	.LFE68:
 899              		.section	.text.HAL_ADCEx_MultiModeStart_DMA,"ax",%progbits
 900              		.align	2
 901              		.global	HAL_ADCEx_MultiModeStart_DMA
 902              		.thumb
 903              		.thumb_func
 905              	HAL_ADCEx_MultiModeStart_DMA:
 906              	.LFB69:
 667:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 668:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 669:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
 670:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 671:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
 672:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         through DMA.
 673:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Multimode must have been previously configured using 
 674:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADCEx_MultiModeConfigChannel() function.
 675:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
 676:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - DMA transfer complete
 677:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - DMA half transfer
 678:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 679:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note:  On STM32F1 devices, ADC slave regular group must be configured 
 680:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         with conversion trigger ADC_SOFTWARE_START.
ARM GAS  /tmp/ccHWF1AX.s 			page 29


 681:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note:  ADC slave can be enabled preliminarily using single-mode  
 682:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Start() function.
 683:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 684:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  pData: The destination Buffer address.
 685:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
 686:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 687:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 688:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t L
 689:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 907              		.loc 1 689 0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 48
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 911              	.LVL54:
 912 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 913              	.LCFI14:
 914              		.cfi_def_cfa_offset 20
 915              		.cfi_offset 4, -20
 916              		.cfi_offset 5, -16
 917              		.cfi_offset 6, -12
 918              		.cfi_offset 7, -8
 919              		.cfi_offset 14, -4
 920 0002 8DB0     		sub	sp, sp, #52
 921              	.LCFI15:
 922              		.cfi_def_cfa_offset 72
 923              	.LVL55:
 690:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 691:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 692:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 693:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 694:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 695:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 696:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 697:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 924              		.loc 1 698 0
 925 0004 90F82440 		ldrb	r4, [r0, #36]	@ zero_extendqisi2
 926 0008 012C     		cmp	r4, #1
 927 000a 64D0     		beq	.L97
 928              		.loc 1 698 0 is_stmt 0 discriminator 2
 929 000c 0124     		movs	r4, #1
 930 000e 80F82440 		strb	r4, [r0, #36]
 699:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 700:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
 701:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 931              		.loc 1 701 0 is_stmt 1 discriminator 2
 932 0012 324C     		ldr	r4, .L99
 933 0014 0094     		str	r4, [sp]
 702:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 703:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC slave regular group must be configured with      */
 704:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion trigger ADC_SOFTWARE_START.                                   */
 705:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: External trigger of ADC slave must be enabled, it is already done  */
 706:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       into function "HAL_ADC_Init()".                                    */
 707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((tmphadcSlave.Instance == NULL)                 ||
 708:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (! ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  )
 934              		.loc 1 708 0 discriminator 2
 935 0016 A468     		ldr	r4, [r4, #8]
ARM GAS  /tmp/ccHWF1AX.s 			page 30


 936 0018 04F46024 		and	r4, r4, #917504
 707:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (! ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  )
 937              		.loc 1 707 0 discriminator 2
 938 001c B4F5602F 		cmp	r4, #917504
 939 0020 08D0     		beq	.L91
 709:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 710:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 711:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 940              		.loc 1 711 0
 941 0022 836A     		ldr	r3, [r0, #40]
 942 0024 43F02003 		orr	r3, r3, #32
 943 0028 8362     		str	r3, [r0, #40]
 712:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 713:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 714:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 944              		.loc 1 714 0
 945 002a 0023     		movs	r3, #0
 946 002c 80F82430 		strb	r3, [r0, #36]
 715:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 716:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     return HAL_ERROR;
 947              		.loc 1 716 0
 948 0030 0120     		movs	r0, #1
 949              	.LVL56:
 950 0032 51E0     		b	.L90
 951              	.LVL57:
 952              	.L91:
 953 0034 1646     		mov	r6, r2
 954 0036 0D46     		mov	r5, r1
 955 0038 0746     		mov	r7, r0
 717:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 718:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 719:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Enable the ADC peripherals: master and slave (in case if not already     */
 720:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* enabled previously)                                                      */
 721:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Enable(hadc);
 956              		.loc 1 721 0
 957 003a FFF7FEFF 		bl	ADC_Enable
 958              	.LVL58:
 722:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 959              		.loc 1 722 0
 960 003e 0446     		mov	r4, r0
 961 0040 18B9     		cbnz	r0, .L92
 723:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 724:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(&tmphadcSlave);
 962              		.loc 1 724 0
 963 0042 6846     		mov	r0, sp
 964              	.LVL59:
 965 0044 FFF7FEFF 		bl	ADC_Enable
 966              	.LVL60:
 967 0048 0446     		mov	r4, r0
 968              	.LVL61:
 969              	.L92:
 725:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 726:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 727:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Start conversion if all ADCs of multimode are effectively enabled */
 728:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 970              		.loc 1 728 0
 971 004a 002C     		cmp	r4, #0
ARM GAS  /tmp/ccHWF1AX.s 			page 31


 972 004c 3ED1     		bne	.L93
 729:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 730:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC state (ADC master)                                             */
 731:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Clear state bitfield related to regular group conversion results     */
 732:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* - Set state bitfield related to regular operation                      */
 733:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 973              		.loc 1 733 0
 974 004e BA6A     		ldr	r2, [r7, #40]
 975 0050 234B     		ldr	r3, .L99+4
 976 0052 1340     		ands	r3, r3, r2
 977 0054 43F48073 		orr	r3, r3, #256
 978 0058 BB62     		str	r3, [r7, #40]
 734:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
 735:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY);
 736:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 737:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If conversions on group regular are also triggering group injected,    */
 738:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* update ADC state.                                                      */
 739:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 979              		.loc 1 739 0
 980 005a 3B68     		ldr	r3, [r7]
 981 005c 5B68     		ldr	r3, [r3, #4]
 982 005e 13F4806F 		tst	r3, #1024
 983 0062 05D0     		beq	.L94
 740:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 741:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 984              		.loc 1 741 0
 985 0064 BB6A     		ldr	r3, [r7, #40]
 986 0066 23F44053 		bic	r3, r3, #12288
 987 006a 43F48053 		orr	r3, r3, #4096
 988 006e BB62     		str	r3, [r7, #40]
 989              	.L94:
 742:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 743:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 744:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 745:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 746:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 747:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 990              		.loc 1 747 0
 991 0070 0023     		movs	r3, #0
 992 0072 87F82430 		strb	r3, [r7, #36]
 748:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 749:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set ADC error code to none */
 750:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_CLEAR_ERRORCODE(hadc);
 993              		.loc 1 750 0
 994 0076 FB62     		str	r3, [r7, #44]
 751:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 752:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 753:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA transfer complete callback */
 754:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 995              		.loc 1 754 0
 996 0078 3B6A     		ldr	r3, [r7, #32]
 997 007a 1A4A     		ldr	r2, .L99+8
 998 007c 9A62     		str	r2, [r3, #40]
 755:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****        
 756:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA half transfer complete callback */
 757:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 999              		.loc 1 757 0
ARM GAS  /tmp/ccHWF1AX.s 			page 32


 1000 007e 3B6A     		ldr	r3, [r7, #32]
 1001 0080 194A     		ldr	r2, .L99+12
 1002 0082 DA62     		str	r2, [r3, #44]
 758:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 759:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set the DMA error callback */
 760:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1003              		.loc 1 760 0
 1004 0084 3B6A     		ldr	r3, [r7, #32]
 1005 0086 194A     		ldr	r2, .L99+16
 1006 0088 1A63     		str	r2, [r3, #48]
 761:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 762:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 763:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
 764:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* start (in case of SW start):                                           */
 765:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 766:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Clear regular group conversion flag and overrun flag */
 767:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 768:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1007              		.loc 1 768 0
 1008 008a 3B68     		ldr	r3, [r7]
 1009 008c 6FF00202 		mvn	r2, #2
 1010 0090 1A60     		str	r2, [r3]
 769:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 770:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Enable ADC DMA mode of ADC master */
 771:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1011              		.loc 1 771 0
 1012 0092 3A68     		ldr	r2, [r7]
 1013 0094 9368     		ldr	r3, [r2, #8]
 1014 0096 43F48073 		orr	r3, r3, #256
 1015 009a 9360     		str	r3, [r2, #8]
 772:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 773:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start the DMA channel */
 774:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1016              		.loc 1 774 0
 1017 009c 3968     		ldr	r1, [r7]
 1018 009e 386A     		ldr	r0, [r7, #32]
 1019 00a0 4C31     		adds	r1, r1, #76
 1020 00a2 2A46     		mov	r2, r5
 1021 00a4 3346     		mov	r3, r6
 1022 00a6 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1023              	.LVL62:
 775:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 776:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Start conversion of regular group if software start has been selected. */
 777:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If external trigger has been selected, conversion will start at next   */
 778:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* trigger event.                                                         */
 779:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
 780:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
 781:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 1024              		.loc 1 781 0
 1025 00aa 3B68     		ldr	r3, [r7]
 1026 00ac 9A68     		ldr	r2, [r3, #8]
 1027 00ae 02F46022 		and	r2, r2, #917504
 1028 00b2 B2F5602F 		cmp	r2, #917504
 1029 00b6 04D1     		bne	.L95
 782:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 783:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with SW start */
 784:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
ARM GAS  /tmp/ccHWF1AX.s 			page 33


 1030              		.loc 1 784 0
 1031 00b8 9A68     		ldr	r2, [r3, #8]
 1032 00ba 42F4A002 		orr	r2, r2, #5242880
 1033 00be 9A60     		str	r2, [r3, #8]
 1034 00c0 07E0     		b	.L96
 1035              	.L95:
 785:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 786:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 787:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 788:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Start ADC conversion on regular group with external trigger */
 789:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1036              		.loc 1 789 0
 1037 00c2 9A68     		ldr	r2, [r3, #8]
 1038 00c4 42F48012 		orr	r2, r2, #1048576
 1039 00c8 9A60     		str	r2, [r3, #8]
 1040 00ca 02E0     		b	.L96
 1041              	.L93:
 790:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 791:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 792:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
 793:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 794:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Process unlocked */
 795:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 1042              		.loc 1 795 0
 1043 00cc 0023     		movs	r3, #0
 1044 00ce 87F82430 		strb	r3, [r7, #36]
 1045              	.L96:
 796:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 797:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 798:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 799:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1046              		.loc 1 799 0
 1047 00d2 2046     		mov	r0, r4
 1048 00d4 00E0     		b	.L90
 1049              	.LVL63:
 1050              	.L97:
 698:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 1051              		.loc 1 698 0
 1052 00d6 0220     		movs	r0, #2
 1053              	.LVL64:
 1054              	.L90:
 800:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1055              		.loc 1 800 0
 1056 00d8 0DB0     		add	sp, sp, #52
 1057              	.LCFI16:
 1058              		.cfi_def_cfa_offset 20
 1059              		@ sp needed
 1060 00da F0BD     		pop	{r4, r5, r6, r7, pc}
 1061              	.L100:
 1062              		.align	2
 1063              	.L99:
 1064 00dc 00280140 		.word	1073817600
 1065 00e0 FEFCEFFF 		.word	-1049346
 1066 00e4 00000000 		.word	ADC_DMAConvCplt
 1067 00e8 00000000 		.word	ADC_DMAHalfConvCplt
 1068 00ec 00000000 		.word	ADC_DMAError
 1069              		.cfi_endproc
ARM GAS  /tmp/ccHWF1AX.s 			page 34


 1070              	.LFE69:
 1072              		.section	.text.HAL_ADCEx_MultiModeStop_DMA,"ax",%progbits
 1073              		.align	2
 1074              		.global	HAL_ADCEx_MultiModeStop_DMA
 1075              		.thumb
 1076              		.thumb_func
 1078              	HAL_ADCEx_MultiModeStop_DMA:
 1079              	.LFB70:
 801:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 802:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 803:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
 804:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
 805:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         ADC peripheral.
 806:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. To disable multimode 
 807:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (set with HAL_ADCEx_MultiModeConfigChannel(), ADC must be 
 808:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_ReInit().
 809:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function 
 810:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA must be called after this function with handle of
 811:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
 812:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 813:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 814:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 815:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
 816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1080              		.loc 1 816 0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 48
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084              	.LVL65:
 817:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 818:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 819:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 820:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 821:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 822:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 823:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
 824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1085              		.loc 1 824 0
 1086 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1087 0004 012B     		cmp	r3, #1
 1088 0006 3AD0     		beq	.L106
 816:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1089              		.loc 1 816 0 discriminator 2
 1090 0008 10B5     		push	{r4, lr}
 1091              	.LCFI17:
 1092              		.cfi_def_cfa_offset 8
 1093              		.cfi_offset 4, -8
 1094              		.cfi_offset 14, -4
 1095 000a 8CB0     		sub	sp, sp, #48
 1096              	.LCFI18:
 1097              		.cfi_def_cfa_offset 56
 1098 000c 0446     		mov	r4, r0
 1099              		.loc 1 824 0 discriminator 2
 1100 000e 0123     		movs	r3, #1
 1101 0010 80F82430 		strb	r3, [r0, #36]
 825:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 826:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  
ARM GAS  /tmp/ccHWF1AX.s 			page 35


 827:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Stop potential conversion on going, on regular and injected groups */
 828:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Disable ADC master peripheral */
 829:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1102              		.loc 1 829 0 discriminator 2
 1103 0014 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1104              	.LVL66:
 830:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 831:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 832:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1105              		.loc 1 832 0 discriminator 2
 1106 0018 0346     		mov	r3, r0
 1107 001a 58BB     		cbnz	r0, .L103
 833:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 834:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
 835:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 1108              		.loc 1 835 0
 1109 001c 0CA8     		add	r0, sp, #48
 1110              	.LVL67:
 1111 001e 1A4B     		ldr	r3, .L109
 1112 0020 40F8303D 		str	r3, [r0, #-48]!
 836:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 837:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 838:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 839:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 840:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 841:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 842:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Process unlocked */
 843:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 844:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 845:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       return HAL_ERROR;
 846:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 847:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 848:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 849:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Disable ADC slave peripheral */
 850:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = ADC_ConversionStop_Disable(&tmphadcSlave);
 1113              		.loc 1 850 0
 1114 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1115              	.LVL68:
 851:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
 852:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 853:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (tmp_hal_status != HAL_OK)
 1116              		.loc 1 853 0
 1117 0028 40B1     		cbz	r0, .L104
 854:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
 855:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 856:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 1118              		.loc 1 856 0
 1119 002a A36A     		ldr	r3, [r4, #40]
 1120 002c 43F01003 		orr	r3, r3, #16
 1121 0030 A362     		str	r3, [r4, #40]
 857:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 858:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Process unlocked */
 859:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1122              		.loc 1 859 0
 1123 0032 0023     		movs	r3, #0
 1124 0034 84F82430 		strb	r3, [r4, #36]
 860:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
ARM GAS  /tmp/ccHWF1AX.s 			page 36


 861:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         return HAL_ERROR;
 1125              		.loc 1 861 0
 1126 0038 0120     		movs	r0, #1
 1127              	.LVL69:
 1128 003a 22E0     		b	.L102
 1129              	.LVL70:
 1130              	.L104:
 862:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
 863:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 864:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 865:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable ADC DMA mode */
 866:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1131              		.loc 1 866 0
 1132 003c 2268     		ldr	r2, [r4]
 1133 003e 9368     		ldr	r3, [r2, #8]
 1134 0040 23F48073 		bic	r3, r3, #256
 1135 0044 9360     		str	r3, [r2, #8]
 867:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 868:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Reset configuration of ADC DMA continuous request for dual mode */
 869:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR1, ADC_CR1_DUALMOD);
 1136              		.loc 1 869 0
 1137 0046 2268     		ldr	r2, [r4]
 1138 0048 5368     		ldr	r3, [r2, #4]
 1139 004a 23F47023 		bic	r3, r3, #983040
 1140 004e 5360     		str	r3, [r2, #4]
 870:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
 871:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
 872:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
 873:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 1141              		.loc 1 873 0
 1142 0050 206A     		ldr	r0, [r4, #32]
 1143              	.LVL71:
 1144 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 1145              	.LVL72:
 874:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 875:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 876:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
 877:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1146              		.loc 1 877 0
 1147 0056 0346     		mov	r3, r0
 1148 0058 40B9     		cbnz	r0, .L105
 878:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
 879:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Change ADC state (ADC master) */
 880:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1149              		.loc 1 880 0
 1150 005a A26A     		ldr	r2, [r4, #40]
 1151 005c 22F48852 		bic	r2, r2, #4352
 1152 0060 22F00102 		bic	r2, r2, #1
 1153 0064 42F00102 		orr	r2, r2, #1
 1154 0068 A262     		str	r2, [r4, #40]
 1155 006a 03E0     		b	.L103
 1156              	.L105:
 881:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 882:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY);
 883:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 884:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
 885:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/ccHWF1AX.s 			page 37


 886:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
 887:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);    
 1157              		.loc 1 887 0
 1158 006c A26A     		ldr	r2, [r4, #40]
 1159 006e 42F04002 		orr	r2, r2, #64
 1160 0072 A262     		str	r2, [r4, #40]
 1161              	.L103:
 1162              	.LVL73:
 888:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
 889:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 890:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 891:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
 892:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1163              		.loc 1 892 0
 1164 0074 0022     		movs	r2, #0
 1165 0076 84F82420 		strb	r2, [r4, #36]
 893:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 894:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
 895:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1166              		.loc 1 895 0
 1167 007a 1846     		mov	r0, r3
 1168 007c 01E0     		b	.L102
 1169              	.LVL74:
 1170              	.L106:
 1171              	.LCFI19:
 1172              		.cfi_def_cfa_offset 0
 1173              		.cfi_restore 4
 1174              		.cfi_restore 14
 824:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 1175              		.loc 1 824 0
 1176 007e 0220     		movs	r0, #2
 1177              	.LVL75:
 1178 0080 7047     		bx	lr
 1179              	.LVL76:
 1180              	.L102:
 1181              	.LCFI20:
 1182              		.cfi_def_cfa_offset 56
 1183              		.cfi_offset 4, -8
 1184              		.cfi_offset 14, -4
 896:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1185              		.loc 1 896 0
 1186 0082 0CB0     		add	sp, sp, #48
 1187              	.LCFI21:
 1188              		.cfi_def_cfa_offset 8
 1189              		@ sp needed
 1190 0084 10BD     		pop	{r4, pc}
 1191              	.LVL77:
 1192              	.L110:
 1193 0086 00BF     		.align	2
 1194              	.L109:
 1195 0088 00280140 		.word	1073817600
 1196              		.cfi_endproc
 1197              	.LFE70:
 1199              		.section	.text.HAL_ADCEx_InjectedGetValue,"ax",%progbits
 1200              		.align	2
 1201              		.global	HAL_ADCEx_InjectedGetValue
 1202              		.thumb
ARM GAS  /tmp/ccHWF1AX.s 			page 38


 1203              		.thumb_func
 1205              	HAL_ADCEx_InjectedGetValue:
 1206              	.LFB71:
 897:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #endif /* STM32F101xG || defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defin
 898:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 899:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 900:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
 901:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
 902:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
 903:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS 
 904:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
 905:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
 906:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
 907:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            to flag JEOC.
 908:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
 909:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
 910:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
 911:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
 912:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
 913:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
 914:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         To clear this flag, either use function: 
 915:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
 916:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion() 
 917:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
 918:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 919:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  InjectedRank: the converted ADC injected rank.
 920:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
 921:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_1: Injected Channel1 selected
 922:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_2: Injected Channel2 selected
 923:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
 924:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
 925:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
 926:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 927:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
 928:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1207              		.loc 1 928 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 0
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              		@ link register save eliminated.
 1212              	.LVL78:
 929:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmp_jdr = 0;
 930:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 931:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 932:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 933:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
 934:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 935:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Get ADC converted value */ 
 936:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   switch(InjectedRank)
 1213              		.loc 1 936 0
 1214 0000 0329     		cmp	r1, #3
 1215 0002 07D0     		beq	.L113
 1216 0004 0429     		cmp	r1, #4
 1217 0006 02D0     		beq	.L114
 1218 0008 0229     		cmp	r1, #2
 1219 000a 09D1     		bne	.L117
 1220 000c 05E0     		b	.L115
ARM GAS  /tmp/ccHWF1AX.s 			page 39


 1221              	.L114:
 937:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {  
 938:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4: 
 939:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
 1222              		.loc 1 939 0
 1223 000e 0368     		ldr	r3, [r0]
 1224 0010 986C     		ldr	r0, [r3, #72]
 1225              	.LVL79:
 940:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1226              		.loc 1 940 0
 1227 0012 7047     		bx	lr
 1228              	.LVL80:
 1229              	.L113:
 941:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3: 
 942:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
 1230              		.loc 1 942 0
 1231 0014 0368     		ldr	r3, [r0]
 1232 0016 586C     		ldr	r0, [r3, #68]
 1233              	.LVL81:
 943:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1234              		.loc 1 943 0
 1235 0018 7047     		bx	lr
 1236              	.LVL82:
 1237              	.L115:
 944:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2: 
 945:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
 1238              		.loc 1 945 0
 1239 001a 0368     		ldr	r3, [r0]
 1240 001c 186C     		ldr	r0, [r3, #64]
 1241              	.LVL83:
 946:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1242              		.loc 1 946 0
 1243 001e 7047     		bx	lr
 1244              	.LVL84:
 1245              	.L117:
 947:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
 948:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     default:
 949:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 1246              		.loc 1 949 0
 1247 0020 0368     		ldr	r3, [r0]
 1248 0022 D86B     		ldr	r0, [r3, #60]
 1249              	.LVL85:
 950:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 951:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 952:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 953:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 954:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_jdr;
 955:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1250              		.loc 1 955 0
 1251 0024 7047     		bx	lr
 1252              		.cfi_endproc
 1253              	.LFE71:
 1255 0026 00BF     		.section	.text.HAL_ADCEx_MultiModeGetValue,"ax",%progbits
 1256              		.align	2
 1257              		.global	HAL_ADCEx_MultiModeGetValue
 1258              		.thumb
 1259              		.thumb_func
ARM GAS  /tmp/ccHWF1AX.s 			page 40


 1261              	HAL_ADCEx_MultiModeGetValue:
 1262              	.LFB72:
 956:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 957:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
 958:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 959:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Returns the last ADC Master&Slave regular conversions results data
 960:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         in the selected multi mode.
 961:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle of ADC master (handle of ADC slave must not be used)
 962:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval The converted data value.
 963:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 964:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
 965:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1263              		.loc 1 965 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 1268              	.LVL86:
 966:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   uint32_t tmpDR = 0;
 967:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 968:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 969:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 970:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 971:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
 972:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 973:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 974:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
 975:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       cleared by hardware when reading register DR.                      */
 976:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 977:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* On STM32F1 devices, ADC1 data register DR contains ADC2 conversions      */
 978:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* only if ADC1 DMA mode is enabled.                                        */
 979:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   tmpDR = hadc->Instance->DR;
 1269              		.loc 1 979 0
 1270 0000 0368     		ldr	r3, [r0]
 1271 0002 D86C     		ldr	r0, [r3, #76]
 1272              	.LVL87:
 980:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 981:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(ADC1->CR2, ADC_CR2_DMA))
 1273              		.loc 1 981 0
 1274 0004 044B     		ldr	r3, .L120
 1275 0006 9B68     		ldr	r3, [r3, #8]
 1276 0008 13F4807F 		tst	r3, #256
 1277 000c 03D1     		bne	.L119
 982:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
 983:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmpDR |= (ADC2->DR << 16);
 1278              		.loc 1 983 0
 1279 000e 034B     		ldr	r3, .L120+4
 1280 0010 DB6C     		ldr	r3, [r3, #76]
 1281 0012 40EA0340 		orr	r0, r0, r3, lsl #16
 1282              	.LVL88:
 1283              	.L119:
 984:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
 985:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
 986:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return ADC converted value */ 
 987:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmpDR;
 988:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1284              		.loc 1 988 0
ARM GAS  /tmp/ccHWF1AX.s 			page 41


 1285 0016 7047     		bx	lr
 1286              	.L121:
 1287              		.align	2
 1288              	.L120:
 1289 0018 00240140 		.word	1073816576
 1290 001c 00280140 		.word	1073817600
 1291              		.cfi_endproc
 1292              	.LFE72:
 1294              		.section	.text.HAL_ADCEx_InjectedConvCpltCallback,"ax",%progbits
 1295              		.align	2
 1296              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 1297              		.thumb
 1298              		.thumb_func
 1300              	HAL_ADCEx_InjectedConvCpltCallback:
 1301              	.LFB73:
 989:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #endif /* STM32F101xG || defined STM32F103x6 || defined STM32F103xB || defined STM32F105xC || defin
 990:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
 991:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
 992:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non blocking mode 
 993:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
 994:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
 995:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
 996:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
 997:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1302              		.loc 1 997 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
 1306              		@ link register save eliminated.
 1307              	.LVL89:
 1308 0000 7047     		bx	lr
 1309              		.cfi_endproc
 1310              	.LFE73:
 1312 0002 00BF     		.section	.text.HAL_ADCEx_InjectedConfigChannel,"ax",%progbits
 1313              		.align	2
 1314              		.global	HAL_ADCEx_InjectedConfigChannel
 1315              		.thumb
 1316              		.thumb_func
 1318              	HAL_ADCEx_InjectedConfigChannel:
 1319              	.LFB74:
 998:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
 999:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   UNUSED(hadc);
1000:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1001:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****             the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
1002:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1003:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
1004:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1005:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1006:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @}
1007:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1008:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1009:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 Extended Peripheral Control functions
1010:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief    Extended Peripheral Control functions
1011:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *
1012:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @verbatim   
1013:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================
1014:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
ARM GAS  /tmp/ccHWF1AX.s 			page 42


1015:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****  ===============================================================================  
1016:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
1017:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Configure channels on injected group
1018:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (+) Configure multimode
1019:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1020:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** @endverbatim
1021:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @{
1022:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1023:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1024:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1025:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Configures the ADC injected group and the selected channel to be
1026:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         linked to the injected group.
1027:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1028:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this 
1029:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
1030:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without reseting the ADC.
1031:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state: 
1032:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         this function must be called when ADC is not under conversion.
1033:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1034:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
1035:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         injected group.
1036:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval None
1037:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1038:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef
1039:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1320              		.loc 1 1039 0
 1321              		.cfi_startproc
 1322              		@ args = 0, pretend = 0, frame = 8
 1323              		@ frame_needed = 0, uses_anonymous_args = 0
 1324              	.LVL90:
 1325              		.loc 1 1039 0
 1326 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1327              	.LCFI22:
 1328              		.cfi_def_cfa_offset 20
 1329              		.cfi_offset 4, -20
 1330              		.cfi_offset 5, -16
 1331              		.cfi_offset 6, -12
 1332              		.cfi_offset 7, -8
 1333              		.cfi_offset 14, -4
 1334 0002 83B0     		sub	sp, sp, #12
 1335              	.LCFI23:
 1336              		.cfi_def_cfa_offset 32
 1337              	.LVL91:
1040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1041:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1338              		.loc 1 1041 0
 1339 0004 0023     		movs	r3, #0
 1340 0006 0193     		str	r3, [sp, #4]
1042:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1043:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
1044:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1045:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
1046:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
1047:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
1048:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
1049:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(sConfigInjected->InjectedOffset));
1050:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
ARM GAS  /tmp/ccHWF1AX.s 			page 43


1051:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
1052:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1053:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
1054:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
1055:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
1056:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1057:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1058:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1341              		.loc 1 1059 0
 1342 0008 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1343 000c 012B     		cmp	r3, #1
 1344 000e 00F03981 		beq	.L149
 1345              		.loc 1 1059 0 is_stmt 0 discriminator 2
 1346 0012 0123     		movs	r3, #1
 1347 0014 80F82430 		strb	r3, [r0, #36]
1060:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1061:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
1062:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is disabled, injected channels sequence length is set to  */
1063:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   0x00: 1 channel converted (channel on regular rank 1)                  */
1064:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   Parameter "InjectedNbrOfConversion" is discarded.                      */
1065:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   Note: Scan mode is present by hardware on this device and, if          */
1066:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
1067:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
1068:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* - if scan mode is enabled, injected channels sequence length is set to   */
1069:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*   parameter "InjectedNbrOfConversion".                                   */
1070:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 1348              		.loc 1 1070 0 is_stmt 1 discriminator 2
 1349 0018 8368     		ldr	r3, [r0, #8]
 1350 001a D3B9     		cbnz	r3, .L125
1071:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1072:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 1351              		.loc 1 1072 0
 1352 001c 4B68     		ldr	r3, [r1, #4]
 1353 001e 012B     		cmp	r3, #1
 1354 0020 11D1     		bne	.L126
1073:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1074:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for all injected ranks */
1075:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                             ,
 1355              		.loc 1 1075 0
 1356 0022 0568     		ldr	r5, [r0]
 1357 0024 AA6B     		ldr	r2, [r5, #56]
 1358 0026 940D     		lsrs	r4, r2, #22
 1359 0028 A405     		lsls	r4, r4, #22
 1360 002a 0A68     		ldr	r2, [r1]
 1361              	.LVL92:
 1362              	.LBB20:
 1363              	.LBB21:
 1364              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccHWF1AX.s 			page 44


   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  /tmp/ccHWF1AX.s 			page 45


  66:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccHWF1AX.s 			page 46


 123:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccHWF1AX.s 			page 47


 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccHWF1AX.s 			page 48


 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccHWF1AX.s 			page 49


 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccHWF1AX.s 			page 50


 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:./Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccHWF1AX.s 			page 51


 408:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:./Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:./Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:./Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:./Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  /tmp/ccHWF1AX.s 			page 52


 465:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:./Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:./Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
ARM GAS  /tmp/ccHWF1AX.s 			page 53


 522:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1365              		.loc 2 531 0
 1366 002c 4FF47873 		mov	r3, #992
 1367              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1368 0030 93FAA3F3 		rbit r3, r3
 1369              	@ 0 "" 2
 1370              	.LVL93:
 1371              		.thumb
 1372              	.LBE21:
 1373              	.LBE20:
 1374              		.loc 1 1075 0
 1375 0034 B3FA83F3 		clz	r3, r3
 1376              	.LVL94:
 1377 0038 03EB4303 		add	r3, r3, r3, lsl #1
 1378 003c 9A40     		lsls	r2, r2, r3
 1379 003e 2243     		orrs	r2, r2, r4
 1380 0040 AA63     		str	r2, [r5, #56]
1040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1381              		.loc 1 1040 0
 1382 0042 0023     		movs	r3, #0
 1383 0044 48E0     		b	.L127
 1384              	.LVL95:
 1385              	.L126:
1076:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL   |
1077:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ4 |
1078:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ3 |
1079:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ2 |
1080:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JSQ1                                    ,
1081:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,
1082:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   ADC_INJECTED_RANK_1,
1083:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   0x01)                            );
1084:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1085:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* If another injected rank than rank1 was intended to be set, and could  */
1086:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* not due to ScanConvMode disabled, error is reported.                   */
1087:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1088:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1089:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1090:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1386              		.loc 1 1090 0
 1387 0046 836A     		ldr	r3, [r0, #40]
 1388 0048 43F02003 		orr	r3, r3, #32
 1389 004c 8362     		str	r3, [r0, #40]
 1390              	.LVL96:
1091:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
1092:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 1391              		.loc 1 1092 0
 1392 004e 0123     		movs	r3, #1
 1393 0050 42E0     		b	.L127
ARM GAS  /tmp/ccHWF1AX.s 			page 54


 1394              	.LVL97:
 1395              	.L125:
1093:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1094:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1095:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
1096:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1097:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Since injected channels rank conv. order depends on total number of   */
1098:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* injected conversions, selected rank must be below or equal to total   */
1099:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* number of injected conversions to be updated.                         */
1100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 1396              		.loc 1 1100 0
 1397 0052 4B68     		ldr	r3, [r1, #4]
 1398 0054 0C69     		ldr	r4, [r1, #16]
 1399 0056 A342     		cmp	r3, r4
 1400 0058 29D8     		bhi	.L128
1101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
1103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set the SQx bits for the selected rank */
1104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                         ,
 1401              		.loc 1 1104 0
 1402 005a 0768     		ldr	r7, [r0]
 1403 005c BE6B     		ldr	r6, [r7, #56]
 1404              	.LVL98:
 1405              	.LBB22:
 1406              	.LBB23:
 1407              		.loc 2 531 0
 1408 005e 4FF47875 		mov	r5, #992
 1409              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1410 0062 95FAA5FE 		rbit lr, r5
 1411              	@ 0 "" 2
 1412              	.LVL99:
 1413              		.thumb
 1414              	.LBE23:
 1415              	.LBE22:
 1416              		.loc 1 1104 0
 1417 0066 BEFA8EFE 		clz	lr, lr
 1418              	.LVL100:
 1419 006a 1A1B     		subs	r2, r3, r4
 1420 006c 0332     		adds	r2, r2, #3
 1421 006e 02FB0EFE 		mul	lr, r2, lr
 1422 0072 1F23     		movs	r3, #31
 1423 0074 03FA0EF3 		lsl	r3, r3, lr
 1424 0078 43F44013 		orr	r3, r3, #3145728
 1425 007c 26EA030C 		bic	ip, r6, r3
 1426 0080 661E     		subs	r6, r4, #1
 1427              	.LVL101:
 1428              	.LBB24:
 1429              	.LBB25:
 1430              		.loc 2 531 0
 1431 0082 4FF4401E 		mov	lr, #3145728
 1432              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1433 0086 9EFAAEFE 		rbit lr, lr
 1434              	@ 0 "" 2
 1435              	.LVL102:
 1436              		.thumb
 1437              	.LBE25:
 1438              	.LBE24:
ARM GAS  /tmp/ccHWF1AX.s 			page 55


 1439              		.loc 1 1104 0
 1440 008a BEFA8EFE 		clz	lr, lr
 1441              	.LVL103:
 1442 008e 06FA0EF3 		lsl	r3, r6, lr
 1443 0092 0E68     		ldr	r6, [r1]
 1444              	.LVL104:
 1445              	.LBB26:
 1446              	.LBB27:
 1447              		.loc 2 531 0
 1448              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1449 0094 95FAA5F5 		rbit r5, r5
 1450              	@ 0 "" 2
 1451              	.LVL105:
 1452              		.thumb
 1453              	.LBE27:
 1454              	.LBE26:
 1455              		.loc 1 1104 0
 1456 0098 B5FA85F5 		clz	r5, r5
 1457              	.LVL106:
 1458 009c 05FB02F2 		mul	r2, r5, r2
 1459 00a0 9640     		lsls	r6, r6, r2
 1460 00a2 1E43     		orrs	r6, r6, r3
 1461 00a4 4CEA0606 		orr	r6, ip, r6
 1462 00a8 BE63     		str	r6, [r7, #56]
1040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1463              		.loc 1 1040 0
 1464 00aa 0023     		movs	r3, #0
 1465 00ac 14E0     		b	.L127
 1466              	.LVL107:
 1467              	.L128:
1105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
1107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)   ,
1110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL_SHIFT(sConfigInjected->InjectedNbrOfConversion) |
1112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(sConfigInjected->InjectedChannel,      
1113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion)    );
1115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Clear the old SQx bits for the selected rank */
1119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR                                       ,
 1468              		.loc 1 1119 0
 1469 00ae 0668     		ldr	r6, [r0]
 1470 00b0 B56B     		ldr	r5, [r6, #56]
 1471              	.LVL108:
 1472              	.LBB28:
 1473              	.LBB29:
 1474              		.loc 2 531 0
 1475 00b2 4FF47872 		mov	r2, #992
 1476              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1477 00b6 92FAA2F2 		rbit r2, r2
 1478              	@ 0 "" 2
 1479              	.LVL109:
ARM GAS  /tmp/ccHWF1AX.s 			page 56


 1480              		.thumb
 1481              	.LBE29:
 1482              	.LBE28:
 1483              		.loc 1 1119 0
 1484 00ba B2FA82F2 		clz	r2, r2
 1485              	.LVL110:
 1486 00be 1B1B     		subs	r3, r3, r4
 1487 00c0 0333     		adds	r3, r3, #3
 1488 00c2 03FB02F3 		mul	r3, r3, r2
 1489 00c6 1F22     		movs	r2, #31
 1490 00c8 02FA03F3 		lsl	r3, r2, r3
 1491 00cc 43F44013 		orr	r3, r3, #3145728
 1492 00d0 25EA0303 		bic	r3, r5, r3
 1493 00d4 B363     		str	r3, [r6, #56]
1040:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 1494              		.loc 1 1040 0
 1495 00d6 0023     		movs	r3, #0
 1496              	.LVL111:
 1497              	.L127:
1120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_JL                                               |
1122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JSQR_RK_JL(ADC_JSQR_JSQ1,                         
1123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedRank,         
1124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                                   sConfigInjected->InjectedNbrOfConversion) ,
1125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  
1126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  0x00000000                                                  );
1127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   } 
1129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
1131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - external trigger to start conversion                                  */
1134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update not conditioned to ADC state:                          */
1135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
1137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
1138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
1139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 1498              		.loc 1 1139 0
 1499 00d8 0268     		ldr	r2, [r0]
 1500 00da 9468     		ldr	r4, [r2, #8]
 1501 00dc 14F0010F 		tst	r4, #1
 1502 00e0 11D1     		bne	.L129
1140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {    
1141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR2                                           ,
 1503              		.loc 1 1141 0
 1504 00e2 9468     		ldr	r4, [r2, #8]
 1505 00e4 24F4E044 		bic	r4, r4, #28672
 1506 00e8 24F00104 		bic	r4, r4, #1
 1507 00ec 674D     		ldr	r5, .L152
 1508 00ee AA42     		cmp	r2, r5
 1509 00f0 06D1     		bne	.L130
 1510              		.loc 1 1141 0 is_stmt 0 discriminator 1
 1511 00f2 CD69     		ldr	r5, [r1, #28]
 1512 00f4 B5F5C04F 		cmp	r5, #24576
 1513 00f8 03D1     		bne	.L132
ARM GAS  /tmp/ccHWF1AX.s 			page 57


 1514              		.loc 1 1141 0
 1515 00fa 4FF48045 		mov	r5, #16384
 1516 00fe 00E0     		b	.L132
 1517              	.L130:
 1518              		.loc 1 1141 0 discriminator 2
 1519 0100 CD69     		ldr	r5, [r1, #28]
 1520              	.L132:
 1521              		.loc 1 1141 0 discriminator 8
 1522 0102 2C43     		orrs	r4, r4, r5
 1523 0104 9460     		str	r4, [r2, #8]
 1524              	.L129:
1142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_JEXTSEL |
1143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR2_ADON                                                  ,
1144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CFGR_JEXTSEL(hadc, sConfigInjected->ExternalTrigInjecConv) );
1145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configuration of injected group                                          */
1149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Automatic injected conversion                                         */
1150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode                                           */
1151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Automatic injected conversion can be enabled if injected group         */
1153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* external triggers are disabled.                                        */
1154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == ENABLE)
 1525              		.loc 1 1154 0 is_stmt 1
 1526 0106 8A69     		ldr	r2, [r1, #24]
 1527 0108 012A     		cmp	r2, #1
 1528 010a 0ED1     		bne	.L133
1155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 1529              		.loc 1 1156 0
 1530 010c CA69     		ldr	r2, [r1, #28]
 1531 010e B2F5E04F 		cmp	r2, #28672
 1532 0112 05D1     		bne	.L134
1157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 1533              		.loc 1 1158 0
 1534 0114 0468     		ldr	r4, [r0]
 1535 0116 6268     		ldr	r2, [r4, #4]
 1536 0118 42F48062 		orr	r2, r2, #1024
 1537 011c 6260     		str	r2, [r4, #4]
 1538 011e 04E0     		b	.L133
 1539              	.L134:
1159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
1161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1540              		.loc 1 1163 0
 1541 0120 836A     		ldr	r3, [r0, #40]
 1542              	.LVL112:
 1543 0122 43F02003 		orr	r3, r3, #32
 1544 0126 8362     		str	r3, [r0, #40]
 1545              	.LVL113:
1164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 1546              		.loc 1 1165 0
ARM GAS  /tmp/ccHWF1AX.s 			page 58


 1547 0128 0123     		movs	r3, #1
 1548              	.LVL114:
 1549              	.L133:
1166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Injected discontinuous can be enabled only if auto-injected mode is    */
1170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* disabled.                                                              */  
1171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 1550              		.loc 1 1171 0
 1551 012a 4A69     		ldr	r2, [r1, #20]
 1552 012c 012A     		cmp	r2, #1
 1553 012e 0CD1     		bne	.L135
1172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == DISABLE)
 1554              		.loc 1 1173 0
 1555 0130 8A69     		ldr	r2, [r1, #24]
 1556 0132 2AB9     		cbnz	r2, .L136
1174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 1557              		.loc 1 1175 0
 1558 0134 0468     		ldr	r4, [r0]
 1559 0136 6268     		ldr	r2, [r4, #4]
 1560 0138 42F48052 		orr	r2, r2, #4096
 1561 013c 6260     		str	r2, [r4, #4]
 1562 013e 04E0     		b	.L135
 1563              	.L136:
1176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       } 
1177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       else
1178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1564              		.loc 1 1180 0
 1565 0140 836A     		ldr	r3, [r0, #40]
 1566              	.LVL115:
 1567 0142 43F02003 		orr	r3, r3, #32
 1568 0146 8362     		str	r3, [r0, #40]
 1569              	.LVL116:
1181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
 1570              		.loc 1 1182 0
 1571 0148 0123     		movs	r3, #1
 1572              	.LVL117:
 1573              	.L135:
1183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* InjectedChannel sampling time configuration */
1188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* For channels 10 to 17 */
1189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 1574              		.loc 1 1189 0
 1575 014a 0A68     		ldr	r2, [r1]
 1576 014c 092A     		cmp	r2, #9
 1577 014e 1AD9     		bls	.L137
1190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR1                                                             ,
ARM GAS  /tmp/ccHWF1AX.s 			page 59


 1578              		.loc 1 1191 0
 1579 0150 0768     		ldr	r7, [r0]
 1580 0152 FD68     		ldr	r5, [r7, #12]
 1581              	.LVL118:
 1582              	.LBB30:
 1583              	.LBB31:
 1584              		.loc 2 531 0
 1585 0154 3824     		movs	r4, #56
 1586              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1587 0156 94FAA4F6 		rbit r6, r4
 1588              	@ 0 "" 2
 1589              	.LVL119:
 1590              		.thumb
 1591              	.LBE31:
 1592              	.LBE30:
 1593              		.loc 1 1191 0
 1594 015a B6FA86F6 		clz	r6, r6
 1595              	.LVL120:
 1596 015e 0A3A     		subs	r2, r2, #10
 1597 0160 02FB06F6 		mul	r6, r2, r6
 1598 0164 4FF0070E 		mov	lr, #7
 1599 0168 0EFA06F6 		lsl	r6, lr, r6
 1600 016c 25EA0606 		bic	r6, r5, r6
 1601 0170 8D68     		ldr	r5, [r1, #8]
 1602              	.LVL121:
 1603              	.LBB32:
 1604              	.LBB33:
 1605              		.loc 2 531 0
 1606              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1607 0172 94FAA4F4 		rbit r4, r4
 1608              	@ 0 "" 2
 1609              	.LVL122:
 1610              		.thumb
 1611              	.LBE33:
 1612              	.LBE32:
 1613              		.loc 1 1191 0
 1614 0176 B4FA84F4 		clz	r4, r4
 1615              	.LVL123:
 1616 017a 04FB02F2 		mul	r2, r4, r2
 1617 017e 9540     		lsls	r5, r5, r2
 1618 0180 3543     		orrs	r5, r5, r6
 1619 0182 FD60     		str	r5, [r7, #12]
 1620 0184 18E0     		b	.L138
 1621              	.LVL124:
 1622              	.L137:
1192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
1193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else /* For channels 0 to 9 */
1196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 1623              		.loc 1 1197 0
 1624 0186 0768     		ldr	r7, [r0]
 1625 0188 3D69     		ldr	r5, [r7, #16]
 1626              	.LVL125:
 1627              	.LBB34:
 1628              	.LBB35:
ARM GAS  /tmp/ccHWF1AX.s 			page 60


 1629              		.loc 2 531 0
 1630 018a 3824     		movs	r4, #56
 1631              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1632 018c 94FAA4F6 		rbit r6, r4
 1633              	@ 0 "" 2
 1634              	.LVL126:
 1635              		.thumb
 1636              	.LBE35:
 1637              	.LBE34:
 1638              		.loc 1 1197 0
 1639 0190 B6FA86F6 		clz	r6, r6
 1640              	.LVL127:
 1641 0194 06FB02F6 		mul	r6, r6, r2
 1642 0198 4FF0070E 		mov	lr, #7
 1643 019c 0EFA06F6 		lsl	r6, lr, r6
 1644 01a0 25EA0606 		bic	r6, r5, r6
 1645 01a4 8D68     		ldr	r5, [r1, #8]
 1646              	.LVL128:
 1647              	.LBB36:
 1648              	.LBB37:
 1649              		.loc 2 531 0
 1650              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1651 01a6 94FAA4F4 		rbit r4, r4
 1652              	@ 0 "" 2
 1653              	.LVL129:
 1654              		.thumb
 1655              	.LBE37:
 1656              	.LBE36:
 1657              		.loc 1 1197 0
 1658 01aa B4FA84F4 		clz	r4, r4
 1659              	.LVL130:
 1660 01ae 04FB02F2 		mul	r2, r4, r2
 1661 01b2 9540     		lsls	r5, r5, r2
 1662 01b4 3543     		orrs	r5, r5, r6
 1663 01b6 3D61     		str	r5, [r7, #16]
 1664              	.LVL131:
 1665              	.L138:
1198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel)                       ,
1199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) )
1200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
1203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
1204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 1666              		.loc 1 1204 0
 1667 01b8 0A68     		ldr	r2, [r1]
 1668 01ba 103A     		subs	r2, r2, #16
 1669 01bc 012A     		cmp	r2, #1
 1670 01be 04D8     		bhi	.L139
1205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
1206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 1671              		.loc 1 1207 0
 1672 01c0 0468     		ldr	r4, [r0]
 1673 01c2 A268     		ldr	r2, [r4, #8]
 1674 01c4 42F40002 		orr	r2, r2, #8388608
 1675 01c8 A260     		str	r2, [r4, #8]
ARM GAS  /tmp/ccHWF1AX.s 			page 61


 1676              	.L139:
1208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
1212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   switch(sConfigInjected->InjectedRank)
 1677              		.loc 1 1212 0
 1678 01ca 4A68     		ldr	r2, [r1, #4]
 1679 01cc 022A     		cmp	r2, #2
 1680 01ce 0DD0     		beq	.L141
 1681 01d0 032A     		cmp	r2, #3
 1682 01d2 15D0     		beq	.L142
 1683 01d4 012A     		cmp	r2, #1
 1684 01d6 1DD1     		bne	.L150
1213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 1:
1215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 1 offset */
1216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR1,
 1685              		.loc 1 1216 0
 1686 01d8 0568     		ldr	r5, [r0]
 1687 01da 6A69     		ldr	r2, [r5, #20]
 1688 01dc 22F47F62 		bic	r2, r2, #4080
 1689 01e0 22F00F02 		bic	r2, r2, #15
 1690 01e4 CC68     		ldr	r4, [r1, #12]
 1691 01e6 2243     		orrs	r2, r2, r4
 1692 01e8 6A61     		str	r2, [r5, #20]
1217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR1_JOFFSET1,
1218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1693              		.loc 1 1219 0
 1694 01ea 1CE0     		b	.L144
 1695              	.L141:
1220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 2:
1221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 2 offset */
1222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR2,
 1696              		.loc 1 1222 0
 1697 01ec 0568     		ldr	r5, [r0]
 1698 01ee AA69     		ldr	r2, [r5, #24]
 1699 01f0 22F47F62 		bic	r2, r2, #4080
 1700 01f4 22F00F02 		bic	r2, r2, #15
 1701 01f8 CC68     		ldr	r4, [r1, #12]
 1702 01fa 2243     		orrs	r2, r2, r4
 1703 01fc AA61     		str	r2, [r5, #24]
1223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR2_JOFFSET2,
1224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1704              		.loc 1 1225 0
 1705 01fe 12E0     		b	.L144
 1706              	.L142:
1226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 3:
1227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Set injected channel 3 offset */
1228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR3,
 1707              		.loc 1 1228 0
 1708 0200 0568     		ldr	r5, [r0]
 1709 0202 EA69     		ldr	r2, [r5, #28]
 1710 0204 22F47F62 		bic	r2, r2, #4080
 1711 0208 22F00F02 		bic	r2, r2, #15
ARM GAS  /tmp/ccHWF1AX.s 			page 62


 1712 020c CC68     		ldr	r4, [r1, #12]
 1713 020e 2243     		orrs	r2, r2, r4
 1714 0210 EA61     		str	r2, [r5, #28]
1229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR3_JOFFSET3,
1230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
 1715              		.loc 1 1231 0
 1716 0212 08E0     		b	.L144
 1717              	.L150:
1232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     case 4:
1233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     default:
1234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JOFR4,
 1718              		.loc 1 1234 0
 1719 0214 0568     		ldr	r5, [r0]
 1720 0216 2A6A     		ldr	r2, [r5, #32]
 1721 0218 22F47F62 		bic	r2, r2, #4080
 1722 021c 22F00F02 		bic	r2, r2, #15
 1723 0220 CC68     		ldr	r4, [r1, #12]
 1724 0222 2243     		orrs	r2, r2, r4
 1725 0224 2A62     		str	r2, [r5, #32]
 1726              	.L144:
1235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  ADC_JOFR4_JOFFSET4,
1236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                  sConfigInjected->InjectedOffset);
1237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       break;
1238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
1241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* and VREFINT measurement path.                                            */
1242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 1727              		.loc 1 1242 0
 1728 0226 0A68     		ldr	r2, [r1]
 1729 0228 103A     		subs	r2, r2, #16
 1730 022a 012A     		cmp	r2, #1
 1731 022c 25D8     		bhi	.L145
1243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
1244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
1246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
1247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* intended to be set on other ADC instances, an error is reported.       */
1248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     if (hadc->Instance == ADC1)
 1732              		.loc 1 1248 0
 1733 022e 0268     		ldr	r2, [r0]
 1734 0230 174C     		ldr	r4, .L152+4
 1735 0232 A242     		cmp	r2, r4
 1736 0234 1CD1     		bne	.L146
1249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 1737              		.loc 1 1250 0
 1738 0236 9468     		ldr	r4, [r2, #8]
 1739 0238 14F4000F 		tst	r4, #8388608
 1740 023c 1DD1     		bne	.L145
1251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       {
1252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 1741              		.loc 1 1252 0
 1742 023e 9468     		ldr	r4, [r2, #8]
 1743 0240 44F40004 		orr	r4, r4, #8388608
 1744 0244 9460     		str	r4, [r2, #8]
ARM GAS  /tmp/ccHWF1AX.s 			page 63


1253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         
1254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 1745              		.loc 1 1254 0
 1746 0246 0A68     		ldr	r2, [r1]
 1747 0248 102A     		cmp	r2, #16
 1748 024a 16D1     		bne	.L145
1255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         {
1256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Delay for temperature sensor stabilization time */
1257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           /* Compute number of CPU cycles to wait for */
1258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 1749              		.loc 1 1258 0
 1750 024c 114A     		ldr	r2, .L152+8
 1751 024e 1268     		ldr	r2, [r2]
 1752 0250 1149     		ldr	r1, .L152+12
 1753              	.LVL132:
 1754 0252 A1FB0212 		umull	r1, r2, r1, r2
 1755 0256 920C     		lsrs	r2, r2, #18
 1756 0258 02EB8202 		add	r2, r2, r2, lsl #2
 1757 025c 5200     		lsls	r2, r2, #1
 1758 025e 0192     		str	r2, [sp, #4]
1259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0)
 1759              		.loc 1 1259 0
 1760 0260 02E0     		b	.L147
 1761              	.L148:
1260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           {
1261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****             wait_loop_index--;
 1762              		.loc 1 1261 0
 1763 0262 019A     		ldr	r2, [sp, #4]
 1764 0264 013A     		subs	r2, r2, #1
 1765 0266 0192     		str	r2, [sp, #4]
 1766              	.L147:
1259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           while(wait_loop_index != 0)
 1767              		.loc 1 1259 0
 1768 0268 019A     		ldr	r2, [sp, #4]
 1769 026a 002A     		cmp	r2, #0
 1770 026c F9D1     		bne	.L148
 1771 026e 04E0     		b	.L145
 1772              	.LVL133:
 1773              	.L146:
1262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****           }
1263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****         }
1264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       }
1265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     else
1267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     {
1268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1774              		.loc 1 1269 0
 1775 0270 836A     		ldr	r3, [r0, #40]
 1776              	.LVL134:
 1777 0272 43F02003 		orr	r3, r3, #32
 1778 0276 8362     		str	r3, [r0, #40]
 1779              	.LVL135:
1270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       
1271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       tmp_hal_status = HAL_ERROR;
 1780              		.loc 1 1271 0
 1781 0278 0123     		movs	r3, #1
ARM GAS  /tmp/ccHWF1AX.s 			page 64


 1782              	.LVL136:
 1783              	.L145:
1272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     }
1273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1784              		.loc 1 1276 0
 1785 027a 0022     		movs	r2, #0
 1786 027c 80F82420 		strb	r2, [r0, #36]
1277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1787              		.loc 1 1279 0
 1788 0280 1846     		mov	r0, r3
 1789              	.LVL137:
 1790 0282 00E0     		b	.L124
 1791              	.LVL138:
 1792              	.L149:
1059:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 1793              		.loc 1 1059 0
 1794 0284 0220     		movs	r0, #2
 1795              	.LVL139:
 1796              	.L124:
1280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** }
 1797              		.loc 1 1280 0
 1798 0286 03B0     		add	sp, sp, #12
 1799              	.LCFI24:
 1800              		.cfi_def_cfa_offset 20
 1801              		@ sp needed
 1802 0288 F0BD     		pop	{r4, r5, r6, r7, pc}
 1803              	.L153:
 1804 028a 00BF     		.align	2
 1805              	.L152:
 1806 028c 003C0140 		.word	1073822720
 1807 0290 00240140 		.word	1073816576
 1808 0294 00000000 		.word	SystemCoreClock
 1809 0298 83DE1B43 		.word	1125899907
 1810              		.cfi_endproc
 1811              	.LFE74:
 1813              		.section	.text.HAL_ADCEx_MultiModeConfigChannel,"ax",%progbits
 1814              		.align	2
 1815              		.global	HAL_ADCEx_MultiModeConfigChannel
 1816              		.thumb
 1817              		.thumb_func
 1819              	HAL_ADCEx_MultiModeConfigChannel:
 1820              	.LFB75:
1281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** 
1282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** #if defined (STM32F101xG) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F105xC
1283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** /**
1284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @brief  Enable ADC multimode and configure multimode parameters
1285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         This function initializes multimode parameters, following  
1287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters 
1288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         of structure "ADC_MultiModeTypeDef" on the fly, without reseting 
1289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         the ADCs (both ADCs of the common group).
1290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
ARM GAS  /tmp/ccHWF1AX.s 			page 65


1291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure 
1292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         "ADC_MultiModeTypeDef".
1293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @note   To change back configuration from multimode to single mode, ADC must
1294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   *         be reset (using function HAL_ADC_Init() ).
1295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  hadc: ADC handle
1296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @param  multimode: Structure of ADC multimode configuration
1297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   * @retval HAL status
1298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   */
1299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* m
1300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** {
 1821              		.loc 1 1300 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 0, uses_anonymous_args = 0
 1825              		@ link register save eliminated.
 1826              	.LVL140:
1301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Check the parameters */
1305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   assert_param(IS_ADC_MODE(multimode->Mode));
1307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process locked */
1309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1827              		.loc 1 1309 0
 1828 0000 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 1829 0004 012B     		cmp	r3, #1
 1830 0006 27D0     		beq	.L158
 1831              		.loc 1 1309 0 is_stmt 0 discriminator 2
 1832 0008 0123     		movs	r3, #1
 1833 000a 80F82430 		strb	r3, [r0, #36]
1310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Set a temporary handle of the ADC slave associated to the ADC master     */
1312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
1313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
1314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
1317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - ADC master and ADC slave DMA configuration                            */
1318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /*  - Multimode mode selection                                              */
1320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* To optimize code, all multimode settings can be set when both ADCs of    */
1321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* the common group are in state: disabled.                                 */
1322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 1834              		.loc 1 1322 0 is_stmt 1 discriminator 2
 1835 000e 0368     		ldr	r3, [r0]
 1836 0010 9A68     		ldr	r2, [r3, #8]
 1837 0012 12F0010F 		tst	r2, #1
 1838 0016 10D1     		bne	.L156
1323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 1839              		.loc 1 1323 0 discriminator 1
 1840 0018 124A     		ldr	r2, .L162
 1841 001a 9268     		ldr	r2, [r2, #8]
1322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 1842              		.loc 1 1322 0 discriminator 1
 1843 001c 12F0010F 		tst	r2, #1
ARM GAS  /tmp/ccHWF1AX.s 			page 66


 1844 0020 0BD1     		bne	.L156
 1845              		.loc 1 1323 0
 1846 0022 114A     		ldr	r2, .L162+4
 1847 0024 9342     		cmp	r3, r2
 1848 0026 08D1     		bne	.L156
1300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1849              		.loc 1 1300 0
 1850 0028 10B4     		push	{r4}
 1851              	.LCFI25:
 1852              		.cfi_def_cfa_offset 4
 1853              		.cfi_offset 4, -4
1324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****       (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
1325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CR1,
 1854              		.loc 1 1326 0
 1855 002a 5A68     		ldr	r2, [r3, #4]
 1856 002c 22F47024 		bic	r4, r2, #983040
 1857 0030 0A68     		ldr	r2, [r1]
 1858 0032 2243     		orrs	r2, r2, r4
 1859 0034 5A60     		str	r2, [r3, #4]
1301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 1860              		.loc 1 1301 0
 1861 0036 0023     		movs	r3, #0
 1862              		.loc 1 1326 0
 1863 0038 09E0     		b	.L157
 1864              	.L156:
 1865              	.LCFI26:
 1866              		.cfi_def_cfa_offset 0
 1867              		.cfi_restore 4
1327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                ADC_CR1_DUALMOD    ,
1328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****                multimode->Mode     );
1329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* If one of the ADC sharing the same common group is enabled, no update    */
1331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* could be done on neither of the multimode structure parameters.          */
1332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   else
1333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   {
1334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
1335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1868              		.loc 1 1335 0
 1869 003a 836A     		ldr	r3, [r0, #40]
 1870 003c 43F02003 		orr	r3, r3, #32
 1871 0040 8362     		str	r3, [r0, #40]
 1872              	.LVL141:
1336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 1873              		.loc 1 1337 0
 1874 0042 0123     		movs	r3, #1
 1875              	.LVL142:
1338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   }
1339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****     
1341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Process unlocked */
1342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1876              		.loc 1 1342 0
 1877 0044 0022     		movs	r2, #0
 1878 0046 80F82420 		strb	r2, [r0, #36]
1343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
ARM GAS  /tmp/ccHWF1AX.s 			page 67


1344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   /* Return function status */
1345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   return tmp_hal_status;
 1879              		.loc 1 1345 0
 1880 004a 1846     		mov	r0, r3
 1881              	.LVL143:
1346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** } 
 1882              		.loc 1 1346 0
 1883 004c 7047     		bx	lr
 1884              	.LVL144:
 1885              	.L157:
 1886              	.LCFI27:
 1887              		.cfi_def_cfa_offset 4
 1888              		.cfi_offset 4, -4
1342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 1889              		.loc 1 1342 0
 1890 004e 0022     		movs	r2, #0
 1891 0050 80F82420 		strb	r2, [r0, #36]
1345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c **** } 
 1892              		.loc 1 1345 0
 1893 0054 1846     		mov	r0, r3
 1894              	.LVL145:
 1895 0056 01E0     		b	.L155
 1896              	.LVL146:
 1897              	.L158:
 1898              	.LCFI28:
 1899              		.cfi_def_cfa_offset 0
 1900              		.cfi_restore 4
1309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c ****   
 1901              		.loc 1 1309 0
 1902 0058 0220     		movs	r0, #2
 1903              	.LVL147:
 1904 005a 7047     		bx	lr
 1905              	.LVL148:
 1906              	.L155:
 1907              	.LCFI29:
 1908              		.cfi_def_cfa_offset 4
 1909              		.cfi_offset 4, -4
 1910              		.loc 1 1346 0
 1911 005c 5DF8044B 		ldr	r4, [sp], #4
 1912              	.LCFI30:
 1913              		.cfi_restore 4
 1914              		.cfi_def_cfa_offset 0
 1915 0060 7047     		bx	lr
 1916              	.L163:
 1917 0062 00BF     		.align	2
 1918              	.L162:
 1919 0064 00280140 		.word	1073817600
 1920 0068 00240140 		.word	1073816576
 1921              		.cfi_endproc
 1922              	.LFE75:
 1924              		.text
 1925              	.Letext0:
 1926              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1927              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1928              		.file 5 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1929              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1930              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
ARM GAS  /tmp/ccHWF1AX.s 			page 68


 1931              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1932              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1933              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 1934              		.file 11 "./Drivers/CMSIS/Include/core_cm3.h"
 1935              		.file 12 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1936              		.file 13 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1937              		.file 14 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccHWF1AX.s 			page 69


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc_ex.c
     /tmp/ccHWF1AX.s:19     .text.HAL_ADCEx_Calibration_Start:0000000000000000 $t
     /tmp/ccHWF1AX.s:24     .text.HAL_ADCEx_Calibration_Start:0000000000000000 HAL_ADCEx_Calibration_Start
     /tmp/ccHWF1AX.s:196    .text.HAL_ADCEx_Calibration_Start:00000000000000ec $d
     /tmp/ccHWF1AX.s:201    .text.HAL_ADCEx_InjectedStart:0000000000000000 $t
     /tmp/ccHWF1AX.s:206    .text.HAL_ADCEx_InjectedStart:0000000000000000 HAL_ADCEx_InjectedStart
     /tmp/ccHWF1AX.s:330    .text.HAL_ADCEx_InjectedStart:00000000000000b4 $d
     /tmp/ccHWF1AX.s:335    .text.HAL_ADCEx_InjectedStop:0000000000000000 $t
     /tmp/ccHWF1AX.s:340    .text.HAL_ADCEx_InjectedStop:0000000000000000 HAL_ADCEx_InjectedStop
     /tmp/ccHWF1AX.s:415    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 $t
     /tmp/ccHWF1AX.s:420    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 HAL_ADCEx_InjectedPollForConversion
     /tmp/ccHWF1AX.s:667    .text.HAL_ADCEx_InjectedPollForConversion:0000000000000158 $d
     /tmp/ccHWF1AX.s:676    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 $t
     /tmp/ccHWF1AX.s:681    .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 HAL_ADCEx_InjectedStart_IT
     /tmp/ccHWF1AX.s:810    .text.HAL_ADCEx_InjectedStart_IT:00000000000000c0 $d
     /tmp/ccHWF1AX.s:815    .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 $t
     /tmp/ccHWF1AX.s:820    .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 HAL_ADCEx_InjectedStop_IT
     /tmp/ccHWF1AX.s:900    .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 $t
     /tmp/ccHWF1AX.s:905    .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 HAL_ADCEx_MultiModeStart_DMA
     /tmp/ccHWF1AX.s:1064   .text.HAL_ADCEx_MultiModeStart_DMA:00000000000000dc $d
     /tmp/ccHWF1AX.s:1073   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 $t
     /tmp/ccHWF1AX.s:1078   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 HAL_ADCEx_MultiModeStop_DMA
     /tmp/ccHWF1AX.s:1195   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000088 $d
     /tmp/ccHWF1AX.s:1200   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 $t
     /tmp/ccHWF1AX.s:1205   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 HAL_ADCEx_InjectedGetValue
     /tmp/ccHWF1AX.s:1256   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 $t
     /tmp/ccHWF1AX.s:1261   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 HAL_ADCEx_MultiModeGetValue
     /tmp/ccHWF1AX.s:1289   .text.HAL_ADCEx_MultiModeGetValue:0000000000000018 $d
     /tmp/ccHWF1AX.s:1295   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 $t
     /tmp/ccHWF1AX.s:1300   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 HAL_ADCEx_InjectedConvCpltCallback
     /tmp/ccHWF1AX.s:1313   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 $t
     /tmp/ccHWF1AX.s:1318   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 HAL_ADCEx_InjectedConfigChannel
     /tmp/ccHWF1AX.s:1806   .text.HAL_ADCEx_InjectedConfigChannel:000000000000028c $d
     /tmp/ccHWF1AX.s:1814   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 $t
     /tmp/ccHWF1AX.s:1819   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 HAL_ADCEx_MultiModeConfigChannel
     /tmp/ccHWF1AX.s:1919   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000064 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
ADC_ConversionStop_Disable
HAL_RCCEx_GetPeriphCLKFreq
ADC_Enable
HAL_GetTick
SystemCoreClock
HAL_DMA_Start_IT
ADC_DMAConvCplt
ADC_DMAHalfConvCplt
ADC_DMAError
HAL_DMA_Abort
