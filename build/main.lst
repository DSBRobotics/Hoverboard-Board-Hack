ARM GAS  /tmp/ccymaS8c.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PPM_ISR_Callback,"ax",%progbits
  20              		.align	2
  21              		.global	PPM_ISR_Callback
  22              		.thumb
  23              		.thumb_func
  25              	PPM_ISR_Callback:
  26              	.LFB64:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/ccymaS8c.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "eeprom.h"
  46:./Src/main.c  **** #include "motor_L.h"
  47:./Src/main.c  **** #include "motor_R.h"
  48:./Src/main.c  **** #include "varie.h"
  49:./Src/main.c  **** #include "ADC_L.h"
  50:./Src/main.c  **** #include "ADC_R.h"
  51:./Src/main.c  **** #include "delay.h"
  52:./Src/main.c  **** #include "pid.h"
  53:./Src/main.c  **** #include "application.h"
  54:./Src/main.c  **** #include "telemetry.h"
  55:./Src/main.c  **** #include "hd44780.h"
  56:./Src/main.c  **** #include <math.h>
  57:./Src/main.c  **** 
  58:./Src/main.c  **** // copied from STMBL
  59:./Src/main.c  **** #define NO 0
  60:./Src/main.c  **** #define YES 1
  61:./Src/main.c  **** #define ABS(a) (((a) < 0.0) ? -(a) : (a))
  62:./Src/main.c  **** #define LIMIT(x, lowhigh) (((x) > (lowhigh)) ? (lowhigh) : (((x) < (-lowhigh)) ? (-lowhigh) : (x)))
  63:./Src/main.c  **** #define SAT(x, lowhigh) (((x) > (lowhigh)) ? (1.0) : (((x) < (-lowhigh)) ? (-1.0) : (0.0)))
  64:./Src/main.c  **** #define SAT2(x, low, high) (((x) > (high)) ? (1.0) : (((x) < (low)) ? (-1.0) : (0.0)))
  65:./Src/main.c  **** #define STEP(from, to, step) (((from) < (to)) ? (MIN((from) + (step), (to))) : (MAX((from) - (step)
  66:./Src/main.c  **** #define DEG(a) ((a)*M_PI / 180.0)
  67:./Src/main.c  **** #define RAD(a) ((a)*180.0 / M_PI)
  68:./Src/main.c  **** #define SIGN(a) (((a) < 0.0) ? (-1.0) : (((a) > 0.0) ? (1.0) : (0.0)))
  69:./Src/main.c  **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  70:./Src/main.c  **** #define SCALE(value, high, max) MIN(MAX(((max) - (value)) / ((max) - (high)), 0.0), 1.0)
  71:./Src/main.c  **** #define MIN(a, b) (((a) < (b)) ? (a) : (b))
  72:./Src/main.c  **** #define MAX(a, b) (((a) > (b)) ? (a) : (b))
  73:./Src/main.c  **** #define MIN3(a, b, c) MIN(a, MIN(b, c))
  74:./Src/main.c  **** #define MAX3(a, b, c) MAX(a, MAX(b, c))
  75:./Src/main.c  **** 
  76:./Src/main.c  **** #define PI 3.14159265
  77:./Src/main.c  **** 
  78:./Src/main.c  **** /* Virtual address defined by the user: 0xFFFF value is prohibited */
  79:./Src/main.c  **** uint16_t VirtAddVarTab[NB_OF_VAR] = {0x1337};
  80:./Src/main.c  **** uint16_t VarDataTab[NB_OF_VAR] = {0};
  81:./Src/main.c  **** uint16_t VarValue = 0;
  82:./Src/main.c  **** 
  83:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  84:./Src/main.c  **** 
  85:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  86:./Src/main.c  **** void SystemClock_Config(void);
  87:./Src/main.c  **** void Error_Handler(void);
  88:./Src/main.c  **** //extern struct PID_dati pid_R_;
ARM GAS  /tmp/ccymaS8c.s 			page 3


  89:./Src/main.c  **** static void MX_IWDG_Init(void);
  90:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  91:./Src/main.c  **** 
  92:./Src/main.c  **** volatile __IO int16_t speed = 0;
  93:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  94:./Src/main.c  **** extern struct MOTOR_Ldati motorL;
  95:./Src/main.c  **** extern struct MOTOR_Rdati motorR;
  96:./Src/main.c  **** //extern struct COMMAND_data commandsequence;
  97:./Src/main.c  **** 
  98:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
  99:./Src/main.c  **** LCD_PCF8574_HandleTypeDef lcd;
 100:./Src/main.c  **** extern I2C_HandleTypeDef hi2c2;
 101:./Src/main.c  **** uint16_t saveValue = 0;
 102:./Src/main.c  **** 
 103:./Src/main.c  **** TIM_HandleTypeDef htim2;
 104:./Src/main.c  **** 
 105:./Src/main.c  **** uint16_t captured_value[8] = {0};
 106:./Src/main.c  **** uint16_t rc_data[5] = {0};
 107:./Src/main.c  **** uint8_t pointer = 0;
 108:./Src/main.c  **** uint8_t data_ready = 0;
 109:./Src/main.c  **** /* USER CODE END PV */
 110:./Src/main.c  **** uint8_t rx_count = 0;
 111:./Src/main.c  **** uint32_t timeout = 0;
 112:./Src/main.c  **** 
 113:./Src/main.c  **** void PPM_ISR_Callback() {
  28              		.loc 1 113 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
 114:./Src/main.c  ****   // Dummy loop with 16 bit count wrap around
 115:./Src/main.c  ****   uint16_t rc_delay = TIM2->CNT;
  37              		.loc 1 115 0
  38 0002 4FF08043 		mov	r3, #1073741824
  39 0006 5C6A     		ldr	r4, [r3, #36]
  40 0008 A4B2     		uxth	r4, r4
  41              	.LVL0:
 116:./Src/main.c  ****   _stop_timer();
  42              		.loc 1 116 0
  43 000a FFF7FEFF 		bl	_stop_timer
  44              	.LVL1:
 117:./Src/main.c  **** 
 118:./Src/main.c  ****   if (rc_delay > 3000) {
  45              		.loc 1 118 0
  46 000e 40F6B833 		movw	r3, #3000
  47 0012 9C42     		cmp	r4, r3
  48 0014 03D9     		bls	.L2
 119:./Src/main.c  ****     rx_count = 0;
  49              		.loc 1 119 0
  50 0016 0022     		movs	r2, #0
  51 0018 104B     		ldr	r3, .L8
  52 001a 1A70     		strb	r2, [r3]
  53 001c 1AE0     		b	.L3
ARM GAS  /tmp/ccymaS8c.s 			page 4


  54              	.L2:
 120:./Src/main.c  ****   }
 121:./Src/main.c  ****   else if (rx_count < 6){
  55              		.loc 1 121 0
  56 001e 0F4B     		ldr	r3, .L8
  57 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  58 0022 052B     		cmp	r3, #5
  59 0024 16D8     		bhi	.L3
 122:./Src/main.c  ****     timeout = 0;
  60              		.loc 1 122 0
  61 0026 0021     		movs	r1, #0
  62 0028 0D4A     		ldr	r2, .L8+4
  63 002a 1160     		str	r1, [r2]
 123:./Src/main.c  ****     captured_value[rx_count] = CLAMP(rc_delay, 1000, 2000) - 1000;
  64              		.loc 1 123 0
  65 002c B4F5FA6F 		cmp	r4, #2000
  66 0030 06D8     		bhi	.L5
  67              		.loc 1 123 0 is_stmt 0 discriminator 1
  68 0032 B4F57A7F 		cmp	r4, #1000
  69 0036 06D3     		bcc	.L6
  70              		.loc 1 123 0 discriminator 3
  71 0038 A4F57A74 		sub	r4, r4, #1000
  72              	.LVL2:
  73 003c A4B2     		uxth	r4, r4
  74              	.LVL3:
  75 003e 03E0     		b	.L4
  76              	.LVL4:
  77              	.L5:
  78              		.loc 1 123 0
  79 0040 4FF47A74 		mov	r4, #1000
  80              	.LVL5:
  81 0044 00E0     		b	.L4
  82              	.LVL6:
  83              	.L6:
  84 0046 0024     		movs	r4, #0
  85              	.LVL7:
  86              	.L4:
  87              		.loc 1 123 0 discriminator 8
  88 0048 064A     		ldr	r2, .L8+8
  89 004a 22F81340 		strh	r4, [r2, r3, lsl #1]	@ movhi
 124:./Src/main.c  ****     rx_count++;
  90              		.loc 1 124 0 is_stmt 1 discriminator 8
  91 004e 0133     		adds	r3, r3, #1
  92 0050 024A     		ldr	r2, .L8
  93 0052 1370     		strb	r3, [r2]
  94              	.L3:
 125:./Src/main.c  ****   }
 126:./Src/main.c  ****   _init_us();
  95              		.loc 1 126 0
  96 0054 FFF7FEFF 		bl	_init_us
  97              	.LVL8:
  98 0058 10BD     		pop	{r4, pc}
  99              	.L9:
 100 005a 00BF     		.align	2
 101              	.L8:
 102 005c 00000000 		.word	.LANCHOR0
 103 0060 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccymaS8c.s 			page 5


 104 0064 00000000 		.word	.LANCHOR2
 105              		.cfi_endproc
 106              	.LFE64:
 108              		.section	.text.saveConfig,"ax",%progbits
 109              		.align	2
 110              		.global	saveConfig
 111              		.thumb
 112              		.thumb_func
 114              	saveConfig:
 115              	.LFB66:
 127:./Src/main.c  **** }
 128:./Src/main.c  **** 
 129:./Src/main.c  **** int main(void)
 130:./Src/main.c  **** {
 131:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 132:./Src/main.c  ****   HAL_Init();
 133:./Src/main.c  **** 
 134:./Src/main.c  ****   /* Configure the system clock */
 135:./Src/main.c  ****   SystemClock_Config();
 136:./Src/main.c  **** 
 137:./Src/main.c  ****   Button_init();
 138:./Src/main.c  **** 
 139:./Src/main.c  ****   Power_Set(1);
 140:./Src/main.c  **** 
 141:./Src/main.c  ****   HAL_Delay(10);
 142:./Src/main.c  **** 
 143:./Src/main.c  ****   ADC_L_init();
 144:./Src/main.c  ****   ADC_R_init();
 145:./Src/main.c  **** 
 146:./Src/main.c  **** 
 147:./Src/main.c  ****   //Telemetry_init();
 148:./Src/main.c  ****   MX_I2C2_Init();
 149:./Src/main.c  **** 
 150:./Src/main.c  ****   /* Unlock the Flash Program Erase controller */
 151:./Src/main.c  ****   //HAL_FLASH_Unlock();
 152:./Src/main.c  **** 
 153:./Src/main.c  ****   /* EEPROM Init */
 154:./Src/main.c  ****   //EE_Init();
 155:./Src/main.c  **** 
 156:./Src/main.c  **** 
 157:./Src/main.c  ****   lcd.pcf8574.PCF_I2C_ADDRESS = 0x27;
 158:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 159:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 160:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 161:./Src/main.c  **** 	lcd.type = TYPE0;
 162:./Src/main.c  **** 
 163:./Src/main.c  **** 	if(LCD_Init(&lcd)!=LCD_OK){
 164:./Src/main.c  **** 		// error occured
 165:./Src/main.c  **** 		while(1);
 166:./Src/main.c  **** 	}
 167:./Src/main.c  **** 
 168:./Src/main.c  **** 	LCD_ClearDisplay(&lcd);
 169:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 170:./Src/main.c  **** 	LCD_WriteString(&lcd, "SesselOtter V5.2");
 171:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 172:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
 173:./Src/main.c  **** 
ARM GAS  /tmp/ccymaS8c.s 			page 6


 174:./Src/main.c  ****   Buzzer_init();
 175:./Src/main.c  ****   Led_init();
 176:./Src/main.c  ****   IS_Charge_init();
 177:./Src/main.c  **** 
 178:./Src/main.c  **** //  Timer_init();
 179:./Src/main.c  ****   //Timer_init();
 180:./Src/main.c  ****   //MX_TIM2_Init();
 181:./Src/main.c  **** 
 182:./Src/main.c  **** 
 183:./Src/main.c  ****   //PID_init(0,900); //pwm limit
 184:./Src/main.c  ****   //PID_set_L_costant(0.05,0.01,0.0);
 185:./Src/main.c  ****   //PID_set_R_costant(2.0,0.5,0.0);
 186:./Src/main.c  **** 
 187:./Src/main.c  **** //DebugPin_init();
 188:./Src/main.c  ****   //HAL_Delay(350);
 189:./Src/main.c  ****   while(IS_Button()) {
 190:./Src/main.c  ****     Led_Set(0);
 191:./Src/main.c  ****   }
 192:./Src/main.c  **** 
 193:./Src/main.c  **** 
 194:./Src/main.c  ****   MotorL_init();
 195:./Src/main.c  ****   MotorR_init();
 196:./Src/main.c  **** 
 197:./Src/main.c  ****   applcation_init();
 198:./Src/main.c  ****   Battery_TASK();
 199:./Src/main.c  **** 
 200:./Src/main.c  ****   MX_IWDG_Init();
 201:./Src/main.c  **** 
 202:./Src/main.c  ****   Led_Set(1);
 203:./Src/main.c  ****   Buzzer_TwoBeep();
 204:./Src/main.c  ****   HAL_Delay(250);
 205:./Src/main.c  **** 
 206:./Src/main.c  ****   MotorR_start();
 207:./Src/main.c  ****   MotorL_start();
 208:./Src/main.c  ****   //MotorR_pwm(80);
 209:./Src/main.c  ****   //MotorL_pwm(-200);
 210:./Src/main.c  **** 
 211:./Src/main.c  ****   Timer_init();
 212:./Src/main.c  **** 
 213:./Src/main.c  ****   //MotorR_pwm(200);
 214:./Src/main.c  ****   //MotorL_pwm(-150);
 215:./Src/main.c  **** 
 216:./Src/main.c  ****   //MotorR_pwm(-50);
 217:./Src/main.c  ****   //MotorL_pwm(50);
 218:./Src/main.c  ****   int16_t speedR = 0;
 219:./Src/main.c  ****   int16_t speedL = 0;
 220:./Src/main.c  **** 
 221:./Src/main.c  ****   uint8_t state = 0;
 222:./Src/main.c  **** 
 223:./Src/main.c  ****   LCD_ClearDisplay(&lcd);
 224:./Src/main.c  ****   HAL_Delay(5);
 225:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 226:./Src/main.c  **** 	LCD_WriteString(&lcd, "Bat:");
 227:./Src/main.c  ****   LCD_SetLocation(&lcd, 8, 1);
 228:./Src/main.c  ****   LCD_WriteString(&lcd, "V");
 229:./Src/main.c  **** 
 230:./Src/main.c  ****   LCD_SetLocation(&lcd, 15, 1);
ARM GAS  /tmp/ccymaS8c.s 			page 7


 231:./Src/main.c  ****   LCD_WriteString(&lcd, "A");
 232:./Src/main.c  **** 
 233:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 234:./Src/main.c  **** 	LCD_WriteString(&lcd, "Speed:");
 235:./Src/main.c  ****   LCD_SetLocation(&lcd, 12, 0);
 236:./Src/main.c  ****   LCD_WriteString(&lcd, "km/h");
 237:./Src/main.c  **** 
 238:./Src/main.c  ****   uint32_t sinValue = 1999;
 239:./Src/main.c  **** 
 240:./Src/main.c  ****   int lastSpeedL = 0, lastSpeedR = 0, lastDistance = 0;
 241:./Src/main.c  ****   float setDistance = saveValue / 1000.0;
 242:./Src/main.c  ****   while(1){
 243:./Src/main.c  ****     sinValue++;
 244:./Src/main.c  ****     if ((sinValue) % (200) == 0) {
 245:./Src/main.c  ****       state = !state;
 246:./Src/main.c  ****       //Led_Set(state);
 247:./Src/main.c  ****       //Console_Log("otter!\n\r");
 248:./Src/main.c  ****       char str[200];
 249:./Src/main.c  ****       memset(&str[0], 0, sizeof(str));
 250:./Src/main.c  ****       sprintf(str, "%i;%i;%i;%i;%i;%i\n\r", captured_value[0], captured_value[1], captured_value[2]
 251:./Src/main.c  ****       int readR = -(CLAMP((((captured_value[1]-500)-(captured_value[0]-500))*(captured_value[2]/500
 252:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 253:./Src/main.c  **** 
 254:./Src/main.c  ****       int16_t tempL = speedL;
 255:./Src/main.c  ****       speedL -=  tempL / 2.0;
 256:./Src/main.c  ****       speedL += readL / 2.0;
 257:./Src/main.c  **** 
 258:./Src/main.c  ****       int16_t tempR = speedR;
 259:./Src/main.c  ****       speedR -=  tempR / 2.0;
 260:./Src/main.c  ****       speedR += readR / 2.0;
 261:./Src/main.c  **** 
 262:./Src/main.c  **** 
 263:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 264:./Src/main.c  ****         MotorR_pwm(speedR);
 265:./Src/main.c  ****         MotorL_pwm(speedL);
 266:./Src/main.c  ****       }
 267:./Src/main.c  ****       lastSpeedL = speedL;
 268:./Src/main.c  ****       lastSpeedR = speedR;
 269:./Src/main.c  ****       //MotorR_pwm(-250);
 270:./Src/main.c  ****       //MotorL_pwm(250);
 271:./Src/main.c  ****       Console_Log(str);
 272:./Src/main.c  ****     }
 273:./Src/main.c  ****     timeout++;
 274:./Src/main.c  **** 
 275:./Src/main.c  ****     if (timeout > 1000) {
 276:./Src/main.c  ****       MotorR_pwm(0);
 277:./Src/main.c  ****       MotorL_pwm(0);
 278:./Src/main.c  ****     }
 279:./Src/main.c  **** 
 280:./Src/main.c  ****     counterTemp = HAL_GetTick();
 281:./Src/main.c  **** 
 282:./Src/main.c  ****     if(IS_Button()) {
 283:./Src/main.c  ****       MotorL_pwm(0);
 284:./Src/main.c  ****       MotorR_pwm(0);
 285:./Src/main.c  ****       while(IS_Button()) {
 286:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 287:./Src/main.c  ****       }
ARM GAS  /tmp/ccymaS8c.s 			page 8


 288:./Src/main.c  ****       Buzzer_OneLongBeep();
 289:./Src/main.c  ****       HAL_Delay(350);
 290:./Src/main.c  ****       Power_Set(0);
 291:./Src/main.c  ****     }
 292:./Src/main.c  **** 
 293:./Src/main.c  ****     if ((sinValue) % (2000) == 0) {
 294:./Src/main.c  ****       //LCD_SetLocation(&lcd, 4, 0);
 295:./Src/main.c  ****       //LCD_WriteFloat(&lcd,distance/1345.0,2);
 296:./Src/main.c  ****       LCD_SetLocation(&lcd, 8, 0);
 297:./Src/main.c  ****       LCD_WriteFloat(&lcd,0,2);
 298:./Src/main.c  ****       LCD_SetLocation(&lcd, 4, 1);
 299:./Src/main.c  ****       LCD_WriteFloat(&lcd,GET_BatteryAverage(),1);
 300:./Src/main.c  ****       LCD_SetLocation(&lcd, 11, 1);
 301:./Src/main.c  ****       LCD_WriteFloat(&lcd,MAX(ABS(getMotorCurrentR() * 0.02), ABS(getMotorCurrentL() * 0.02)),2);
 302:./Src/main.c  ****     }
 303:./Src/main.c  **** 
 304:./Src/main.c  **** 
 305:./Src/main.c  **** 
 306:./Src/main.c  **** 
 307:./Src/main.c  **** 
 308:./Src/main.c  ****     Battery_TASK();
 309:./Src/main.c  ****     //Current_Motor_TASK();
 310:./Src/main.c  ****     //sWiiNunchuck_TASK();
 311:./Src/main.c  ****     //applcation_TASK();
 312:./Src/main.c  ****     //Telemetry_TASK();
 313:./Src/main.c  **** 
 314:./Src/main.c  ****     //Batteria Scarica?
 315:./Src/main.c  **** 
 316:./Src/main.c  ****     if(ABS(getMotorCurrentR() * 0.02) > 45.0 || ABS(getMotorCurrentL() * 0.02) > 45.0){
 317:./Src/main.c  ****       MotorL_pwm(0);
 318:./Src/main.c  ****       MotorR_pwm(0);
 319:./Src/main.c  ****       Buzzer_OneLongBeep();
 320:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 321:./Src/main.c  ****       HAL_Delay(5);
 322:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 323:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 324:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 325:./Src/main.c  ****       LCD_WriteString(&lcd, "Overcurrent.");
 326:./Src/main.c  ****       HAL_Delay(500);
 327:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 328:./Src/main.c  ****       HAL_Delay(500);
 329:./Src/main.c  ****       Power_Set(0);
 330:./Src/main.c  ****     }
 331:./Src/main.c  **** 
 332:./Src/main.c  ****     if(GET_BatteryAverage() < 31.0){
 333:./Src/main.c  ****       MotorL_pwm(0);
 334:./Src/main.c  ****       MotorR_pwm(0);
 335:./Src/main.c  ****       Buzzer_OneLongBeep();
 336:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 337:./Src/main.c  ****       HAL_Delay(5);
 338:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 339:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 340:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 341:./Src/main.c  ****       LCD_WriteString(&lcd, "Battery low.");
 342:./Src/main.c  ****       HAL_Delay(500);
 343:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 344:./Src/main.c  ****       HAL_Delay(500);
ARM GAS  /tmp/ccymaS8c.s 			page 9


 345:./Src/main.c  ****       Power_Set(0);
 346:./Src/main.c  ****     }
 347:./Src/main.c  **** 
 348:./Src/main.c  **** 
 349:./Src/main.c  ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 350:./Src/main.c  **** 
 351:./Src/main.c  ****     //counterTempTT = HAL_GetTick() - counterTemp;
 352:./Src/main.c  **** 
 353:./Src/main.c  **** 
 354:./Src/main.c  **** 
 355:./Src/main.c  ****   }
 356:./Src/main.c  **** 
 357:./Src/main.c  **** }
 358:./Src/main.c  **** 
 359:./Src/main.c  **** void saveConfig() {
 116              		.loc 1 359 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120 0000 08B5     		push	{r3, lr}
 121              	.LCFI1:
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 3, -8
 124              		.cfi_offset 14, -4
 360:./Src/main.c  ****   EE_WriteVariable(VirtAddVarTab[0], saveValue);
 125              		.loc 1 360 0
 126 0002 034B     		ldr	r3, .L12
 127 0004 1988     		ldrh	r1, [r3]
 128 0006 034B     		ldr	r3, .L12+4
 129 0008 1888     		ldrh	r0, [r3]
 130 000a FFF7FEFF 		bl	EE_WriteVariable
 131              	.LVL9:
 132 000e 08BD     		pop	{r3, pc}
 133              	.L13:
 134              		.align	2
 135              	.L12:
 136 0010 00000000 		.word	.LANCHOR3
 137 0014 00000000 		.word	.LANCHOR4
 138              		.cfi_endproc
 139              	.LFE66:
 141              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 142              		.align	2
 143              		.global	HAL_ADC_ConvCpltCallback
 144              		.thumb
 145              		.thumb_func
 147              	HAL_ADC_ConvCpltCallback:
 148              	.LFB69:
 361:./Src/main.c  **** }
 362:./Src/main.c  **** 
 363:./Src/main.c  **** /** System Clock Configuration
 364:./Src/main.c  **** */
 365:./Src/main.c  **** void SystemClock_Config(void)
 366:./Src/main.c  **** {
 367:./Src/main.c  **** 
 368:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 369:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 370:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
ARM GAS  /tmp/ccymaS8c.s 			page 10


 371:./Src/main.c  **** 
 372:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 373:./Src/main.c  ****     */
 374:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 375:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 376:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 377:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 378:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 379:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 380:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 381:./Src/main.c  ****   {
 382:./Src/main.c  ****     Error_Handler();
 383:./Src/main.c  ****   }
 384:./Src/main.c  **** 
 385:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 386:./Src/main.c  ****     */
 387:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 388:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 389:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 390:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 391:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 392:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 393:./Src/main.c  **** 
 394:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 395:./Src/main.c  ****   {
 396:./Src/main.c  ****     Error_Handler();
 397:./Src/main.c  ****   }
 398:./Src/main.c  **** 
 399:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 400:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 401:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 402:./Src/main.c  ****   {
 403:./Src/main.c  ****     Error_Handler();
 404:./Src/main.c  ****   }
 405:./Src/main.c  **** 
 406:./Src/main.c  ****     /**Configure the Systick interrupt time
 407:./Src/main.c  ****     */
 408:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 409:./Src/main.c  **** 
 410:./Src/main.c  ****     /**Configure the Systick
 411:./Src/main.c  ****     */
 412:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 413:./Src/main.c  **** 
 414:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 415:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 416:./Src/main.c  **** }
 417:./Src/main.c  **** 
 418:./Src/main.c  **** /* IWDG init function */
 419:./Src/main.c  **** static void MX_IWDG_Init(void)
 420:./Src/main.c  **** {
 421:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 422:./Src/main.c  ****   hiwdg.Instance = IWDG;
 423:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 424:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 425:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 426:./Src/main.c  ****   {
 427:./Src/main.c  ****     Error_Handler();
ARM GAS  /tmp/ccymaS8c.s 			page 11


 428:./Src/main.c  ****   }
 429:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 430:./Src/main.c  **** }
 431:./Src/main.c  **** 
 432:./Src/main.c  **** 
 433:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 149              		.loc 1 433 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              	.LVL10:
 154 0000 10B5     		push	{r4, lr}
 155              	.LCFI2:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 4, -8
 158              		.cfi_offset 14, -4
 159 0002 0446     		mov	r4, r0
 434:./Src/main.c  ****   if(hadc->Instance == ADC1){
 160              		.loc 1 434 0
 161 0004 0268     		ldr	r2, [r0]
 162 0006 064B     		ldr	r3, .L18
 163 0008 9A42     		cmp	r2, r3
 164 000a 01D1     		bne	.L15
 435:./Src/main.c  ****     ADC_R_callback();
 165              		.loc 1 435 0
 166 000c FFF7FEFF 		bl	ADC_R_callback
 167              	.LVL11:
 168              	.L15:
 436:./Src/main.c  ****   }
 437:./Src/main.c  ****   if(hadc->Instance == ADC3){
 169              		.loc 1 437 0
 170 0010 2268     		ldr	r2, [r4]
 171 0012 044B     		ldr	r3, .L18+4
 172 0014 9A42     		cmp	r2, r3
 173 0016 01D1     		bne	.L14
 438:./Src/main.c  ****     ADC_L_callback();
 174              		.loc 1 438 0
 175 0018 FFF7FEFF 		bl	ADC_L_callback
 176              	.LVL12:
 177              	.L14:
 178 001c 10BD     		pop	{r4, pc}
 179              	.LVL13:
 180              	.L19:
 181 001e 00BF     		.align	2
 182              	.L18:
 183 0020 00240140 		.word	1073816576
 184 0024 003C0140 		.word	1073822720
 185              		.cfi_endproc
 186              	.LFE69:
 188              		.section	.text.Error_Handler,"ax",%progbits
 189              		.align	2
 190              		.global	Error_Handler
 191              		.thumb
 192              		.thumb_func
 194              	Error_Handler:
 195              	.LFB70:
 439:./Src/main.c  ****   }
ARM GAS  /tmp/ccymaS8c.s 			page 12


 440:./Src/main.c  **** }
 441:./Src/main.c  **** 
 442:./Src/main.c  **** 
 443:./Src/main.c  **** /**
 444:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 445:./Src/main.c  ****   * @param  None
 446:./Src/main.c  ****   * @retval None
 447:./Src/main.c  ****   */
 448:./Src/main.c  **** void Error_Handler(void)
 449:./Src/main.c  **** {
 196              		.loc 1 449 0
 197              		.cfi_startproc
 198              		@ Volatile: function does not return.
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201 0000 08B5     		push	{r3, lr}
 202              	.LCFI3:
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 3, -8
 205              		.cfi_offset 14, -4
 450:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 451:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 452:./Src/main.c  ****   MotorR_stop();
 206              		.loc 1 452 0
 207 0002 FFF7FEFF 		bl	MotorR_stop
 208              	.LVL14:
 453:./Src/main.c  ****   MotorL_stop();
 209              		.loc 1 453 0
 210 0006 FFF7FEFF 		bl	MotorL_stop
 211              	.LVL15:
 212              	.L21:
 213 000a FEE7     		b	.L21
 214              		.cfi_endproc
 215              	.LFE70:
 217              		.section	.text.MX_IWDG_Init,"ax",%progbits
 218              		.align	2
 219              		.thumb
 220              		.thumb_func
 222              	MX_IWDG_Init:
 223              	.LFB68:
 420:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 224              		.loc 1 420 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 8
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228 0000 00B5     		push	{lr}
 229              	.LCFI4:
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 14, -4
 232 0002 83B0     		sub	sp, sp, #12
 233              	.LCFI5:
 234              		.cfi_def_cfa_offset 16
 235              	.LBB2:
 421:./Src/main.c  ****   hiwdg.Instance = IWDG;
 236              		.loc 1 421 0
 237 0004 0E4B     		ldr	r3, .L26
 238 0006 DA69     		ldr	r2, [r3, #28]
ARM GAS  /tmp/ccymaS8c.s 			page 13


 239 0008 42F40062 		orr	r2, r2, #2048
 240 000c DA61     		str	r2, [r3, #28]
 241 000e DB69     		ldr	r3, [r3, #28]
 242 0010 03F40063 		and	r3, r3, #2048
 243 0014 0193     		str	r3, [sp, #4]
 244 0016 019B     		ldr	r3, [sp, #4]
 245              	.LBE2:
 422:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 246              		.loc 1 422 0
 247 0018 0A48     		ldr	r0, .L26+4
 248 001a 0B4B     		ldr	r3, .L26+8
 249 001c 0360     		str	r3, [r0]
 423:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 250              		.loc 1 423 0
 251 001e 0123     		movs	r3, #1
 252 0020 4360     		str	r3, [r0, #4]
 424:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 253              		.loc 1 424 0
 254 0022 40F6FF73 		movw	r3, #4095
 255 0026 8360     		str	r3, [r0, #8]
 425:./Src/main.c  ****   {
 256              		.loc 1 425 0
 257 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 258              	.LVL16:
 259 002c 08B1     		cbz	r0, .L24
 427:./Src/main.c  ****   }
 260              		.loc 1 427 0
 261 002e FFF7FEFF 		bl	Error_Handler
 262              	.LVL17:
 263              	.L24:
 429:./Src/main.c  **** }
 264              		.loc 1 429 0
 265 0032 0448     		ldr	r0, .L26+4
 266 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 267              	.LVL18:
 430:./Src/main.c  **** 
 268              		.loc 1 430 0
 269 0038 03B0     		add	sp, sp, #12
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 4
 272              		@ sp needed
 273 003a 5DF804FB 		ldr	pc, [sp], #4
 274              	.L27:
 275 003e 00BF     		.align	2
 276              	.L26:
 277 0040 00100240 		.word	1073876992
 278 0044 00000000 		.word	hiwdg
 279 0048 00300040 		.word	1073754112
 280              		.cfi_endproc
 281              	.LFE68:
 283              		.section	.text.SystemClock_Config,"ax",%progbits
 284              		.align	2
 285              		.global	SystemClock_Config
 286              		.thumb
 287              		.thumb_func
 289              	SystemClock_Config:
 290              	.LFB67:
ARM GAS  /tmp/ccymaS8c.s 			page 14


 366:./Src/main.c  **** 
 291              		.loc 1 366 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 88
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295 0000 00B5     		push	{lr}
 296              	.LCFI7:
 297              		.cfi_def_cfa_offset 4
 298              		.cfi_offset 14, -4
 299 0002 97B0     		sub	sp, sp, #92
 300              	.LCFI8:
 301              		.cfi_def_cfa_offset 96
 374:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 302              		.loc 1 374 0
 303 0004 0223     		movs	r3, #2
 304 0006 0C93     		str	r3, [sp, #48]
 375:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 305              		.loc 1 375 0
 306 0008 0122     		movs	r2, #1
 307 000a 1092     		str	r2, [sp, #64]
 376:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 308              		.loc 1 376 0
 309 000c 1022     		movs	r2, #16
 310 000e 1192     		str	r2, [sp, #68]
 377:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 311              		.loc 1 377 0
 312 0010 1393     		str	r3, [sp, #76]
 378:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 313              		.loc 1 378 0
 314 0012 0023     		movs	r3, #0
 315 0014 1493     		str	r3, [sp, #80]
 379:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 316              		.loc 1 379 0
 317 0016 4FF46013 		mov	r3, #3670016
 318 001a 1593     		str	r3, [sp, #84]
 380:./Src/main.c  ****   {
 319              		.loc 1 380 0
 320 001c 0CA8     		add	r0, sp, #48
 321 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 322              	.LVL19:
 323 0022 08B1     		cbz	r0, .L29
 382:./Src/main.c  ****   }
 324              		.loc 1 382 0
 325 0024 FFF7FEFF 		bl	Error_Handler
 326              	.LVL20:
 327              	.L29:
 387:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 328              		.loc 1 387 0
 329 0028 0F23     		movs	r3, #15
 330 002a 0793     		str	r3, [sp, #28]
 389:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 331              		.loc 1 389 0
 332 002c 0221     		movs	r1, #2
 333 002e 0891     		str	r1, [sp, #32]
 390:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 334              		.loc 1 390 0
 335 0030 0023     		movs	r3, #0
ARM GAS  /tmp/ccymaS8c.s 			page 15


 336 0032 0993     		str	r3, [sp, #36]
 391:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 337              		.loc 1 391 0
 338 0034 4FF48062 		mov	r2, #1024
 339 0038 0A92     		str	r2, [sp, #40]
 392:./Src/main.c  **** 
 340              		.loc 1 392 0
 341 003a 0B93     		str	r3, [sp, #44]
 394:./Src/main.c  ****   {
 342              		.loc 1 394 0
 343 003c 07A8     		add	r0, sp, #28
 344 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 345              	.LVL21:
 346 0042 08B1     		cbz	r0, .L30
 396:./Src/main.c  ****   }
 347              		.loc 1 396 0
 348 0044 FFF7FEFF 		bl	Error_Handler
 349              	.LVL22:
 350              	.L30:
 399:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 351              		.loc 1 399 0
 352 0048 0223     		movs	r3, #2
 353 004a 0193     		str	r3, [sp, #4]
 400:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 354              		.loc 1 400 0
 355 004c 4FF44043 		mov	r3, #49152
 356 0050 0393     		str	r3, [sp, #12]
 401:./Src/main.c  ****   {
 357              		.loc 1 401 0
 358 0052 01A8     		add	r0, sp, #4
 359 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 360              	.LVL23:
 361 0058 08B1     		cbz	r0, .L31
 403:./Src/main.c  ****   }
 362              		.loc 1 403 0
 363 005a FFF7FEFF 		bl	Error_Handler
 364              	.LVL24:
 365              	.L31:
 408:./Src/main.c  **** 
 366              		.loc 1 408 0
 367 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 368              	.LVL25:
 369 0062 094B     		ldr	r3, .L33
 370 0064 A3FB0030 		umull	r3, r0, r3, r0
 371 0068 8009     		lsrs	r0, r0, #6
 372 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
 373              	.LVL26:
 412:./Src/main.c  **** 
 374              		.loc 1 412 0
 375 006e 0420     		movs	r0, #4
 376 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 377              	.LVL27:
 415:./Src/main.c  **** }
 378              		.loc 1 415 0
 379 0074 0022     		movs	r2, #0
 380 0076 1146     		mov	r1, r2
 381 0078 4FF0FF30 		mov	r0, #-1
ARM GAS  /tmp/ccymaS8c.s 			page 16


 382 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 383              	.LVL28:
 416:./Src/main.c  **** 
 384              		.loc 1 416 0
 385 0080 17B0     		add	sp, sp, #92
 386              	.LCFI9:
 387              		.cfi_def_cfa_offset 4
 388              		@ sp needed
 389 0082 5DF804FB 		ldr	pc, [sp], #4
 390              	.L34:
 391 0086 00BF     		.align	2
 392              	.L33:
 393 0088 D34D6210 		.word	274877907
 394              		.cfi_endproc
 395              	.LFE67:
 397              		.global	__aeabi_i2d
 398              		.global	__aeabi_ddiv
 399              		.global	__aeabi_dmul
 400              		.global	__aeabi_dcmpgt
 401              		.global	__aeabi_dcmplt
 402              		.global	__aeabi_d2iz
 403              		.global	__aeabi_dsub
 404              		.global	__aeabi_dadd
 405              		.global	__aeabi_f2d
 406              		.global	__aeabi_fcmplt
 407              		.section	.text.main,"ax",%progbits
 408              		.align	2
 409              		.global	main
 410              		.thumb
 411              		.thumb_func
 413              	main:
 414              	.LFB65:
 130:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 415              		.loc 1 130 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 216
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 420              	.LCFI10:
 421              		.cfi_def_cfa_offset 36
 422              		.cfi_offset 4, -36
 423              		.cfi_offset 5, -32
 424              		.cfi_offset 6, -28
 425              		.cfi_offset 7, -24
 426              		.cfi_offset 8, -20
 427              		.cfi_offset 9, -16
 428              		.cfi_offset 10, -12
 429              		.cfi_offset 11, -8
 430              		.cfi_offset 14, -4
 431 0004 BBB0     		sub	sp, sp, #236
 432              	.LCFI11:
 433              		.cfi_def_cfa_offset 272
 132:./Src/main.c  **** 
 434              		.loc 1 132 0
 435 0006 FFF7FEFF 		bl	HAL_Init
 436              	.LVL29:
 135:./Src/main.c  **** 
ARM GAS  /tmp/ccymaS8c.s 			page 17


 437              		.loc 1 135 0
 438 000a FFF7FEFF 		bl	SystemClock_Config
 439              	.LVL30:
 137:./Src/main.c  **** 
 440              		.loc 1 137 0
 441 000e FFF7FEFF 		bl	Button_init
 442              	.LVL31:
 139:./Src/main.c  **** 
 443              		.loc 1 139 0
 444 0012 0120     		movs	r0, #1
 445 0014 FFF7FEFF 		bl	Power_Set
 446              	.LVL32:
 141:./Src/main.c  **** 
 447              		.loc 1 141 0
 448 0018 0A20     		movs	r0, #10
 449 001a FFF7FEFF 		bl	HAL_Delay
 450              	.LVL33:
 143:./Src/main.c  ****   ADC_R_init();
 451              		.loc 1 143 0
 452 001e FFF7FEFF 		bl	ADC_L_init
 453              	.LVL34:
 144:./Src/main.c  **** 
 454              		.loc 1 144 0
 455 0022 FFF7FEFF 		bl	ADC_R_init
 456              	.LVL35:
 148:./Src/main.c  **** 
 457              		.loc 1 148 0
 458 0026 FFF7FEFF 		bl	MX_I2C2_Init
 459              	.LVL36:
 157:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 460              		.loc 1 157 0
 461 002a 874E     		ldr	r6, .L93+8
 462 002c 2723     		movs	r3, #39
 463 002e 86F84030 		strb	r3, [r6, #64]
 158:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 464              		.loc 1 158 0
 465 0032 4FF47A73 		mov	r3, #1000
 466 0036 7364     		str	r3, [r6, #68]
 159:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 467              		.loc 1 159 0
 468 0038 06F14804 		add	r4, r6, #72
 469 003c 834D     		ldr	r5, .L93+12
 470 003e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 471 0040 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 472 0042 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 473 0044 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 474 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 475 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 476 004a 95E80700 		ldmia	r5, {r0, r1, r2}
 477 004e 84E80700 		stmia	r4, {r0, r1, r2}
 160:./Src/main.c  **** 	lcd.type = TYPE0;
 478              		.loc 1 160 0
 479 0052 0123     		movs	r3, #1
 480 0054 3370     		strb	r3, [r6]
 161:./Src/main.c  **** 
 481              		.loc 1 161 0
 482 0056 0023     		movs	r3, #0
ARM GAS  /tmp/ccymaS8c.s 			page 18


 483 0058 86F83C30 		strb	r3, [r6, #60]
 163:./Src/main.c  **** 		// error occured
 484              		.loc 1 163 0
 485 005c 3046     		mov	r0, r6
 486 005e FFF7FEFF 		bl	LCD_Init
 487              	.LVL37:
 488 0062 00B1     		cbz	r0, .L36
 489              	.L37:
 490 0064 FEE7     		b	.L37
 491              	.L36:
 168:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 492              		.loc 1 168 0
 493 0066 784C     		ldr	r4, .L93+8
 494 0068 2046     		mov	r0, r4
 495 006a FFF7FEFF 		bl	LCD_ClearDisplay
 496              	.LVL38:
 169:./Src/main.c  **** 	LCD_WriteString(&lcd, "SesselOtter V5.2");
 497              		.loc 1 169 0
 498 006e 0022     		movs	r2, #0
 499 0070 1146     		mov	r1, r2
 500 0072 2046     		mov	r0, r4
 501 0074 FFF7FEFF 		bl	LCD_SetLocation
 502              	.LVL39:
 170:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 503              		.loc 1 170 0
 504 0078 7549     		ldr	r1, .L93+16
 505 007a 2046     		mov	r0, r4
 506 007c FFF7FEFF 		bl	LCD_WriteString
 507              	.LVL40:
 171:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
 508              		.loc 1 171 0
 509 0080 0122     		movs	r2, #1
 510 0082 0021     		movs	r1, #0
 511 0084 2046     		mov	r0, r4
 512 0086 FFF7FEFF 		bl	LCD_SetLocation
 513              	.LVL41:
 172:./Src/main.c  **** 
 514              		.loc 1 172 0
 515 008a 7249     		ldr	r1, .L93+20
 516 008c 2046     		mov	r0, r4
 517 008e FFF7FEFF 		bl	LCD_WriteString
 518              	.LVL42:
 174:./Src/main.c  ****   Led_init();
 519              		.loc 1 174 0
 520 0092 FFF7FEFF 		bl	Buzzer_init
 521              	.LVL43:
 175:./Src/main.c  ****   IS_Charge_init();
 522              		.loc 1 175 0
 523 0096 FFF7FEFF 		bl	Led_init
 524              	.LVL44:
 176:./Src/main.c  **** 
 525              		.loc 1 176 0
 526 009a FFF7FEFF 		bl	IS_Charge_init
 527              	.LVL45:
 528              	.LBB3:
 189:./Src/main.c  ****     Led_Set(0);
 529              		.loc 1 189 0
ARM GAS  /tmp/ccymaS8c.s 			page 19


 530 009e 02E0     		b	.L38
 531              	.L39:
 190:./Src/main.c  ****   }
 532              		.loc 1 190 0
 533 00a0 0020     		movs	r0, #0
 534 00a2 FFF7FEFF 		bl	Led_Set
 535              	.LVL46:
 536              	.L38:
 189:./Src/main.c  ****     Led_Set(0);
 537              		.loc 1 189 0
 538 00a6 FFF7FEFF 		bl	IS_Button
 539              	.LVL47:
 540 00aa 0028     		cmp	r0, #0
 541 00ac F8D1     		bne	.L39
 542              	.LBE3:
 194:./Src/main.c  ****   MotorR_init();
 543              		.loc 1 194 0
 544 00ae FFF7FEFF 		bl	MotorL_init
 545              	.LVL48:
 195:./Src/main.c  **** 
 546              		.loc 1 195 0
 547 00b2 FFF7FEFF 		bl	MotorR_init
 548              	.LVL49:
 197:./Src/main.c  ****   Battery_TASK();
 549              		.loc 1 197 0
 550 00b6 FFF7FEFF 		bl	applcation_init
 551              	.LVL50:
 198:./Src/main.c  **** 
 552              		.loc 1 198 0
 553 00ba FFF7FEFF 		bl	Battery_TASK
 554              	.LVL51:
 200:./Src/main.c  **** 
 555              		.loc 1 200 0
 556 00be FFF7FEFF 		bl	MX_IWDG_Init
 557              	.LVL52:
 202:./Src/main.c  ****   Buzzer_TwoBeep();
 558              		.loc 1 202 0
 559 00c2 0120     		movs	r0, #1
 560 00c4 FFF7FEFF 		bl	Led_Set
 561              	.LVL53:
 203:./Src/main.c  ****   HAL_Delay(250);
 562              		.loc 1 203 0
 563 00c8 FFF7FEFF 		bl	Buzzer_TwoBeep
 564              	.LVL54:
 204:./Src/main.c  **** 
 565              		.loc 1 204 0
 566 00cc FA20     		movs	r0, #250
 567 00ce FFF7FEFF 		bl	HAL_Delay
 568              	.LVL55:
 206:./Src/main.c  ****   MotorL_start();
 569              		.loc 1 206 0
 570 00d2 FFF7FEFF 		bl	MotorR_start
 571              	.LVL56:
 207:./Src/main.c  ****   //MotorR_pwm(80);
 572              		.loc 1 207 0
 573 00d6 FFF7FEFF 		bl	MotorL_start
 574              	.LVL57:
ARM GAS  /tmp/ccymaS8c.s 			page 20


 211:./Src/main.c  **** 
 575              		.loc 1 211 0
 576 00da FFF7FEFF 		bl	Timer_init
 577              	.LVL58:
 223:./Src/main.c  ****   HAL_Delay(5);
 578              		.loc 1 223 0
 579 00de 5A4C     		ldr	r4, .L93+8
 580 00e0 2046     		mov	r0, r4
 581 00e2 FFF7FEFF 		bl	LCD_ClearDisplay
 582              	.LVL59:
 224:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 583              		.loc 1 224 0
 584 00e6 0520     		movs	r0, #5
 585 00e8 FFF7FEFF 		bl	HAL_Delay
 586              	.LVL60:
 225:./Src/main.c  **** 	LCD_WriteString(&lcd, "Bat:");
 587              		.loc 1 225 0
 588 00ec 0122     		movs	r2, #1
 589 00ee 0021     		movs	r1, #0
 590 00f0 2046     		mov	r0, r4
 591 00f2 FFF7FEFF 		bl	LCD_SetLocation
 592              	.LVL61:
 226:./Src/main.c  ****   LCD_SetLocation(&lcd, 8, 1);
 593              		.loc 1 226 0
 594 00f6 5849     		ldr	r1, .L93+24
 595 00f8 2046     		mov	r0, r4
 596 00fa FFF7FEFF 		bl	LCD_WriteString
 597              	.LVL62:
 227:./Src/main.c  ****   LCD_WriteString(&lcd, "V");
 598              		.loc 1 227 0
 599 00fe 0122     		movs	r2, #1
 600 0100 0821     		movs	r1, #8
 601 0102 2046     		mov	r0, r4
 602 0104 FFF7FEFF 		bl	LCD_SetLocation
 603              	.LVL63:
 228:./Src/main.c  **** 
 604              		.loc 1 228 0
 605 0108 5449     		ldr	r1, .L93+28
 606 010a 2046     		mov	r0, r4
 607 010c FFF7FEFF 		bl	LCD_WriteString
 608              	.LVL64:
 230:./Src/main.c  ****   LCD_WriteString(&lcd, "A");
 609              		.loc 1 230 0
 610 0110 0122     		movs	r2, #1
 611 0112 0F21     		movs	r1, #15
 612 0114 2046     		mov	r0, r4
 613 0116 FFF7FEFF 		bl	LCD_SetLocation
 614              	.LVL65:
 231:./Src/main.c  **** 
 615              		.loc 1 231 0
 616 011a 5149     		ldr	r1, .L93+32
 617 011c 2046     		mov	r0, r4
 618 011e FFF7FEFF 		bl	LCD_WriteString
 619              	.LVL66:
 233:./Src/main.c  **** 	LCD_WriteString(&lcd, "Speed:");
 620              		.loc 1 233 0
 621 0122 0022     		movs	r2, #0
ARM GAS  /tmp/ccymaS8c.s 			page 21


 622 0124 1146     		mov	r1, r2
 623 0126 2046     		mov	r0, r4
 624 0128 FFF7FEFF 		bl	LCD_SetLocation
 625              	.LVL67:
 234:./Src/main.c  ****   LCD_SetLocation(&lcd, 12, 0);
 626              		.loc 1 234 0
 627 012c 4D49     		ldr	r1, .L93+36
 628 012e 2046     		mov	r0, r4
 629 0130 FFF7FEFF 		bl	LCD_WriteString
 630              	.LVL68:
 235:./Src/main.c  ****   LCD_WriteString(&lcd, "km/h");
 631              		.loc 1 235 0
 632 0134 0022     		movs	r2, #0
 633 0136 0C21     		movs	r1, #12
 634 0138 2046     		mov	r0, r4
 635 013a FFF7FEFF 		bl	LCD_SetLocation
 636              	.LVL69:
 236:./Src/main.c  **** 
 637              		.loc 1 236 0
 638 013e 4A49     		ldr	r1, .L93+40
 639 0140 2046     		mov	r0, r4
 640 0142 FFF7FEFF 		bl	LCD_WriteString
 641              	.LVL70:
 240:./Src/main.c  ****   float setDistance = saveValue / 1000.0;
 642              		.loc 1 240 0
 643 0146 0023     		movs	r3, #0
 644 0148 0793     		str	r3, [sp, #28]
 645 014a 9946     		mov	r9, r3
 238:./Src/main.c  **** 
 646              		.loc 1 238 0
 647 014c 40F2CF74 		movw	r4, #1999
 219:./Src/main.c  **** 
 648              		.loc 1 219 0
 649 0150 9B46     		mov	fp, r3
 218:./Src/main.c  ****   int16_t speedL = 0;
 650              		.loc 1 218 0
 651 0152 9A46     		mov	r10, r3
 652              	.LVL71:
 653              	.L72:
 243:./Src/main.c  ****     if ((sinValue) % (200) == 0) {
 654              		.loc 1 243 0
 655 0154 0134     		adds	r4, r4, #1
 656              	.LVL72:
 244:./Src/main.c  ****       state = !state;
 657              		.loc 1 244 0
 658 0156 454B     		ldr	r3, .L93+44
 659 0158 A3FB0423 		umull	r2, r3, r3, r4
 660 015c 9B09     		lsrs	r3, r3, #6
 661 015e C822     		movs	r2, #200
 662 0160 02FB1343 		mls	r3, r2, r3, r4
 663 0164 002B     		cmp	r3, #0
 664 0166 40F00081 		bne	.L40
 665              	.LBB4:
 249:./Src/main.c  ****       sprintf(str, "%i;%i;%i;%i;%i;%i\n\r", captured_value[0], captured_value[1], captured_value[2]
 666              		.loc 1 249 0
 667 016a 0021     		movs	r1, #0
 668 016c 08A8     		add	r0, sp, #32
ARM GAS  /tmp/ccymaS8c.s 			page 22


 669 016e FFF7FEFF 		bl	memset
 670              	.LVL73:
 250:./Src/main.c  ****       int readR = -(CLAMP((((captured_value[1]-500)-(captured_value[0]-500))*(captured_value[2]/500
 671              		.loc 1 250 0
 672 0172 3F4D     		ldr	r5, .L93+48
 673 0174 2A88     		ldrh	r2, [r5]
 674 0176 6B88     		ldrh	r3, [r5, #2]
 675 0178 A988     		ldrh	r1, [r5, #4]
 676 017a E888     		ldrh	r0, [r5, #6]
 677 017c 2E89     		ldrh	r6, [r5, #8]
 678 017e 6F89     		ldrh	r7, [r5, #10]
 679 0180 0397     		str	r7, [sp, #12]
 680 0182 0296     		str	r6, [sp, #8]
 681 0184 0190     		str	r0, [sp, #4]
 682 0186 0091     		str	r1, [sp]
 683 0188 3A49     		ldr	r1, .L93+52
 684 018a 08A8     		add	r0, sp, #32
 685 018c FFF7FEFF 		bl	sprintf
 686              	.LVL74:
 251:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 687              		.loc 1 251 0
 688 0190 6F88     		ldrh	r7, [r5, #2]
 689 0192 A7F5FA77 		sub	r7, r7, #500
 690 0196 2E88     		ldrh	r6, [r5]
 691 0198 A6F5FA76 		sub	r6, r6, #500
 692 019c C6EB0708 		rsb	r8, r6, r7
 693 01a0 A888     		ldrh	r0, [r5, #4]
 694 01a2 FFF7FEFF 		bl	__aeabi_i2d
 695              	.LVL75:
 696 01a6 0022     		movs	r2, #0
 697 01a8 334B     		ldr	r3, .L93+56
 698 01aa FFF7FEFF 		bl	__aeabi_ddiv
 699              	.LVL76:
 700 01ae CDE90401 		strd	r0, [sp, #16]
 701 01b2 4046     		mov	r0, r8
 702 01b4 FFF7FEFF 		bl	__aeabi_i2d
 703              	.LVL77:
 704 01b8 DDE90423 		ldrd	r2, [sp, #16]
 705 01bc FFF7FEFF 		bl	__aeabi_dmul
 706              	.LVL78:
 707 01c0 8046     		mov	r8, r0
 708 01c2 0D46     		mov	r5, r1
 709 01c4 0022     		movs	r2, #0
 710 01c6 2D4B     		ldr	r3, .L93+60
 711 01c8 4046     		mov	r0, r8
 712 01ca 2946     		mov	r1, r5
 713 01cc FFF7FEFF 		bl	__aeabi_dcmpgt
 714              	.LVL79:
 715 01d0 70B9     		cbnz	r0, .L73
 251:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 716              		.loc 1 251 0 is_stmt 0 discriminator 2
 717 01d2 1BA3     		adr	r3, .L93
 718 01d4 D3E90023 		ldrd	r2, [r3]
 719 01d8 4046     		mov	r0, r8
 720 01da 2946     		mov	r1, r5
 721 01dc FFF7FEFF 		bl	__aeabi_dcmplt
 722              	.LVL80:
ARM GAS  /tmp/ccymaS8c.s 			page 23


 723 01e0 40B9     		cbnz	r0, .L74
 251:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 724              		.loc 1 251 0 discriminator 5
 725 01e2 4046     		mov	r0, r8
 726 01e4 05F10041 		add	r1, r5, #-2147483648
 727 01e8 FFF7FEFF 		bl	__aeabi_d2iz
 728              	.LVL81:
 729 01ec 0546     		mov	r5, r0
 730 01ee 03E0     		b	.L41
 731              	.L73:
 251:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 732              		.loc 1 251 0
 733 01f0 234D     		ldr	r5, .L93+64
 734 01f2 01E0     		b	.L41
 735              	.L74:
 736 01f4 4FF47A75 		mov	r5, #1000
 737              	.L41:
 738              	.LVL82:
 252:./Src/main.c  **** 
 739              		.loc 1 252 0 is_stmt 1 discriminator 8
 740 01f8 B819     		adds	r0, r7, r6
 741 01fa FFF7FEFF 		bl	__aeabi_i2d
 742              	.LVL83:
 743 01fe DDE90423 		ldrd	r2, [sp, #16]
 744 0202 FFF7FEFF 		bl	__aeabi_dmul
 745              	.LVL84:
 746 0206 0746     		mov	r7, r0
 747 0208 0E46     		mov	r6, r1
 748 020a 0022     		movs	r2, #0
 749 020c 1B4B     		ldr	r3, .L93+60
 750 020e 3846     		mov	r0, r7
 751 0210 3146     		mov	r1, r6
 752 0212 FFF7FEFF 		bl	__aeabi_dcmpgt
 753              	.LVL85:
 754 0216 70B9     		cbnz	r0, .L75
 252:./Src/main.c  **** 
 755              		.loc 1 252 0 is_stmt 0 discriminator 2
 756 0218 09A3     		adr	r3, .L93
 757 021a D3E90023 		ldrd	r2, [r3]
 758 021e 3846     		mov	r0, r7
 759 0220 3146     		mov	r1, r6
 760 0222 FFF7FEFF 		bl	__aeabi_dcmplt
 761              	.LVL86:
 762 0226 68BB     		cbnz	r0, .L76
 252:./Src/main.c  **** 
 763              		.loc 1 252 0 discriminator 5
 764 0228 3846     		mov	r0, r7
 765 022a 06F10041 		add	r1, r6, #-2147483648
 766 022e FFF7FEFF 		bl	__aeabi_d2iz
 767              	.LVL87:
 768 0232 8046     		mov	r8, r0
 769 0234 28E0     		b	.L42
 770              	.L75:
 252:./Src/main.c  **** 
 771              		.loc 1 252 0
 772 0236 DFF84880 		ldr	r8, .L93+64
 773 023a 25E0     		b	.L42
ARM GAS  /tmp/ccymaS8c.s 			page 24


 774              	.L94:
 775 023c AFF30080 		.align	3
 776              	.L93:
 777 0240 00000000 		.word	0
 778 0244 00408FC0 		.word	-1064353792
 779 0248 00000000 		.word	lcd
 780 024c 00000000 		.word	hi2c2
 781 0250 00000000 		.word	.LC0
 782 0254 14000000 		.word	.LC1
 783 0258 24000000 		.word	.LC2
 784 025c 2C000000 		.word	.LC3
 785 0260 30000000 		.word	.LC4
 786 0264 34000000 		.word	.LC5
 787 0268 3C000000 		.word	.LC6
 788 026c 1F85EB51 		.word	1374389535
 789 0270 00000000 		.word	.LANCHOR2
 790 0274 44000000 		.word	.LC7
 791 0278 00407F40 		.word	1082081280
 792 027c 00408F40 		.word	1083129856
 793 0280 18FCFFFF 		.word	-1000
 794              	.L76:
 795 0284 4FF47A78 		mov	r8, #1000
 796              	.L42:
 797              	.LVL88:
 255:./Src/main.c  ****       speedL += readL / 2.0;
 798              		.loc 1 255 0 is_stmt 1 discriminator 8
 799 0288 5846     		mov	r0, fp
 800 028a FFF7FEFF 		bl	__aeabi_i2d
 801              	.LVL89:
 802 028e 0646     		mov	r6, r0
 803 0290 0F46     		mov	r7, r1
 804 0292 0022     		movs	r2, #0
 805 0294 C44B     		ldr	r3, .L95+8
 806 0296 FFF7FEFF 		bl	__aeabi_dmul
 807              	.LVL90:
 808 029a 0246     		mov	r2, r0
 809 029c 0B46     		mov	r3, r1
 810 029e 3046     		mov	r0, r6
 811 02a0 3946     		mov	r1, r7
 812 02a2 FFF7FEFF 		bl	__aeabi_dsub
 813              	.LVL91:
 814 02a6 FFF7FEFF 		bl	__aeabi_d2iz
 815              	.LVL92:
 816 02aa 0FFA80FB 		sxth	fp, r0
 817              	.LVL93:
 256:./Src/main.c  **** 
 818              		.loc 1 256 0 discriminator 8
 819 02ae 4046     		mov	r0, r8
 820 02b0 FFF7FEFF 		bl	__aeabi_i2d
 821              	.LVL94:
 822 02b4 0022     		movs	r2, #0
 823 02b6 BC4B     		ldr	r3, .L95+8
 824 02b8 FFF7FEFF 		bl	__aeabi_dmul
 825              	.LVL95:
 826 02bc 0646     		mov	r6, r0
 827 02be 0F46     		mov	r7, r1
 828 02c0 5846     		mov	r0, fp
ARM GAS  /tmp/ccymaS8c.s 			page 25


 829 02c2 FFF7FEFF 		bl	__aeabi_i2d
 830              	.LVL96:
 831 02c6 3246     		mov	r2, r6
 832 02c8 3B46     		mov	r3, r7
 833 02ca FFF7FEFF 		bl	__aeabi_dadd
 834              	.LVL97:
 835 02ce FFF7FEFF 		bl	__aeabi_d2iz
 836              	.LVL98:
 837 02d2 0FFA80FB 		sxth	fp, r0
 838              	.LVL99:
 259:./Src/main.c  ****       speedR += readR / 2.0;
 839              		.loc 1 259 0 discriminator 8
 840 02d6 5046     		mov	r0, r10
 841 02d8 FFF7FEFF 		bl	__aeabi_i2d
 842              	.LVL100:
 843 02dc 0646     		mov	r6, r0
 844 02de 0F46     		mov	r7, r1
 845 02e0 0022     		movs	r2, #0
 846 02e2 B14B     		ldr	r3, .L95+8
 847 02e4 FFF7FEFF 		bl	__aeabi_dmul
 848              	.LVL101:
 849 02e8 0246     		mov	r2, r0
 850 02ea 0B46     		mov	r3, r1
 851 02ec 3046     		mov	r0, r6
 852 02ee 3946     		mov	r1, r7
 853 02f0 FFF7FEFF 		bl	__aeabi_dsub
 854              	.LVL102:
 855 02f4 FFF7FEFF 		bl	__aeabi_d2iz
 856              	.LVL103:
 857 02f8 0FFA80F8 		sxth	r8, r0
 858              	.LVL104:
 260:./Src/main.c  **** 
 859              		.loc 1 260 0 discriminator 8
 860 02fc 2846     		mov	r0, r5
 861 02fe FFF7FEFF 		bl	__aeabi_i2d
 862              	.LVL105:
 863 0302 0022     		movs	r2, #0
 864 0304 A84B     		ldr	r3, .L95+8
 865 0306 FFF7FEFF 		bl	__aeabi_dmul
 866              	.LVL106:
 867 030a 0646     		mov	r6, r0
 868 030c 0F46     		mov	r7, r1
 869 030e 4046     		mov	r0, r8
 870 0310 FFF7FEFF 		bl	__aeabi_i2d
 871              	.LVL107:
 872 0314 3246     		mov	r2, r6
 873 0316 3B46     		mov	r3, r7
 874 0318 FFF7FEFF 		bl	__aeabi_dadd
 875              	.LVL108:
 876 031c FFF7FEFF 		bl	__aeabi_d2iz
 877              	.LVL109:
 878 0320 0FFA80FA 		sxth	r10, r0
 879              	.LVL110:
 263:./Src/main.c  ****         MotorR_pwm(speedR);
 880              		.loc 1 263 0 discriminator 8
 881 0324 5D46     		mov	r5, fp
 882              	.LVL111:
ARM GAS  /tmp/ccymaS8c.s 			page 26


 883 0326 09F13203 		add	r3, r9, #50
 884 032a 9B45     		cmp	fp, r3
 885 032c 17DA     		bge	.L43
 263:./Src/main.c  ****         MotorR_pwm(speedR);
 886              		.loc 1 263 0 is_stmt 0 discriminator 1
 887 032e A9F13209 		sub	r9, r9, #50
 888              	.LVL112:
 889 0332 CB45     		cmp	fp, r9
 890 0334 13DD     		ble	.L43
 263:./Src/main.c  ****         MotorR_pwm(speedR);
 891              		.loc 1 263 0 discriminator 2
 892 0336 079A     		ldr	r2, [sp, #28]
 893 0338 1346     		mov	r3, r2
 894 033a 3233     		adds	r3, r3, #50
 895 033c 9A45     		cmp	r10, r3
 896 033e 0EDA     		bge	.L43
 263:./Src/main.c  ****         MotorR_pwm(speedR);
 897              		.loc 1 263 0 discriminator 3
 898 0340 A2F13203 		sub	r3, r2, #50
 899 0344 9A45     		cmp	r10, r3
 900 0346 0ADD     		ble	.L43
 263:./Src/main.c  ****         MotorR_pwm(speedR);
 901              		.loc 1 263 0 discriminator 4
 902 0348 984B     		ldr	r3, .L95+12
 903 034a 1B68     		ldr	r3, [r3]
 904 034c B3F57A7F 		cmp	r3, #1000
 905 0350 05D2     		bcs	.L43
 264:./Src/main.c  ****         MotorL_pwm(speedL);
 906              		.loc 1 264 0 is_stmt 1
 907 0352 5046     		mov	r0, r10
 908 0354 FFF7FEFF 		bl	MotorR_pwm
 909              	.LVL113:
 265:./Src/main.c  ****       }
 910              		.loc 1 265 0
 911 0358 5846     		mov	r0, fp
 912 035a FFF7FEFF 		bl	MotorL_pwm
 913              	.LVL114:
 914              	.L43:
 268:./Src/main.c  ****       //MotorR_pwm(-250);
 915              		.loc 1 268 0
 916 035e CDF81CA0 		str	r10, [sp, #28]
 917              	.LVL115:
 271:./Src/main.c  ****     }
 918              		.loc 1 271 0
 919 0362 08A8     		add	r0, sp, #32
 920 0364 FFF7FEFF 		bl	Console_Log
 921              	.LVL116:
 267:./Src/main.c  ****       lastSpeedR = speedR;
 922              		.loc 1 267 0
 923 0368 A946     		mov	r9, r5
 924              	.LVL117:
 925              	.L40:
 926              	.LBE4:
 273:./Src/main.c  **** 
 927              		.loc 1 273 0
 928 036a 904A     		ldr	r2, .L95+12
 929 036c 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccymaS8c.s 			page 27


 930 036e 0133     		adds	r3, r3, #1
 931 0370 1360     		str	r3, [r2]
 275:./Src/main.c  ****       MotorR_pwm(0);
 932              		.loc 1 275 0
 933 0372 B3F57A7F 		cmp	r3, #1000
 934 0376 05D9     		bls	.L44
 276:./Src/main.c  ****       MotorL_pwm(0);
 935              		.loc 1 276 0
 936 0378 0020     		movs	r0, #0
 937 037a FFF7FEFF 		bl	MotorR_pwm
 938              	.LVL118:
 277:./Src/main.c  ****     }
 939              		.loc 1 277 0
 940 037e 0020     		movs	r0, #0
 941 0380 FFF7FEFF 		bl	MotorL_pwm
 942              	.LVL119:
 943              	.L44:
 280:./Src/main.c  **** 
 944              		.loc 1 280 0
 945 0384 FFF7FEFF 		bl	HAL_GetTick
 946              	.LVL120:
 947 0388 894B     		ldr	r3, .L95+16
 948 038a 1860     		str	r0, [r3]
 949              	.LBB5:
 282:./Src/main.c  ****       MotorL_pwm(0);
 950              		.loc 1 282 0
 951 038c FFF7FEFF 		bl	IS_Button
 952              	.LVL121:
 953 0390 B0B1     		cbz	r0, .L45
 283:./Src/main.c  ****       MotorR_pwm(0);
 954              		.loc 1 283 0
 955 0392 0020     		movs	r0, #0
 956 0394 FFF7FEFF 		bl	MotorL_pwm
 957              	.LVL122:
 284:./Src/main.c  ****       while(IS_Button()) {
 958              		.loc 1 284 0
 959 0398 0020     		movs	r0, #0
 960 039a FFF7FEFF 		bl	MotorR_pwm
 961              	.LVL123:
 285:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 962              		.loc 1 285 0
 963 039e 02E0     		b	.L46
 964              	.L47:
 286:./Src/main.c  ****       }
 965              		.loc 1 286 0
 966 03a0 8448     		ldr	r0, .L95+20
 967 03a2 FFF7FEFF 		bl	HAL_IWDG_Refresh
 968              	.LVL124:
 969              	.L46:
 285:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 970              		.loc 1 285 0
 971 03a6 FFF7FEFF 		bl	IS_Button
 972              	.LVL125:
 973 03aa 0028     		cmp	r0, #0
 974 03ac F8D1     		bne	.L47
 288:./Src/main.c  ****       HAL_Delay(350);
 975              		.loc 1 288 0
ARM GAS  /tmp/ccymaS8c.s 			page 28


 976 03ae FFF7FEFF 		bl	Buzzer_OneLongBeep
 977              	.LVL126:
 289:./Src/main.c  ****       Power_Set(0);
 978              		.loc 1 289 0
 979 03b2 4FF4AF70 		mov	r0, #350
 980 03b6 FFF7FEFF 		bl	HAL_Delay
 981              	.LVL127:
 290:./Src/main.c  ****     }
 982              		.loc 1 290 0
 983 03ba 0020     		movs	r0, #0
 984 03bc FFF7FEFF 		bl	Power_Set
 985              	.LVL128:
 986              	.L45:
 987              	.LBE5:
 293:./Src/main.c  ****       //LCD_SetLocation(&lcd, 4, 0);
 988              		.loc 1 293 0
 989 03c0 7D4B     		ldr	r3, .L95+24
 990 03c2 A3FB0423 		umull	r2, r3, r3, r4
 991 03c6 DB09     		lsrs	r3, r3, #7
 992 03c8 4FF4FA62 		mov	r2, #2000
 993 03cc 02FB1343 		mls	r3, r2, r3, r4
 994 03d0 002B     		cmp	r3, #0
 995 03d2 40F0C480 		bne	.L48
 996              	.LBB6:
 296:./Src/main.c  ****       LCD_WriteFloat(&lcd,0,2);
 997              		.loc 1 296 0
 998 03d6 794D     		ldr	r5, .L95+28
 999 03d8 0022     		movs	r2, #0
 1000 03da 0821     		movs	r1, #8
 1001 03dc 2846     		mov	r0, r5
 1002 03de FFF7FEFF 		bl	LCD_SetLocation
 1003              	.LVL129:
 297:./Src/main.c  ****       LCD_SetLocation(&lcd, 4, 1);
 1004              		.loc 1 297 0
 1005 03e2 0026     		movs	r6, #0
 1006 03e4 0027     		movs	r7, #0
 1007 03e6 0223     		movs	r3, #2
 1008 03e8 0093     		str	r3, [sp]
 1009 03ea 3246     		mov	r2, r6
 1010 03ec 3B46     		mov	r3, r7
 1011 03ee 2846     		mov	r0, r5
 1012 03f0 FFF7FEFF 		bl	LCD_WriteFloat
 1013              	.LVL130:
 298:./Src/main.c  ****       LCD_WriteFloat(&lcd,GET_BatteryAverage(),1);
 1014              		.loc 1 298 0
 1015 03f4 0122     		movs	r2, #1
 1016 03f6 0421     		movs	r1, #4
 1017 03f8 2846     		mov	r0, r5
 1018 03fa FFF7FEFF 		bl	LCD_SetLocation
 1019              	.LVL131:
 299:./Src/main.c  ****       LCD_SetLocation(&lcd, 11, 1);
 1020              		.loc 1 299 0
 1021 03fe FFF7FEFF 		bl	GET_BatteryAverage
 1022              	.LVL132:
 1023 0402 FFF7FEFF 		bl	__aeabi_f2d
 1024              	.LVL133:
 1025 0406 4FF00108 		mov	r8, #1
ARM GAS  /tmp/ccymaS8c.s 			page 29


 1026 040a CDF80080 		str	r8, [sp]
 1027 040e 0246     		mov	r2, r0
 1028 0410 0B46     		mov	r3, r1
 1029 0412 2846     		mov	r0, r5
 1030 0414 FFF7FEFF 		bl	LCD_WriteFloat
 1031              	.LVL134:
 300:./Src/main.c  ****       LCD_WriteFloat(&lcd,MAX(ABS(getMotorCurrentR() * 0.02), ABS(getMotorCurrentL() * 0.02)),2);
 1032              		.loc 1 300 0
 1033 0418 4246     		mov	r2, r8
 1034 041a 0B21     		movs	r1, #11
 1035 041c 2846     		mov	r0, r5
 1036 041e FFF7FEFF 		bl	LCD_SetLocation
 1037              	.LVL135:
 301:./Src/main.c  ****     }
 1038              		.loc 1 301 0
 1039 0422 FFF7FEFF 		bl	getMotorCurrentR
 1040              	.LVL136:
 1041 0426 FFF7FEFF 		bl	__aeabi_i2d
 1042              	.LVL137:
 1043 042a 5DA3     		adr	r3, .L95
 1044 042c D3E90023 		ldrd	r2, [r3]
 1045 0430 FFF7FEFF 		bl	__aeabi_dmul
 1046              	.LVL138:
 1047 0434 3246     		mov	r2, r6
 1048 0436 3B46     		mov	r3, r7
 1049 0438 FFF7FEFF 		bl	__aeabi_dcmplt
 1050              	.LVL139:
 1051 043c 60B1     		cbz	r0, .L85
 301:./Src/main.c  ****     }
 1052              		.loc 1 301 0 is_stmt 0 discriminator 1
 1053 043e FFF7FEFF 		bl	getMotorCurrentR
 1054              	.LVL140:
 1055 0442 FFF7FEFF 		bl	__aeabi_i2d
 1056              	.LVL141:
 1057 0446 56A3     		adr	r3, .L95
 1058 0448 D3E90023 		ldrd	r2, [r3]
 1059 044c FFF7FEFF 		bl	__aeabi_dmul
 1060              	.LVL142:
 1061 0450 0646     		mov	r6, r0
 1062 0452 01F10045 		add	r5, r1, #-2147483648
 1063 0456 0AE0     		b	.L51
 1064              	.L85:
 301:./Src/main.c  ****     }
 1065              		.loc 1 301 0 discriminator 2
 1066 0458 FFF7FEFF 		bl	getMotorCurrentR
 1067              	.LVL143:
 1068 045c FFF7FEFF 		bl	__aeabi_i2d
 1069              	.LVL144:
 1070 0460 4FA3     		adr	r3, .L95
 1071 0462 D3E90023 		ldrd	r2, [r3]
 1072 0466 FFF7FEFF 		bl	__aeabi_dmul
 1073              	.LVL145:
 1074 046a 0646     		mov	r6, r0
 1075 046c 0D46     		mov	r5, r1
 1076              	.L51:
 301:./Src/main.c  ****     }
 1077              		.loc 1 301 0 discriminator 4
ARM GAS  /tmp/ccymaS8c.s 			page 30


 1078 046e FFF7FEFF 		bl	getMotorCurrentL
 1079              	.LVL146:
 1080 0472 FFF7FEFF 		bl	__aeabi_i2d
 1081              	.LVL147:
 1082 0476 4AA3     		adr	r3, .L95
 1083 0478 D3E90023 		ldrd	r2, [r3]
 1084 047c FFF7FEFF 		bl	__aeabi_dmul
 1085              	.LVL148:
 1086 0480 0022     		movs	r2, #0
 1087 0482 0023     		movs	r3, #0
 1088 0484 FFF7FEFF 		bl	__aeabi_dcmplt
 1089              	.LVL149:
 1090 0488 58B1     		cbz	r0, .L86
 301:./Src/main.c  ****     }
 1091              		.loc 1 301 0 discriminator 5
 1092 048a FFF7FEFF 		bl	getMotorCurrentL
 1093              	.LVL150:
 1094 048e FFF7FEFF 		bl	__aeabi_i2d
 1095              	.LVL151:
 1096 0492 43A3     		adr	r3, .L95
 1097 0494 D3E90023 		ldrd	r2, [r3]
 1098 0498 FFF7FEFF 		bl	__aeabi_dmul
 1099              	.LVL152:
 1100 049c 01F10041 		add	r1, r1, #-2147483648
 1101 04a0 08E0     		b	.L54
 1102              	.L86:
 301:./Src/main.c  ****     }
 1103              		.loc 1 301 0 discriminator 6
 1104 04a2 FFF7FEFF 		bl	getMotorCurrentL
 1105              	.LVL153:
 1106 04a6 FFF7FEFF 		bl	__aeabi_i2d
 1107              	.LVL154:
 1108 04aa 3DA3     		adr	r3, .L95
 1109 04ac D3E90023 		ldrd	r2, [r3]
 1110 04b0 FFF7FEFF 		bl	__aeabi_dmul
 1111              	.LVL155:
 1112              	.L54:
 301:./Src/main.c  ****     }
 1113              		.loc 1 301 0 discriminator 8
 1114 04b4 0246     		mov	r2, r0
 1115 04b6 0B46     		mov	r3, r1
 1116 04b8 3046     		mov	r0, r6
 1117 04ba 2946     		mov	r1, r5
 1118 04bc FFF7FEFF 		bl	__aeabi_dcmpgt
 1119              	.LVL156:
 1120 04c0 18B3     		cbz	r0, .L87
 301:./Src/main.c  ****     }
 1121              		.loc 1 301 0 discriminator 9
 1122 04c2 FFF7FEFF 		bl	getMotorCurrentR
 1123              	.LVL157:
 1124 04c6 FFF7FEFF 		bl	__aeabi_i2d
 1125              	.LVL158:
 1126 04ca 35A3     		adr	r3, .L95
 1127 04cc D3E90023 		ldrd	r2, [r3]
 1128 04d0 FFF7FEFF 		bl	__aeabi_dmul
 1129              	.LVL159:
 1130 04d4 0022     		movs	r2, #0
ARM GAS  /tmp/ccymaS8c.s 			page 31


 1131 04d6 0023     		movs	r3, #0
 1132 04d8 FFF7FEFF 		bl	__aeabi_dcmplt
 1133              	.LVL160:
 1134 04dc 58B1     		cbz	r0, .L88
 301:./Src/main.c  ****     }
 1135              		.loc 1 301 0 discriminator 11
 1136 04de FFF7FEFF 		bl	getMotorCurrentR
 1137              	.LVL161:
 1138 04e2 FFF7FEFF 		bl	__aeabi_i2d
 1139              	.LVL162:
 1140 04e6 2EA3     		adr	r3, .L95
 1141 04e8 D3E90023 		ldrd	r2, [r3]
 1142 04ec FFF7FEFF 		bl	__aeabi_dmul
 1143              	.LVL163:
 1144 04f0 01F10041 		add	r1, r1, #-2147483648
 1145 04f4 2CE0     		b	.L59
 1146              	.L88:
 301:./Src/main.c  ****     }
 1147              		.loc 1 301 0 discriminator 12
 1148 04f6 FFF7FEFF 		bl	getMotorCurrentR
 1149              	.LVL164:
 1150 04fa FFF7FEFF 		bl	__aeabi_i2d
 1151              	.LVL165:
 1152 04fe 28A3     		adr	r3, .L95
 1153 0500 D3E90023 		ldrd	r2, [r3]
 1154 0504 FFF7FEFF 		bl	__aeabi_dmul
 1155              	.LVL166:
 1156 0508 22E0     		b	.L59
 1157              	.L87:
 301:./Src/main.c  ****     }
 1158              		.loc 1 301 0 discriminator 10
 1159 050a FFF7FEFF 		bl	getMotorCurrentL
 1160              	.LVL167:
 1161 050e FFF7FEFF 		bl	__aeabi_i2d
 1162              	.LVL168:
 1163 0512 23A3     		adr	r3, .L95
 1164 0514 D3E90023 		ldrd	r2, [r3]
 1165 0518 FFF7FEFF 		bl	__aeabi_dmul
 1166              	.LVL169:
 1167 051c 0022     		movs	r2, #0
 1168 051e 0023     		movs	r3, #0
 1169 0520 FFF7FEFF 		bl	__aeabi_dcmplt
 1170              	.LVL170:
 1171 0524 58B1     		cbz	r0, .L89
 301:./Src/main.c  ****     }
 1172              		.loc 1 301 0 discriminator 16
 1173 0526 FFF7FEFF 		bl	getMotorCurrentL
 1174              	.LVL171:
 1175 052a FFF7FEFF 		bl	__aeabi_i2d
 1176              	.LVL172:
 1177 052e 1CA3     		adr	r3, .L95
 1178 0530 D3E90023 		ldrd	r2, [r3]
 1179 0534 FFF7FEFF 		bl	__aeabi_dmul
 1180              	.LVL173:
 1181 0538 01F10041 		add	r1, r1, #-2147483648
 1182 053c 08E0     		b	.L59
 1183              	.L89:
ARM GAS  /tmp/ccymaS8c.s 			page 32


 301:./Src/main.c  ****     }
 1184              		.loc 1 301 0 discriminator 17
 1185 053e FFF7FEFF 		bl	getMotorCurrentL
 1186              	.LVL174:
 1187 0542 FFF7FEFF 		bl	__aeabi_i2d
 1188              	.LVL175:
 1189 0546 16A3     		adr	r3, .L95
 1190 0548 D3E90023 		ldrd	r2, [r3]
 1191 054c FFF7FEFF 		bl	__aeabi_dmul
 1192              	.LVL176:
 1193              	.L59:
 301:./Src/main.c  ****     }
 1194              		.loc 1 301 0 discriminator 20
 1195 0550 0223     		movs	r3, #2
 1196 0552 0093     		str	r3, [sp]
 1197 0554 0246     		mov	r2, r0
 1198 0556 0B46     		mov	r3, r1
 1199 0558 1848     		ldr	r0, .L95+28
 1200 055a FFF7FEFF 		bl	LCD_WriteFloat
 1201              	.LVL177:
 1202              	.L48:
 1203              	.LBE6:
 308:./Src/main.c  ****     //Current_Motor_TASK();
 1204              		.loc 1 308 0 is_stmt 1
 1205 055e FFF7FEFF 		bl	Battery_TASK
 1206              	.LVL178:
 1207              	.LBB7:
 316:./Src/main.c  ****       MotorL_pwm(0);
 1208              		.loc 1 316 0
 1209 0562 FFF7FEFF 		bl	getMotorCurrentR
 1210              	.LVL179:
 1211 0566 FFF7FEFF 		bl	__aeabi_i2d
 1212              	.LVL180:
 1213 056a 0DA3     		adr	r3, .L95
 1214 056c D3E90023 		ldrd	r2, [r3]
 1215 0570 FFF7FEFF 		bl	__aeabi_dmul
 1216              	.LVL181:
 1217 0574 0022     		movs	r2, #0
 1218 0576 0023     		movs	r3, #0
 1219 0578 FFF7FEFF 		bl	__aeabi_dcmplt
 1220              	.LVL182:
 1221 057c 10B3     		cbz	r0, .L90
 316:./Src/main.c  ****       MotorL_pwm(0);
 1222              		.loc 1 316 0 is_stmt 0 discriminator 1
 1223 057e FFF7FEFF 		bl	getMotorCurrentR
 1224              	.LVL183:
 1225 0582 FFF7FEFF 		bl	__aeabi_i2d
 1226              	.LVL184:
 1227 0586 06A3     		adr	r3, .L95
 1228 0588 D3E90023 		ldrd	r2, [r3]
 1229 058c FFF7FEFF 		bl	__aeabi_dmul
 1230              	.LVL185:
 1231 0590 0022     		movs	r2, #0
 1232 0592 0B4B     		ldr	r3, .L95+32
 1233 0594 FFF7FEFF 		bl	__aeabi_dcmplt
 1234              	.LVL186:
 1235 0598 0028     		cmp	r0, #0
ARM GAS  /tmp/ccymaS8c.s 			page 33


 1236 059a 4CD1     		bne	.L64
 1237 059c 20E0     		b	.L65
 1238              	.L96:
 1239 059e 00BF     		.align	3
 1240              	.L95:
 1241 05a0 7B14AE47 		.word	1202590843
 1242 05a4 E17A943F 		.word	1066695393
 1243 05a8 0000E03F 		.word	1071644672
 1244 05ac 00000000 		.word	.LANCHOR1
 1245 05b0 00000000 		.word	counterTemp
 1246 05b4 00000000 		.word	hiwdg
 1247 05b8 D34D6210 		.word	274877907
 1248 05bc 00000000 		.word	lcd
 1249 05c0 008046C0 		.word	-1069121536
 1250              	.L90:
 316:./Src/main.c  ****       MotorL_pwm(0);
 1251              		.loc 1 316 0 discriminator 2
 1252 05c4 FFF7FEFF 		bl	getMotorCurrentR
 1253              	.LVL187:
 1254 05c8 FFF7FEFF 		bl	__aeabi_i2d
 1255              	.LVL188:
 1256 05cc 4EA3     		adr	r3, .L97
 1257 05ce D3E90023 		ldrd	r2, [r3]
 1258 05d2 FFF7FEFF 		bl	__aeabi_dmul
 1259              	.LVL189:
 1260 05d6 0022     		movs	r2, #0
 1261 05d8 4D4B     		ldr	r3, .L97+8
 1262 05da FFF7FEFF 		bl	__aeabi_dcmpgt
 1263              	.LVL190:
 1264 05de 50BB     		cbnz	r0, .L64
 1265              	.L65:
 316:./Src/main.c  ****       MotorL_pwm(0);
 1266              		.loc 1 316 0 discriminator 3
 1267 05e0 FFF7FEFF 		bl	getMotorCurrentL
 1268              	.LVL191:
 1269 05e4 FFF7FEFF 		bl	__aeabi_i2d
 1270              	.LVL192:
 1271 05e8 47A3     		adr	r3, .L97
 1272 05ea D3E90023 		ldrd	r2, [r3]
 1273 05ee FFF7FEFF 		bl	__aeabi_dmul
 1274              	.LVL193:
 1275 05f2 0022     		movs	r2, #0
 1276 05f4 0023     		movs	r3, #0
 1277 05f6 FFF7FEFF 		bl	__aeabi_dcmplt
 1278              	.LVL194:
 1279 05fa 70B1     		cbz	r0, .L91
 316:./Src/main.c  ****       MotorL_pwm(0);
 1280              		.loc 1 316 0 discriminator 4
 1281 05fc FFF7FEFF 		bl	getMotorCurrentL
 1282              	.LVL195:
 1283 0600 FFF7FEFF 		bl	__aeabi_i2d
 1284              	.LVL196:
 1285 0604 40A3     		adr	r3, .L97
 1286 0606 D3E90023 		ldrd	r2, [r3]
 1287 060a FFF7FEFF 		bl	__aeabi_dmul
 1288              	.LVL197:
 1289 060e 0022     		movs	r2, #0
ARM GAS  /tmp/ccymaS8c.s 			page 34


 1290 0610 404B     		ldr	r3, .L97+12
 1291 0612 FFF7FEFF 		bl	__aeabi_dcmplt
 1292              	.LVL198:
 1293 0616 70B9     		cbnz	r0, .L64
 1294 0618 3CE0     		b	.L68
 1295              	.L91:
 316:./Src/main.c  ****       MotorL_pwm(0);
 1296              		.loc 1 316 0 discriminator 5
 1297 061a FFF7FEFF 		bl	getMotorCurrentL
 1298              	.LVL199:
 1299 061e FFF7FEFF 		bl	__aeabi_i2d
 1300              	.LVL200:
 1301 0622 39A3     		adr	r3, .L97
 1302 0624 D3E90023 		ldrd	r2, [r3]
 1303 0628 FFF7FEFF 		bl	__aeabi_dmul
 1304              	.LVL201:
 1305 062c 0022     		movs	r2, #0
 1306 062e 384B     		ldr	r3, .L97+8
 1307 0630 FFF7FEFF 		bl	__aeabi_dcmpgt
 1308              	.LVL202:
 1309 0634 70B3     		cbz	r0, .L68
 1310              	.L64:
 317:./Src/main.c  ****       MotorR_pwm(0);
 1311              		.loc 1 317 0 is_stmt 1
 1312 0636 0020     		movs	r0, #0
 1313 0638 FFF7FEFF 		bl	MotorL_pwm
 1314              	.LVL203:
 318:./Src/main.c  ****       Buzzer_OneLongBeep();
 1315              		.loc 1 318 0
 1316 063c 0020     		movs	r0, #0
 1317 063e FFF7FEFF 		bl	MotorR_pwm
 1318              	.LVL204:
 319:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 1319              		.loc 1 319 0
 1320 0642 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1321              	.LVL205:
 320:./Src/main.c  ****       HAL_Delay(5);
 1322              		.loc 1 320 0
 1323 0646 344D     		ldr	r5, .L97+16
 1324 0648 2846     		mov	r0, r5
 1325 064a FFF7FEFF 		bl	LCD_ClearDisplay
 1326              	.LVL206:
 321:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 1327              		.loc 1 321 0
 1328 064e 0520     		movs	r0, #5
 1329 0650 FFF7FEFF 		bl	HAL_Delay
 1330              	.LVL207:
 322:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 1331              		.loc 1 322 0
 1332 0654 0022     		movs	r2, #0
 1333 0656 1146     		mov	r1, r2
 1334 0658 2846     		mov	r0, r5
 1335 065a FFF7FEFF 		bl	LCD_SetLocation
 1336              	.LVL208:
 323:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 1337              		.loc 1 323 0
 1338 065e 2F49     		ldr	r1, .L97+20
ARM GAS  /tmp/ccymaS8c.s 			page 35


 1339 0660 2846     		mov	r0, r5
 1340 0662 FFF7FEFF 		bl	LCD_WriteString
 1341              	.LVL209:
 324:./Src/main.c  ****       LCD_WriteString(&lcd, "Overcurrent.");
 1342              		.loc 1 324 0
 1343 0666 0122     		movs	r2, #1
 1344 0668 0021     		movs	r1, #0
 1345 066a 2846     		mov	r0, r5
 1346 066c FFF7FEFF 		bl	LCD_SetLocation
 1347              	.LVL210:
 325:./Src/main.c  ****       HAL_Delay(500);
 1348              		.loc 1 325 0
 1349 0670 2B49     		ldr	r1, .L97+24
 1350 0672 2846     		mov	r0, r5
 1351 0674 FFF7FEFF 		bl	LCD_WriteString
 1352              	.LVL211:
 326:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 1353              		.loc 1 326 0
 1354 0678 4FF4FA70 		mov	r0, #500
 1355 067c FFF7FEFF 		bl	HAL_Delay
 1356              	.LVL212:
 327:./Src/main.c  ****       HAL_Delay(500);
 1357              		.loc 1 327 0
 1358 0680 2848     		ldr	r0, .L97+28
 1359 0682 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1360              	.LVL213:
 328:./Src/main.c  ****       Power_Set(0);
 1361              		.loc 1 328 0
 1362 0686 4FF4FA70 		mov	r0, #500
 1363 068a FFF7FEFF 		bl	HAL_Delay
 1364              	.LVL214:
 329:./Src/main.c  ****     }
 1365              		.loc 1 329 0
 1366 068e 0020     		movs	r0, #0
 1367 0690 FFF7FEFF 		bl	Power_Set
 1368              	.LVL215:
 1369              	.L68:
 1370              	.LBE7:
 332:./Src/main.c  ****       MotorL_pwm(0);
 1371              		.loc 1 332 0
 1372 0694 FFF7FEFF 		bl	GET_BatteryAverage
 1373              	.LVL216:
 1374 0698 2349     		ldr	r1, .L97+32
 1375 069a FFF7FEFF 		bl	__aeabi_fcmplt
 1376              	.LVL217:
 1377 069e 70B3     		cbz	r0, .L70
 333:./Src/main.c  ****       MotorR_pwm(0);
 1378              		.loc 1 333 0
 1379 06a0 0020     		movs	r0, #0
 1380 06a2 FFF7FEFF 		bl	MotorL_pwm
 1381              	.LVL218:
 334:./Src/main.c  ****       Buzzer_OneLongBeep();
 1382              		.loc 1 334 0
 1383 06a6 0020     		movs	r0, #0
 1384 06a8 FFF7FEFF 		bl	MotorR_pwm
 1385              	.LVL219:
 335:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
ARM GAS  /tmp/ccymaS8c.s 			page 36


 1386              		.loc 1 335 0
 1387 06ac FFF7FEFF 		bl	Buzzer_OneLongBeep
 1388              	.LVL220:
 336:./Src/main.c  ****       HAL_Delay(5);
 1389              		.loc 1 336 0
 1390 06b0 194D     		ldr	r5, .L97+16
 1391 06b2 2846     		mov	r0, r5
 1392 06b4 FFF7FEFF 		bl	LCD_ClearDisplay
 1393              	.LVL221:
 337:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 1394              		.loc 1 337 0
 1395 06b8 0520     		movs	r0, #5
 1396 06ba FFF7FEFF 		bl	HAL_Delay
 1397              	.LVL222:
 338:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 1398              		.loc 1 338 0
 1399 06be 0022     		movs	r2, #0
 1400 06c0 1146     		mov	r1, r2
 1401 06c2 2846     		mov	r0, r5
 1402 06c4 FFF7FEFF 		bl	LCD_SetLocation
 1403              	.LVL223:
 339:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 1404              		.loc 1 339 0
 1405 06c8 1449     		ldr	r1, .L97+20
 1406 06ca 2846     		mov	r0, r5
 1407 06cc FFF7FEFF 		bl	LCD_WriteString
 1408              	.LVL224:
 340:./Src/main.c  ****       LCD_WriteString(&lcd, "Battery low.");
 1409              		.loc 1 340 0
 1410 06d0 0122     		movs	r2, #1
 1411 06d2 0021     		movs	r1, #0
 1412 06d4 2846     		mov	r0, r5
 1413 06d6 FFF7FEFF 		bl	LCD_SetLocation
 1414              	.LVL225:
 341:./Src/main.c  ****       HAL_Delay(500);
 1415              		.loc 1 341 0
 1416 06da 1449     		ldr	r1, .L97+36
 1417 06dc 2846     		mov	r0, r5
 1418 06de FFF7FEFF 		bl	LCD_WriteString
 1419              	.LVL226:
 342:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 1420              		.loc 1 342 0
 1421 06e2 4FF4FA70 		mov	r0, #500
 1422 06e6 FFF7FEFF 		bl	HAL_Delay
 1423              	.LVL227:
 343:./Src/main.c  ****       HAL_Delay(500);
 1424              		.loc 1 343 0
 1425 06ea 0E48     		ldr	r0, .L97+28
 1426 06ec FFF7FEFF 		bl	HAL_IWDG_Refresh
 1427              	.LVL228:
 344:./Src/main.c  ****       Power_Set(0);
 1428              		.loc 1 344 0
 1429 06f0 4FF4FA70 		mov	r0, #500
 1430 06f4 FFF7FEFF 		bl	HAL_Delay
 1431              	.LVL229:
 345:./Src/main.c  ****     }
 1432              		.loc 1 345 0
ARM GAS  /tmp/ccymaS8c.s 			page 37


 1433 06f8 0020     		movs	r0, #0
 1434 06fa FFF7FEFF 		bl	Power_Set
 1435              	.LVL230:
 1436              	.L70:
 349:./Src/main.c  **** 
 1437              		.loc 1 349 0
 1438 06fe 0948     		ldr	r0, .L97+28
 1439 0700 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1440              	.LVL231:
 355:./Src/main.c  **** 
 1441              		.loc 1 355 0
 1442 0704 26E5     		b	.L72
 1443              	.L98:
 1444 0706 00BF     		.align	3
 1445              	.L97:
 1446 0708 7B14AE47 		.word	1202590843
 1447 070c E17A943F 		.word	1066695393
 1448 0710 00804640 		.word	1078362112
 1449 0714 008046C0 		.word	-1069121536
 1450 0718 00000000 		.word	lcd
 1451 071c 58000000 		.word	.LC8
 1452 0720 68000000 		.word	.LC9
 1453 0724 00000000 		.word	hiwdg
 1454 0728 0000F841 		.word	1106771968
 1455 072c 78000000 		.word	.LC10
 1456              		.cfi_endproc
 1457              	.LFE65:
 1459              		.global	timeout
 1460              		.global	rx_count
 1461              		.global	data_ready
 1462              		.global	pointer
 1463              		.global	rc_data
 1464              		.global	captured_value
 1465              		.comm	htim2,60,4
 1466              		.global	saveValue
 1467              		.comm	lcd,140,4
 1468              		.comm	counterTempTT,4,4
 1469              		.comm	counterTemp,4,4
 1470              		.global	speed
 1471              		.comm	hiwdg,16,4
 1472              		.global	VarValue
 1473              		.global	VarDataTab
 1474              		.global	VirtAddVarTab
 1475              		.section	.bss.pointer,"aw",%nobits
 1478              	pointer:
 1479 0000 00       		.space	1
 1480              		.section	.bss.rc_data,"aw",%nobits
 1481              		.align	2
 1484              	rc_data:
 1485 0000 00000000 		.space	10
 1485      00000000 
 1485      0000
 1486              		.section	.bss.saveValue,"aw",%nobits
 1487              		.align	1
 1488              		.set	.LANCHOR3,. + 0
 1491              	saveValue:
 1492 0000 0000     		.space	2
ARM GAS  /tmp/ccymaS8c.s 			page 38


 1493              		.section	.bss.captured_value,"aw",%nobits
 1494              		.align	2
 1495              		.set	.LANCHOR2,. + 0
 1498              	captured_value:
 1499 0000 00000000 		.space	16
 1499      00000000 
 1499      00000000 
 1499      00000000 
 1500              		.section	.bss.VarValue,"aw",%nobits
 1501              		.align	1
 1504              	VarValue:
 1505 0000 0000     		.space	2
 1506              		.section	.bss.rx_count,"aw",%nobits
 1507              		.set	.LANCHOR0,. + 0
 1510              	rx_count:
 1511 0000 00       		.space	1
 1512              		.section	.data.VirtAddVarTab,"aw",%progbits
 1513              		.align	2
 1514              		.set	.LANCHOR4,. + 0
 1517              	VirtAddVarTab:
 1518 0000 3713     		.short	4919
 1519 0002 00000000 		.space	4
 1520              		.section	.rodata.str1.4,"aMS",%progbits,1
 1521              		.align	2
 1522              	.LC0:
 1523 0000 53657373 		.ascii	"SesselOtter V5.2\000"
 1523      656C4F74 
 1523      74657220 
 1523      56352E32 
 1523      00
 1524 0011 000000   		.space	3
 1525              	.LC1:
 1526 0014 496E6974 		.ascii	"Initializing...\000"
 1526      69616C69 
 1526      7A696E67 
 1526      2E2E2E00 
 1527              	.LC2:
 1528 0024 4261743A 		.ascii	"Bat:\000"
 1528      00
 1529 0029 000000   		.space	3
 1530              	.LC3:
 1531 002c 5600     		.ascii	"V\000"
 1532 002e 0000     		.space	2
 1533              	.LC4:
 1534 0030 4100     		.ascii	"A\000"
 1535 0032 0000     		.space	2
 1536              	.LC5:
 1537 0034 53706565 		.ascii	"Speed:\000"
 1537      643A00
 1538 003b 00       		.space	1
 1539              	.LC6:
 1540 003c 6B6D2F68 		.ascii	"km/h\000"
 1540      00
 1541 0041 000000   		.space	3
 1542              	.LC7:
 1543 0044 25693B25 		.ascii	"%i;%i;%i;%i;%i;%i\012\015\000"
 1543      693B2569 
ARM GAS  /tmp/ccymaS8c.s 			page 39


 1543      3B25693B 
 1543      25693B25 
 1543      690A0D00 
 1544              	.LC8:
 1545 0058 456D6572 		.ascii	"Emergency Off!\000"
 1545      67656E63 
 1545      79204F66 
 1545      662100
 1546 0067 00       		.space	1
 1547              	.LC9:
 1548 0068 4F766572 		.ascii	"Overcurrent.\000"
 1548      63757272 
 1548      656E742E 
 1548      00
 1549 0075 000000   		.space	3
 1550              	.LC10:
 1551 0078 42617474 		.ascii	"Battery low.\000"
 1551      65727920 
 1551      6C6F772E 
 1551      00
 1552              		.section	.bss.timeout,"aw",%nobits
 1553              		.align	2
 1554              		.set	.LANCHOR1,. + 0
 1557              	timeout:
 1558 0000 00000000 		.space	4
 1559              		.section	.bss.speed,"aw",%nobits
 1560              		.align	1
 1563              	speed:
 1564 0000 0000     		.space	2
 1565              		.section	.bss.VarDataTab,"aw",%nobits
 1566              		.align	2
 1569              	VarDataTab:
 1570 0000 00000000 		.space	6
 1570      0000
 1571              		.section	.bss.data_ready,"aw",%nobits
 1574              	data_ready:
 1575 0000 00       		.space	1
 1576              		.text
 1577              	.Letext0:
 1578              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1579              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1580              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1581              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1582              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1583              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1584              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1585              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1586              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1587              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 1588              		.file 12 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1589              		.file 13 "./Inc/pcf8574.h"
 1590              		.file 14 "./Inc/hd44780.h"
 1591              		.file 15 "./Drivers/CMSIS/Include/core_cm3.h"
 1592              		.file 16 "./Inc/delay.h"
 1593              		.file 17 "./Inc/eeprom.h"
 1594              		.file 18 "./Inc/ADC_R.h"
 1595              		.file 19 "./Inc/ADC_L.h"
ARM GAS  /tmp/ccymaS8c.s 			page 40


 1596              		.file 20 "./Inc/motor_R.h"
 1597              		.file 21 "./Inc/motor_L.h"
 1598              		.file 22 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1599              		.file 23 "./Inc/varie.h"
 1600              		.file 24 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/stdio.h"
 1601              		.file 25 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1602              		.file 26 "./Inc/application.h"
 1603              		.file 27 "<built-in>"
ARM GAS  /tmp/ccymaS8c.s 			page 41


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccymaS8c.s:20     .text.PPM_ISR_Callback:00000000 $t
     /tmp/ccymaS8c.s:25     .text.PPM_ISR_Callback:00000000 PPM_ISR_Callback
     /tmp/ccymaS8c.s:102    .text.PPM_ISR_Callback:0000005c $d
     /tmp/ccymaS8c.s:109    .text.saveConfig:00000000 $t
     /tmp/ccymaS8c.s:114    .text.saveConfig:00000000 saveConfig
     /tmp/ccymaS8c.s:136    .text.saveConfig:00000010 $d
     /tmp/ccymaS8c.s:142    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccymaS8c.s:147    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccymaS8c.s:183    .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/ccymaS8c.s:189    .text.Error_Handler:00000000 $t
     /tmp/ccymaS8c.s:194    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccymaS8c.s:218    .text.MX_IWDG_Init:00000000 $t
     /tmp/ccymaS8c.s:222    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/ccymaS8c.s:277    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/ccymaS8c.s:284    .text.SystemClock_Config:00000000 $t
     /tmp/ccymaS8c.s:289    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccymaS8c.s:393    .text.SystemClock_Config:00000088 $d
     /tmp/ccymaS8c.s:408    .text.main:00000000 $t
     /tmp/ccymaS8c.s:413    .text.main:00000000 main
     /tmp/ccymaS8c.s:777    .text.main:00000240 $d
                            *COM*:0000008c lcd
     /tmp/ccymaS8c.s:795    .text.main:00000284 $t
     /tmp/ccymaS8c.s:1241   .text.main:000005a0 $d
                            *COM*:00000004 counterTemp
     /tmp/ccymaS8c.s:1252   .text.main:000005c4 $t
     /tmp/ccymaS8c.s:1446   .text.main:00000708 $d
     /tmp/ccymaS8c.s:1557   .bss.timeout:00000000 timeout
     /tmp/ccymaS8c.s:1510   .bss.rx_count:00000000 rx_count
     /tmp/ccymaS8c.s:1574   .bss.data_ready:00000000 data_ready
     /tmp/ccymaS8c.s:1478   .bss.pointer:00000000 pointer
     /tmp/ccymaS8c.s:1484   .bss.rc_data:00000000 rc_data
     /tmp/ccymaS8c.s:1498   .bss.captured_value:00000000 captured_value
                            *COM*:0000003c htim2
     /tmp/ccymaS8c.s:1491   .bss.saveValue:00000000 saveValue
                            *COM*:00000004 counterTempTT
     /tmp/ccymaS8c.s:1563   .bss.speed:00000000 speed
     /tmp/ccymaS8c.s:1504   .bss.VarValue:00000000 VarValue
     /tmp/ccymaS8c.s:1569   .bss.VarDataTab:00000000 VarDataTab
     /tmp/ccymaS8c.s:1517   .data.VirtAddVarTab:00000000 VirtAddVarTab
     /tmp/ccymaS8c.s:1479   .bss.pointer:00000000 $d
     /tmp/ccymaS8c.s:1481   .bss.rc_data:00000000 $d
     /tmp/ccymaS8c.s:1487   .bss.saveValue:00000000 $d
     /tmp/ccymaS8c.s:1494   .bss.captured_value:00000000 $d
     /tmp/ccymaS8c.s:1501   .bss.VarValue:00000000 $d
     /tmp/ccymaS8c.s:1511   .bss.rx_count:00000000 $d
     /tmp/ccymaS8c.s:1513   .data.VirtAddVarTab:00000000 $d
     /tmp/ccymaS8c.s:1521   .rodata.str1.4:00000000 $d
     /tmp/ccymaS8c.s:1553   .bss.timeout:00000000 $d
     /tmp/ccymaS8c.s:1560   .bss.speed:00000000 $d
     /tmp/ccymaS8c.s:1566   .bss.VarDataTab:00000000 $d
     /tmp/ccymaS8c.s:1575   .bss.data_ready:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccymaS8c.s 			page 42


_stop_timer
_init_us
EE_WriteVariable
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_d2iz
__aeabi_dsub
__aeabi_dadd
__aeabi_f2d
__aeabi_fcmplt
HAL_Init
Button_init
Power_Set
HAL_Delay
ADC_L_init
ADC_R_init
MX_I2C2_Init
LCD_Init
LCD_ClearDisplay
LCD_SetLocation
LCD_WriteString
Buzzer_init
Led_init
IS_Charge_init
Led_Set
IS_Button
MotorL_init
MotorR_init
applcation_init
Battery_TASK
Buzzer_TwoBeep
MotorR_start
MotorL_start
Timer_init
memset
sprintf
hi2c2
MotorR_pwm
MotorL_pwm
Console_Log
HAL_GetTick
ARM GAS  /tmp/ccymaS8c.s 			page 43


HAL_IWDG_Refresh
Buzzer_OneLongBeep
LCD_WriteFloat
GET_BatteryAverage
getMotorCurrentR
getMotorCurrentL
