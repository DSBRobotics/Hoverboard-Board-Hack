ARM GAS  /tmp/ccrbh29o.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  20              		.align	2
  21              		.global	HAL_ADC_ConvCpltCallback
  22              		.thumb
  23              		.thumb_func
  25              	HAL_ADC_ConvCpltCallback:
  26              	.LFB67:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/ccrbh29o.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "motor_L.h"
  46:./Src/main.c  **** #include "motor_R.h"
  47:./Src/main.c  **** #include "varie.h"
  48:./Src/main.c  **** #include "ADC_L.h"
  49:./Src/main.c  **** #include "ADC_R.h"
  50:./Src/main.c  **** #include "delay.h"
  51:./Src/main.c  **** #include "pid.h"
  52:./Src/main.c  **** #include "application.h"
  53:./Src/main.c  **** #include "telemetry.h"
  54:./Src/main.c  **** #include "hd44780.h"
  55:./Src/main.c  **** #include <math.h>
  56:./Src/main.c  **** 
  57:./Src/main.c  **** // copied from STMBL
  58:./Src/main.c  **** #define NO 0
  59:./Src/main.c  **** #define YES 1
  60:./Src/main.c  **** #define ABS(a) (((a) < 0.0) ? -(a) : (a))
  61:./Src/main.c  **** #define LIMIT(x, lowhigh) (((x) > (lowhigh)) ? (lowhigh) : (((x) < (-lowhigh)) ? (-lowhigh) : (x)))
  62:./Src/main.c  **** #define SAT(x, lowhigh) (((x) > (lowhigh)) ? (1.0) : (((x) < (-lowhigh)) ? (-1.0) : (0.0)))
  63:./Src/main.c  **** #define SAT2(x, low, high) (((x) > (high)) ? (1.0) : (((x) < (low)) ? (-1.0) : (0.0)))
  64:./Src/main.c  **** #define STEP(from, to, step) (((from) < (to)) ? (MIN((from) + (step), (to))) : (MAX((from) - (step)
  65:./Src/main.c  **** #define DEG(a) ((a)*M_PI / 180.0)
  66:./Src/main.c  **** #define RAD(a) ((a)*180.0 / M_PI)
  67:./Src/main.c  **** #define SIGN(a) (((a) < 0.0) ? (-1.0) : (((a) > 0.0) ? (1.0) : (0.0)))
  68:./Src/main.c  **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  69:./Src/main.c  **** #define SCALE(value, high, max) MIN(MAX(((max) - (value)) / ((max) - (high)), 0.0), 1.0)
  70:./Src/main.c  **** #define MIN(a, b) (((a) < (b)) ? (a) : (b))
  71:./Src/main.c  **** #define MAX(a, b) (((a) > (b)) ? (a) : (b))
  72:./Src/main.c  **** #define MIN3(a, b, c) MIN(a, MIN(b, c))
  73:./Src/main.c  **** #define MAX3(a, b, c) MAX(a, MAX(b, c))
  74:./Src/main.c  **** 
  75:./Src/main.c  **** #define PI 3.14159265
  76:./Src/main.c  **** 
  77:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  78:./Src/main.c  **** 
  79:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  80:./Src/main.c  **** void SystemClock_Config(void);
  81:./Src/main.c  **** void Error_Handler(void);
  82:./Src/main.c  **** //extern struct PID_dati pid_R_;
  83:./Src/main.c  **** static void MX_IWDG_Init(void);
  84:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  85:./Src/main.c  **** 
  86:./Src/main.c  **** volatile __IO int16_t speed = 0;
  87:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  88:./Src/main.c  **** //extern struct COMMAND_data commandsequence;
ARM GAS  /tmp/ccrbh29o.s 			page 3


  89:./Src/main.c  **** 
  90:./Src/main.c  **** //TEMP
  91:./Src/main.c  **** /*
  92:./Src/main.c  **** extern volatile __IO struct MOTOR_Rdati motorR;
  93:./Src/main.c  **** volatile __IO uint8_t temp8,temp8case,temp_MOTOR_R_START;
  94:./Src/main.c  **** volatile __IO int32_t temp_SET_SPPED;
  95:./Src/main.c  **** volatile __IO uint8_t bufferTX[100],ai2cBuffer[10];
  96:./Src/main.c  **** int32_t speed;
  97:./Src/main.c  **** */
  98:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
  99:./Src/main.c  **** LCD_PCF8574_HandleTypeDef lcd;
 100:./Src/main.c  **** extern I2C_HandleTypeDef hi2c2;
 101:./Src/main.c  **** 
 102:./Src/main.c  **** int main(void)
 103:./Src/main.c  **** {
 104:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 105:./Src/main.c  ****   HAL_Init();
 106:./Src/main.c  **** 
 107:./Src/main.c  ****   /* Configure the system clock */
 108:./Src/main.c  ****   SystemClock_Config();
 109:./Src/main.c  **** 
 110:./Src/main.c  ****   Button_init();
 111:./Src/main.c  **** 
 112:./Src/main.c  ****   Power_Set(1);
 113:./Src/main.c  **** 
 114:./Src/main.c  **** 
 115:./Src/main.c  ****   Telemetry_init();
 116:./Src/main.c  ****   MX_I2C2_Init();
 117:./Src/main.c  **** 
 118:./Src/main.c  ****   Buzzer_init();
 119:./Src/main.c  ****   Led_init();
 120:./Src/main.c  ****   IS_Charge_init();
 121:./Src/main.c  **** 
 122:./Src/main.c  ****   ADC_L_init();
 123:./Src/main.c  ****   ADC_R_init();
 124:./Src/main.c  ****   MotorL_init();
 125:./Src/main.c  ****   MotorR_init();
 126:./Src/main.c  **** 
 127:./Src/main.c  **** 
 128:./Src/main.c  ****   //PID_init(0,900); //pwm limit
 129:./Src/main.c  ****   //PID_set_L_costant(0.05,0.01,0.0);
 130:./Src/main.c  ****   //PID_set_R_costant(2.0,0.5,0.0);
 131:./Src/main.c  **** 
 132:./Src/main.c  **** //DebugPin_init();
 133:./Src/main.c  ****   HAL_Delay(350);
 134:./Src/main.c  ****   while(IS_Button()) {
 135:./Src/main.c  ****     Led_Set(0);
 136:./Src/main.c  ****   }
 137:./Src/main.c  **** 
 138:./Src/main.c  ****   applcation_init();
 139:./Src/main.c  ****   Battery_TASK();
 140:./Src/main.c  **** 
 141:./Src/main.c  ****   MX_IWDG_Init();
 142:./Src/main.c  **** 
 143:./Src/main.c  ****   Led_Set(1);
 144:./Src/main.c  ****   Buzzer_TwoBeep();
 145:./Src/main.c  ****   HAL_Delay(350);
ARM GAS  /tmp/ccrbh29o.s 			page 4


 146:./Src/main.c  **** 
 147:./Src/main.c  **** 
 148:./Src/main.c  **** 
 149:./Src/main.c  ****   lcd.pcf8574.PCF_I2C_ADDRESS = 7;
 150:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 151:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 152:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 153:./Src/main.c  **** 	lcd.type = TYPE0;
 154:./Src/main.c  **** 
 155:./Src/main.c  **** 	if(LCD_Init(&lcd)!=LCD_OK){
 156:./Src/main.c  **** 		// error occured
 157:./Src/main.c  **** 		while(1);
 158:./Src/main.c  **** 	}
 159:./Src/main.c  **** 
 160:./Src/main.c  **** 	LCD_ClearDisplay(&lcd);
 161:./Src/main.c  **** 	LCD_SetLocation(&lcd, 0, 0);
 162:./Src/main.c  **** 	LCD_WriteString(&lcd, "pi:");
 163:./Src/main.c  **** 	LCD_SetLocation(&lcd, 0, 1);
 164:./Src/main.c  **** 	LCD_WriteString(&lcd, "e:");
 165:./Src/main.c  **** 
 166:./Src/main.c  ****   MotorR_start();
 167:./Src/main.c  ****   MotorL_start();
 168:./Src/main.c  ****   //MotorR_pwm(80);
 169:./Src/main.c  ****   //MotorL_pwm(-200);
 170:./Src/main.c  **** 
 171:./Src/main.c  ****   uint32_t sinValue = 45 * 50;
 172:./Src/main.c  ****   uint8_t state = 0;
 173:./Src/main.c  ****   int lastSpeedL = 0, lastSpeedR = 0;
 174:./Src/main.c  ****   while(1){
 175:./Src/main.c  ****     sinValue++;
 176:./Src/main.c  ****     counterTemp = HAL_GetTick();
 177:./Src/main.c  ****     if(IS_Button()) {
 178:./Src/main.c  ****       while(IS_Button()) {
 179:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 180:./Src/main.c  ****       }
 181:./Src/main.c  ****       Buzzer_OneLongBeep();
 182:./Src/main.c  ****       HAL_Delay(350);
 183:./Src/main.c  ****       Power_Set(0);
 184:./Src/main.c  ****     }
 185:./Src/main.c  ****     if ((sinValue) % (500) == 0) {
 186:./Src/main.c  ****       uint16_t distance = CLAMP(ADC_PA3() - 175, 0, 4095);
 187:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 188:./Src/main.c  ****       int speedL = -CLAMP((distance - 1000) +  CLAMP((steering / 10.0), -50, 50), -800, 800);
 189:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 190:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 191:./Src/main.c  ****         if (distance > 850) {
 192:./Src/main.c  ****           MotorL_pwm(speedL);
 193:./Src/main.c  ****           MotorR_pwm(speedR);
 194:./Src/main.c  ****         } else {
 195:./Src/main.c  ****           MotorL_pwm(0);
 196:./Src/main.c  ****           MotorR_pwm(0);
 197:./Src/main.c  ****         }
 198:./Src/main.c  ****       }
 199:./Src/main.c  ****       if (distance > 3000) { // Error, robot too far away!
 200:./Src/main.c  ****         MotorL_pwm(0);
 201:./Src/main.c  ****         MotorR_pwm(0);
 202:./Src/main.c  ****         while(1) {
ARM GAS  /tmp/ccrbh29o.s 			page 5


 203:./Src/main.c  ****           Power_Set(0);
 204:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 205:./Src/main.c  ****         }
 206:./Src/main.c  ****       }
 207:./Src/main.c  **** 
 208:./Src/main.c  ****       char str[100];
 209:./Src/main.c  ****       memset(&str[0], 0, sizeof(str));
 210:./Src/main.c  ****       sprintf(str, "%i;%i\n\r", distance, steering);
 211:./Src/main.c  ****       Console_Log(str);
 212:./Src/main.c  **** 
 213:./Src/main.c  **** 
 214:./Src/main.c  ****       lastSpeedL = speedL;
 215:./Src/main.c  ****       lastSpeedR = speedR;
 216:./Src/main.c  ****     }
 217:./Src/main.c  **** 
 218:./Src/main.c  **** 
 219:./Src/main.c  **** 
 220:./Src/main.c  ****     Battery_TASK();
 221:./Src/main.c  ****     //Current_Motor_TASK();
 222:./Src/main.c  ****     //sWiiNunchuck_TASK();
 223:./Src/main.c  ****     //applcation_TASK();
 224:./Src/main.c  ****     //Telemetry_TASK();
 225:./Src/main.c  **** 
 226:./Src/main.c  ****     //Batteria Scarica?
 227:./Src/main.c  ****     if(GET_BatteryAverage() < 31.0 || ABS(getMotorCurrentR() * 0.02) > 20.0 || ABS(getMotorCurrentL
 228:./Src/main.c  ****       MotorL_pwm(0);
 229:./Src/main.c  ****       MotorR_pwm(0);
 230:./Src/main.c  ****       Buzzer_OneLongBeep();
 231:./Src/main.c  ****       HAL_Delay(350);
 232:./Src/main.c  ****       Power_Set(0);
 233:./Src/main.c  ****     }
 234:./Src/main.c  ****     //In Carica?
 235:./Src/main.c  ****     /*if(IS_Charge()==0){
 236:./Src/main.c  ****       WAIT_CHARGE_FINISH();
 237:./Src/main.c  ****     }*/
 238:./Src/main.c  **** 
 239:./Src/main.c  ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 240:./Src/main.c  **** 
 241:./Src/main.c  ****     counterTempTT = HAL_GetTick() - counterTemp;
 242:./Src/main.c  **** 
 243:./Src/main.c  **** 
 244:./Src/main.c  **** 
 245:./Src/main.c  ****   }
 246:./Src/main.c  **** 
 247:./Src/main.c  **** }
 248:./Src/main.c  **** 
 249:./Src/main.c  **** /** System Clock Configuration
 250:./Src/main.c  **** */
 251:./Src/main.c  **** void SystemClock_Config(void)
 252:./Src/main.c  **** {
 253:./Src/main.c  **** 
 254:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 255:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 256:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 257:./Src/main.c  **** 
 258:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 259:./Src/main.c  ****     */
ARM GAS  /tmp/ccrbh29o.s 			page 6


 260:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 261:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 262:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 263:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 264:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 265:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 266:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 267:./Src/main.c  ****   {
 268:./Src/main.c  ****     Error_Handler();
 269:./Src/main.c  ****   }
 270:./Src/main.c  **** 
 271:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 272:./Src/main.c  ****     */
 273:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 274:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 275:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 276:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 277:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 278:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 279:./Src/main.c  **** 
 280:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 281:./Src/main.c  ****   {
 282:./Src/main.c  ****     Error_Handler();
 283:./Src/main.c  ****   }
 284:./Src/main.c  **** 
 285:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 286:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 287:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 288:./Src/main.c  ****   {
 289:./Src/main.c  ****     Error_Handler();
 290:./Src/main.c  ****   }
 291:./Src/main.c  **** 
 292:./Src/main.c  ****     /**Configure the Systick interrupt time
 293:./Src/main.c  ****     */
 294:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 295:./Src/main.c  **** 
 296:./Src/main.c  ****     /**Configure the Systick
 297:./Src/main.c  ****     */
 298:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 299:./Src/main.c  **** 
 300:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 301:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 302:./Src/main.c  **** }
 303:./Src/main.c  **** 
 304:./Src/main.c  **** /* IWDG init function */
 305:./Src/main.c  **** static void MX_IWDG_Init(void)
 306:./Src/main.c  **** {
 307:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 308:./Src/main.c  ****   hiwdg.Instance = IWDG;
 309:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 310:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 311:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 312:./Src/main.c  ****   {
 313:./Src/main.c  ****     Error_Handler();
 314:./Src/main.c  ****   }
 315:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 316:./Src/main.c  **** }
ARM GAS  /tmp/ccrbh29o.s 			page 7


 317:./Src/main.c  **** 
 318:./Src/main.c  **** 
 319:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
  28              		.loc 1 319 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38 0002 0446     		mov	r4, r0
 320:./Src/main.c  ****   if(hadc->Instance == ADC1){
  39              		.loc 1 320 0
  40 0004 0268     		ldr	r2, [r0]
  41 0006 064B     		ldr	r3, .L5
  42 0008 9A42     		cmp	r2, r3
  43 000a 01D1     		bne	.L2
 321:./Src/main.c  ****     ADC_R_callback();
  44              		.loc 1 321 0
  45 000c FFF7FEFF 		bl	ADC_R_callback
  46              	.LVL1:
  47              	.L2:
 322:./Src/main.c  ****   }
 323:./Src/main.c  ****   if(hadc->Instance == ADC3){
  48              		.loc 1 323 0
  49 0010 2268     		ldr	r2, [r4]
  50 0012 044B     		ldr	r3, .L5+4
  51 0014 9A42     		cmp	r2, r3
  52 0016 01D1     		bne	.L1
 324:./Src/main.c  ****     ADC_L_callback();
  53              		.loc 1 324 0
  54 0018 FFF7FEFF 		bl	ADC_L_callback
  55              	.LVL2:
  56              	.L1:
  57 001c 10BD     		pop	{r4, pc}
  58              	.LVL3:
  59              	.L6:
  60 001e 00BF     		.align	2
  61              	.L5:
  62 0020 00240140 		.word	1073816576
  63 0024 003C0140 		.word	1073822720
  64              		.cfi_endproc
  65              	.LFE67:
  67              		.section	.text.Error_Handler,"ax",%progbits
  68              		.align	2
  69              		.global	Error_Handler
  70              		.thumb
  71              		.thumb_func
  73              	Error_Handler:
  74              	.LFB68:
 325:./Src/main.c  ****   }
 326:./Src/main.c  **** }
 327:./Src/main.c  **** 
 328:./Src/main.c  **** 
ARM GAS  /tmp/ccrbh29o.s 			page 8


 329:./Src/main.c  **** /**
 330:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 331:./Src/main.c  ****   * @param  None
 332:./Src/main.c  ****   * @retval None
 333:./Src/main.c  ****   */
 334:./Src/main.c  **** void Error_Handler(void)
 335:./Src/main.c  **** {
  75              		.loc 1 335 0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80 0000 08B5     		push	{r3, lr}
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 3, -8
  84              		.cfi_offset 14, -4
 336:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 337:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 338:./Src/main.c  ****   MotorR_stop();
  85              		.loc 1 338 0
  86 0002 FFF7FEFF 		bl	MotorR_stop
  87              	.LVL4:
 339:./Src/main.c  ****   MotorL_stop();
  88              		.loc 1 339 0
  89 0006 FFF7FEFF 		bl	MotorL_stop
  90              	.LVL5:
  91              	.L8:
  92 000a FEE7     		b	.L8
  93              		.cfi_endproc
  94              	.LFE68:
  96              		.section	.text.MX_IWDG_Init,"ax",%progbits
  97              		.align	2
  98              		.thumb
  99              		.thumb_func
 101              	MX_IWDG_Init:
 102              	.LFB66:
 306:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 103              		.loc 1 306 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 8
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107 0000 00B5     		push	{lr}
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 4
 110              		.cfi_offset 14, -4
 111 0002 83B0     		sub	sp, sp, #12
 112              	.LCFI3:
 113              		.cfi_def_cfa_offset 16
 114              	.LBB2:
 307:./Src/main.c  ****   hiwdg.Instance = IWDG;
 115              		.loc 1 307 0
 116 0004 0E4B     		ldr	r3, .L13
 117 0006 DA69     		ldr	r2, [r3, #28]
 118 0008 42F40062 		orr	r2, r2, #2048
 119 000c DA61     		str	r2, [r3, #28]
 120 000e DB69     		ldr	r3, [r3, #28]
ARM GAS  /tmp/ccrbh29o.s 			page 9


 121 0010 03F40063 		and	r3, r3, #2048
 122 0014 0193     		str	r3, [sp, #4]
 123 0016 019B     		ldr	r3, [sp, #4]
 124              	.LBE2:
 308:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 125              		.loc 1 308 0
 126 0018 0A48     		ldr	r0, .L13+4
 127 001a 0B4B     		ldr	r3, .L13+8
 128 001c 0360     		str	r3, [r0]
 309:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 129              		.loc 1 309 0
 130 001e 0123     		movs	r3, #1
 131 0020 4360     		str	r3, [r0, #4]
 310:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 132              		.loc 1 310 0
 133 0022 40F6FF73 		movw	r3, #4095
 134 0026 8360     		str	r3, [r0, #8]
 311:./Src/main.c  ****   {
 135              		.loc 1 311 0
 136 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 137              	.LVL6:
 138 002c 08B1     		cbz	r0, .L11
 313:./Src/main.c  ****   }
 139              		.loc 1 313 0
 140 002e FFF7FEFF 		bl	Error_Handler
 141              	.LVL7:
 142              	.L11:
 315:./Src/main.c  **** }
 143              		.loc 1 315 0
 144 0032 0448     		ldr	r0, .L13+4
 145 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 146              	.LVL8:
 316:./Src/main.c  **** 
 147              		.loc 1 316 0
 148 0038 03B0     		add	sp, sp, #12
 149              	.LCFI4:
 150              		.cfi_def_cfa_offset 4
 151              		@ sp needed
 152 003a 5DF804FB 		ldr	pc, [sp], #4
 153              	.L14:
 154 003e 00BF     		.align	2
 155              	.L13:
 156 0040 00100240 		.word	1073876992
 157 0044 00000000 		.word	hiwdg
 158 0048 00300040 		.word	1073754112
 159              		.cfi_endproc
 160              	.LFE66:
 162              		.section	.text.SystemClock_Config,"ax",%progbits
 163              		.align	2
 164              		.global	SystemClock_Config
 165              		.thumb
 166              		.thumb_func
 168              	SystemClock_Config:
 169              	.LFB65:
 252:./Src/main.c  **** 
 170              		.loc 1 252 0
 171              		.cfi_startproc
ARM GAS  /tmp/ccrbh29o.s 			page 10


 172              		@ args = 0, pretend = 0, frame = 88
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174 0000 00B5     		push	{lr}
 175              	.LCFI5:
 176              		.cfi_def_cfa_offset 4
 177              		.cfi_offset 14, -4
 178 0002 97B0     		sub	sp, sp, #92
 179              	.LCFI6:
 180              		.cfi_def_cfa_offset 96
 260:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 181              		.loc 1 260 0
 182 0004 0223     		movs	r3, #2
 183 0006 0C93     		str	r3, [sp, #48]
 261:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 184              		.loc 1 261 0
 185 0008 0122     		movs	r2, #1
 186 000a 1092     		str	r2, [sp, #64]
 262:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 187              		.loc 1 262 0
 188 000c 1022     		movs	r2, #16
 189 000e 1192     		str	r2, [sp, #68]
 263:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 190              		.loc 1 263 0
 191 0010 1393     		str	r3, [sp, #76]
 264:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 192              		.loc 1 264 0
 193 0012 0023     		movs	r3, #0
 194 0014 1493     		str	r3, [sp, #80]
 265:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 195              		.loc 1 265 0
 196 0016 4FF46013 		mov	r3, #3670016
 197 001a 1593     		str	r3, [sp, #84]
 266:./Src/main.c  ****   {
 198              		.loc 1 266 0
 199 001c 0CA8     		add	r0, sp, #48
 200 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 201              	.LVL9:
 202 0022 08B1     		cbz	r0, .L16
 268:./Src/main.c  ****   }
 203              		.loc 1 268 0
 204 0024 FFF7FEFF 		bl	Error_Handler
 205              	.LVL10:
 206              	.L16:
 273:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 207              		.loc 1 273 0
 208 0028 0F23     		movs	r3, #15
 209 002a 0793     		str	r3, [sp, #28]
 275:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 210              		.loc 1 275 0
 211 002c 0221     		movs	r1, #2
 212 002e 0891     		str	r1, [sp, #32]
 276:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 213              		.loc 1 276 0
 214 0030 0023     		movs	r3, #0
 215 0032 0993     		str	r3, [sp, #36]
 277:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 216              		.loc 1 277 0
ARM GAS  /tmp/ccrbh29o.s 			page 11


 217 0034 4FF48062 		mov	r2, #1024
 218 0038 0A92     		str	r2, [sp, #40]
 278:./Src/main.c  **** 
 219              		.loc 1 278 0
 220 003a 0B93     		str	r3, [sp, #44]
 280:./Src/main.c  ****   {
 221              		.loc 1 280 0
 222 003c 07A8     		add	r0, sp, #28
 223 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 224              	.LVL11:
 225 0042 08B1     		cbz	r0, .L17
 282:./Src/main.c  ****   }
 226              		.loc 1 282 0
 227 0044 FFF7FEFF 		bl	Error_Handler
 228              	.LVL12:
 229              	.L17:
 285:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 230              		.loc 1 285 0
 231 0048 0223     		movs	r3, #2
 232 004a 0193     		str	r3, [sp, #4]
 286:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 233              		.loc 1 286 0
 234 004c 4FF44043 		mov	r3, #49152
 235 0050 0393     		str	r3, [sp, #12]
 287:./Src/main.c  ****   {
 236              		.loc 1 287 0
 237 0052 01A8     		add	r0, sp, #4
 238 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 239              	.LVL13:
 240 0058 08B1     		cbz	r0, .L18
 289:./Src/main.c  ****   }
 241              		.loc 1 289 0
 242 005a FFF7FEFF 		bl	Error_Handler
 243              	.LVL14:
 244              	.L18:
 294:./Src/main.c  **** 
 245              		.loc 1 294 0
 246 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 247              	.LVL15:
 248 0062 094B     		ldr	r3, .L20
 249 0064 A3FB0030 		umull	r3, r0, r3, r0
 250 0068 8009     		lsrs	r0, r0, #6
 251 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
 252              	.LVL16:
 298:./Src/main.c  **** 
 253              		.loc 1 298 0
 254 006e 0420     		movs	r0, #4
 255 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 256              	.LVL17:
 301:./Src/main.c  **** }
 257              		.loc 1 301 0
 258 0074 0022     		movs	r2, #0
 259 0076 1146     		mov	r1, r2
 260 0078 4FF0FF30 		mov	r0, #-1
 261 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262              	.LVL18:
 302:./Src/main.c  **** 
ARM GAS  /tmp/ccrbh29o.s 			page 12


 263              		.loc 1 302 0
 264 0080 17B0     		add	sp, sp, #92
 265              	.LCFI7:
 266              		.cfi_def_cfa_offset 4
 267              		@ sp needed
 268 0082 5DF804FB 		ldr	pc, [sp], #4
 269              	.L21:
 270 0086 00BF     		.align	2
 271              	.L20:
 272 0088 D34D6210 		.word	274877907
 273              		.cfi_endproc
 274              	.LFE65:
 276              		.global	__aeabi_i2d
 277              		.global	__aeabi_ddiv
 278              		.global	__aeabi_dcmpgt
 279              		.global	__aeabi_dcmplt
 280              		.global	__aeabi_dadd
 281              		.global	__aeabi_d2iz
 282              		.global	__aeabi_dsub
 283              		.global	__aeabi_fcmplt
 284              		.global	__aeabi_dmul
 285              		.section	.text.main,"ax",%progbits
 286              		.align	2
 287              		.global	main
 288              		.thumb
 289              		.thumb_func
 291              	main:
 292              	.LFB64:
 103:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 293              		.loc 1 103 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 120
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 298              	.LCFI8:
 299              		.cfi_def_cfa_offset 36
 300              		.cfi_offset 4, -36
 301              		.cfi_offset 5, -32
 302              		.cfi_offset 6, -28
 303              		.cfi_offset 7, -24
 304              		.cfi_offset 8, -20
 305              		.cfi_offset 9, -16
 306              		.cfi_offset 10, -12
 307              		.cfi_offset 11, -8
 308              		.cfi_offset 14, -4
 309 0004 9FB0     		sub	sp, sp, #124
 310              	.LCFI9:
 311              		.cfi_def_cfa_offset 160
 105:./Src/main.c  **** 
 312              		.loc 1 105 0
 313 0006 FFF7FEFF 		bl	HAL_Init
 314              	.LVL19:
 108:./Src/main.c  **** 
 315              		.loc 1 108 0
 316 000a FFF7FEFF 		bl	SystemClock_Config
 317              	.LVL20:
 110:./Src/main.c  **** 
ARM GAS  /tmp/ccrbh29o.s 			page 13


 318              		.loc 1 110 0
 319 000e FFF7FEFF 		bl	Button_init
 320              	.LVL21:
 112:./Src/main.c  **** 
 321              		.loc 1 112 0
 322 0012 0120     		movs	r0, #1
 323 0014 FFF7FEFF 		bl	Power_Set
 324              	.LVL22:
 115:./Src/main.c  ****   MX_I2C2_Init();
 325              		.loc 1 115 0
 326 0018 FFF7FEFF 		bl	Telemetry_init
 327              	.LVL23:
 116:./Src/main.c  **** 
 328              		.loc 1 116 0
 329 001c FFF7FEFF 		bl	MX_I2C2_Init
 330              	.LVL24:
 118:./Src/main.c  ****   Led_init();
 331              		.loc 1 118 0
 332 0020 FFF7FEFF 		bl	Buzzer_init
 333              	.LVL25:
 119:./Src/main.c  ****   IS_Charge_init();
 334              		.loc 1 119 0
 335 0024 FFF7FEFF 		bl	Led_init
 336              	.LVL26:
 120:./Src/main.c  **** 
 337              		.loc 1 120 0
 338 0028 FFF7FEFF 		bl	IS_Charge_init
 339              	.LVL27:
 122:./Src/main.c  ****   ADC_R_init();
 340              		.loc 1 122 0
 341 002c FFF7FEFF 		bl	ADC_L_init
 342              	.LVL28:
 123:./Src/main.c  ****   MotorL_init();
 343              		.loc 1 123 0
 344 0030 FFF7FEFF 		bl	ADC_R_init
 345              	.LVL29:
 124:./Src/main.c  ****   MotorR_init();
 346              		.loc 1 124 0
 347 0034 FFF7FEFF 		bl	MotorL_init
 348              	.LVL30:
 125:./Src/main.c  **** 
 349              		.loc 1 125 0
 350 0038 FFF7FEFF 		bl	MotorR_init
 351              	.LVL31:
 133:./Src/main.c  ****   while(IS_Button()) {
 352              		.loc 1 133 0
 353 003c 4FF4AF70 		mov	r0, #350
 354 0040 FFF7FEFF 		bl	HAL_Delay
 355              	.LVL32:
 356              	.LBB3:
 134:./Src/main.c  ****     Led_Set(0);
 357              		.loc 1 134 0
 358 0044 02E0     		b	.L23
 359              	.L24:
 135:./Src/main.c  ****   }
 360              		.loc 1 135 0
 361 0046 0020     		movs	r0, #0
ARM GAS  /tmp/ccrbh29o.s 			page 14


 362 0048 FFF7FEFF 		bl	Led_Set
 363              	.LVL33:
 364              	.L23:
 134:./Src/main.c  ****     Led_Set(0);
 365              		.loc 1 134 0
 366 004c FFF7FEFF 		bl	IS_Button
 367              	.LVL34:
 368 0050 0028     		cmp	r0, #0
 369 0052 F8D1     		bne	.L24
 370              	.LBE3:
 138:./Src/main.c  ****   Battery_TASK();
 371              		.loc 1 138 0
 372 0054 FFF7FEFF 		bl	applcation_init
 373              	.LVL35:
 139:./Src/main.c  **** 
 374              		.loc 1 139 0
 375 0058 FFF7FEFF 		bl	Battery_TASK
 376              	.LVL36:
 141:./Src/main.c  **** 
 377              		.loc 1 141 0
 378 005c FFF7FEFF 		bl	MX_IWDG_Init
 379              	.LVL37:
 143:./Src/main.c  ****   Buzzer_TwoBeep();
 380              		.loc 1 143 0
 381 0060 0120     		movs	r0, #1
 382 0062 FFF7FEFF 		bl	Led_Set
 383              	.LVL38:
 144:./Src/main.c  ****   HAL_Delay(350);
 384              		.loc 1 144 0
 385 0066 FFF7FEFF 		bl	Buzzer_TwoBeep
 386              	.LVL39:
 145:./Src/main.c  **** 
 387              		.loc 1 145 0
 388 006a 4FF4AF70 		mov	r0, #350
 389 006e FFF7FEFF 		bl	HAL_Delay
 390              	.LVL40:
 149:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 391              		.loc 1 149 0
 392 0072 A94E     		ldr	r6, .L93
 393 0074 0723     		movs	r3, #7
 394 0076 86F84030 		strb	r3, [r6, #64]
 150:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 395              		.loc 1 150 0
 396 007a 4FF47A73 		mov	r3, #1000
 397 007e 7364     		str	r3, [r6, #68]
 151:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 398              		.loc 1 151 0
 399 0080 06F14804 		add	r4, r6, #72
 400 0084 A54D     		ldr	r5, .L93+4
 401 0086 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 402 0088 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 403 008a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 404 008c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 405 008e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 406 0090 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 407 0092 95E80700 		ldmia	r5, {r0, r1, r2}
 408 0096 84E80700 		stmia	r4, {r0, r1, r2}
ARM GAS  /tmp/ccrbh29o.s 			page 15


 152:./Src/main.c  **** 	lcd.type = TYPE0;
 409              		.loc 1 152 0
 410 009a 0123     		movs	r3, #1
 411 009c 3370     		strb	r3, [r6]
 153:./Src/main.c  **** 
 412              		.loc 1 153 0
 413 009e 0023     		movs	r3, #0
 414 00a0 86F83C30 		strb	r3, [r6, #60]
 155:./Src/main.c  **** 		// error occured
 415              		.loc 1 155 0
 416 00a4 3046     		mov	r0, r6
 417 00a6 FFF7FEFF 		bl	LCD_Init
 418              	.LVL41:
 419 00aa 00B1     		cbz	r0, .L25
 420              	.L26:
 421 00ac FEE7     		b	.L26
 422              	.L25:
 160:./Src/main.c  **** 	LCD_SetLocation(&lcd, 0, 0);
 423              		.loc 1 160 0
 424 00ae 9A4C     		ldr	r4, .L93
 425 00b0 2046     		mov	r0, r4
 426 00b2 FFF7FEFF 		bl	LCD_ClearDisplay
 427              	.LVL42:
 161:./Src/main.c  **** 	LCD_WriteString(&lcd, "pi:");
 428              		.loc 1 161 0
 429 00b6 0022     		movs	r2, #0
 430 00b8 1146     		mov	r1, r2
 431 00ba 2046     		mov	r0, r4
 432 00bc FFF7FEFF 		bl	LCD_SetLocation
 433              	.LVL43:
 162:./Src/main.c  **** 	LCD_SetLocation(&lcd, 0, 1);
 434              		.loc 1 162 0
 435 00c0 9749     		ldr	r1, .L93+8
 436 00c2 2046     		mov	r0, r4
 437 00c4 FFF7FEFF 		bl	LCD_WriteString
 438              	.LVL44:
 163:./Src/main.c  **** 	LCD_WriteString(&lcd, "e:");
 439              		.loc 1 163 0
 440 00c8 0122     		movs	r2, #1
 441 00ca 0021     		movs	r1, #0
 442 00cc 2046     		mov	r0, r4
 443 00ce FFF7FEFF 		bl	LCD_SetLocation
 444              	.LVL45:
 164:./Src/main.c  **** 
 445              		.loc 1 164 0
 446 00d2 9449     		ldr	r1, .L93+12
 447 00d4 2046     		mov	r0, r4
 448 00d6 FFF7FEFF 		bl	LCD_WriteString
 449              	.LVL46:
 166:./Src/main.c  ****   MotorL_start();
 450              		.loc 1 166 0
 451 00da FFF7FEFF 		bl	MotorR_start
 452              	.LVL47:
 167:./Src/main.c  ****   //MotorR_pwm(80);
 453              		.loc 1 167 0
 454 00de FFF7FEFF 		bl	MotorL_start
 455              	.LVL48:
ARM GAS  /tmp/ccrbh29o.s 			page 16


 173:./Src/main.c  ****   while(1){
 456              		.loc 1 173 0
 457 00e2 4FF00009 		mov	r9, #0
 458 00e6 C846     		mov	r8, r9
 171:./Src/main.c  ****   uint8_t state = 0;
 459              		.loc 1 171 0
 460 00e8 40F6CA0B 		movw	fp, #2250
 461              	.LVL49:
 462              	.L58:
 175:./Src/main.c  ****     counterTemp = HAL_GetTick();
 463              		.loc 1 175 0
 464 00ec 0BF1010B 		add	fp, fp, #1
 465              	.LVL50:
 176:./Src/main.c  ****     if(IS_Button()) {
 466              		.loc 1 176 0
 467 00f0 FFF7FEFF 		bl	HAL_GetTick
 468              	.LVL51:
 469 00f4 8C4B     		ldr	r3, .L93+16
 470 00f6 1860     		str	r0, [r3]
 471              	.LBB4:
 177:./Src/main.c  ****       while(IS_Button()) {
 472              		.loc 1 177 0
 473 00f8 FFF7FEFF 		bl	IS_Button
 474              	.LVL52:
 475 00fc 18B9     		cbnz	r0, .L27
 476 00fe 0FE0     		b	.L28
 477              	.L29:
 179:./Src/main.c  ****       }
 478              		.loc 1 179 0
 479 0100 8A48     		ldr	r0, .L93+20
 480 0102 FFF7FEFF 		bl	HAL_IWDG_Refresh
 481              	.LVL53:
 482              	.L27:
 178:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 483              		.loc 1 178 0
 484 0106 FFF7FEFF 		bl	IS_Button
 485              	.LVL54:
 486 010a 0028     		cmp	r0, #0
 487 010c F8D1     		bne	.L29
 181:./Src/main.c  ****       HAL_Delay(350);
 488              		.loc 1 181 0
 489 010e FFF7FEFF 		bl	Buzzer_OneLongBeep
 490              	.LVL55:
 182:./Src/main.c  ****       Power_Set(0);
 491              		.loc 1 182 0
 492 0112 4FF4AF70 		mov	r0, #350
 493 0116 FFF7FEFF 		bl	HAL_Delay
 494              	.LVL56:
 183:./Src/main.c  ****     }
 495              		.loc 1 183 0
 496 011a 0020     		movs	r0, #0
 497 011c FFF7FEFF 		bl	Power_Set
 498              	.LVL57:
 499              	.L28:
 500              	.LBE4:
 185:./Src/main.c  ****       uint16_t distance = CLAMP(ADC_PA3() - 175, 0, 4095);
 501              		.loc 1 185 0
ARM GAS  /tmp/ccrbh29o.s 			page 17


 502 0120 834B     		ldr	r3, .L93+24
 503 0122 A3FB0B23 		umull	r2, r3, r3, fp
 504 0126 5B09     		lsrs	r3, r3, #5
 505 0128 4FF4FA72 		mov	r2, #500
 506 012c 02FB13B3 		mls	r3, r2, r3, fp
 507 0130 002B     		cmp	r3, #0
 508 0132 40F04F81 		bne	.L30
 509              	.LBB5:
 186:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 510              		.loc 1 186 0
 511 0136 FFF7FEFF 		bl	ADC_PA3
 512              	.LVL58:
 513 013a AF38     		subs	r0, r0, #175
 514 013c B0F5805F 		cmp	r0, #4096
 515 0140 08DA     		bge	.L59
 186:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 516              		.loc 1 186 0 is_stmt 0 discriminator 1
 517 0142 FFF7FEFF 		bl	ADC_PA3
 518              	.LVL59:
 519 0146 AF28     		cmp	r0, #175
 520 0148 07D4     		bmi	.L60
 186:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 521              		.loc 1 186 0 discriminator 3
 522 014a FFF7FEFF 		bl	ADC_PA3
 523              	.LVL60:
 524 014e AF38     		subs	r0, r0, #175
 525 0150 86B2     		uxth	r6, r0
 526 0152 03E0     		b	.L31
 527              	.L59:
 186:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 528              		.loc 1 186 0
 529 0154 40F6FF76 		movw	r6, #4095
 530 0158 00E0     		b	.L31
 531              	.L60:
 532 015a 0026     		movs	r6, #0
 533              	.L31:
 534              	.LVL61:
 187:./Src/main.c  ****       int speedL = -CLAMP((distance - 1000) +  CLAMP((steering / 10.0), -50, 50), -800, 800);
 535              		.loc 1 187 0 is_stmt 1 discriminator 8
 536 015c FFF7FEFF 		bl	ADC_PA2
 537              	.LVL62:
 538 0160 A0F50060 		sub	r0, r0, #2048
 539 0164 0FFA80FA 		sxth	r10, r0
 540              	.LVL63:
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 541              		.loc 1 188 0 discriminator 8
 542 0168 0396     		str	r6, [sp, #12]
 543 016a A6F57A70 		sub	r0, r6, #1000
 544 016e FFF7FEFF 		bl	__aeabi_i2d
 545              	.LVL64:
 546 0172 CDE90001 		strd	r0, [sp]
 547 0176 5046     		mov	r0, r10
 548 0178 FFF7FEFF 		bl	__aeabi_i2d
 549              	.LVL65:
 550 017c 0022     		movs	r2, #0
 551 017e 6D4B     		ldr	r3, .L93+28
 552 0180 FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  /tmp/ccrbh29o.s 			page 18


 553              	.LVL66:
 554 0184 0446     		mov	r4, r0
 555 0186 0D46     		mov	r5, r1
 556 0188 0022     		movs	r2, #0
 557 018a 6B4B     		ldr	r3, .L93+32
 558 018c FFF7FEFF 		bl	__aeabi_dcmpgt
 559              	.LVL67:
 560 0190 48B9     		cbnz	r0, .L61
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 561              		.loc 1 188 0 is_stmt 0 discriminator 2
 562 0192 0022     		movs	r2, #0
 563 0194 694B     		ldr	r3, .L93+36
 564 0196 2046     		mov	r0, r4
 565 0198 2946     		mov	r1, r5
 566 019a FFF7FEFF 		bl	__aeabi_dcmplt
 567              	.LVL68:
 568 019e 28B1     		cbz	r0, .L84
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 569              		.loc 1 188 0
 570 01a0 0020     		movs	r0, #0
 571 01a2 6649     		ldr	r1, .L93+36
 572 01a4 04E0     		b	.L32
 573              	.L61:
 574 01a6 0020     		movs	r0, #0
 575 01a8 6349     		ldr	r1, .L93+32
 576 01aa 01E0     		b	.L32
 577              	.L84:
 578 01ac 2046     		mov	r0, r4
 579 01ae 2946     		mov	r1, r5
 580              	.L32:
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 581              		.loc 1 188 0 discriminator 8
 582 01b0 DDE90023 		ldrd	r2, [sp]
 583 01b4 FFF7FEFF 		bl	__aeabi_dadd
 584              	.LVL69:
 585 01b8 0022     		movs	r2, #0
 586 01ba 614B     		ldr	r3, .L93+40
 587 01bc FFF7FEFF 		bl	__aeabi_dcmpgt
 588              	.LVL70:
 589 01c0 0028     		cmp	r0, #0
 590 01c2 41D1     		bne	.L63
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 591              		.loc 1 188 0 discriminator 10
 592 01c4 0022     		movs	r2, #0
 593 01c6 5C4B     		ldr	r3, .L93+32
 594 01c8 2046     		mov	r0, r4
 595 01ca 2946     		mov	r1, r5
 596 01cc FFF7FEFF 		bl	__aeabi_dcmpgt
 597              	.LVL71:
 598 01d0 48B9     		cbnz	r0, .L64
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 599              		.loc 1 188 0 discriminator 13
 600 01d2 0022     		movs	r2, #0
 601 01d4 594B     		ldr	r3, .L93+36
 602 01d6 2046     		mov	r0, r4
 603 01d8 2946     		mov	r1, r5
 604 01da FFF7FEFF 		bl	__aeabi_dcmplt
ARM GAS  /tmp/ccrbh29o.s 			page 19


 605              	.LVL72:
 606 01de 28B1     		cbz	r0, .L85
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 607              		.loc 1 188 0
 608 01e0 0020     		movs	r0, #0
 609 01e2 5649     		ldr	r1, .L93+36
 610 01e4 04E0     		b	.L35
 611              	.L64:
 612 01e6 0020     		movs	r0, #0
 613 01e8 5349     		ldr	r1, .L93+32
 614 01ea 01E0     		b	.L35
 615              	.L85:
 616 01ec 2046     		mov	r0, r4
 617 01ee 2946     		mov	r1, r5
 618              	.L35:
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 619              		.loc 1 188 0 discriminator 19
 620 01f0 DDE90023 		ldrd	r2, [sp]
 621 01f4 FFF7FEFF 		bl	__aeabi_dadd
 622              	.LVL73:
 623 01f8 0022     		movs	r2, #0
 624 01fa 524B     		ldr	r3, .L93+44
 625 01fc FFF7FEFF 		bl	__aeabi_dcmplt
 626              	.LVL74:
 627 0200 20BB     		cbnz	r0, .L66
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 628              		.loc 1 188 0 discriminator 21
 629 0202 0022     		movs	r2, #0
 630 0204 4C4B     		ldr	r3, .L93+32
 631 0206 2046     		mov	r0, r4
 632 0208 2946     		mov	r1, r5
 633 020a FFF7FEFF 		bl	__aeabi_dcmpgt
 634              	.LVL75:
 635 020e 48B9     		cbnz	r0, .L67
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 636              		.loc 1 188 0 discriminator 24
 637 0210 0022     		movs	r2, #0
 638 0212 4A4B     		ldr	r3, .L93+36
 639 0214 2046     		mov	r0, r4
 640 0216 2946     		mov	r1, r5
 641 0218 FFF7FEFF 		bl	__aeabi_dcmplt
 642              	.LVL76:
 643 021c 28B1     		cbz	r0, .L86
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 644              		.loc 1 188 0
 645 021e 0020     		movs	r0, #0
 646 0220 4649     		ldr	r1, .L93+36
 647 0222 04E0     		b	.L37
 648              	.L67:
 649 0224 0020     		movs	r0, #0
 650 0226 4449     		ldr	r1, .L93+32
 651 0228 01E0     		b	.L37
 652              	.L86:
 653 022a 2046     		mov	r0, r4
 654 022c 2946     		mov	r1, r5
 655              	.L37:
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
ARM GAS  /tmp/ccrbh29o.s 			page 20


 656              		.loc 1 188 0 discriminator 30
 657 022e DDE90023 		ldrd	r2, [sp]
 658 0232 FFF7FEFF 		bl	__aeabi_dadd
 659              	.LVL77:
 660 0236 0246     		mov	r2, r0
 661 0238 0B46     		mov	r3, r1
 662 023a 1046     		mov	r0, r2
 663 023c 03F10041 		add	r1, r3, #-2147483648
 664 0240 FFF7FEFF 		bl	__aeabi_d2iz
 665              	.LVL78:
 666 0244 0746     		mov	r7, r0
 667 0246 03E0     		b	.L34
 668              	.L63:
 188:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  CLAMP((steering / 10.0), -50, 50), -800, 800);
 669              		.loc 1 188 0
 670 0248 3F4F     		ldr	r7, .L93+48
 671 024a 01E0     		b	.L34
 672              	.L66:
 673 024c 4FF44877 		mov	r7, #800
 674              	.L34:
 675              	.LVL79:
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 676              		.loc 1 189 0 is_stmt 1 discriminator 32
 677 0250 0022     		movs	r2, #0
 678 0252 394B     		ldr	r3, .L93+32
 679 0254 2046     		mov	r0, r4
 680 0256 2946     		mov	r1, r5
 681 0258 FFF7FEFF 		bl	__aeabi_dcmpgt
 682              	.LVL80:
 683 025c 48B9     		cbnz	r0, .L69
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 684              		.loc 1 189 0 is_stmt 0 discriminator 2
 685 025e 0022     		movs	r2, #0
 686 0260 364B     		ldr	r3, .L93+36
 687 0262 2046     		mov	r0, r4
 688 0264 2946     		mov	r1, r5
 689 0266 FFF7FEFF 		bl	__aeabi_dcmplt
 690              	.LVL81:
 691 026a 28B1     		cbz	r0, .L87
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 692              		.loc 1 189 0
 693 026c 0022     		movs	r2, #0
 694 026e 334B     		ldr	r3, .L93+36
 695 0270 04E0     		b	.L39
 696              	.L69:
 697 0272 0022     		movs	r2, #0
 698 0274 304B     		ldr	r3, .L93+32
 699 0276 01E0     		b	.L39
 700              	.L87:
 701 0278 2246     		mov	r2, r4
 702 027a 2B46     		mov	r3, r5
 703              	.L39:
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 704              		.loc 1 189 0 discriminator 8
 705 027c DDE90001 		ldrd	r0, [sp]
 706 0280 FFF7FEFF 		bl	__aeabi_dsub
 707              	.LVL82:
ARM GAS  /tmp/ccrbh29o.s 			page 21


 708 0284 0022     		movs	r2, #0
 709 0286 2E4B     		ldr	r3, .L93+40
 710 0288 FFF7FEFF 		bl	__aeabi_dcmpgt
 711              	.LVL83:
 712 028c 0028     		cmp	r0, #0
 713 028e 41D1     		bne	.L71
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 714              		.loc 1 189 0 discriminator 10
 715 0290 0022     		movs	r2, #0
 716 0292 294B     		ldr	r3, .L93+32
 717 0294 2046     		mov	r0, r4
 718 0296 2946     		mov	r1, r5
 719 0298 FFF7FEFF 		bl	__aeabi_dcmpgt
 720              	.LVL84:
 721 029c 48B9     		cbnz	r0, .L72
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 722              		.loc 1 189 0 discriminator 13
 723 029e 0022     		movs	r2, #0
 724 02a0 264B     		ldr	r3, .L93+36
 725 02a2 2046     		mov	r0, r4
 726 02a4 2946     		mov	r1, r5
 727 02a6 FFF7FEFF 		bl	__aeabi_dcmplt
 728              	.LVL85:
 729 02aa 28B1     		cbz	r0, .L88
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 730              		.loc 1 189 0
 731 02ac 0022     		movs	r2, #0
 732 02ae 234B     		ldr	r3, .L93+36
 733 02b0 04E0     		b	.L42
 734              	.L72:
 735 02b2 0022     		movs	r2, #0
 736 02b4 204B     		ldr	r3, .L93+32
 737 02b6 01E0     		b	.L42
 738              	.L88:
 739 02b8 2246     		mov	r2, r4
 740 02ba 2B46     		mov	r3, r5
 741              	.L42:
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 742              		.loc 1 189 0 discriminator 19
 743 02bc DDE90001 		ldrd	r0, [sp]
 744 02c0 FFF7FEFF 		bl	__aeabi_dsub
 745              	.LVL86:
 746 02c4 0022     		movs	r2, #0
 747 02c6 1F4B     		ldr	r3, .L93+44
 748 02c8 FFF7FEFF 		bl	__aeabi_dcmplt
 749              	.LVL87:
 750 02cc 0028     		cmp	r0, #0
 751 02ce 3DD1     		bne	.L74
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 752              		.loc 1 189 0 discriminator 21
 753 02d0 0022     		movs	r2, #0
 754 02d2 194B     		ldr	r3, .L93+32
 755 02d4 2046     		mov	r0, r4
 756 02d6 2946     		mov	r1, r5
 757 02d8 FFF7FEFF 		bl	__aeabi_dcmpgt
 758              	.LVL88:
 759 02dc 48B9     		cbnz	r0, .L75
ARM GAS  /tmp/ccrbh29o.s 			page 22


 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 760              		.loc 1 189 0 discriminator 24
 761 02de 0022     		movs	r2, #0
 762 02e0 164B     		ldr	r3, .L93+36
 763 02e2 2046     		mov	r0, r4
 764 02e4 2946     		mov	r1, r5
 765 02e6 FFF7FEFF 		bl	__aeabi_dcmplt
 766              	.LVL89:
 767 02ea 20B1     		cbz	r0, .L44
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 768              		.loc 1 189 0
 769 02ec 0024     		movs	r4, #0
 770 02ee 134D     		ldr	r5, .L93+36
 771 02f0 01E0     		b	.L44
 772              	.L75:
 773 02f2 0024     		movs	r4, #0
 774 02f4 104D     		ldr	r5, .L93+32
 775              	.L44:
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 776              		.loc 1 189 0 discriminator 30
 777 02f6 2246     		mov	r2, r4
 778 02f8 2B46     		mov	r3, r5
 779 02fa DDE90001 		ldrd	r0, [sp]
 780 02fe FFF7FEFF 		bl	__aeabi_dsub
 781              	.LVL90:
 782 0302 0246     		mov	r2, r0
 783 0304 0B46     		mov	r3, r1
 784 0306 1046     		mov	r0, r2
 785 0308 03F10041 		add	r1, r3, #-2147483648
 786 030c FFF7FEFF 		bl	__aeabi_d2iz
 787              	.LVL91:
 788 0310 0446     		mov	r4, r0
 789 0312 1DE0     		b	.L41
 790              	.L71:
 189:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 791              		.loc 1 189 0
 792 0314 0C4C     		ldr	r4, .L93+48
 793 0316 1BE0     		b	.L41
 794              	.L94:
 795              		.align	2
 796              	.L93:
 797 0318 00000000 		.word	lcd
 798 031c 00000000 		.word	hi2c2
 799 0320 00000000 		.word	.LC0
 800 0324 04000000 		.word	.LC1
 801 0328 00000000 		.word	counterTemp
 802 032c 00000000 		.word	hiwdg
 803 0330 D34D6210 		.word	274877907
 804 0334 00002440 		.word	1076101120
 805 0338 00004940 		.word	1078525952
 806 033c 000049C0 		.word	-1068957696
 807 0340 00008940 		.word	1082720256
 808 0344 000089C0 		.word	-1064763392
 809 0348 E0FCFFFF 		.word	-800
 810              	.L74:
 811 034c 4FF44874 		mov	r4, #800
 812              	.L41:
ARM GAS  /tmp/ccrbh29o.s 			page 23


 813              	.LVL92:
 190:./Src/main.c  ****         if (distance > 850) {
 814              		.loc 1 190 0 is_stmt 1 discriminator 32
 815 0350 08F13203 		add	r3, r8, #50
 816 0354 9F42     		cmp	r7, r3
 817 0356 1CDA     		bge	.L46
 190:./Src/main.c  ****         if (distance > 850) {
 818              		.loc 1 190 0 is_stmt 0 discriminator 1
 819 0358 A8F13208 		sub	r8, r8, #50
 820              	.LVL93:
 821 035c 4745     		cmp	r7, r8
 822 035e 18DD     		ble	.L46
 190:./Src/main.c  ****         if (distance > 850) {
 823              		.loc 1 190 0 discriminator 2
 824 0360 09F13203 		add	r3, r9, #50
 825 0364 9C42     		cmp	r4, r3
 826 0366 14DA     		bge	.L46
 190:./Src/main.c  ****         if (distance > 850) {
 827              		.loc 1 190 0 discriminator 3
 828 0368 A9F13209 		sub	r9, r9, #50
 829              	.LVL94:
 830 036c 4C45     		cmp	r4, r9
 831 036e 10DD     		ble	.L46
 191:./Src/main.c  ****           MotorL_pwm(speedL);
 832              		.loc 1 191 0 is_stmt 1
 833 0370 40F25233 		movw	r3, #850
 834 0374 9E42     		cmp	r6, r3
 835 0376 06D9     		bls	.L47
 192:./Src/main.c  ****           MotorR_pwm(speedR);
 836              		.loc 1 192 0
 837 0378 38B2     		sxth	r0, r7
 838 037a FFF7FEFF 		bl	MotorL_pwm
 839              	.LVL95:
 193:./Src/main.c  ****         } else {
 840              		.loc 1 193 0
 841 037e 20B2     		sxth	r0, r4
 842 0380 FFF7FEFF 		bl	MotorR_pwm
 843              	.LVL96:
 844 0384 05E0     		b	.L46
 845              	.L47:
 195:./Src/main.c  ****           MotorR_pwm(0);
 846              		.loc 1 195 0
 847 0386 0020     		movs	r0, #0
 848 0388 FFF7FEFF 		bl	MotorL_pwm
 849              	.LVL97:
 196:./Src/main.c  ****         }
 850              		.loc 1 196 0
 851 038c 0020     		movs	r0, #0
 852 038e FFF7FEFF 		bl	MotorR_pwm
 853              	.LVL98:
 854              	.L46:
 199:./Src/main.c  ****         MotorL_pwm(0);
 855              		.loc 1 199 0
 856 0392 40F6B833 		movw	r3, #3000
 857 0396 9E42     		cmp	r6, r3
 858 0398 0CD9     		bls	.L48
 200:./Src/main.c  ****         MotorR_pwm(0);
ARM GAS  /tmp/ccrbh29o.s 			page 24


 859              		.loc 1 200 0
 860 039a 0020     		movs	r0, #0
 861 039c FFF7FEFF 		bl	MotorL_pwm
 862              	.LVL99:
 201:./Src/main.c  ****         while(1) {
 863              		.loc 1 201 0
 864 03a0 0020     		movs	r0, #0
 865 03a2 FFF7FEFF 		bl	MotorR_pwm
 866              	.LVL100:
 867              	.L49:
 203:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 868              		.loc 1 203 0 discriminator 1
 869 03a6 0020     		movs	r0, #0
 870 03a8 FFF7FEFF 		bl	Power_Set
 871              	.LVL101:
 204:./Src/main.c  ****         }
 872              		.loc 1 204 0 discriminator 1
 873 03ac 4848     		ldr	r0, .L95+8
 874 03ae FFF7FEFF 		bl	HAL_IWDG_Refresh
 875              	.LVL102:
 876 03b2 F8E7     		b	.L49
 877              	.L48:
 209:./Src/main.c  ****       sprintf(str, "%i;%i\n\r", distance, steering);
 878              		.loc 1 209 0
 879 03b4 6422     		movs	r2, #100
 880 03b6 0021     		movs	r1, #0
 881 03b8 05A8     		add	r0, sp, #20
 882 03ba FFF7FEFF 		bl	memset
 883              	.LVL103:
 210:./Src/main.c  ****       Console_Log(str);
 884              		.loc 1 210 0
 885 03be 5346     		mov	r3, r10
 886 03c0 039A     		ldr	r2, [sp, #12]
 887 03c2 4449     		ldr	r1, .L95+12
 888 03c4 05A8     		add	r0, sp, #20
 889 03c6 FFF7FEFF 		bl	sprintf
 890              	.LVL104:
 211:./Src/main.c  **** 
 891              		.loc 1 211 0
 892 03ca 05A8     		add	r0, sp, #20
 893 03cc FFF7FEFF 		bl	Console_Log
 894              	.LVL105:
 215:./Src/main.c  ****     }
 895              		.loc 1 215 0
 896 03d0 A146     		mov	r9, r4
 214:./Src/main.c  ****       lastSpeedR = speedR;
 897              		.loc 1 214 0
 898 03d2 B846     		mov	r8, r7
 899              	.LVL106:
 900              	.L30:
 901              	.LBE5:
 220:./Src/main.c  ****     //Current_Motor_TASK();
 902              		.loc 1 220 0
 903 03d4 FFF7FEFF 		bl	Battery_TASK
 904              	.LVL107:
 905              	.LBB6:
 227:./Src/main.c  ****       MotorL_pwm(0);
ARM GAS  /tmp/ccrbh29o.s 			page 25


 906              		.loc 1 227 0
 907 03d8 FFF7FEFF 		bl	GET_BatteryAverage
 908              	.LVL108:
 909 03dc 3E49     		ldr	r1, .L95+16
 910 03de FFF7FEFF 		bl	__aeabi_fcmplt
 911              	.LVL109:
 912 03e2 0028     		cmp	r0, #0
 913 03e4 56D1     		bne	.L50
 227:./Src/main.c  ****       MotorL_pwm(0);
 914              		.loc 1 227 0 is_stmt 0 discriminator 1
 915 03e6 FFF7FEFF 		bl	getMotorCurrentR
 916              	.LVL110:
 917 03ea FFF7FEFF 		bl	__aeabi_i2d
 918              	.LVL111:
 919 03ee 36A3     		adr	r3, .L95
 920 03f0 D3E90023 		ldrd	r2, [r3]
 921 03f4 FFF7FEFF 		bl	__aeabi_dmul
 922              	.LVL112:
 923 03f8 0022     		movs	r2, #0
 924 03fa 0023     		movs	r3, #0
 925 03fc FFF7FEFF 		bl	__aeabi_dcmplt
 926              	.LVL113:
 927 0400 78B1     		cbz	r0, .L89
 227:./Src/main.c  ****       MotorL_pwm(0);
 928              		.loc 1 227 0 discriminator 2
 929 0402 FFF7FEFF 		bl	getMotorCurrentR
 930              	.LVL114:
 931 0406 FFF7FEFF 		bl	__aeabi_i2d
 932              	.LVL115:
 933 040a 2FA3     		adr	r3, .L95
 934 040c D3E90023 		ldrd	r2, [r3]
 935 0410 FFF7FEFF 		bl	__aeabi_dmul
 936              	.LVL116:
 937 0414 0022     		movs	r2, #0
 938 0416 314B     		ldr	r3, .L95+20
 939 0418 FFF7FEFF 		bl	__aeabi_dcmplt
 940              	.LVL117:
 941 041c 0028     		cmp	r0, #0
 942 041e 39D1     		bne	.L50
 943 0420 0DE0     		b	.L53
 944              	.L89:
 227:./Src/main.c  ****       MotorL_pwm(0);
 945              		.loc 1 227 0 discriminator 3
 946 0422 FFF7FEFF 		bl	getMotorCurrentR
 947              	.LVL118:
 948 0426 FFF7FEFF 		bl	__aeabi_i2d
 949              	.LVL119:
 950 042a 27A3     		adr	r3, .L95
 951 042c D3E90023 		ldrd	r2, [r3]
 952 0430 FFF7FEFF 		bl	__aeabi_dmul
 953              	.LVL120:
 954 0434 0022     		movs	r2, #0
 955 0436 2A4B     		ldr	r3, .L95+24
 956 0438 FFF7FEFF 		bl	__aeabi_dcmpgt
 957              	.LVL121:
 958 043c 50BB     		cbnz	r0, .L50
 959              	.L53:
ARM GAS  /tmp/ccrbh29o.s 			page 26


 227:./Src/main.c  ****       MotorL_pwm(0);
 960              		.loc 1 227 0 discriminator 4
 961 043e FFF7FEFF 		bl	getMotorCurrentL
 962              	.LVL122:
 963 0442 FFF7FEFF 		bl	__aeabi_i2d
 964              	.LVL123:
 965 0446 20A3     		adr	r3, .L95
 966 0448 D3E90023 		ldrd	r2, [r3]
 967 044c FFF7FEFF 		bl	__aeabi_dmul
 968              	.LVL124:
 969 0450 0022     		movs	r2, #0
 970 0452 0023     		movs	r3, #0
 971 0454 FFF7FEFF 		bl	__aeabi_dcmplt
 972              	.LVL125:
 973 0458 70B1     		cbz	r0, .L90
 227:./Src/main.c  ****       MotorL_pwm(0);
 974              		.loc 1 227 0 discriminator 5
 975 045a FFF7FEFF 		bl	getMotorCurrentL
 976              	.LVL126:
 977 045e FFF7FEFF 		bl	__aeabi_i2d
 978              	.LVL127:
 979 0462 19A3     		adr	r3, .L95
 980 0464 D3E90023 		ldrd	r2, [r3]
 981 0468 FFF7FEFF 		bl	__aeabi_dmul
 982              	.LVL128:
 983 046c 0022     		movs	r2, #0
 984 046e 1B4B     		ldr	r3, .L95+20
 985 0470 FFF7FEFF 		bl	__aeabi_dcmplt
 986              	.LVL129:
 987 0474 70B9     		cbnz	r0, .L50
 988 0476 1CE0     		b	.L56
 989              	.L90:
 227:./Src/main.c  ****       MotorL_pwm(0);
 990              		.loc 1 227 0 discriminator 6
 991 0478 FFF7FEFF 		bl	getMotorCurrentL
 992              	.LVL130:
 993 047c FFF7FEFF 		bl	__aeabi_i2d
 994              	.LVL131:
 995 0480 11A3     		adr	r3, .L95
 996 0482 D3E90023 		ldrd	r2, [r3]
 997 0486 FFF7FEFF 		bl	__aeabi_dmul
 998              	.LVL132:
 999 048a 0022     		movs	r2, #0
 1000 048c 144B     		ldr	r3, .L95+24
 1001 048e FFF7FEFF 		bl	__aeabi_dcmpgt
 1002              	.LVL133:
 1003 0492 70B1     		cbz	r0, .L56
 1004              	.L50:
 228:./Src/main.c  ****       MotorR_pwm(0);
 1005              		.loc 1 228 0 is_stmt 1
 1006 0494 0020     		movs	r0, #0
 1007 0496 FFF7FEFF 		bl	MotorL_pwm
 1008              	.LVL134:
 229:./Src/main.c  ****       Buzzer_OneLongBeep();
 1009              		.loc 1 229 0
 1010 049a 0020     		movs	r0, #0
 1011 049c FFF7FEFF 		bl	MotorR_pwm
ARM GAS  /tmp/ccrbh29o.s 			page 27


 1012              	.LVL135:
 230:./Src/main.c  ****       HAL_Delay(350);
 1013              		.loc 1 230 0
 1014 04a0 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1015              	.LVL136:
 231:./Src/main.c  ****       Power_Set(0);
 1016              		.loc 1 231 0
 1017 04a4 4FF4AF70 		mov	r0, #350
 1018 04a8 FFF7FEFF 		bl	HAL_Delay
 1019              	.LVL137:
 232:./Src/main.c  ****     }
 1020              		.loc 1 232 0
 1021 04ac 0020     		movs	r0, #0
 1022 04ae FFF7FEFF 		bl	Power_Set
 1023              	.LVL138:
 1024              	.L56:
 1025              	.LBE6:
 239:./Src/main.c  **** 
 1026              		.loc 1 239 0
 1027 04b2 0748     		ldr	r0, .L95+8
 1028 04b4 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1029              	.LVL139:
 241:./Src/main.c  **** 
 1030              		.loc 1 241 0
 1031 04b8 FFF7FEFF 		bl	HAL_GetTick
 1032              	.LVL140:
 1033 04bc 094B     		ldr	r3, .L95+28
 1034 04be 1B68     		ldr	r3, [r3]
 1035 04c0 C01A     		subs	r0, r0, r3
 1036 04c2 094A     		ldr	r2, .L95+32
 1037 04c4 1060     		str	r0, [r2]
 245:./Src/main.c  **** 
 1038              		.loc 1 245 0
 1039 04c6 11E6     		b	.L58
 1040              	.L96:
 1041              		.align	3
 1042              	.L95:
 1043 04c8 7B14AE47 		.word	1202590843
 1044 04cc E17A943F 		.word	1066695393
 1045 04d0 00000000 		.word	hiwdg
 1046 04d4 08000000 		.word	.LC2
 1047 04d8 0000F841 		.word	1106771968
 1048 04dc 000034C0 		.word	-1070333952
 1049 04e0 00003440 		.word	1077149696
 1050 04e4 00000000 		.word	counterTemp
 1051 04e8 00000000 		.word	counterTempTT
 1052              		.cfi_endproc
 1053              	.LFE64:
 1055              		.comm	lcd,140,4
 1056              		.comm	counterTempTT,4,4
 1057              		.comm	counterTemp,4,4
 1058              		.global	speed
 1059              		.comm	hiwdg,16,4
 1060              		.section	.rodata.str1.4,"aMS",%progbits,1
 1061              		.align	2
 1062              	.LC0:
 1063 0000 70693A00 		.ascii	"pi:\000"
ARM GAS  /tmp/ccrbh29o.s 			page 28


 1064              	.LC1:
 1065 0004 653A00   		.ascii	"e:\000"
 1066 0007 00       		.space	1
 1067              	.LC2:
 1068 0008 25693B25 		.ascii	"%i;%i\012\015\000"
 1068      690A0D00 
 1069              		.section	.bss.speed,"aw",%nobits
 1070              		.align	1
 1073              	speed:
 1074 0000 0000     		.space	2
 1075              		.text
 1076              	.Letext0:
 1077              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1078              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1079              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1080              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1081              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1082              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1083              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1084              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1085              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1086              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 1087              		.file 12 "./Inc/pcf8574.h"
 1088              		.file 13 "./Inc/hd44780.h"
 1089              		.file 14 "./Drivers/CMSIS/Include/core_cm3.h"
 1090              		.file 15 "./Inc/ADC_R.h"
 1091              		.file 16 "./Inc/ADC_L.h"
 1092              		.file 17 "./Inc/motor_R.h"
 1093              		.file 18 "./Inc/motor_L.h"
 1094              		.file 19 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1095              		.file 20 "./Inc/varie.h"
 1096              		.file 21 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1097              		.file 22 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/stdio.h"
 1098              		.file 23 "./Inc/application.h"
 1099              		.file 24 "./Inc/telemetry.h"
 1100              		.file 25 "<built-in>"
ARM GAS  /tmp/ccrbh29o.s 			page 29


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccrbh29o.s:20     .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccrbh29o.s:25     .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccrbh29o.s:62     .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/ccrbh29o.s:68     .text.Error_Handler:00000000 $t
     /tmp/ccrbh29o.s:73     .text.Error_Handler:00000000 Error_Handler
     /tmp/ccrbh29o.s:97     .text.MX_IWDG_Init:00000000 $t
     /tmp/ccrbh29o.s:101    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/ccrbh29o.s:156    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/ccrbh29o.s:163    .text.SystemClock_Config:00000000 $t
     /tmp/ccrbh29o.s:168    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccrbh29o.s:272    .text.SystemClock_Config:00000088 $d
     /tmp/ccrbh29o.s:286    .text.main:00000000 $t
     /tmp/ccrbh29o.s:291    .text.main:00000000 main
     /tmp/ccrbh29o.s:797    .text.main:00000318 $d
                            *COM*:0000008c lcd
                            *COM*:00000004 counterTemp
     /tmp/ccrbh29o.s:811    .text.main:0000034c $t
     /tmp/ccrbh29o.s:1043   .text.main:000004c8 $d
                            *COM*:00000004 counterTempTT
     /tmp/ccrbh29o.s:1073   .bss.speed:00000000 speed
     /tmp/ccrbh29o.s:1061   .rodata.str1.4:00000000 $d
     /tmp/ccrbh29o.s:1070   .bss.speed:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_ddiv
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_dadd
__aeabi_d2iz
__aeabi_dsub
__aeabi_fcmplt
__aeabi_dmul
HAL_Init
Button_init
Power_Set
Telemetry_init
MX_I2C2_Init
Buzzer_init
Led_init
ARM GAS  /tmp/ccrbh29o.s 			page 30


IS_Charge_init
ADC_L_init
ADC_R_init
MotorL_init
MotorR_init
HAL_Delay
Led_Set
IS_Button
applcation_init
Battery_TASK
Buzzer_TwoBeep
LCD_Init
LCD_ClearDisplay
LCD_SetLocation
LCD_WriteString
MotorR_start
MotorL_start
HAL_GetTick
HAL_IWDG_Refresh
Buzzer_OneLongBeep
ADC_PA3
ADC_PA2
hi2c2
MotorL_pwm
MotorR_pwm
memset
sprintf
Console_Log
GET_BatteryAverage
getMotorCurrentR
getMotorCurrentL
