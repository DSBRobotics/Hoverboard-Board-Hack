ARM GAS  /tmp/ccKxeGvP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PPM_ISR_Callback,"ax",%progbits
  20              		.align	2
  21              		.global	PPM_ISR_Callback
  22              		.thumb
  23              		.thumb_func
  25              	PPM_ISR_Callback:
  26              	.LFB64:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/ccKxeGvP.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "eeprom.h"
  46:./Src/main.c  **** #include "motor_L.h"
  47:./Src/main.c  **** #include "motor_R.h"
  48:./Src/main.c  **** #include "varie.h"
  49:./Src/main.c  **** #include "ADC_L.h"
  50:./Src/main.c  **** #include "ADC_R.h"
  51:./Src/main.c  **** #include "delay.h"
  52:./Src/main.c  **** #include "pid.h"
  53:./Src/main.c  **** #include "application.h"
  54:./Src/main.c  **** #include "telemetry.h"
  55:./Src/main.c  **** #include "hd44780.h"
  56:./Src/main.c  **** #include <math.h>
  57:./Src/main.c  **** 
  58:./Src/main.c  **** // copied from STMBL
  59:./Src/main.c  **** #define NO 0
  60:./Src/main.c  **** #define YES 1
  61:./Src/main.c  **** #define ABS(a) (((a) < 0.0) ? -(a) : (a))
  62:./Src/main.c  **** #define LIMIT(x, lowhigh) (((x) > (lowhigh)) ? (lowhigh) : (((x) < (-lowhigh)) ? (-lowhigh) : (x)))
  63:./Src/main.c  **** #define SAT(x, lowhigh) (((x) > (lowhigh)) ? (1.0) : (((x) < (-lowhigh)) ? (-1.0) : (0.0)))
  64:./Src/main.c  **** #define SAT2(x, low, high) (((x) > (high)) ? (1.0) : (((x) < (low)) ? (-1.0) : (0.0)))
  65:./Src/main.c  **** #define STEP(from, to, step) (((from) < (to)) ? (MIN((from) + (step), (to))) : (MAX((from) - (step)
  66:./Src/main.c  **** #define DEG(a) ((a)*M_PI / 180.0)
  67:./Src/main.c  **** #define RAD(a) ((a)*180.0 / M_PI)
  68:./Src/main.c  **** #define SIGN(a) (((a) < 0.0) ? (-1.0) : (((a) > 0.0) ? (1.0) : (0.0)))
  69:./Src/main.c  **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  70:./Src/main.c  **** #define SCALE(value, high, max) MIN(MAX(((max) - (value)) / ((max) - (high)), 0.0), 1.0)
  71:./Src/main.c  **** #define MIN(a, b) (((a) < (b)) ? (a) : (b))
  72:./Src/main.c  **** #define MAX(a, b) (((a) > (b)) ? (a) : (b))
  73:./Src/main.c  **** #define MIN3(a, b, c) MIN(a, MIN(b, c))
  74:./Src/main.c  **** #define MAX3(a, b, c) MAX(a, MAX(b, c))
  75:./Src/main.c  **** 
  76:./Src/main.c  **** #define PI 3.14159265
  77:./Src/main.c  **** 
  78:./Src/main.c  **** /* Virtual address defined by the user: 0xFFFF value is prohibited */
  79:./Src/main.c  **** uint16_t VirtAddVarTab[NB_OF_VAR] = {0x1337};
  80:./Src/main.c  **** uint16_t VarDataTab[NB_OF_VAR] = {0};
  81:./Src/main.c  **** uint16_t VarValue = 0;
  82:./Src/main.c  **** 
  83:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  84:./Src/main.c  **** 
  85:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  86:./Src/main.c  **** void SystemClock_Config(void);
  87:./Src/main.c  **** void Error_Handler(void);
  88:./Src/main.c  **** //extern struct PID_dati pid_R_;
ARM GAS  /tmp/ccKxeGvP.s 			page 3


  89:./Src/main.c  **** static void MX_IWDG_Init(void);
  90:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  91:./Src/main.c  **** 
  92:./Src/main.c  **** volatile __IO int16_t speed = 0;
  93:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  94:./Src/main.c  **** extern struct MOTOR_Ldati motorL;
  95:./Src/main.c  **** extern struct MOTOR_Rdati motorR;
  96:./Src/main.c  **** 
  97:./Src/main.c  **** extern uint8_t LCDerrorFlag;
  98:./Src/main.c  **** //extern struct COMMAND_data commandsequence;
  99:./Src/main.c  **** 
 100:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
 101:./Src/main.c  **** LCD_PCF8574_HandleTypeDef lcd;
 102:./Src/main.c  **** extern I2C_HandleTypeDef hi2c2;
 103:./Src/main.c  **** uint16_t saveValue = 0;
 104:./Src/main.c  **** 
 105:./Src/main.c  **** TIM_HandleTypeDef htim2;
 106:./Src/main.c  **** 
 107:./Src/main.c  **** uint16_t captured_value[8] = {0};
 108:./Src/main.c  **** uint16_t rc_data[5] = {0};
 109:./Src/main.c  **** uint8_t pointer = 0;
 110:./Src/main.c  **** uint8_t data_ready = 0;
 111:./Src/main.c  **** /* USER CODE END PV */
 112:./Src/main.c  **** uint8_t rx_count = 0;
 113:./Src/main.c  **** uint32_t timeout = 0;
 114:./Src/main.c  **** 
 115:./Src/main.c  **** void PPM_ISR_Callback() {
  28              		.loc 1 115 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
 116:./Src/main.c  ****   // Dummy loop with 16 bit count wrap around
 117:./Src/main.c  ****   uint16_t rc_delay = TIM2->CNT;
  37              		.loc 1 117 0
  38 0002 4FF08043 		mov	r3, #1073741824
  39 0006 5C6A     		ldr	r4, [r3, #36]
  40 0008 A4B2     		uxth	r4, r4
  41              	.LVL0:
 118:./Src/main.c  ****   _stop_timer();
  42              		.loc 1 118 0
  43 000a FFF7FEFF 		bl	_stop_timer
  44              	.LVL1:
 119:./Src/main.c  **** 
 120:./Src/main.c  ****   if (rc_delay > 3000) {
  45              		.loc 1 120 0
  46 000e 40F6B833 		movw	r3, #3000
  47 0012 9C42     		cmp	r4, r3
  48 0014 03D9     		bls	.L2
 121:./Src/main.c  ****     rx_count = 0;
  49              		.loc 1 121 0
  50 0016 0022     		movs	r2, #0
  51 0018 104B     		ldr	r3, .L8
ARM GAS  /tmp/ccKxeGvP.s 			page 4


  52 001a 1A70     		strb	r2, [r3]
  53 001c 1AE0     		b	.L3
  54              	.L2:
 122:./Src/main.c  ****   }
 123:./Src/main.c  ****   else if (rx_count < 6){
  55              		.loc 1 123 0
  56 001e 0F4B     		ldr	r3, .L8
  57 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  58 0022 052B     		cmp	r3, #5
  59 0024 16D8     		bhi	.L3
 124:./Src/main.c  ****     timeout = 0;
  60              		.loc 1 124 0
  61 0026 0021     		movs	r1, #0
  62 0028 0D4A     		ldr	r2, .L8+4
  63 002a 1160     		str	r1, [r2]
 125:./Src/main.c  ****     captured_value[rx_count] = CLAMP(rc_delay, 1000, 2000) - 1000;
  64              		.loc 1 125 0
  65 002c B4F5FA6F 		cmp	r4, #2000
  66 0030 06D8     		bhi	.L5
  67              		.loc 1 125 0 is_stmt 0 discriminator 1
  68 0032 B4F57A7F 		cmp	r4, #1000
  69 0036 06D3     		bcc	.L6
  70              		.loc 1 125 0 discriminator 3
  71 0038 A4F57A74 		sub	r4, r4, #1000
  72              	.LVL2:
  73 003c A4B2     		uxth	r4, r4
  74              	.LVL3:
  75 003e 03E0     		b	.L4
  76              	.LVL4:
  77              	.L5:
  78              		.loc 1 125 0
  79 0040 4FF47A74 		mov	r4, #1000
  80              	.LVL5:
  81 0044 00E0     		b	.L4
  82              	.LVL6:
  83              	.L6:
  84 0046 0024     		movs	r4, #0
  85              	.LVL7:
  86              	.L4:
  87              		.loc 1 125 0 discriminator 8
  88 0048 064A     		ldr	r2, .L8+8
  89 004a 22F81340 		strh	r4, [r2, r3, lsl #1]	@ movhi
 126:./Src/main.c  ****     rx_count++;
  90              		.loc 1 126 0 is_stmt 1 discriminator 8
  91 004e 0133     		adds	r3, r3, #1
  92 0050 024A     		ldr	r2, .L8
  93 0052 1370     		strb	r3, [r2]
  94              	.L3:
 127:./Src/main.c  ****   }
 128:./Src/main.c  ****   _init_us();
  95              		.loc 1 128 0
  96 0054 FFF7FEFF 		bl	_init_us
  97              	.LVL8:
  98 0058 10BD     		pop	{r4, pc}
  99              	.L9:
 100 005a 00BF     		.align	2
 101              	.L8:
ARM GAS  /tmp/ccKxeGvP.s 			page 5


 102 005c 00000000 		.word	.LANCHOR0
 103 0060 00000000 		.word	.LANCHOR1
 104 0064 00000000 		.word	.LANCHOR2
 105              		.cfi_endproc
 106              	.LFE64:
 108              		.section	.text.saveConfig,"ax",%progbits
 109              		.align	2
 110              		.global	saveConfig
 111              		.thumb
 112              		.thumb_func
 114              	saveConfig:
 115              	.LFB66:
 129:./Src/main.c  **** }
 130:./Src/main.c  **** 
 131:./Src/main.c  **** int main(void)
 132:./Src/main.c  **** {
 133:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 134:./Src/main.c  ****   HAL_Init();
 135:./Src/main.c  **** 
 136:./Src/main.c  ****   /* Configure the system clock */
 137:./Src/main.c  ****   SystemClock_Config();
 138:./Src/main.c  **** 
 139:./Src/main.c  ****   Button_init();
 140:./Src/main.c  **** 
 141:./Src/main.c  ****   Power_Set(1);
 142:./Src/main.c  **** 
 143:./Src/main.c  ****   HAL_Delay(10);
 144:./Src/main.c  **** 
 145:./Src/main.c  ****   ADC_L_init();
 146:./Src/main.c  ****   ADC_R_init();
 147:./Src/main.c  **** 
 148:./Src/main.c  **** 
 149:./Src/main.c  ****   //Telemetry_init();
 150:./Src/main.c  ****   MX_I2C2_Init();
 151:./Src/main.c  **** 
 152:./Src/main.c  ****   /* Unlock the Flash Program Erase controller */
 153:./Src/main.c  ****   //HAL_FLASH_Unlock();
 154:./Src/main.c  **** 
 155:./Src/main.c  ****   /* EEPROM Init */
 156:./Src/main.c  ****   //EE_Init();
 157:./Src/main.c  **** 
 158:./Src/main.c  **** 
 159:./Src/main.c  ****   lcd.pcf8574.PCF_I2C_ADDRESS = 0x27;
 160:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 5;
 161:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 162:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 163:./Src/main.c  **** 	lcd.type = TYPE0;
 164:./Src/main.c  **** 
 165:./Src/main.c  **** 	if(LCD_Init(&lcd)!=LCD_OK){
 166:./Src/main.c  **** 		// error occured
 167:./Src/main.c  **** 		//TODO while(1);
 168:./Src/main.c  **** 	}
 169:./Src/main.c  **** 
 170:./Src/main.c  **** 	LCD_ClearDisplay(&lcd);
 171:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 172:./Src/main.c  **** 	LCD_WriteString(&lcd, "SesselOtter V5.2");
 173:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
ARM GAS  /tmp/ccKxeGvP.s 			page 6


 174:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
 175:./Src/main.c  **** 
 176:./Src/main.c  ****   Buzzer_init();
 177:./Src/main.c  ****   Led_init();
 178:./Src/main.c  ****   IS_Charge_init();
 179:./Src/main.c  **** 
 180:./Src/main.c  **** //  Timer_init();
 181:./Src/main.c  ****   //Timer_init();
 182:./Src/main.c  ****   //MX_TIM2_Init();
 183:./Src/main.c  **** 
 184:./Src/main.c  **** 
 185:./Src/main.c  ****   //PID_init(0,900); //pwm limit
 186:./Src/main.c  ****   //PID_set_L_costant(0.05,0.01,0.0);
 187:./Src/main.c  ****   //PID_set_R_costant(2.0,0.5,0.0);
 188:./Src/main.c  **** 
 189:./Src/main.c  **** //DebugPin_init();
 190:./Src/main.c  ****   //HAL_Delay(350);
 191:./Src/main.c  ****   while(IS_Button()) {
 192:./Src/main.c  ****     Led_Set(0);
 193:./Src/main.c  ****   }
 194:./Src/main.c  **** 
 195:./Src/main.c  **** 
 196:./Src/main.c  ****   MotorL_init();
 197:./Src/main.c  ****   MotorR_init();
 198:./Src/main.c  **** 
 199:./Src/main.c  ****   applcation_init();
 200:./Src/main.c  ****   Battery_TASK();
 201:./Src/main.c  **** 
 202:./Src/main.c  ****   MX_IWDG_Init();
 203:./Src/main.c  **** 
 204:./Src/main.c  ****   Led_Set(1);
 205:./Src/main.c  ****   Buzzer_TwoBeep();
 206:./Src/main.c  ****   HAL_Delay(250);
 207:./Src/main.c  **** 
 208:./Src/main.c  ****   MotorR_start();
 209:./Src/main.c  ****   MotorL_start();
 210:./Src/main.c  ****   //MotorR_pwm(80);
 211:./Src/main.c  ****   //MotorL_pwm(-200);
 212:./Src/main.c  **** 
 213:./Src/main.c  ****   Timer_init();
 214:./Src/main.c  **** 
 215:./Src/main.c  ****   //MotorR_pwm(200);
 216:./Src/main.c  ****   //MotorL_pwm(-150);
 217:./Src/main.c  **** 
 218:./Src/main.c  ****   //MotorR_pwm(-50);
 219:./Src/main.c  ****   //MotorL_pwm(50);
 220:./Src/main.c  ****   int16_t speedR = 0;
 221:./Src/main.c  ****   int16_t speedL = 0;
 222:./Src/main.c  **** 
 223:./Src/main.c  ****   uint8_t state = 0;
 224:./Src/main.c  **** 
 225:./Src/main.c  ****   if(!LCDerrorFlag) {
 226:./Src/main.c  **** 
 227:./Src/main.c  ****     LCD_ClearDisplay(&lcd);
 228:./Src/main.c  ****     HAL_Delay(5);
 229:./Src/main.c  ****     LCD_SetLocation(&lcd, 0, 1);
 230:./Src/main.c  ****   	LCD_WriteString(&lcd, "Bat:");
ARM GAS  /tmp/ccKxeGvP.s 			page 7


 231:./Src/main.c  ****     LCD_SetLocation(&lcd, 8, 1);
 232:./Src/main.c  ****     LCD_WriteString(&lcd, "V");
 233:./Src/main.c  **** 
 234:./Src/main.c  ****     LCD_SetLocation(&lcd, 15, 1);
 235:./Src/main.c  ****     LCD_WriteString(&lcd, "A");
 236:./Src/main.c  **** 
 237:./Src/main.c  ****     LCD_SetLocation(&lcd, 0, 0);
 238:./Src/main.c  ****   	LCD_WriteString(&lcd, "Speed:");
 239:./Src/main.c  ****     LCD_SetLocation(&lcd, 12, 0);
 240:./Src/main.c  ****     LCD_WriteString(&lcd, "km/h");
 241:./Src/main.c  ****   }
 242:./Src/main.c  **** 
 243:./Src/main.c  ****   uint32_t sinValue = 1999;
 244:./Src/main.c  **** 
 245:./Src/main.c  ****   int lastSpeedL = 0, lastSpeedR = 0;
 246:./Src/main.c  ****   int32_t lastMotorposR = 0, lastMotorposL = 0;
 247:./Src/main.c  ****   float speedReading = 0.0;
 248:./Src/main.c  ****   while(1){
 249:./Src/main.c  ****     sinValue++;
 250:./Src/main.c  ****     if ((sinValue) % (100) == 0) {
 251:./Src/main.c  ****       //state = !state;
 252:./Src/main.c  ****       //Led_Set(state);
 253:./Src/main.c  ****       //Console_Log("otter!\n\r");
 254:./Src/main.c  ****       //char str[200];
 255:./Src/main.c  ****       //memset(&str[0], 0, sizeof(str));
 256:./Src/main.c  ****       //sprintf(str, "%i;%i;%i;%i;%i;%i\n\r", captured_value[0], captured_value[1], captured_value[
 257:./Src/main.c  ****       int readR = -(CLAMP((((captured_value[1]-500)-(captured_value[0]-500)/2.0)*(captured_value[2]
 258:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 259:./Src/main.c  **** 
 260:./Src/main.c  ****       int16_t tempL = speedL;
 261:./Src/main.c  ****       speedL -=  tempL / 1.0;
 262:./Src/main.c  ****       speedL += readL / 1.0;
 263:./Src/main.c  **** 
 264:./Src/main.c  ****       int16_t tempR = speedR;
 265:./Src/main.c  ****       speedR -=  tempR / 1.0;
 266:./Src/main.c  ****       speedR += readR / 1.0;
 267:./Src/main.c  **** 
 268:./Src/main.c  **** 
 269:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 270:./Src/main.c  ****         float scale = get_powerMax(GET_BatteryAverage());
 271:./Src/main.c  ****         MotorR_pwm((int)(speedR * scale));
 272:./Src/main.c  ****         MotorL_pwm((int)(speedL * scale));
 273:./Src/main.c  ****       }
 274:./Src/main.c  ****       lastSpeedL = speedL;
 275:./Src/main.c  ****       lastSpeedR = speedR;
 276:./Src/main.c  ****       //MotorR_pwm(-250);
 277:./Src/main.c  ****       //MotorL_pwm(250);
 278:./Src/main.c  ****       //Console_Log(str);
 279:./Src/main.c  ****     }
 280:./Src/main.c  ****     timeout++;
 281:./Src/main.c  **** 
 282:./Src/main.c  ****     if (timeout > 1000) {
 283:./Src/main.c  ****       MotorR_pwm(0);
 284:./Src/main.c  ****       MotorL_pwm(0);
 285:./Src/main.c  ****     }
 286:./Src/main.c  **** 
 287:./Src/main.c  **** 
ARM GAS  /tmp/ccKxeGvP.s 			page 8


 288:./Src/main.c  ****     if (counterTemp + 500 < HAL_GetTick()) {
 289:./Src/main.c  ****       speedReading = MAX(ABS(((motorL.motorpos - lastMotorposL) / 90.0)*3.6), ABS(((motorR.motorpos
 290:./Src/main.c  ****       counterTemp = HAL_GetTick();
 291:./Src/main.c  ****       lastMotorposL = motorL.motorpos;
 292:./Src/main.c  ****       lastMotorposR = motorR.motorpos;
 293:./Src/main.c  ****     }
 294:./Src/main.c  **** 
 295:./Src/main.c  ****     if(IS_Button()) {
 296:./Src/main.c  ****       MotorL_pwm(0);
 297:./Src/main.c  ****       MotorR_pwm(0);
 298:./Src/main.c  ****       while(IS_Button()) {
 299:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 300:./Src/main.c  ****       }
 301:./Src/main.c  ****       Buzzer_OneLongBeep();
 302:./Src/main.c  ****       HAL_Delay(350);
 303:./Src/main.c  ****       Power_Set(0);
 304:./Src/main.c  ****     }
 305:./Src/main.c  **** 
 306:./Src/main.c  ****     if ((sinValue) % (1500) == 0 && !LCDerrorFlag) {
 307:./Src/main.c  ****       //LCD_SetLocation(&lcd, 4, 0);
 308:./Src/main.c  ****       //LCD_WriteFloat(&lcd,distance/1345.0,2);
 309:./Src/main.c  ****       if (speedReading < 10.0) {
 310:./Src/main.c  ****         LCD_SetLocation(&lcd, 7, 0);
 311:./Src/main.c  ****         LCD_WriteString(&lcd, " ");
 312:./Src/main.c  ****         LCD_SetLocation(&lcd, 8, 0);
 313:./Src/main.c  ****       } else {
 314:./Src/main.c  ****         LCD_SetLocation(&lcd, 7, 0);
 315:./Src/main.c  ****       }
 316:./Src/main.c  ****       LCD_WriteFloat(&lcd,speedReading,2);
 317:./Src/main.c  ****       LCD_SetLocation(&lcd, 4, 1);
 318:./Src/main.c  ****       LCD_WriteFloat(&lcd,GET_BatteryAverage(),1);
 319:./Src/main.c  ****       float current = ABS(getMotorCurrentR() * 0.02) + ABS(getMotorCurrentL() * 0.02);
 320:./Src/main.c  ****       if (current < 10.0) {
 321:./Src/main.c  ****         LCD_SetLocation(&lcd, 10, 1);
 322:./Src/main.c  ****         LCD_WriteString(&lcd, " ");
 323:./Src/main.c  ****         LCD_SetLocation(&lcd, 11, 1);
 324:./Src/main.c  ****       } else {
 325:./Src/main.c  ****         LCD_SetLocation(&lcd, 10, 1);
 326:./Src/main.c  ****       }
 327:./Src/main.c  ****       LCD_WriteFloat(&lcd,ABS(current),2);
 328:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 329:./Src/main.c  ****       LCD_WriteString(&lcd, "A");
 330:./Src/main.c  ****     }
 331:./Src/main.c  **** 
 332:./Src/main.c  **** 
 333:./Src/main.c  **** 
 334:./Src/main.c  **** 
 335:./Src/main.c  **** 
 336:./Src/main.c  ****     Battery_TASK();
 337:./Src/main.c  ****     //Current_Motor_TASK();
 338:./Src/main.c  ****     //sWiiNunchuck_TASK();
 339:./Src/main.c  ****     //applcation_TASK();
 340:./Src/main.c  ****     //Telemetry_TASK();
 341:./Src/main.c  **** 
 342:./Src/main.c  ****     //Batteria Scarica?
 343:./Src/main.c  **** 
 344:./Src/main.c  ****     if(ABS(getMotorCurrentR() * 0.02) > 47.0 || ABS(getMotorCurrentL() * 0.02) > 47.0){
ARM GAS  /tmp/ccKxeGvP.s 			page 9


 345:./Src/main.c  ****       MotorL_pwm(0);
 346:./Src/main.c  ****       MotorR_pwm(0);
 347:./Src/main.c  ****       Buzzer_OneLongBeep();
 348:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 349:./Src/main.c  ****       HAL_Delay(5);
 350:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 351:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 352:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 353:./Src/main.c  ****       LCD_WriteString(&lcd, "Overcurrent.");
 354:./Src/main.c  ****       HAL_Delay(500);
 355:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 356:./Src/main.c  ****       HAL_Delay(500);
 357:./Src/main.c  ****       Power_Set(0);
 358:./Src/main.c  ****     }
 359:./Src/main.c  **** 
 360:./Src/main.c  ****     if(GET_BatteryAverage() < 31.0){
 361:./Src/main.c  ****       MotorL_pwm(0);
 362:./Src/main.c  ****       MotorR_pwm(0);
 363:./Src/main.c  ****       Buzzer_OneLongBeep();
 364:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 365:./Src/main.c  ****       HAL_Delay(5);
 366:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 367:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 368:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 369:./Src/main.c  ****       LCD_WriteString(&lcd, "Battery low.");
 370:./Src/main.c  ****       HAL_Delay(500);
 371:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 372:./Src/main.c  ****       HAL_Delay(500);
 373:./Src/main.c  ****       Power_Set(0);
 374:./Src/main.c  ****     }
 375:./Src/main.c  **** 
 376:./Src/main.c  **** 
 377:./Src/main.c  ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 378:./Src/main.c  **** 
 379:./Src/main.c  ****     //counterTempTT = HAL_GetTick() - counterTemp;
 380:./Src/main.c  **** 
 381:./Src/main.c  **** 
 382:./Src/main.c  **** 
 383:./Src/main.c  ****   }
 384:./Src/main.c  **** 
 385:./Src/main.c  **** }
 386:./Src/main.c  **** 
 387:./Src/main.c  **** void saveConfig() {
 116              		.loc 1 387 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120 0000 08B5     		push	{r3, lr}
 121              	.LCFI1:
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 3, -8
 124              		.cfi_offset 14, -4
 388:./Src/main.c  ****   EE_WriteVariable(VirtAddVarTab[0], saveValue);
 125              		.loc 1 388 0
 126 0002 034B     		ldr	r3, .L12
 127 0004 1988     		ldrh	r1, [r3]
 128 0006 034B     		ldr	r3, .L12+4
ARM GAS  /tmp/ccKxeGvP.s 			page 10


 129 0008 1888     		ldrh	r0, [r3]
 130 000a FFF7FEFF 		bl	EE_WriteVariable
 131              	.LVL9:
 132 000e 08BD     		pop	{r3, pc}
 133              	.L13:
 134              		.align	2
 135              	.L12:
 136 0010 00000000 		.word	.LANCHOR3
 137 0014 00000000 		.word	.LANCHOR4
 138              		.cfi_endproc
 139              	.LFE66:
 141              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 142              		.align	2
 143              		.global	HAL_ADC_ConvCpltCallback
 144              		.thumb
 145              		.thumb_func
 147              	HAL_ADC_ConvCpltCallback:
 148              	.LFB69:
 389:./Src/main.c  **** }
 390:./Src/main.c  **** 
 391:./Src/main.c  **** /** System Clock Configuration
 392:./Src/main.c  **** */
 393:./Src/main.c  **** void SystemClock_Config(void)
 394:./Src/main.c  **** {
 395:./Src/main.c  **** 
 396:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 397:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 398:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 399:./Src/main.c  **** 
 400:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 401:./Src/main.c  ****     */
 402:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 403:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 404:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 405:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 406:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 407:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 408:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 409:./Src/main.c  ****   {
 410:./Src/main.c  ****     Error_Handler();
 411:./Src/main.c  ****   }
 412:./Src/main.c  **** 
 413:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 414:./Src/main.c  ****     */
 415:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 416:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 417:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 418:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 419:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 420:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 421:./Src/main.c  **** 
 422:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 423:./Src/main.c  ****   {
 424:./Src/main.c  ****     Error_Handler();
 425:./Src/main.c  ****   }
 426:./Src/main.c  **** 
 427:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
ARM GAS  /tmp/ccKxeGvP.s 			page 11


 428:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 429:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 430:./Src/main.c  ****   {
 431:./Src/main.c  ****     Error_Handler();
 432:./Src/main.c  ****   }
 433:./Src/main.c  **** 
 434:./Src/main.c  ****     /**Configure the Systick interrupt time
 435:./Src/main.c  ****     */
 436:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 437:./Src/main.c  **** 
 438:./Src/main.c  ****     /**Configure the Systick
 439:./Src/main.c  ****     */
 440:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 441:./Src/main.c  **** 
 442:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 443:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 444:./Src/main.c  **** }
 445:./Src/main.c  **** 
 446:./Src/main.c  **** /* IWDG init function */
 447:./Src/main.c  **** static void MX_IWDG_Init(void)
 448:./Src/main.c  **** {
 449:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 450:./Src/main.c  ****   hiwdg.Instance = IWDG;
 451:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 452:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 453:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 454:./Src/main.c  ****   {
 455:./Src/main.c  ****     Error_Handler();
 456:./Src/main.c  ****   }
 457:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 458:./Src/main.c  **** }
 459:./Src/main.c  **** 
 460:./Src/main.c  **** 
 461:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 149              		.loc 1 461 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              	.LVL10:
 154 0000 10B5     		push	{r4, lr}
 155              	.LCFI2:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 4, -8
 158              		.cfi_offset 14, -4
 159 0002 0446     		mov	r4, r0
 462:./Src/main.c  ****   if(hadc->Instance == ADC1){
 160              		.loc 1 462 0
 161 0004 0268     		ldr	r2, [r0]
 162 0006 064B     		ldr	r3, .L18
 163 0008 9A42     		cmp	r2, r3
 164 000a 01D1     		bne	.L15
 463:./Src/main.c  ****     ADC_R_callback();
 165              		.loc 1 463 0
 166 000c FFF7FEFF 		bl	ADC_R_callback
 167              	.LVL11:
 168              	.L15:
 464:./Src/main.c  ****   }
ARM GAS  /tmp/ccKxeGvP.s 			page 12


 465:./Src/main.c  ****   if(hadc->Instance == ADC3){
 169              		.loc 1 465 0
 170 0010 2268     		ldr	r2, [r4]
 171 0012 044B     		ldr	r3, .L18+4
 172 0014 9A42     		cmp	r2, r3
 173 0016 01D1     		bne	.L14
 466:./Src/main.c  ****     ADC_L_callback();
 174              		.loc 1 466 0
 175 0018 FFF7FEFF 		bl	ADC_L_callback
 176              	.LVL12:
 177              	.L14:
 178 001c 10BD     		pop	{r4, pc}
 179              	.LVL13:
 180              	.L19:
 181 001e 00BF     		.align	2
 182              	.L18:
 183 0020 00240140 		.word	1073816576
 184 0024 003C0140 		.word	1073822720
 185              		.cfi_endproc
 186              	.LFE69:
 188              		.section	.text.Error_Handler,"ax",%progbits
 189              		.align	2
 190              		.global	Error_Handler
 191              		.thumb
 192              		.thumb_func
 194              	Error_Handler:
 195              	.LFB70:
 467:./Src/main.c  ****   }
 468:./Src/main.c  **** }
 469:./Src/main.c  **** 
 470:./Src/main.c  **** 
 471:./Src/main.c  **** /**
 472:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 473:./Src/main.c  ****   * @param  None
 474:./Src/main.c  ****   * @retval None
 475:./Src/main.c  ****   */
 476:./Src/main.c  **** void Error_Handler(void)
 477:./Src/main.c  **** {
 196              		.loc 1 477 0
 197              		.cfi_startproc
 198              		@ Volatile: function does not return.
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201 0000 08B5     		push	{r3, lr}
 202              	.LCFI3:
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 3, -8
 205              		.cfi_offset 14, -4
 478:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 479:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 480:./Src/main.c  ****   MotorR_stop();
 206              		.loc 1 480 0
 207 0002 FFF7FEFF 		bl	MotorR_stop
 208              	.LVL14:
 481:./Src/main.c  ****   MotorL_stop();
 209              		.loc 1 481 0
 210 0006 FFF7FEFF 		bl	MotorL_stop
ARM GAS  /tmp/ccKxeGvP.s 			page 13


 211              	.LVL15:
 212              	.L21:
 213 000a FEE7     		b	.L21
 214              		.cfi_endproc
 215              	.LFE70:
 217              		.section	.text.MX_IWDG_Init,"ax",%progbits
 218              		.align	2
 219              		.thumb
 220              		.thumb_func
 222              	MX_IWDG_Init:
 223              	.LFB68:
 448:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 224              		.loc 1 448 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 8
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228 0000 00B5     		push	{lr}
 229              	.LCFI4:
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 14, -4
 232 0002 83B0     		sub	sp, sp, #12
 233              	.LCFI5:
 234              		.cfi_def_cfa_offset 16
 235              	.LBB2:
 449:./Src/main.c  ****   hiwdg.Instance = IWDG;
 236              		.loc 1 449 0
 237 0004 0E4B     		ldr	r3, .L26
 238 0006 DA69     		ldr	r2, [r3, #28]
 239 0008 42F40062 		orr	r2, r2, #2048
 240 000c DA61     		str	r2, [r3, #28]
 241 000e DB69     		ldr	r3, [r3, #28]
 242 0010 03F40063 		and	r3, r3, #2048
 243 0014 0193     		str	r3, [sp, #4]
 244 0016 019B     		ldr	r3, [sp, #4]
 245              	.LBE2:
 450:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 246              		.loc 1 450 0
 247 0018 0A48     		ldr	r0, .L26+4
 248 001a 0B4B     		ldr	r3, .L26+8
 249 001c 0360     		str	r3, [r0]
 451:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 250              		.loc 1 451 0
 251 001e 0123     		movs	r3, #1
 252 0020 4360     		str	r3, [r0, #4]
 452:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 253              		.loc 1 452 0
 254 0022 40F6FF73 		movw	r3, #4095
 255 0026 8360     		str	r3, [r0, #8]
 453:./Src/main.c  ****   {
 256              		.loc 1 453 0
 257 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 258              	.LVL16:
 259 002c 08B1     		cbz	r0, .L24
 455:./Src/main.c  ****   }
 260              		.loc 1 455 0
 261 002e FFF7FEFF 		bl	Error_Handler
 262              	.LVL17:
ARM GAS  /tmp/ccKxeGvP.s 			page 14


 263              	.L24:
 457:./Src/main.c  **** }
 264              		.loc 1 457 0
 265 0032 0448     		ldr	r0, .L26+4
 266 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 267              	.LVL18:
 458:./Src/main.c  **** 
 268              		.loc 1 458 0
 269 0038 03B0     		add	sp, sp, #12
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 4
 272              		@ sp needed
 273 003a 5DF804FB 		ldr	pc, [sp], #4
 274              	.L27:
 275 003e 00BF     		.align	2
 276              	.L26:
 277 0040 00100240 		.word	1073876992
 278 0044 00000000 		.word	hiwdg
 279 0048 00300040 		.word	1073754112
 280              		.cfi_endproc
 281              	.LFE68:
 283              		.section	.text.SystemClock_Config,"ax",%progbits
 284              		.align	2
 285              		.global	SystemClock_Config
 286              		.thumb
 287              		.thumb_func
 289              	SystemClock_Config:
 290              	.LFB67:
 394:./Src/main.c  **** 
 291              		.loc 1 394 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 88
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295 0000 00B5     		push	{lr}
 296              	.LCFI7:
 297              		.cfi_def_cfa_offset 4
 298              		.cfi_offset 14, -4
 299 0002 97B0     		sub	sp, sp, #92
 300              	.LCFI8:
 301              		.cfi_def_cfa_offset 96
 402:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 302              		.loc 1 402 0
 303 0004 0223     		movs	r3, #2
 304 0006 0C93     		str	r3, [sp, #48]
 403:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 305              		.loc 1 403 0
 306 0008 0122     		movs	r2, #1
 307 000a 1092     		str	r2, [sp, #64]
 404:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 308              		.loc 1 404 0
 309 000c 1022     		movs	r2, #16
 310 000e 1192     		str	r2, [sp, #68]
 405:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 311              		.loc 1 405 0
 312 0010 1393     		str	r3, [sp, #76]
 406:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 313              		.loc 1 406 0
ARM GAS  /tmp/ccKxeGvP.s 			page 15


 314 0012 0023     		movs	r3, #0
 315 0014 1493     		str	r3, [sp, #80]
 407:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 316              		.loc 1 407 0
 317 0016 4FF46013 		mov	r3, #3670016
 318 001a 1593     		str	r3, [sp, #84]
 408:./Src/main.c  ****   {
 319              		.loc 1 408 0
 320 001c 0CA8     		add	r0, sp, #48
 321 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 322              	.LVL19:
 323 0022 08B1     		cbz	r0, .L29
 410:./Src/main.c  ****   }
 324              		.loc 1 410 0
 325 0024 FFF7FEFF 		bl	Error_Handler
 326              	.LVL20:
 327              	.L29:
 415:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 328              		.loc 1 415 0
 329 0028 0F23     		movs	r3, #15
 330 002a 0793     		str	r3, [sp, #28]
 417:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 331              		.loc 1 417 0
 332 002c 0221     		movs	r1, #2
 333 002e 0891     		str	r1, [sp, #32]
 418:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 334              		.loc 1 418 0
 335 0030 0023     		movs	r3, #0
 336 0032 0993     		str	r3, [sp, #36]
 419:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 337              		.loc 1 419 0
 338 0034 4FF48062 		mov	r2, #1024
 339 0038 0A92     		str	r2, [sp, #40]
 420:./Src/main.c  **** 
 340              		.loc 1 420 0
 341 003a 0B93     		str	r3, [sp, #44]
 422:./Src/main.c  ****   {
 342              		.loc 1 422 0
 343 003c 07A8     		add	r0, sp, #28
 344 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 345              	.LVL21:
 346 0042 08B1     		cbz	r0, .L30
 424:./Src/main.c  ****   }
 347              		.loc 1 424 0
 348 0044 FFF7FEFF 		bl	Error_Handler
 349              	.LVL22:
 350              	.L30:
 427:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 351              		.loc 1 427 0
 352 0048 0223     		movs	r3, #2
 353 004a 0193     		str	r3, [sp, #4]
 428:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 354              		.loc 1 428 0
 355 004c 4FF44043 		mov	r3, #49152
 356 0050 0393     		str	r3, [sp, #12]
 429:./Src/main.c  ****   {
 357              		.loc 1 429 0
ARM GAS  /tmp/ccKxeGvP.s 			page 16


 358 0052 01A8     		add	r0, sp, #4
 359 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 360              	.LVL23:
 361 0058 08B1     		cbz	r0, .L31
 431:./Src/main.c  ****   }
 362              		.loc 1 431 0
 363 005a FFF7FEFF 		bl	Error_Handler
 364              	.LVL24:
 365              	.L31:
 436:./Src/main.c  **** 
 366              		.loc 1 436 0
 367 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 368              	.LVL25:
 369 0062 094B     		ldr	r3, .L33
 370 0064 A3FB0030 		umull	r3, r0, r3, r0
 371 0068 8009     		lsrs	r0, r0, #6
 372 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
 373              	.LVL26:
 440:./Src/main.c  **** 
 374              		.loc 1 440 0
 375 006e 0420     		movs	r0, #4
 376 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 377              	.LVL27:
 443:./Src/main.c  **** }
 378              		.loc 1 443 0
 379 0074 0022     		movs	r2, #0
 380 0076 1146     		mov	r1, r2
 381 0078 4FF0FF30 		mov	r0, #-1
 382 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 383              	.LVL28:
 444:./Src/main.c  **** 
 384              		.loc 1 444 0
 385 0080 17B0     		add	sp, sp, #92
 386              	.LCFI9:
 387              		.cfi_def_cfa_offset 4
 388              		@ sp needed
 389 0082 5DF804FB 		ldr	pc, [sp], #4
 390              	.L34:
 391 0086 00BF     		.align	2
 392              	.L33:
 393 0088 D34D6210 		.word	274877907
 394              		.cfi_endproc
 395              	.LFE67:
 397              		.global	__aeabi_i2d
 398              		.global	__aeabi_dmul
 399              		.global	__aeabi_dsub
 400              		.global	__aeabi_ddiv
 401              		.global	__aeabi_dcmpgt
 402              		.global	__aeabi_dcmplt
 403              		.global	__aeabi_d2iz
 404              		.global	__aeabi_dadd
 405              		.global	__aeabi_i2f
 406              		.global	__aeabi_fmul
 407              		.global	__aeabi_f2iz
 408              		.global	__aeabi_d2f
 409              		.global	__aeabi_fcmplt
 410              		.global	__aeabi_f2d
ARM GAS  /tmp/ccKxeGvP.s 			page 17


 411              		.section	.text.main,"ax",%progbits
 412              		.align	2
 413              		.global	main
 414              		.thumb
 415              		.thumb_func
 417              	main:
 418              	.LFB65:
 132:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 419              		.loc 1 132 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 40
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 424              	.LCFI10:
 425              		.cfi_def_cfa_offset 36
 426              		.cfi_offset 4, -36
 427              		.cfi_offset 5, -32
 428              		.cfi_offset 6, -28
 429              		.cfi_offset 7, -24
 430              		.cfi_offset 8, -20
 431              		.cfi_offset 9, -16
 432              		.cfi_offset 10, -12
 433              		.cfi_offset 11, -8
 434              		.cfi_offset 14, -4
 435 0004 8DB0     		sub	sp, sp, #52
 436              	.LCFI11:
 437              		.cfi_def_cfa_offset 88
 134:./Src/main.c  **** 
 438              		.loc 1 134 0
 439 0006 FFF7FEFF 		bl	HAL_Init
 440              	.LVL29:
 137:./Src/main.c  **** 
 441              		.loc 1 137 0
 442 000a FFF7FEFF 		bl	SystemClock_Config
 443              	.LVL30:
 139:./Src/main.c  **** 
 444              		.loc 1 139 0
 445 000e FFF7FEFF 		bl	Button_init
 446              	.LVL31:
 141:./Src/main.c  **** 
 447              		.loc 1 141 0
 448 0012 0120     		movs	r0, #1
 449 0014 FFF7FEFF 		bl	Power_Set
 450              	.LVL32:
 143:./Src/main.c  **** 
 451              		.loc 1 143 0
 452 0018 0A20     		movs	r0, #10
 453 001a FFF7FEFF 		bl	HAL_Delay
 454              	.LVL33:
 145:./Src/main.c  ****   ADC_R_init();
 455              		.loc 1 145 0
 456 001e FFF7FEFF 		bl	ADC_L_init
 457              	.LVL34:
 146:./Src/main.c  **** 
 458              		.loc 1 146 0
 459 0022 FFF7FEFF 		bl	ADC_R_init
 460              	.LVL35:
ARM GAS  /tmp/ccKxeGvP.s 			page 18


 150:./Src/main.c  **** 
 461              		.loc 1 150 0
 462 0026 FFF7FEFF 		bl	MX_I2C2_Init
 463              	.LVL36:
 159:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 5;
 464              		.loc 1 159 0
 465 002a 8F4E     		ldr	r6, .L118+8
 466 002c 2723     		movs	r3, #39
 467 002e 86F84030 		strb	r3, [r6, #64]
 160:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 468              		.loc 1 160 0
 469 0032 0523     		movs	r3, #5
 470 0034 7364     		str	r3, [r6, #68]
 161:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 471              		.loc 1 161 0
 472 0036 06F14804 		add	r4, r6, #72
 473 003a 8C4D     		ldr	r5, .L118+12
 474 003c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 475 003e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 476 0040 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 477 0042 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 478 0044 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 479 0046 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 480 0048 95E80700 		ldmia	r5, {r0, r1, r2}
 481 004c 84E80700 		stmia	r4, {r0, r1, r2}
 162:./Src/main.c  **** 	lcd.type = TYPE0;
 482              		.loc 1 162 0
 483 0050 0125     		movs	r5, #1
 484 0052 3570     		strb	r5, [r6]
 163:./Src/main.c  **** 
 485              		.loc 1 163 0
 486 0054 0024     		movs	r4, #0
 487 0056 86F83C40 		strb	r4, [r6, #60]
 165:./Src/main.c  **** 		// error occured
 488              		.loc 1 165 0
 489 005a 3046     		mov	r0, r6
 490 005c FFF7FEFF 		bl	LCD_Init
 491              	.LVL37:
 170:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 492              		.loc 1 170 0
 493 0060 3046     		mov	r0, r6
 494 0062 FFF7FEFF 		bl	LCD_ClearDisplay
 495              	.LVL38:
 171:./Src/main.c  **** 	LCD_WriteString(&lcd, "SesselOtter V5.2");
 496              		.loc 1 171 0
 497 0066 2246     		mov	r2, r4
 498 0068 2146     		mov	r1, r4
 499 006a 3046     		mov	r0, r6
 500 006c FFF7FEFF 		bl	LCD_SetLocation
 501              	.LVL39:
 172:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 502              		.loc 1 172 0
 503 0070 7F49     		ldr	r1, .L118+16
 504 0072 3046     		mov	r0, r6
 505 0074 FFF7FEFF 		bl	LCD_WriteString
 506              	.LVL40:
 173:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
ARM GAS  /tmp/ccKxeGvP.s 			page 19


 507              		.loc 1 173 0
 508 0078 2A46     		mov	r2, r5
 509 007a 2146     		mov	r1, r4
 510 007c 3046     		mov	r0, r6
 511 007e FFF7FEFF 		bl	LCD_SetLocation
 512              	.LVL41:
 174:./Src/main.c  **** 
 513              		.loc 1 174 0
 514 0082 7C49     		ldr	r1, .L118+20
 515 0084 3046     		mov	r0, r6
 516 0086 FFF7FEFF 		bl	LCD_WriteString
 517              	.LVL42:
 176:./Src/main.c  ****   Led_init();
 518              		.loc 1 176 0
 519 008a FFF7FEFF 		bl	Buzzer_init
 520              	.LVL43:
 177:./Src/main.c  ****   IS_Charge_init();
 521              		.loc 1 177 0
 522 008e FFF7FEFF 		bl	Led_init
 523              	.LVL44:
 178:./Src/main.c  **** 
 524              		.loc 1 178 0
 525 0092 FFF7FEFF 		bl	IS_Charge_init
 526              	.LVL45:
 527              	.LBB3:
 191:./Src/main.c  ****     Led_Set(0);
 528              		.loc 1 191 0
 529 0096 02E0     		b	.L36
 530              	.L37:
 192:./Src/main.c  ****   }
 531              		.loc 1 192 0
 532 0098 0020     		movs	r0, #0
 533 009a FFF7FEFF 		bl	Led_Set
 534              	.LVL46:
 535              	.L36:
 191:./Src/main.c  ****     Led_Set(0);
 536              		.loc 1 191 0
 537 009e FFF7FEFF 		bl	IS_Button
 538              	.LVL47:
 539 00a2 0028     		cmp	r0, #0
 540 00a4 F8D1     		bne	.L37
 541              	.LBE3:
 196:./Src/main.c  ****   MotorR_init();
 542              		.loc 1 196 0
 543 00a6 FFF7FEFF 		bl	MotorL_init
 544              	.LVL48:
 197:./Src/main.c  **** 
 545              		.loc 1 197 0
 546 00aa FFF7FEFF 		bl	MotorR_init
 547              	.LVL49:
 199:./Src/main.c  ****   Battery_TASK();
 548              		.loc 1 199 0
 549 00ae FFF7FEFF 		bl	applcation_init
 550              	.LVL50:
 200:./Src/main.c  **** 
 551              		.loc 1 200 0
 552 00b2 FFF7FEFF 		bl	Battery_TASK
ARM GAS  /tmp/ccKxeGvP.s 			page 20


 553              	.LVL51:
 202:./Src/main.c  **** 
 554              		.loc 1 202 0
 555 00b6 FFF7FEFF 		bl	MX_IWDG_Init
 556              	.LVL52:
 204:./Src/main.c  ****   Buzzer_TwoBeep();
 557              		.loc 1 204 0
 558 00ba 0120     		movs	r0, #1
 559 00bc FFF7FEFF 		bl	Led_Set
 560              	.LVL53:
 205:./Src/main.c  ****   HAL_Delay(250);
 561              		.loc 1 205 0
 562 00c0 FFF7FEFF 		bl	Buzzer_TwoBeep
 563              	.LVL54:
 206:./Src/main.c  **** 
 564              		.loc 1 206 0
 565 00c4 FA20     		movs	r0, #250
 566 00c6 FFF7FEFF 		bl	HAL_Delay
 567              	.LVL55:
 208:./Src/main.c  ****   MotorL_start();
 568              		.loc 1 208 0
 569 00ca FFF7FEFF 		bl	MotorR_start
 570              	.LVL56:
 209:./Src/main.c  ****   //MotorR_pwm(80);
 571              		.loc 1 209 0
 572 00ce FFF7FEFF 		bl	MotorL_start
 573              	.LVL57:
 213:./Src/main.c  **** 
 574              		.loc 1 213 0
 575 00d2 FFF7FEFF 		bl	Timer_init
 576              	.LVL58:
 225:./Src/main.c  **** 
 577              		.loc 1 225 0
 578 00d6 684B     		ldr	r3, .L118+24
 579 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 580 00da 9BBB     		cbnz	r3, .L38
 227:./Src/main.c  ****     HAL_Delay(5);
 581              		.loc 1 227 0
 582 00dc 624C     		ldr	r4, .L118+8
 583 00de 2046     		mov	r0, r4
 584 00e0 FFF7FEFF 		bl	LCD_ClearDisplay
 585              	.LVL59:
 228:./Src/main.c  ****     LCD_SetLocation(&lcd, 0, 1);
 586              		.loc 1 228 0
 587 00e4 0520     		movs	r0, #5
 588 00e6 FFF7FEFF 		bl	HAL_Delay
 589              	.LVL60:
 229:./Src/main.c  ****   	LCD_WriteString(&lcd, "Bat:");
 590              		.loc 1 229 0
 591 00ea 0122     		movs	r2, #1
 592 00ec 0021     		movs	r1, #0
 593 00ee 2046     		mov	r0, r4
 594 00f0 FFF7FEFF 		bl	LCD_SetLocation
 595              	.LVL61:
 230:./Src/main.c  ****     LCD_SetLocation(&lcd, 8, 1);
 596              		.loc 1 230 0
 597 00f4 6149     		ldr	r1, .L118+28
ARM GAS  /tmp/ccKxeGvP.s 			page 21


 598 00f6 2046     		mov	r0, r4
 599 00f8 FFF7FEFF 		bl	LCD_WriteString
 600              	.LVL62:
 231:./Src/main.c  ****     LCD_WriteString(&lcd, "V");
 601              		.loc 1 231 0
 602 00fc 0122     		movs	r2, #1
 603 00fe 0821     		movs	r1, #8
 604 0100 2046     		mov	r0, r4
 605 0102 FFF7FEFF 		bl	LCD_SetLocation
 606              	.LVL63:
 232:./Src/main.c  **** 
 607              		.loc 1 232 0
 608 0106 5E49     		ldr	r1, .L118+32
 609 0108 2046     		mov	r0, r4
 610 010a FFF7FEFF 		bl	LCD_WriteString
 611              	.LVL64:
 234:./Src/main.c  ****     LCD_WriteString(&lcd, "A");
 612              		.loc 1 234 0
 613 010e 0122     		movs	r2, #1
 614 0110 0F21     		movs	r1, #15
 615 0112 2046     		mov	r0, r4
 616 0114 FFF7FEFF 		bl	LCD_SetLocation
 617              	.LVL65:
 235:./Src/main.c  **** 
 618              		.loc 1 235 0
 619 0118 5A49     		ldr	r1, .L118+36
 620 011a 2046     		mov	r0, r4
 621 011c FFF7FEFF 		bl	LCD_WriteString
 622              	.LVL66:
 237:./Src/main.c  ****   	LCD_WriteString(&lcd, "Speed:");
 623              		.loc 1 237 0
 624 0120 0022     		movs	r2, #0
 625 0122 1146     		mov	r1, r2
 626 0124 2046     		mov	r0, r4
 627 0126 FFF7FEFF 		bl	LCD_SetLocation
 628              	.LVL67:
 238:./Src/main.c  ****     LCD_SetLocation(&lcd, 12, 0);
 629              		.loc 1 238 0
 630 012a 5749     		ldr	r1, .L118+40
 631 012c 2046     		mov	r0, r4
 632 012e FFF7FEFF 		bl	LCD_WriteString
 633              	.LVL68:
 239:./Src/main.c  ****     LCD_WriteString(&lcd, "km/h");
 634              		.loc 1 239 0
 635 0132 0022     		movs	r2, #0
 636 0134 0C21     		movs	r1, #12
 637 0136 2046     		mov	r0, r4
 638 0138 FFF7FEFF 		bl	LCD_SetLocation
 639              	.LVL69:
 240:./Src/main.c  ****   }
 640              		.loc 1 240 0
 641 013c 5349     		ldr	r1, .L118+44
 642 013e 2046     		mov	r0, r4
 643 0140 FFF7FEFF 		bl	LCD_WriteString
 644              	.LVL70:
 645              	.L38:
 132:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
ARM GAS  /tmp/ccKxeGvP.s 			page 22


 646              		.loc 1 132 0
 647 0144 0023     		movs	r3, #0
 648 0146 0A93     		str	r3, [sp, #40]	@ float
 649 0148 4FF0000A 		mov	r10, #0
 650 014c 5546     		mov	r5, r10
 651 014e CDF82CA0 		str	r10, [sp, #44]
 652 0152 D046     		mov	r8, r10
 653 0154 40F2CF79 		movw	r9, #1999
 654 0158 D346     		mov	fp, r10
 655 015a CDF80CA0 		str	r10, [sp, #12]
 656 015e 5446     		mov	r4, r10
 657              	.LVL71:
 658              	.L86:
 249:./Src/main.c  ****     if ((sinValue) % (100) == 0) {
 659              		.loc 1 249 0
 660 0160 09F10109 		add	r9, r9, #1
 661              	.LVL72:
 250:./Src/main.c  ****       //state = !state;
 662              		.loc 1 250 0
 663 0164 4A4B     		ldr	r3, .L118+48
 664 0166 A3FB0923 		umull	r2, r3, r3, r9
 665 016a 5B09     		lsrs	r3, r3, #5
 666 016c 6422     		movs	r2, #100
 667 016e 02FB1393 		mls	r3, r2, r3, r9
 668 0172 002B     		cmp	r3, #0
 669 0174 40F00681 		bne	.L39
 670              	.LBB4:
 257:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 671              		.loc 1 257 0
 672 0178 DFF828A1 		ldr	r10, .L118+68
 673 017c BAF80200 		ldrh	r0, [r10, #2]
 674 0180 A0F5FA70 		sub	r0, r0, #500
 675 0184 FFF7FEFF 		bl	__aeabi_i2d
 676              	.LVL73:
 677 0188 0646     		mov	r6, r0
 678 018a 0F46     		mov	r7, r1
 679 018c CDE90467 		strd	r6, [sp, #16]
 680 0190 BAF80000 		ldrh	r0, [r10]
 681 0194 A0F5FA70 		sub	r0, r0, #500
 682 0198 FFF7FEFF 		bl	__aeabi_i2d
 683              	.LVL74:
 684 019c 0022     		movs	r2, #0
 685 019e 3D4B     		ldr	r3, .L118+52
 686 01a0 FFF7FEFF 		bl	__aeabi_dmul
 687              	.LVL75:
 688 01a4 0246     		mov	r2, r0
 689 01a6 0B46     		mov	r3, r1
 690 01a8 CDE90623 		strd	r2, [sp, #24]
 691 01ac 3046     		mov	r0, r6
 692 01ae 3946     		mov	r1, r7
 693 01b0 FFF7FEFF 		bl	__aeabi_dsub
 694              	.LVL76:
 695 01b4 0646     		mov	r6, r0
 696 01b6 0F46     		mov	r7, r1
 697 01b8 BAF80400 		ldrh	r0, [r10, #4]
 698 01bc FFF7FEFF 		bl	__aeabi_i2d
 699              	.LVL77:
ARM GAS  /tmp/ccKxeGvP.s 			page 23


 700 01c0 0022     		movs	r2, #0
 701 01c2 354B     		ldr	r3, .L118+56
 702 01c4 FFF7FEFF 		bl	__aeabi_ddiv
 703              	.LVL78:
 704 01c8 0246     		mov	r2, r0
 705 01ca 0B46     		mov	r3, r1
 706 01cc CDE90823 		strd	r2, [sp, #32]
 707 01d0 3046     		mov	r0, r6
 708 01d2 3946     		mov	r1, r7
 709 01d4 FFF7FEFF 		bl	__aeabi_dmul
 710              	.LVL79:
 711 01d8 0746     		mov	r7, r0
 712 01da 0E46     		mov	r6, r1
 713 01dc 0022     		movs	r2, #0
 714 01de 2F4B     		ldr	r3, .L118+60
 715 01e0 3846     		mov	r0, r7
 716 01e2 3146     		mov	r1, r6
 717 01e4 FFF7FEFF 		bl	__aeabi_dcmpgt
 718              	.LVL80:
 719 01e8 70B9     		cbnz	r0, .L87
 257:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 720              		.loc 1 257 0 is_stmt 0 discriminator 2
 721 01ea 1DA3     		adr	r3, .L118
 722 01ec D3E90023 		ldrd	r2, [r3]
 723 01f0 3846     		mov	r0, r7
 724 01f2 3146     		mov	r1, r6
 725 01f4 FFF7FEFF 		bl	__aeabi_dcmplt
 726              	.LVL81:
 727 01f8 48B9     		cbnz	r0, .L88
 257:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 728              		.loc 1 257 0 discriminator 5
 729 01fa 3846     		mov	r0, r7
 730 01fc 06F10041 		add	r1, r6, #-2147483648
 731 0200 FFF7FEFF 		bl	__aeabi_d2iz
 732              	.LVL82:
 733 0204 8246     		mov	r10, r0
 734 0206 04E0     		b	.L40
 735              	.L87:
 257:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 736              		.loc 1 257 0
 737 0208 DFF894A0 		ldr	r10, .L118+64
 738 020c 01E0     		b	.L40
 739              	.L88:
 740 020e 4FF47A7A 		mov	r10, #1000
 741              	.L40:
 742              	.LVL83:
 258:./Src/main.c  **** 
 743              		.loc 1 258 0 is_stmt 1 discriminator 8
 744 0212 DDE90623 		ldrd	r2, [sp, #24]
 745 0216 DDE90401 		ldrd	r0, [sp, #16]
 746 021a FFF7FEFF 		bl	__aeabi_dadd
 747              	.LVL84:
 748 021e 0246     		mov	r2, r0
 749 0220 0B46     		mov	r3, r1
 750 0222 DDE90801 		ldrd	r0, [sp, #32]
 751 0226 FFF7FEFF 		bl	__aeabi_dmul
 752              	.LVL85:
ARM GAS  /tmp/ccKxeGvP.s 			page 24


 753 022a 0746     		mov	r7, r0
 754 022c 0E46     		mov	r6, r1
 755 022e 0022     		movs	r2, #0
 756 0230 1A4B     		ldr	r3, .L118+60
 757 0232 3846     		mov	r0, r7
 758 0234 3146     		mov	r1, r6
 759 0236 FFF7FEFF 		bl	__aeabi_dcmpgt
 760              	.LVL86:
 761 023a 70B9     		cbnz	r0, .L89
 258:./Src/main.c  **** 
 762              		.loc 1 258 0 is_stmt 0 discriminator 2
 763 023c 08A3     		adr	r3, .L118
 764 023e D3E90023 		ldrd	r2, [r3]
 765 0242 3846     		mov	r0, r7
 766 0244 3146     		mov	r1, r6
 767 0246 FFF7FEFF 		bl	__aeabi_dcmplt
 768              	.LVL87:
 769 024a 68BB     		cbnz	r0, .L90
 258:./Src/main.c  **** 
 770              		.loc 1 258 0 discriminator 5
 771 024c 3846     		mov	r0, r7
 772 024e 06F10041 		add	r1, r6, #-2147483648
 773 0252 FFF7FEFF 		bl	__aeabi_d2iz
 774              	.LVL88:
 775 0256 0646     		mov	r6, r0
 776 0258 28E0     		b	.L41
 777              	.L89:
 258:./Src/main.c  **** 
 778              		.loc 1 258 0
 779 025a 114E     		ldr	r6, .L118+64
 780 025c 26E0     		b	.L41
 781              	.L119:
 782 025e 00BF     		.align	3
 783              	.L118:
 784 0260 00000000 		.word	0
 785 0264 00408FC0 		.word	-1064353792
 786 0268 00000000 		.word	lcd
 787 026c 00000000 		.word	hi2c2
 788 0270 00000000 		.word	.LC0
 789 0274 14000000 		.word	.LC1
 790 0278 00000000 		.word	LCDerrorFlag
 791 027c 24000000 		.word	.LC2
 792 0280 2C000000 		.word	.LC3
 793 0284 30000000 		.word	.LC4
 794 0288 34000000 		.word	.LC5
 795 028c 3C000000 		.word	.LC6
 796 0290 1F85EB51 		.word	1374389535
 797 0294 0000E03F 		.word	1071644672
 798 0298 00407F40 		.word	1082081280
 799 029c 00408F40 		.word	1083129856
 800 02a0 18FCFFFF 		.word	-1000
 801 02a4 00000000 		.word	.LANCHOR2
 802              	.L90:
 803 02a8 4FF47A76 		mov	r6, #1000
 804              	.L41:
 805              	.LVL89:
 261:./Src/main.c  ****       speedL += readL / 1.0;
ARM GAS  /tmp/ccKxeGvP.s 			page 25


 806              		.loc 1 261 0 is_stmt 1 discriminator 8
 807 02ac 5846     		mov	r0, fp
 808 02ae FFF7FEFF 		bl	__aeabi_i2d
 809              	.LVL90:
 810 02b2 0246     		mov	r2, r0
 811 02b4 0B46     		mov	r3, r1
 812 02b6 FFF7FEFF 		bl	__aeabi_dsub
 813              	.LVL91:
 814 02ba FFF7FEFF 		bl	__aeabi_d2iz
 815              	.LVL92:
 816 02be 0FFA80FB 		sxth	fp, r0
 817              	.LVL93:
 262:./Src/main.c  **** 
 818              		.loc 1 262 0 discriminator 8
 819 02c2 3046     		mov	r0, r6
 820 02c4 FFF7FEFF 		bl	__aeabi_i2d
 821              	.LVL94:
 822 02c8 0646     		mov	r6, r0
 823              	.LVL95:
 824 02ca 0F46     		mov	r7, r1
 825 02cc 5846     		mov	r0, fp
 826 02ce FFF7FEFF 		bl	__aeabi_i2d
 827              	.LVL96:
 828 02d2 3246     		mov	r2, r6
 829 02d4 3B46     		mov	r3, r7
 830 02d6 FFF7FEFF 		bl	__aeabi_dadd
 831              	.LVL97:
 832 02da FFF7FEFF 		bl	__aeabi_d2iz
 833              	.LVL98:
 834 02de 0FFA80FB 		sxth	fp, r0
 835              	.LVL99:
 265:./Src/main.c  ****       speedR += readR / 1.0;
 836              		.loc 1 265 0 discriminator 8
 837 02e2 4046     		mov	r0, r8
 838 02e4 FFF7FEFF 		bl	__aeabi_i2d
 839              	.LVL100:
 840 02e8 0246     		mov	r2, r0
 841 02ea 0B46     		mov	r3, r1
 842 02ec FFF7FEFF 		bl	__aeabi_dsub
 843              	.LVL101:
 844 02f0 FFF7FEFF 		bl	__aeabi_d2iz
 845              	.LVL102:
 846 02f4 0FFA80F8 		sxth	r8, r0
 847              	.LVL103:
 266:./Src/main.c  **** 
 848              		.loc 1 266 0 discriminator 8
 849 02f8 5046     		mov	r0, r10
 850 02fa FFF7FEFF 		bl	__aeabi_i2d
 851              	.LVL104:
 852 02fe 0646     		mov	r6, r0
 853 0300 0F46     		mov	r7, r1
 854 0302 4046     		mov	r0, r8
 855 0304 FFF7FEFF 		bl	__aeabi_i2d
 856              	.LVL105:
 857 0308 3246     		mov	r2, r6
 858 030a 3B46     		mov	r3, r7
 859 030c FFF7FEFF 		bl	__aeabi_dadd
ARM GAS  /tmp/ccKxeGvP.s 			page 26


 860              	.LVL106:
 861 0310 FFF7FEFF 		bl	__aeabi_d2iz
 862              	.LVL107:
 863 0314 0FFA80F8 		sxth	r8, r0
 864              	.LVL108:
 269:./Src/main.c  ****         float scale = get_powerMax(GET_BatteryAverage());
 865              		.loc 1 269 0 discriminator 8
 866 0318 5E46     		mov	r6, fp
 867 031a 039A     		ldr	r2, [sp, #12]
 868 031c 1346     		mov	r3, r2
 869 031e 3233     		adds	r3, r3, #50
 870 0320 9B45     		cmp	fp, r3
 871 0322 2CDA     		bge	.L42
 269:./Src/main.c  ****         float scale = get_powerMax(GET_BatteryAverage());
 872              		.loc 1 269 0 is_stmt 0 discriminator 1
 873 0324 A2F13203 		sub	r3, r2, #50
 874 0328 9B45     		cmp	fp, r3
 875 032a 28DD     		ble	.L42
 269:./Src/main.c  ****         float scale = get_powerMax(GET_BatteryAverage());
 876              		.loc 1 269 0 discriminator 2
 877 032c 0B9A     		ldr	r2, [sp, #44]
 878 032e 1346     		mov	r3, r2
 879 0330 3233     		adds	r3, r3, #50
 880 0332 9845     		cmp	r8, r3
 881 0334 23DA     		bge	.L42
 269:./Src/main.c  ****         float scale = get_powerMax(GET_BatteryAverage());
 882              		.loc 1 269 0 discriminator 3
 883 0336 A2F13203 		sub	r3, r2, #50
 884 033a 9845     		cmp	r8, r3
 885 033c 1FDD     		ble	.L42
 269:./Src/main.c  ****         float scale = get_powerMax(GET_BatteryAverage());
 886              		.loc 1 269 0 discriminator 4
 887 033e B24B     		ldr	r3, .L120+8
 888 0340 1B68     		ldr	r3, [r3]
 889 0342 B3F57A7F 		cmp	r3, #1000
 890 0346 1AD2     		bcs	.L42
 891              	.LBB5:
 270:./Src/main.c  ****         MotorR_pwm((int)(speedR * scale));
 892              		.loc 1 270 0 is_stmt 1
 893 0348 FFF7FEFF 		bl	GET_BatteryAverage
 894              	.LVL109:
 895 034c FFF7FEFF 		bl	get_powerMax
 896              	.LVL110:
 897 0350 0746     		mov	r7, r0
 898              	.LVL111:
 271:./Src/main.c  ****         MotorL_pwm((int)(speedL * scale));
 899              		.loc 1 271 0
 900 0352 4046     		mov	r0, r8
 901              	.LVL112:
 902 0354 FFF7FEFF 		bl	__aeabi_i2f
 903              	.LVL113:
 904 0358 3946     		mov	r1, r7
 905 035a FFF7FEFF 		bl	__aeabi_fmul
 906              	.LVL114:
 907 035e FFF7FEFF 		bl	__aeabi_f2iz
 908              	.LVL115:
 909 0362 00B2     		sxth	r0, r0
ARM GAS  /tmp/ccKxeGvP.s 			page 27


 910 0364 FFF7FEFF 		bl	MotorR_pwm
 911              	.LVL116:
 272:./Src/main.c  ****       }
 912              		.loc 1 272 0
 913 0368 5846     		mov	r0, fp
 914 036a FFF7FEFF 		bl	__aeabi_i2f
 915              	.LVL117:
 916 036e 3946     		mov	r1, r7
 917 0370 FFF7FEFF 		bl	__aeabi_fmul
 918              	.LVL118:
 919 0374 FFF7FEFF 		bl	__aeabi_f2iz
 920              	.LVL119:
 921 0378 00B2     		sxth	r0, r0
 922 037a FFF7FEFF 		bl	MotorL_pwm
 923              	.LVL120:
 924              	.L42:
 925              	.LBE5:
 275:./Src/main.c  ****       //MotorR_pwm(-250);
 926              		.loc 1 275 0
 927 037e CDF82C80 		str	r8, [sp, #44]
 928              	.LVL121:
 274:./Src/main.c  ****       lastSpeedR = speedR;
 929              		.loc 1 274 0
 930 0382 0396     		str	r6, [sp, #12]
 931              	.LVL122:
 932              	.L39:
 933              	.LBE4:
 280:./Src/main.c  **** 
 934              		.loc 1 280 0
 935 0384 A04A     		ldr	r2, .L120+8
 936 0386 1368     		ldr	r3, [r2]
 937 0388 0133     		adds	r3, r3, #1
 938 038a 1360     		str	r3, [r2]
 282:./Src/main.c  ****       MotorR_pwm(0);
 939              		.loc 1 282 0
 940 038c B3F57A7F 		cmp	r3, #1000
 941 0390 05D9     		bls	.L43
 283:./Src/main.c  ****       MotorL_pwm(0);
 942              		.loc 1 283 0
 943 0392 0020     		movs	r0, #0
 944 0394 FFF7FEFF 		bl	MotorR_pwm
 945              	.LVL123:
 284:./Src/main.c  ****     }
 946              		.loc 1 284 0
 947 0398 0020     		movs	r0, #0
 948 039a FFF7FEFF 		bl	MotorL_pwm
 949              	.LVL124:
 950              	.L43:
 288:./Src/main.c  ****       speedReading = MAX(ABS(((motorL.motorpos - lastMotorposL) / 90.0)*3.6), ABS(((motorR.motorpos
 951              		.loc 1 288 0
 952 039e 9B4B     		ldr	r3, .L120+12
 953 03a0 1E68     		ldr	r6, [r3]
 954 03a2 06F5FA76 		add	r6, r6, #500
 955 03a6 FFF7FEFF 		bl	HAL_GetTick
 956              	.LVL125:
 957 03aa 8642     		cmp	r6, r0
 958 03ac 80F0E780 		bcs	.L44
ARM GAS  /tmp/ccKxeGvP.s 			page 28


 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 959              		.loc 1 289 0
 960 03b0 974B     		ldr	r3, .L120+16
 961 03b2 5869     		ldr	r0, [r3, #20]
 962 03b4 001B     		subs	r0, r0, r4
 963 03b6 FFF7FEFF 		bl	__aeabi_i2d
 964              	.LVL126:
 965 03ba 0022     		movs	r2, #0
 966 03bc 954B     		ldr	r3, .L120+20
 967 03be FFF7FEFF 		bl	__aeabi_ddiv
 968              	.LVL127:
 969 03c2 8FA3     		adr	r3, .L120
 970 03c4 D3E90023 		ldrd	r2, [r3]
 971 03c8 FFF7FEFF 		bl	__aeabi_dmul
 972              	.LVL128:
 973 03cc 0022     		movs	r2, #0
 974 03ce 0023     		movs	r3, #0
 975 03d0 FFF7FEFF 		bl	__aeabi_dcmplt
 976              	.LVL129:
 977 03d4 88B1     		cbz	r0, .L105
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 978              		.loc 1 289 0 is_stmt 0 discriminator 1
 979 03d6 8E4B     		ldr	r3, .L120+16
 980 03d8 5869     		ldr	r0, [r3, #20]
 981 03da 001B     		subs	r0, r0, r4
 982 03dc FFF7FEFF 		bl	__aeabi_i2d
 983              	.LVL130:
 984 03e0 0022     		movs	r2, #0
 985 03e2 8C4B     		ldr	r3, .L120+20
 986 03e4 FFF7FEFF 		bl	__aeabi_ddiv
 987              	.LVL131:
 988 03e8 85A3     		adr	r3, .L120
 989 03ea D3E90023 		ldrd	r2, [r3]
 990 03ee FFF7FEFF 		bl	__aeabi_dmul
 991              	.LVL132:
 992 03f2 0746     		mov	r7, r0
 993 03f4 01F10046 		add	r6, r1, #-2147483648
 994 03f8 0FE0     		b	.L47
 995              	.L105:
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 996              		.loc 1 289 0 discriminator 2
 997 03fa 854B     		ldr	r3, .L120+16
 998 03fc 5869     		ldr	r0, [r3, #20]
 999 03fe 001B     		subs	r0, r0, r4
 1000 0400 FFF7FEFF 		bl	__aeabi_i2d
 1001              	.LVL133:
 1002 0404 0022     		movs	r2, #0
 1003 0406 834B     		ldr	r3, .L120+20
 1004 0408 FFF7FEFF 		bl	__aeabi_ddiv
 1005              	.LVL134:
 1006 040c 7CA3     		adr	r3, .L120
 1007 040e D3E90023 		ldrd	r2, [r3]
 1008 0412 FFF7FEFF 		bl	__aeabi_dmul
 1009              	.LVL135:
 1010 0416 0746     		mov	r7, r0
 1011 0418 0E46     		mov	r6, r1
 1012              	.L47:
ARM GAS  /tmp/ccKxeGvP.s 			page 29


 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1013              		.loc 1 289 0 discriminator 4
 1014 041a 7F4B     		ldr	r3, .L120+24
 1015 041c 5869     		ldr	r0, [r3, #20]
 1016 041e 401B     		subs	r0, r0, r5
 1017 0420 FFF7FEFF 		bl	__aeabi_i2d
 1018              	.LVL136:
 1019 0424 0022     		movs	r2, #0
 1020 0426 7B4B     		ldr	r3, .L120+20
 1021 0428 FFF7FEFF 		bl	__aeabi_ddiv
 1022              	.LVL137:
 1023 042c 74A3     		adr	r3, .L120
 1024 042e D3E90023 		ldrd	r2, [r3]
 1025 0432 FFF7FEFF 		bl	__aeabi_dmul
 1026              	.LVL138:
 1027 0436 0022     		movs	r2, #0
 1028 0438 0023     		movs	r3, #0
 1029 043a FFF7FEFF 		bl	__aeabi_dcmplt
 1030              	.LVL139:
 1031 043e 80B1     		cbz	r0, .L106
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1032              		.loc 1 289 0 discriminator 5
 1033 0440 754B     		ldr	r3, .L120+24
 1034 0442 5869     		ldr	r0, [r3, #20]
 1035 0444 401B     		subs	r0, r0, r5
 1036 0446 FFF7FEFF 		bl	__aeabi_i2d
 1037              	.LVL140:
 1038 044a 0022     		movs	r2, #0
 1039 044c 714B     		ldr	r3, .L120+20
 1040 044e FFF7FEFF 		bl	__aeabi_ddiv
 1041              	.LVL141:
 1042 0452 6BA3     		adr	r3, .L120
 1043 0454 D3E90023 		ldrd	r2, [r3]
 1044 0458 FFF7FEFF 		bl	__aeabi_dmul
 1045              	.LVL142:
 1046 045c 01F10041 		add	r1, r1, #-2147483648
 1047 0460 0DE0     		b	.L50
 1048              	.L106:
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1049              		.loc 1 289 0 discriminator 6
 1050 0462 6D4B     		ldr	r3, .L120+24
 1051 0464 5869     		ldr	r0, [r3, #20]
 1052 0466 401B     		subs	r0, r0, r5
 1053 0468 FFF7FEFF 		bl	__aeabi_i2d
 1054              	.LVL143:
 1055 046c 0022     		movs	r2, #0
 1056 046e 694B     		ldr	r3, .L120+20
 1057 0470 FFF7FEFF 		bl	__aeabi_ddiv
 1058              	.LVL144:
 1059 0474 62A3     		adr	r3, .L120
 1060 0476 D3E90023 		ldrd	r2, [r3]
 1061 047a FFF7FEFF 		bl	__aeabi_dmul
 1062              	.LVL145:
 1063              	.L50:
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1064              		.loc 1 289 0 discriminator 8
 1065 047e 0246     		mov	r2, r0
ARM GAS  /tmp/ccKxeGvP.s 			page 30


 1066 0480 0B46     		mov	r3, r1
 1067 0482 3846     		mov	r0, r7
 1068 0484 3146     		mov	r1, r6
 1069 0486 FFF7FEFF 		bl	__aeabi_dcmpgt
 1070              	.LVL146:
 1071 048a 0028     		cmp	r0, #0
 1072 048c 35D0     		beq	.L107
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1073              		.loc 1 289 0 discriminator 9
 1074 048e 604B     		ldr	r3, .L120+16
 1075 0490 5869     		ldr	r0, [r3, #20]
 1076 0492 001B     		subs	r0, r0, r4
 1077 0494 FFF7FEFF 		bl	__aeabi_i2d
 1078              	.LVL147:
 1079 0498 0022     		movs	r2, #0
 1080 049a 5E4B     		ldr	r3, .L120+20
 1081 049c FFF7FEFF 		bl	__aeabi_ddiv
 1082              	.LVL148:
 1083 04a0 57A3     		adr	r3, .L120
 1084 04a2 D3E90023 		ldrd	r2, [r3]
 1085 04a6 FFF7FEFF 		bl	__aeabi_dmul
 1086              	.LVL149:
 1087 04aa 0022     		movs	r2, #0
 1088 04ac 0023     		movs	r3, #0
 1089 04ae FFF7FEFF 		bl	__aeabi_dcmplt
 1090              	.LVL150:
 1091 04b2 88B1     		cbz	r0, .L108
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1092              		.loc 1 289 0 discriminator 11
 1093 04b4 564B     		ldr	r3, .L120+16
 1094 04b6 5869     		ldr	r0, [r3, #20]
 1095 04b8 001B     		subs	r0, r0, r4
 1096 04ba FFF7FEFF 		bl	__aeabi_i2d
 1097              	.LVL151:
 1098 04be 0022     		movs	r2, #0
 1099 04c0 544B     		ldr	r3, .L120+20
 1100 04c2 FFF7FEFF 		bl	__aeabi_ddiv
 1101              	.LVL152:
 1102 04c6 4EA3     		adr	r3, .L120
 1103 04c8 D3E90023 		ldrd	r2, [r3]
 1104 04cc FFF7FEFF 		bl	__aeabi_dmul
 1105              	.LVL153:
 1106 04d0 0246     		mov	r2, r0
 1107 04d2 01F10043 		add	r3, r1, #-2147483648
 1108 04d6 45E0     		b	.L55
 1109              	.L108:
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1110              		.loc 1 289 0 discriminator 12
 1111 04d8 4D4B     		ldr	r3, .L120+16
 1112 04da 5869     		ldr	r0, [r3, #20]
 1113 04dc 001B     		subs	r0, r0, r4
 1114 04de FFF7FEFF 		bl	__aeabi_i2d
 1115              	.LVL154:
 1116 04e2 0022     		movs	r2, #0
 1117 04e4 4B4B     		ldr	r3, .L120+20
 1118 04e6 FFF7FEFF 		bl	__aeabi_ddiv
 1119              	.LVL155:
ARM GAS  /tmp/ccKxeGvP.s 			page 31


 1120 04ea 45A3     		adr	r3, .L120
 1121 04ec D3E90023 		ldrd	r2, [r3]
 1122 04f0 FFF7FEFF 		bl	__aeabi_dmul
 1123              	.LVL156:
 1124 04f4 0246     		mov	r2, r0
 1125 04f6 0B46     		mov	r3, r1
 1126 04f8 34E0     		b	.L55
 1127              	.L107:
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1128              		.loc 1 289 0 discriminator 10
 1129 04fa 474B     		ldr	r3, .L120+24
 1130 04fc 5869     		ldr	r0, [r3, #20]
 1131 04fe 401B     		subs	r0, r0, r5
 1132 0500 FFF7FEFF 		bl	__aeabi_i2d
 1133              	.LVL157:
 1134 0504 0022     		movs	r2, #0
 1135 0506 434B     		ldr	r3, .L120+20
 1136 0508 FFF7FEFF 		bl	__aeabi_ddiv
 1137              	.LVL158:
 1138 050c 3CA3     		adr	r3, .L120
 1139 050e D3E90023 		ldrd	r2, [r3]
 1140 0512 FFF7FEFF 		bl	__aeabi_dmul
 1141              	.LVL159:
 1142 0516 0022     		movs	r2, #0
 1143 0518 0023     		movs	r3, #0
 1144 051a FFF7FEFF 		bl	__aeabi_dcmplt
 1145              	.LVL160:
 1146 051e 88B1     		cbz	r0, .L109
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1147              		.loc 1 289 0 discriminator 16
 1148 0520 3D4B     		ldr	r3, .L120+24
 1149 0522 5869     		ldr	r0, [r3, #20]
 1150 0524 401B     		subs	r0, r0, r5
 1151 0526 FFF7FEFF 		bl	__aeabi_i2d
 1152              	.LVL161:
 1153 052a 0022     		movs	r2, #0
 1154 052c 394B     		ldr	r3, .L120+20
 1155 052e FFF7FEFF 		bl	__aeabi_ddiv
 1156              	.LVL162:
 1157 0532 33A3     		adr	r3, .L120
 1158 0534 D3E90023 		ldrd	r2, [r3]
 1159 0538 FFF7FEFF 		bl	__aeabi_dmul
 1160              	.LVL163:
 1161 053c 0246     		mov	r2, r0
 1162 053e 01F10043 		add	r3, r1, #-2147483648
 1163 0542 0FE0     		b	.L55
 1164              	.L109:
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1165              		.loc 1 289 0 discriminator 17
 1166 0544 344B     		ldr	r3, .L120+24
 1167 0546 5869     		ldr	r0, [r3, #20]
 1168 0548 401B     		subs	r0, r0, r5
 1169 054a FFF7FEFF 		bl	__aeabi_i2d
 1170              	.LVL164:
 1171 054e 0022     		movs	r2, #0
 1172 0550 304B     		ldr	r3, .L120+20
 1173 0552 FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  /tmp/ccKxeGvP.s 			page 32


 1174              	.LVL165:
 1175 0556 2AA3     		adr	r3, .L120
 1176 0558 D3E90023 		ldrd	r2, [r3]
 1177 055c FFF7FEFF 		bl	__aeabi_dmul
 1178              	.LVL166:
 1179 0560 0246     		mov	r2, r0
 1180 0562 0B46     		mov	r3, r1
 1181              	.L55:
 289:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1182              		.loc 1 289 0 discriminator 20
 1183 0564 1046     		mov	r0, r2
 1184 0566 1946     		mov	r1, r3
 1185 0568 FFF7FEFF 		bl	__aeabi_d2f
 1186              	.LVL167:
 1187 056c 0A90     		str	r0, [sp, #40]	@ float
 1188              	.LVL168:
 290:./Src/main.c  ****       lastMotorposL = motorL.motorpos;
 1189              		.loc 1 290 0 is_stmt 1 discriminator 20
 1190 056e FFF7FEFF 		bl	HAL_GetTick
 1191              	.LVL169:
 1192 0572 264B     		ldr	r3, .L120+12
 1193 0574 1860     		str	r0, [r3]
 291:./Src/main.c  ****       lastMotorposR = motorR.motorpos;
 1194              		.loc 1 291 0 discriminator 20
 1195 0576 264B     		ldr	r3, .L120+16
 1196 0578 5C69     		ldr	r4, [r3, #20]
 1197              	.LVL170:
 292:./Src/main.c  ****     }
 1198              		.loc 1 292 0 discriminator 20
 1199 057a 274B     		ldr	r3, .L120+24
 1200 057c 5D69     		ldr	r5, [r3, #20]
 1201              	.LVL171:
 1202              	.L44:
 1203              	.LBB6:
 295:./Src/main.c  ****       MotorL_pwm(0);
 1204              		.loc 1 295 0
 1205 057e FFF7FEFF 		bl	IS_Button
 1206              	.LVL172:
 1207 0582 B0B1     		cbz	r0, .L58
 296:./Src/main.c  ****       MotorR_pwm(0);
 1208              		.loc 1 296 0
 1209 0584 0020     		movs	r0, #0
 1210 0586 FFF7FEFF 		bl	MotorL_pwm
 1211              	.LVL173:
 297:./Src/main.c  ****       while(IS_Button()) {
 1212              		.loc 1 297 0
 1213 058a 0020     		movs	r0, #0
 1214 058c FFF7FEFF 		bl	MotorR_pwm
 1215              	.LVL174:
 298:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 1216              		.loc 1 298 0
 1217 0590 02E0     		b	.L59
 1218              	.L60:
 299:./Src/main.c  ****       }
 1219              		.loc 1 299 0
 1220 0592 2248     		ldr	r0, .L120+28
 1221 0594 FFF7FEFF 		bl	HAL_IWDG_Refresh
ARM GAS  /tmp/ccKxeGvP.s 			page 33


 1222              	.LVL175:
 1223              	.L59:
 298:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 1224              		.loc 1 298 0
 1225 0598 FFF7FEFF 		bl	IS_Button
 1226              	.LVL176:
 1227 059c 0028     		cmp	r0, #0
 1228 059e F8D1     		bne	.L60
 301:./Src/main.c  ****       HAL_Delay(350);
 1229              		.loc 1 301 0
 1230 05a0 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1231              	.LVL177:
 302:./Src/main.c  ****       Power_Set(0);
 1232              		.loc 1 302 0
 1233 05a4 4FF4AF70 		mov	r0, #350
 1234 05a8 FFF7FEFF 		bl	HAL_Delay
 1235              	.LVL178:
 303:./Src/main.c  ****     }
 1236              		.loc 1 303 0
 1237 05ac 0020     		movs	r0, #0
 1238 05ae FFF7FEFF 		bl	Power_Set
 1239              	.LVL179:
 1240              	.L58:
 1241              	.LBE6:
 306:./Src/main.c  ****       //LCD_SetLocation(&lcd, 4, 0);
 1242              		.loc 1 306 0
 1243 05b2 1B4B     		ldr	r3, .L120+32
 1244 05b4 A3FB0923 		umull	r2, r3, r3, r9
 1245 05b8 5B09     		lsrs	r3, r3, #5
 1246 05ba 40F2DC52 		movw	r2, #1500
 1247 05be 02FB1393 		mls	r3, r2, r3, r9
 1248 05c2 002B     		cmp	r3, #0
 1249 05c4 40F0DD80 		bne	.L61
 306:./Src/main.c  ****       //LCD_SetLocation(&lcd, 4, 0);
 1250              		.loc 1 306 0 is_stmt 0 discriminator 1
 1251 05c8 164B     		ldr	r3, .L120+36
 1252 05ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1253 05cc 002B     		cmp	r3, #0
 1254 05ce 40F0D880 		bne	.L61
 1255              	.LBB7:
 309:./Src/main.c  ****         LCD_SetLocation(&lcd, 7, 0);
 1256              		.loc 1 309 0 is_stmt 1
 1257 05d2 1549     		ldr	r1, .L120+40
 1258 05d4 0A98     		ldr	r0, [sp, #40]	@ float
 1259 05d6 FFF7FEFF 		bl	__aeabi_fcmplt
 1260              	.LVL180:
 1261 05da 58B3     		cbz	r0, .L110
 310:./Src/main.c  ****         LCD_WriteString(&lcd, " ");
 1262              		.loc 1 310 0
 1263 05dc 134E     		ldr	r6, .L120+44
 1264 05de 0022     		movs	r2, #0
 1265 05e0 0721     		movs	r1, #7
 1266 05e2 3046     		mov	r0, r6
 1267 05e4 FFF7FEFF 		bl	LCD_SetLocation
 1268              	.LVL181:
 311:./Src/main.c  ****         LCD_SetLocation(&lcd, 8, 0);
 1269              		.loc 1 311 0
ARM GAS  /tmp/ccKxeGvP.s 			page 34


 1270 05e8 1149     		ldr	r1, .L120+48
 1271 05ea 3046     		mov	r0, r6
 1272 05ec FFF7FEFF 		bl	LCD_WriteString
 1273              	.LVL182:
 312:./Src/main.c  ****       } else {
 1274              		.loc 1 312 0
 1275 05f0 0022     		movs	r2, #0
 1276 05f2 0821     		movs	r1, #8
 1277 05f4 3046     		mov	r0, r6
 1278 05f6 FFF7FEFF 		bl	LCD_SetLocation
 1279              	.LVL183:
 1280 05fa 20E0     		b	.L64
 1281              	.L121:
 1282 05fc AFF30080 		.align	3
 1283              	.L120:
 1284 0600 CDCCCCCC 		.word	-858993459
 1285 0604 CCCC0C40 		.word	1074580684
 1286 0608 00000000 		.word	.LANCHOR1
 1287 060c 00000000 		.word	counterTemp
 1288 0610 00000000 		.word	motorL
 1289 0614 00805640 		.word	1079410688
 1290 0618 00000000 		.word	motorR
 1291 061c 00000000 		.word	hiwdg
 1292 0620 F1197605 		.word	91625969
 1293 0624 00000000 		.word	LCDerrorFlag
 1294 0628 00002041 		.word	1092616192
 1295 062c 00000000 		.word	lcd
 1296 0630 44000000 		.word	.LC7
 1297              	.L110:
 314:./Src/main.c  ****       }
 1298              		.loc 1 314 0
 1299 0634 0022     		movs	r2, #0
 1300 0636 0721     		movs	r1, #7
 1301 0638 B548     		ldr	r0, .L122+8
 1302 063a FFF7FEFF 		bl	LCD_SetLocation
 1303              	.LVL184:
 1304              	.L64:
 316:./Src/main.c  ****       LCD_SetLocation(&lcd, 4, 1);
 1305              		.loc 1 316 0
 1306 063e 0A98     		ldr	r0, [sp, #40]	@ float
 1307 0640 FFF7FEFF 		bl	__aeabi_f2d
 1308              	.LVL185:
 1309 0644 B24E     		ldr	r6, .L122+8
 1310 0646 0223     		movs	r3, #2
 1311 0648 0093     		str	r3, [sp]
 1312 064a 0246     		mov	r2, r0
 1313 064c 0B46     		mov	r3, r1
 1314 064e 3046     		mov	r0, r6
 1315 0650 FFF7FEFF 		bl	LCD_WriteFloat
 1316              	.LVL186:
 317:./Src/main.c  ****       LCD_WriteFloat(&lcd,GET_BatteryAverage(),1);
 1317              		.loc 1 317 0
 1318 0654 0122     		movs	r2, #1
 1319 0656 0421     		movs	r1, #4
 1320 0658 3046     		mov	r0, r6
 1321 065a FFF7FEFF 		bl	LCD_SetLocation
 1322              	.LVL187:
ARM GAS  /tmp/ccKxeGvP.s 			page 35


 318:./Src/main.c  ****       float current = ABS(getMotorCurrentR() * 0.02) + ABS(getMotorCurrentL() * 0.02);
 1323              		.loc 1 318 0
 1324 065e FFF7FEFF 		bl	GET_BatteryAverage
 1325              	.LVL188:
 1326 0662 FFF7FEFF 		bl	__aeabi_f2d
 1327              	.LVL189:
 1328 0666 0123     		movs	r3, #1
 1329 0668 0093     		str	r3, [sp]
 1330 066a 0246     		mov	r2, r0
 1331 066c 0B46     		mov	r3, r1
 1332 066e 3046     		mov	r0, r6
 1333 0670 FFF7FEFF 		bl	LCD_WriteFloat
 1334              	.LVL190:
 319:./Src/main.c  ****       if (current < 10.0) {
 1335              		.loc 1 319 0
 1336 0674 FFF7FEFF 		bl	getMotorCurrentR
 1337              	.LVL191:
 1338 0678 FFF7FEFF 		bl	__aeabi_i2d
 1339              	.LVL192:
 1340 067c A2A3     		adr	r3, .L122
 1341 067e D3E90023 		ldrd	r2, [r3]
 1342 0682 FFF7FEFF 		bl	__aeabi_dmul
 1343              	.LVL193:
 1344 0686 0022     		movs	r2, #0
 1345 0688 0023     		movs	r3, #0
 1346 068a FFF7FEFF 		bl	__aeabi_dcmplt
 1347              	.LVL194:
 1348 068e 60B1     		cbz	r0, .L111
 319:./Src/main.c  ****       if (current < 10.0) {
 1349              		.loc 1 319 0 is_stmt 0 discriminator 1
 1350 0690 FFF7FEFF 		bl	getMotorCurrentR
 1351              	.LVL195:
 1352 0694 FFF7FEFF 		bl	__aeabi_i2d
 1353              	.LVL196:
 1354 0698 9BA3     		adr	r3, .L122
 1355 069a D3E90023 		ldrd	r2, [r3]
 1356 069e FFF7FEFF 		bl	__aeabi_dmul
 1357              	.LVL197:
 1358 06a2 0746     		mov	r7, r0
 1359 06a4 01F10046 		add	r6, r1, #-2147483648
 1360 06a8 0AE0     		b	.L67
 1361              	.L111:
 319:./Src/main.c  ****       if (current < 10.0) {
 1362              		.loc 1 319 0 discriminator 2
 1363 06aa FFF7FEFF 		bl	getMotorCurrentR
 1364              	.LVL198:
 1365 06ae FFF7FEFF 		bl	__aeabi_i2d
 1366              	.LVL199:
 1367 06b2 95A3     		adr	r3, .L122
 1368 06b4 D3E90023 		ldrd	r2, [r3]
 1369 06b8 FFF7FEFF 		bl	__aeabi_dmul
 1370              	.LVL200:
 1371 06bc 0746     		mov	r7, r0
 1372 06be 0E46     		mov	r6, r1
 1373              	.L67:
 319:./Src/main.c  ****       if (current < 10.0) {
 1374              		.loc 1 319 0 discriminator 4
ARM GAS  /tmp/ccKxeGvP.s 			page 36


 1375 06c0 FFF7FEFF 		bl	getMotorCurrentL
 1376              	.LVL201:
 1377 06c4 FFF7FEFF 		bl	__aeabi_i2d
 1378              	.LVL202:
 1379 06c8 8FA3     		adr	r3, .L122
 1380 06ca D3E90023 		ldrd	r2, [r3]
 1381 06ce FFF7FEFF 		bl	__aeabi_dmul
 1382              	.LVL203:
 1383 06d2 0022     		movs	r2, #0
 1384 06d4 0023     		movs	r3, #0
 1385 06d6 FFF7FEFF 		bl	__aeabi_dcmplt
 1386              	.LVL204:
 1387 06da 58B1     		cbz	r0, .L112
 319:./Src/main.c  ****       if (current < 10.0) {
 1388              		.loc 1 319 0 discriminator 5
 1389 06dc FFF7FEFF 		bl	getMotorCurrentL
 1390              	.LVL205:
 1391 06e0 FFF7FEFF 		bl	__aeabi_i2d
 1392              	.LVL206:
 1393 06e4 88A3     		adr	r3, .L122
 1394 06e6 D3E90023 		ldrd	r2, [r3]
 1395 06ea FFF7FEFF 		bl	__aeabi_dmul
 1396              	.LVL207:
 1397 06ee 01F10041 		add	r1, r1, #-2147483648
 1398 06f2 08E0     		b	.L70
 1399              	.L112:
 319:./Src/main.c  ****       if (current < 10.0) {
 1400              		.loc 1 319 0 discriminator 6
 1401 06f4 FFF7FEFF 		bl	getMotorCurrentL
 1402              	.LVL208:
 1403 06f8 FFF7FEFF 		bl	__aeabi_i2d
 1404              	.LVL209:
 1405 06fc 82A3     		adr	r3, .L122
 1406 06fe D3E90023 		ldrd	r2, [r3]
 1407 0702 FFF7FEFF 		bl	__aeabi_dmul
 1408              	.LVL210:
 1409              	.L70:
 319:./Src/main.c  ****       if (current < 10.0) {
 1410              		.loc 1 319 0 discriminator 8
 1411 0706 0246     		mov	r2, r0
 1412 0708 0B46     		mov	r3, r1
 1413 070a 3846     		mov	r0, r7
 1414 070c 3146     		mov	r1, r6
 1415 070e FFF7FEFF 		bl	__aeabi_dadd
 1416              	.LVL211:
 1417 0712 FFF7FEFF 		bl	__aeabi_d2f
 1418              	.LVL212:
 1419 0716 0646     		mov	r6, r0
 1420              	.LVL213:
 320:./Src/main.c  ****         LCD_SetLocation(&lcd, 10, 1);
 1421              		.loc 1 320 0 is_stmt 1 discriminator 8
 1422 0718 7E49     		ldr	r1, .L122+12
 1423 071a FFF7FEFF 		bl	__aeabi_fcmplt
 1424              	.LVL214:
 1425 071e 78B1     		cbz	r0, .L113
 321:./Src/main.c  ****         LCD_WriteString(&lcd, " ");
 1426              		.loc 1 321 0
ARM GAS  /tmp/ccKxeGvP.s 			page 37


 1427 0720 7B4F     		ldr	r7, .L122+8
 1428 0722 0122     		movs	r2, #1
 1429 0724 0A21     		movs	r1, #10
 1430 0726 3846     		mov	r0, r7
 1431 0728 FFF7FEFF 		bl	LCD_SetLocation
 1432              	.LVL215:
 322:./Src/main.c  ****         LCD_SetLocation(&lcd, 11, 1);
 1433              		.loc 1 322 0
 1434 072c 7A49     		ldr	r1, .L122+16
 1435 072e 3846     		mov	r0, r7
 1436 0730 FFF7FEFF 		bl	LCD_WriteString
 1437              	.LVL216:
 323:./Src/main.c  ****       } else {
 1438              		.loc 1 323 0
 1439 0734 0122     		movs	r2, #1
 1440 0736 0B21     		movs	r1, #11
 1441 0738 3846     		mov	r0, r7
 1442 073a FFF7FEFF 		bl	LCD_SetLocation
 1443              	.LVL217:
 1444 073e 04E0     		b	.L73
 1445              	.L113:
 325:./Src/main.c  ****       }
 1446              		.loc 1 325 0
 1447 0740 0122     		movs	r2, #1
 1448 0742 0A21     		movs	r1, #10
 1449 0744 7248     		ldr	r0, .L122+8
 1450 0746 FFF7FEFF 		bl	LCD_SetLocation
 1451              	.LVL218:
 1452              	.L73:
 327:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 1453              		.loc 1 327 0
 1454 074a 0021     		movs	r1, #0
 1455 074c 3046     		mov	r0, r6
 1456 074e FFF7FEFF 		bl	__aeabi_fcmplt
 1457              	.LVL219:
 1458 0752 10B1     		cbz	r0, .L114
 327:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 1459              		.loc 1 327 0 is_stmt 0 discriminator 1
 1460 0754 06F10040 		add	r0, r6, #-2147483648
 1461 0758 00E0     		b	.L74
 1462              	.L114:
 327:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 1463              		.loc 1 327 0
 1464 075a 3046     		mov	r0, r6
 1465              	.L74:
 327:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 1466              		.loc 1 327 0 discriminator 4
 1467 075c FFF7FEFF 		bl	__aeabi_f2d
 1468              	.LVL220:
 1469 0760 6B4E     		ldr	r6, .L122+8
 1470              	.LVL221:
 1471 0762 0223     		movs	r3, #2
 1472 0764 0093     		str	r3, [sp]
 1473 0766 0246     		mov	r2, r0
 1474 0768 0B46     		mov	r3, r1
 1475 076a 3046     		mov	r0, r6
 1476 076c FFF7FEFF 		bl	LCD_WriteFloat
ARM GAS  /tmp/ccKxeGvP.s 			page 38


 1477              	.LVL222:
 328:./Src/main.c  ****       LCD_WriteString(&lcd, "A");
 1478              		.loc 1 328 0 is_stmt 1 discriminator 4
 1479 0770 0122     		movs	r2, #1
 1480 0772 0F21     		movs	r1, #15
 1481 0774 3046     		mov	r0, r6
 1482 0776 FFF7FEFF 		bl	LCD_SetLocation
 1483              	.LVL223:
 329:./Src/main.c  ****     }
 1484              		.loc 1 329 0 discriminator 4
 1485 077a 6849     		ldr	r1, .L122+20
 1486 077c 3046     		mov	r0, r6
 1487 077e FFF7FEFF 		bl	LCD_WriteString
 1488              	.LVL224:
 1489              	.L61:
 1490              	.LBE7:
 336:./Src/main.c  ****     //Current_Motor_TASK();
 1491              		.loc 1 336 0
 1492 0782 FFF7FEFF 		bl	Battery_TASK
 1493              	.LVL225:
 1494              	.LBB8:
 344:./Src/main.c  ****       MotorL_pwm(0);
 1495              		.loc 1 344 0
 1496 0786 FFF7FEFF 		bl	getMotorCurrentR
 1497              	.LVL226:
 1498 078a FFF7FEFF 		bl	__aeabi_i2d
 1499              	.LVL227:
 1500 078e 5EA3     		adr	r3, .L122
 1501 0790 D3E90023 		ldrd	r2, [r3]
 1502 0794 FFF7FEFF 		bl	__aeabi_dmul
 1503              	.LVL228:
 1504 0798 0022     		movs	r2, #0
 1505 079a 0023     		movs	r3, #0
 1506 079c FFF7FEFF 		bl	__aeabi_dcmplt
 1507              	.LVL229:
 1508 07a0 78B1     		cbz	r0, .L115
 344:./Src/main.c  ****       MotorL_pwm(0);
 1509              		.loc 1 344 0 is_stmt 0 discriminator 1
 1510 07a2 FFF7FEFF 		bl	getMotorCurrentR
 1511              	.LVL230:
 1512 07a6 FFF7FEFF 		bl	__aeabi_i2d
 1513              	.LVL231:
 1514 07aa 57A3     		adr	r3, .L122
 1515 07ac D3E90023 		ldrd	r2, [r3]
 1516 07b0 FFF7FEFF 		bl	__aeabi_dmul
 1517              	.LVL232:
 1518 07b4 0022     		movs	r2, #0
 1519 07b6 5A4B     		ldr	r3, .L122+24
 1520 07b8 FFF7FEFF 		bl	__aeabi_dcmplt
 1521              	.LVL233:
 1522 07bc 0028     		cmp	r0, #0
 1523 07be 39D1     		bne	.L78
 1524 07c0 0DE0     		b	.L79
 1525              	.L115:
 344:./Src/main.c  ****       MotorL_pwm(0);
 1526              		.loc 1 344 0 discriminator 2
 1527 07c2 FFF7FEFF 		bl	getMotorCurrentR
ARM GAS  /tmp/ccKxeGvP.s 			page 39


 1528              	.LVL234:
 1529 07c6 FFF7FEFF 		bl	__aeabi_i2d
 1530              	.LVL235:
 1531 07ca 4FA3     		adr	r3, .L122
 1532 07cc D3E90023 		ldrd	r2, [r3]
 1533 07d0 FFF7FEFF 		bl	__aeabi_dmul
 1534              	.LVL236:
 1535 07d4 0022     		movs	r2, #0
 1536 07d6 534B     		ldr	r3, .L122+28
 1537 07d8 FFF7FEFF 		bl	__aeabi_dcmpgt
 1538              	.LVL237:
 1539 07dc 50BB     		cbnz	r0, .L78
 1540              	.L79:
 344:./Src/main.c  ****       MotorL_pwm(0);
 1541              		.loc 1 344 0 discriminator 3
 1542 07de FFF7FEFF 		bl	getMotorCurrentL
 1543              	.LVL238:
 1544 07e2 FFF7FEFF 		bl	__aeabi_i2d
 1545              	.LVL239:
 1546 07e6 48A3     		adr	r3, .L122
 1547 07e8 D3E90023 		ldrd	r2, [r3]
 1548 07ec FFF7FEFF 		bl	__aeabi_dmul
 1549              	.LVL240:
 1550 07f0 0022     		movs	r2, #0
 1551 07f2 0023     		movs	r3, #0
 1552 07f4 FFF7FEFF 		bl	__aeabi_dcmplt
 1553              	.LVL241:
 1554 07f8 70B1     		cbz	r0, .L116
 344:./Src/main.c  ****       MotorL_pwm(0);
 1555              		.loc 1 344 0 discriminator 4
 1556 07fa FFF7FEFF 		bl	getMotorCurrentL
 1557              	.LVL242:
 1558 07fe FFF7FEFF 		bl	__aeabi_i2d
 1559              	.LVL243:
 1560 0802 41A3     		adr	r3, .L122
 1561 0804 D3E90023 		ldrd	r2, [r3]
 1562 0808 FFF7FEFF 		bl	__aeabi_dmul
 1563              	.LVL244:
 1564 080c 0022     		movs	r2, #0
 1565 080e 444B     		ldr	r3, .L122+24
 1566 0810 FFF7FEFF 		bl	__aeabi_dcmplt
 1567              	.LVL245:
 1568 0814 70B9     		cbnz	r0, .L78
 1569 0816 3CE0     		b	.L82
 1570              	.L116:
 344:./Src/main.c  ****       MotorL_pwm(0);
 1571              		.loc 1 344 0 discriminator 5
 1572 0818 FFF7FEFF 		bl	getMotorCurrentL
 1573              	.LVL246:
 1574 081c FFF7FEFF 		bl	__aeabi_i2d
 1575              	.LVL247:
 1576 0820 39A3     		adr	r3, .L122
 1577 0822 D3E90023 		ldrd	r2, [r3]
 1578 0826 FFF7FEFF 		bl	__aeabi_dmul
 1579              	.LVL248:
 1580 082a 0022     		movs	r2, #0
 1581 082c 3D4B     		ldr	r3, .L122+28
ARM GAS  /tmp/ccKxeGvP.s 			page 40


 1582 082e FFF7FEFF 		bl	__aeabi_dcmpgt
 1583              	.LVL249:
 1584 0832 70B3     		cbz	r0, .L82
 1585              	.L78:
 345:./Src/main.c  ****       MotorR_pwm(0);
 1586              		.loc 1 345 0 is_stmt 1
 1587 0834 0020     		movs	r0, #0
 1588 0836 FFF7FEFF 		bl	MotorL_pwm
 1589              	.LVL250:
 346:./Src/main.c  ****       Buzzer_OneLongBeep();
 1590              		.loc 1 346 0
 1591 083a 0020     		movs	r0, #0
 1592 083c FFF7FEFF 		bl	MotorR_pwm
 1593              	.LVL251:
 347:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 1594              		.loc 1 347 0
 1595 0840 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1596              	.LVL252:
 348:./Src/main.c  ****       HAL_Delay(5);
 1597              		.loc 1 348 0
 1598 0844 324E     		ldr	r6, .L122+8
 1599 0846 3046     		mov	r0, r6
 1600 0848 FFF7FEFF 		bl	LCD_ClearDisplay
 1601              	.LVL253:
 349:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 1602              		.loc 1 349 0
 1603 084c 0520     		movs	r0, #5
 1604 084e FFF7FEFF 		bl	HAL_Delay
 1605              	.LVL254:
 350:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 1606              		.loc 1 350 0
 1607 0852 0022     		movs	r2, #0
 1608 0854 1146     		mov	r1, r2
 1609 0856 3046     		mov	r0, r6
 1610 0858 FFF7FEFF 		bl	LCD_SetLocation
 1611              	.LVL255:
 351:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 1612              		.loc 1 351 0
 1613 085c 3249     		ldr	r1, .L122+32
 1614 085e 3046     		mov	r0, r6
 1615 0860 FFF7FEFF 		bl	LCD_WriteString
 1616              	.LVL256:
 352:./Src/main.c  ****       LCD_WriteString(&lcd, "Overcurrent.");
 1617              		.loc 1 352 0
 1618 0864 0122     		movs	r2, #1
 1619 0866 0021     		movs	r1, #0
 1620 0868 3046     		mov	r0, r6
 1621 086a FFF7FEFF 		bl	LCD_SetLocation
 1622              	.LVL257:
 353:./Src/main.c  ****       HAL_Delay(500);
 1623              		.loc 1 353 0
 1624 086e 2F49     		ldr	r1, .L122+36
 1625 0870 3046     		mov	r0, r6
 1626 0872 FFF7FEFF 		bl	LCD_WriteString
 1627              	.LVL258:
 354:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 1628              		.loc 1 354 0
ARM GAS  /tmp/ccKxeGvP.s 			page 41


 1629 0876 4FF4FA70 		mov	r0, #500
 1630 087a FFF7FEFF 		bl	HAL_Delay
 1631              	.LVL259:
 355:./Src/main.c  ****       HAL_Delay(500);
 1632              		.loc 1 355 0
 1633 087e 2C48     		ldr	r0, .L122+40
 1634 0880 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1635              	.LVL260:
 356:./Src/main.c  ****       Power_Set(0);
 1636              		.loc 1 356 0
 1637 0884 4FF4FA70 		mov	r0, #500
 1638 0888 FFF7FEFF 		bl	HAL_Delay
 1639              	.LVL261:
 357:./Src/main.c  ****     }
 1640              		.loc 1 357 0
 1641 088c 0020     		movs	r0, #0
 1642 088e FFF7FEFF 		bl	Power_Set
 1643              	.LVL262:
 1644              	.L82:
 1645              	.LBE8:
 360:./Src/main.c  ****       MotorL_pwm(0);
 1646              		.loc 1 360 0
 1647 0892 FFF7FEFF 		bl	GET_BatteryAverage
 1648              	.LVL263:
 1649 0896 2749     		ldr	r1, .L122+44
 1650 0898 FFF7FEFF 		bl	__aeabi_fcmplt
 1651              	.LVL264:
 1652 089c 70B3     		cbz	r0, .L84
 361:./Src/main.c  ****       MotorR_pwm(0);
 1653              		.loc 1 361 0
 1654 089e 0020     		movs	r0, #0
 1655 08a0 FFF7FEFF 		bl	MotorL_pwm
 1656              	.LVL265:
 362:./Src/main.c  ****       Buzzer_OneLongBeep();
 1657              		.loc 1 362 0
 1658 08a4 0020     		movs	r0, #0
 1659 08a6 FFF7FEFF 		bl	MotorR_pwm
 1660              	.LVL266:
 363:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 1661              		.loc 1 363 0
 1662 08aa FFF7FEFF 		bl	Buzzer_OneLongBeep
 1663              	.LVL267:
 364:./Src/main.c  ****       HAL_Delay(5);
 1664              		.loc 1 364 0
 1665 08ae 184E     		ldr	r6, .L122+8
 1666 08b0 3046     		mov	r0, r6
 1667 08b2 FFF7FEFF 		bl	LCD_ClearDisplay
 1668              	.LVL268:
 365:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 1669              		.loc 1 365 0
 1670 08b6 0520     		movs	r0, #5
 1671 08b8 FFF7FEFF 		bl	HAL_Delay
 1672              	.LVL269:
 366:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 1673              		.loc 1 366 0
 1674 08bc 0022     		movs	r2, #0
 1675 08be 1146     		mov	r1, r2
ARM GAS  /tmp/ccKxeGvP.s 			page 42


 1676 08c0 3046     		mov	r0, r6
 1677 08c2 FFF7FEFF 		bl	LCD_SetLocation
 1678              	.LVL270:
 367:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 1679              		.loc 1 367 0
 1680 08c6 1849     		ldr	r1, .L122+32
 1681 08c8 3046     		mov	r0, r6
 1682 08ca FFF7FEFF 		bl	LCD_WriteString
 1683              	.LVL271:
 368:./Src/main.c  ****       LCD_WriteString(&lcd, "Battery low.");
 1684              		.loc 1 368 0
 1685 08ce 0122     		movs	r2, #1
 1686 08d0 0021     		movs	r1, #0
 1687 08d2 3046     		mov	r0, r6
 1688 08d4 FFF7FEFF 		bl	LCD_SetLocation
 1689              	.LVL272:
 369:./Src/main.c  ****       HAL_Delay(500);
 1690              		.loc 1 369 0
 1691 08d8 1749     		ldr	r1, .L122+48
 1692 08da 3046     		mov	r0, r6
 1693 08dc FFF7FEFF 		bl	LCD_WriteString
 1694              	.LVL273:
 370:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 1695              		.loc 1 370 0
 1696 08e0 4FF4FA70 		mov	r0, #500
 1697 08e4 FFF7FEFF 		bl	HAL_Delay
 1698              	.LVL274:
 371:./Src/main.c  ****       HAL_Delay(500);
 1699              		.loc 1 371 0
 1700 08e8 1148     		ldr	r0, .L122+40
 1701 08ea FFF7FEFF 		bl	HAL_IWDG_Refresh
 1702              	.LVL275:
 372:./Src/main.c  ****       Power_Set(0);
 1703              		.loc 1 372 0
 1704 08ee 4FF4FA70 		mov	r0, #500
 1705 08f2 FFF7FEFF 		bl	HAL_Delay
 1706              	.LVL276:
 373:./Src/main.c  ****     }
 1707              		.loc 1 373 0
 1708 08f6 0020     		movs	r0, #0
 1709 08f8 FFF7FEFF 		bl	Power_Set
 1710              	.LVL277:
 1711              	.L84:
 377:./Src/main.c  **** 
 1712              		.loc 1 377 0
 1713 08fc 0C48     		ldr	r0, .L122+40
 1714 08fe FFF7FEFF 		bl	HAL_IWDG_Refresh
 1715              	.LVL278:
 383:./Src/main.c  **** 
 1716              		.loc 1 383 0
 1717 0902 2DE4     		b	.L86
 1718              	.L123:
 1719 0904 AFF30080 		.align	3
 1720              	.L122:
 1721 0908 7B14AE47 		.word	1202590843
 1722 090c E17A943F 		.word	1066695393
 1723 0910 00000000 		.word	lcd
ARM GAS  /tmp/ccKxeGvP.s 			page 43


 1724 0914 00002041 		.word	1092616192
 1725 0918 44000000 		.word	.LC7
 1726 091c 30000000 		.word	.LC4
 1727 0920 008047C0 		.word	-1069056000
 1728 0924 00804740 		.word	1078427648
 1729 0928 48000000 		.word	.LC8
 1730 092c 58000000 		.word	.LC9
 1731 0930 00000000 		.word	hiwdg
 1732 0934 0000F841 		.word	1106771968
 1733 0938 68000000 		.word	.LC10
 1734              		.cfi_endproc
 1735              	.LFE65:
 1737              		.global	timeout
 1738              		.global	rx_count
 1739              		.global	data_ready
 1740              		.global	pointer
 1741              		.global	rc_data
 1742              		.global	captured_value
 1743              		.comm	htim2,60,4
 1744              		.global	saveValue
 1745              		.comm	lcd,140,4
 1746              		.comm	counterTempTT,4,4
 1747              		.comm	counterTemp,4,4
 1748              		.global	speed
 1749              		.comm	hiwdg,16,4
 1750              		.global	VarValue
 1751              		.global	VarDataTab
 1752              		.global	VirtAddVarTab
 1753              		.section	.bss.pointer,"aw",%nobits
 1756              	pointer:
 1757 0000 00       		.space	1
 1758              		.section	.bss.rc_data,"aw",%nobits
 1759              		.align	2
 1762              	rc_data:
 1763 0000 00000000 		.space	10
 1763      00000000 
 1763      0000
 1764              		.section	.bss.saveValue,"aw",%nobits
 1765              		.align	1
 1766              		.set	.LANCHOR3,. + 0
 1769              	saveValue:
 1770 0000 0000     		.space	2
 1771              		.section	.bss.captured_value,"aw",%nobits
 1772              		.align	2
 1773              		.set	.LANCHOR2,. + 0
 1776              	captured_value:
 1777 0000 00000000 		.space	16
 1777      00000000 
 1777      00000000 
 1777      00000000 
 1778              		.section	.bss.VarValue,"aw",%nobits
 1779              		.align	1
 1782              	VarValue:
 1783 0000 0000     		.space	2
 1784              		.section	.bss.rx_count,"aw",%nobits
 1785              		.set	.LANCHOR0,. + 0
 1788              	rx_count:
ARM GAS  /tmp/ccKxeGvP.s 			page 44


 1789 0000 00       		.space	1
 1790              		.section	.data.VirtAddVarTab,"aw",%progbits
 1791              		.align	2
 1792              		.set	.LANCHOR4,. + 0
 1795              	VirtAddVarTab:
 1796 0000 3713     		.short	4919
 1797 0002 00000000 		.space	4
 1798              		.section	.rodata.str1.4,"aMS",%progbits,1
 1799              		.align	2
 1800              	.LC0:
 1801 0000 53657373 		.ascii	"SesselOtter V5.2\000"
 1801      656C4F74 
 1801      74657220 
 1801      56352E32 
 1801      00
 1802 0011 000000   		.space	3
 1803              	.LC1:
 1804 0014 496E6974 		.ascii	"Initializing...\000"
 1804      69616C69 
 1804      7A696E67 
 1804      2E2E2E00 
 1805              	.LC2:
 1806 0024 4261743A 		.ascii	"Bat:\000"
 1806      00
 1807 0029 000000   		.space	3
 1808              	.LC3:
 1809 002c 5600     		.ascii	"V\000"
 1810 002e 0000     		.space	2
 1811              	.LC4:
 1812 0030 4100     		.ascii	"A\000"
 1813 0032 0000     		.space	2
 1814              	.LC5:
 1815 0034 53706565 		.ascii	"Speed:\000"
 1815      643A00
 1816 003b 00       		.space	1
 1817              	.LC6:
 1818 003c 6B6D2F68 		.ascii	"km/h\000"
 1818      00
 1819 0041 000000   		.space	3
 1820              	.LC7:
 1821 0044 2000     		.ascii	" \000"
 1822 0046 0000     		.space	2
 1823              	.LC8:
 1824 0048 456D6572 		.ascii	"Emergency Off!\000"
 1824      67656E63 
 1824      79204F66 
 1824      662100
 1825 0057 00       		.space	1
 1826              	.LC9:
 1827 0058 4F766572 		.ascii	"Overcurrent.\000"
 1827      63757272 
 1827      656E742E 
 1827      00
 1828 0065 000000   		.space	3
 1829              	.LC10:
 1830 0068 42617474 		.ascii	"Battery low.\000"
 1830      65727920 
ARM GAS  /tmp/ccKxeGvP.s 			page 45


 1830      6C6F772E 
 1830      00
 1831              		.section	.bss.timeout,"aw",%nobits
 1832              		.align	2
 1833              		.set	.LANCHOR1,. + 0
 1836              	timeout:
 1837 0000 00000000 		.space	4
 1838              		.section	.bss.speed,"aw",%nobits
 1839              		.align	1
 1842              	speed:
 1843 0000 0000     		.space	2
 1844              		.section	.bss.VarDataTab,"aw",%nobits
 1845              		.align	2
 1848              	VarDataTab:
 1849 0000 00000000 		.space	6
 1849      0000
 1850              		.section	.bss.data_ready,"aw",%nobits
 1853              	data_ready:
 1854 0000 00       		.space	1
 1855              		.text
 1856              	.Letext0:
 1857              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1858              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1859              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1860              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1861              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1862              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1863              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1864              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1865              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1866              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 1867              		.file 12 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1868              		.file 13 "./Inc/motor_L.h"
 1869              		.file 14 "./Inc/motor_R.h"
 1870              		.file 15 "./Inc/pcf8574.h"
 1871              		.file 16 "./Inc/hd44780.h"
 1872              		.file 17 "./Drivers/CMSIS/Include/core_cm3.h"
 1873              		.file 18 "./Inc/delay.h"
 1874              		.file 19 "./Inc/eeprom.h"
 1875              		.file 20 "./Inc/ADC_R.h"
 1876              		.file 21 "./Inc/ADC_L.h"
 1877              		.file 22 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1878              		.file 23 "./Inc/varie.h"
 1879              		.file 24 "./Inc/application.h"
 1880              		.file 25 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccKxeGvP.s 			page 46


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccKxeGvP.s:20     .text.PPM_ISR_Callback:00000000 $t
     /tmp/ccKxeGvP.s:25     .text.PPM_ISR_Callback:00000000 PPM_ISR_Callback
     /tmp/ccKxeGvP.s:102    .text.PPM_ISR_Callback:0000005c $d
     /tmp/ccKxeGvP.s:109    .text.saveConfig:00000000 $t
     /tmp/ccKxeGvP.s:114    .text.saveConfig:00000000 saveConfig
     /tmp/ccKxeGvP.s:136    .text.saveConfig:00000010 $d
     /tmp/ccKxeGvP.s:142    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccKxeGvP.s:147    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccKxeGvP.s:183    .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/ccKxeGvP.s:189    .text.Error_Handler:00000000 $t
     /tmp/ccKxeGvP.s:194    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccKxeGvP.s:218    .text.MX_IWDG_Init:00000000 $t
     /tmp/ccKxeGvP.s:222    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/ccKxeGvP.s:277    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/ccKxeGvP.s:284    .text.SystemClock_Config:00000000 $t
     /tmp/ccKxeGvP.s:289    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccKxeGvP.s:393    .text.SystemClock_Config:00000088 $d
     /tmp/ccKxeGvP.s:412    .text.main:00000000 $t
     /tmp/ccKxeGvP.s:417    .text.main:00000000 main
     /tmp/ccKxeGvP.s:784    .text.main:00000260 $d
                            *COM*:0000008c lcd
     /tmp/ccKxeGvP.s:803    .text.main:000002a8 $t
     /tmp/ccKxeGvP.s:1284   .text.main:00000600 $d
                            *COM*:00000004 counterTemp
     /tmp/ccKxeGvP.s:1299   .text.main:00000634 $t
     /tmp/ccKxeGvP.s:1721   .text.main:00000908 $d
     /tmp/ccKxeGvP.s:1836   .bss.timeout:00000000 timeout
     /tmp/ccKxeGvP.s:1788   .bss.rx_count:00000000 rx_count
     /tmp/ccKxeGvP.s:1853   .bss.data_ready:00000000 data_ready
     /tmp/ccKxeGvP.s:1756   .bss.pointer:00000000 pointer
     /tmp/ccKxeGvP.s:1762   .bss.rc_data:00000000 rc_data
     /tmp/ccKxeGvP.s:1776   .bss.captured_value:00000000 captured_value
                            *COM*:0000003c htim2
     /tmp/ccKxeGvP.s:1769   .bss.saveValue:00000000 saveValue
                            *COM*:00000004 counterTempTT
     /tmp/ccKxeGvP.s:1842   .bss.speed:00000000 speed
     /tmp/ccKxeGvP.s:1782   .bss.VarValue:00000000 VarValue
     /tmp/ccKxeGvP.s:1848   .bss.VarDataTab:00000000 VarDataTab
     /tmp/ccKxeGvP.s:1795   .data.VirtAddVarTab:00000000 VirtAddVarTab
     /tmp/ccKxeGvP.s:1757   .bss.pointer:00000000 $d
     /tmp/ccKxeGvP.s:1759   .bss.rc_data:00000000 $d
     /tmp/ccKxeGvP.s:1765   .bss.saveValue:00000000 $d
     /tmp/ccKxeGvP.s:1772   .bss.captured_value:00000000 $d
     /tmp/ccKxeGvP.s:1779   .bss.VarValue:00000000 $d
     /tmp/ccKxeGvP.s:1789   .bss.rx_count:00000000 $d
     /tmp/ccKxeGvP.s:1791   .data.VirtAddVarTab:00000000 $d
     /tmp/ccKxeGvP.s:1799   .rodata.str1.4:00000000 $d
     /tmp/ccKxeGvP.s:1832   .bss.timeout:00000000 $d
     /tmp/ccKxeGvP.s:1839   .bss.speed:00000000 $d
     /tmp/ccKxeGvP.s:1845   .bss.VarDataTab:00000000 $d
     /tmp/ccKxeGvP.s:1854   .bss.data_ready:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccKxeGvP.s 			page 47


_stop_timer
_init_us
EE_WriteVariable
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_dmul
__aeabi_dsub
__aeabi_ddiv
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_d2iz
__aeabi_dadd
__aeabi_i2f
__aeabi_fmul
__aeabi_f2iz
__aeabi_d2f
__aeabi_fcmplt
__aeabi_f2d
HAL_Init
Button_init
Power_Set
HAL_Delay
ADC_L_init
ADC_R_init
MX_I2C2_Init
LCD_Init
LCD_ClearDisplay
LCD_SetLocation
LCD_WriteString
Buzzer_init
Led_init
IS_Charge_init
Led_Set
IS_Button
MotorL_init
MotorR_init
applcation_init
Battery_TASK
Buzzer_TwoBeep
MotorR_start
MotorL_start
Timer_init
hi2c2
LCDerrorFlag
GET_BatteryAverage
ARM GAS  /tmp/ccKxeGvP.s 			page 48


get_powerMax
MotorR_pwm
MotorL_pwm
HAL_GetTick
HAL_IWDG_Refresh
Buzzer_OneLongBeep
motorL
motorR
LCD_WriteFloat
getMotorCurrentR
getMotorCurrentL
