ARM GAS  /tmp/ccn3VhA9.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PPM_ISR_Callback,"ax",%progbits
  20              		.align	2
  21              		.global	PPM_ISR_Callback
  22              		.thumb
  23              		.thumb_func
  25              	PPM_ISR_Callback:
  26              	.LFB64:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/ccn3VhA9.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "eeprom.h"
  46:./Src/main.c  **** #include "motor_L.h"
  47:./Src/main.c  **** #include "motor_R.h"
  48:./Src/main.c  **** #include "varie.h"
  49:./Src/main.c  **** #include "ADC_L.h"
  50:./Src/main.c  **** #include "ADC_R.h"
  51:./Src/main.c  **** #include "delay.h"
  52:./Src/main.c  **** #include "pid.h"
  53:./Src/main.c  **** #include "application.h"
  54:./Src/main.c  **** #include "telemetry.h"
  55:./Src/main.c  **** #include "hd44780.h"
  56:./Src/main.c  **** #include <math.h>
  57:./Src/main.c  **** 
  58:./Src/main.c  **** // copied from STMBL
  59:./Src/main.c  **** #define NO 0
  60:./Src/main.c  **** #define YES 1
  61:./Src/main.c  **** #define ABS(a) (((a) < 0.0) ? -(a) : (a))
  62:./Src/main.c  **** #define LIMIT(x, lowhigh) (((x) > (lowhigh)) ? (lowhigh) : (((x) < (-lowhigh)) ? (-lowhigh) : (x)))
  63:./Src/main.c  **** #define SAT(x, lowhigh) (((x) > (lowhigh)) ? (1.0) : (((x) < (-lowhigh)) ? (-1.0) : (0.0)))
  64:./Src/main.c  **** #define SAT2(x, low, high) (((x) > (high)) ? (1.0) : (((x) < (low)) ? (-1.0) : (0.0)))
  65:./Src/main.c  **** #define STEP(from, to, step) (((from) < (to)) ? (MIN((from) + (step), (to))) : (MAX((from) - (step)
  66:./Src/main.c  **** #define DEG(a) ((a)*M_PI / 180.0)
  67:./Src/main.c  **** #define RAD(a) ((a)*180.0 / M_PI)
  68:./Src/main.c  **** #define SIGN(a) (((a) < 0.0) ? (-1.0) : (((a) > 0.0) ? (1.0) : (0.0)))
  69:./Src/main.c  **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  70:./Src/main.c  **** #define SCALE(value, high, max) MIN(MAX(((max) - (value)) / ((max) - (high)), 0.0), 1.0)
  71:./Src/main.c  **** #define MIN(a, b) (((a) < (b)) ? (a) : (b))
  72:./Src/main.c  **** #define MAX(a, b) (((a) > (b)) ? (a) : (b))
  73:./Src/main.c  **** #define MIN3(a, b, c) MIN(a, MIN(b, c))
  74:./Src/main.c  **** #define MAX3(a, b, c) MAX(a, MAX(b, c))
  75:./Src/main.c  **** 
  76:./Src/main.c  **** #define PI 3.14159265
  77:./Src/main.c  **** 
  78:./Src/main.c  **** /* Virtual address defined by the user: 0xFFFF value is prohibited */
  79:./Src/main.c  **** uint16_t VirtAddVarTab[NB_OF_VAR] = {0x1337};
  80:./Src/main.c  **** uint16_t VarDataTab[NB_OF_VAR] = {0};
  81:./Src/main.c  **** uint16_t VarValue = 0;
  82:./Src/main.c  **** 
  83:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  84:./Src/main.c  **** 
  85:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  86:./Src/main.c  **** void SystemClock_Config(void);
  87:./Src/main.c  **** void Error_Handler(void);
  88:./Src/main.c  **** //extern struct PID_dati pid_R_;
ARM GAS  /tmp/ccn3VhA9.s 			page 3


  89:./Src/main.c  **** static void MX_IWDG_Init(void);
  90:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  91:./Src/main.c  **** 
  92:./Src/main.c  **** volatile __IO int16_t speed = 0;
  93:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  94:./Src/main.c  **** extern struct MOTOR_Ldati motorL;
  95:./Src/main.c  **** extern struct MOTOR_Rdati motorR;
  96:./Src/main.c  **** //extern struct COMMAND_data commandsequence;
  97:./Src/main.c  **** 
  98:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
  99:./Src/main.c  **** LCD_PCF8574_HandleTypeDef lcd;
 100:./Src/main.c  **** extern I2C_HandleTypeDef hi2c2;
 101:./Src/main.c  **** uint16_t saveValue = 0;
 102:./Src/main.c  **** 
 103:./Src/main.c  **** TIM_HandleTypeDef htim2;
 104:./Src/main.c  **** 
 105:./Src/main.c  **** uint16_t captured_value[8] = {0};
 106:./Src/main.c  **** uint16_t rc_data[5] = {0};
 107:./Src/main.c  **** uint8_t pointer = 0;
 108:./Src/main.c  **** uint8_t data_ready = 0;
 109:./Src/main.c  **** /* USER CODE END PV */
 110:./Src/main.c  **** uint8_t rx_count = 0;
 111:./Src/main.c  **** uint32_t timeout = 0;
 112:./Src/main.c  **** 
 113:./Src/main.c  **** void PPM_ISR_Callback() {
  28              		.loc 1 113 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
 114:./Src/main.c  ****   // Dummy loop with 16 bit count wrap around
 115:./Src/main.c  ****   uint16_t rc_delay = TIM2->CNT;
  37              		.loc 1 115 0
  38 0002 4FF08043 		mov	r3, #1073741824
  39 0006 5C6A     		ldr	r4, [r3, #36]
  40 0008 A4B2     		uxth	r4, r4
  41              	.LVL0:
 116:./Src/main.c  ****   _stop_timer();
  42              		.loc 1 116 0
  43 000a FFF7FEFF 		bl	_stop_timer
  44              	.LVL1:
 117:./Src/main.c  **** 
 118:./Src/main.c  ****   if (rc_delay > 3000) {
  45              		.loc 1 118 0
  46 000e 40F6B833 		movw	r3, #3000
  47 0012 9C42     		cmp	r4, r3
  48 0014 03D9     		bls	.L2
 119:./Src/main.c  ****     rx_count = 0;
  49              		.loc 1 119 0
  50 0016 0022     		movs	r2, #0
  51 0018 104B     		ldr	r3, .L8
  52 001a 1A70     		strb	r2, [r3]
  53 001c 1AE0     		b	.L3
ARM GAS  /tmp/ccn3VhA9.s 			page 4


  54              	.L2:
 120:./Src/main.c  ****   }
 121:./Src/main.c  ****   else if (rx_count < 6){
  55              		.loc 1 121 0
  56 001e 0F4B     		ldr	r3, .L8
  57 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  58 0022 052B     		cmp	r3, #5
  59 0024 16D8     		bhi	.L3
 122:./Src/main.c  ****     timeout = 0;
  60              		.loc 1 122 0
  61 0026 0021     		movs	r1, #0
  62 0028 0D4A     		ldr	r2, .L8+4
  63 002a 1160     		str	r1, [r2]
 123:./Src/main.c  ****     captured_value[rx_count] = CLAMP(rc_delay, 1000, 2000) - 1000;
  64              		.loc 1 123 0
  65 002c B4F5FA6F 		cmp	r4, #2000
  66 0030 06D8     		bhi	.L5
  67              		.loc 1 123 0 is_stmt 0 discriminator 1
  68 0032 B4F57A7F 		cmp	r4, #1000
  69 0036 06D3     		bcc	.L6
  70              		.loc 1 123 0 discriminator 3
  71 0038 A4F57A74 		sub	r4, r4, #1000
  72              	.LVL2:
  73 003c A4B2     		uxth	r4, r4
  74              	.LVL3:
  75 003e 03E0     		b	.L4
  76              	.LVL4:
  77              	.L5:
  78              		.loc 1 123 0
  79 0040 4FF47A74 		mov	r4, #1000
  80              	.LVL5:
  81 0044 00E0     		b	.L4
  82              	.LVL6:
  83              	.L6:
  84 0046 0024     		movs	r4, #0
  85              	.LVL7:
  86              	.L4:
  87              		.loc 1 123 0 discriminator 8
  88 0048 064A     		ldr	r2, .L8+8
  89 004a 22F81340 		strh	r4, [r2, r3, lsl #1]	@ movhi
 124:./Src/main.c  ****     rx_count++;
  90              		.loc 1 124 0 is_stmt 1 discriminator 8
  91 004e 0133     		adds	r3, r3, #1
  92 0050 024A     		ldr	r2, .L8
  93 0052 1370     		strb	r3, [r2]
  94              	.L3:
 125:./Src/main.c  ****   }
 126:./Src/main.c  ****   _init_us();
  95              		.loc 1 126 0
  96 0054 FFF7FEFF 		bl	_init_us
  97              	.LVL8:
  98 0058 10BD     		pop	{r4, pc}
  99              	.L9:
 100 005a 00BF     		.align	2
 101              	.L8:
 102 005c 00000000 		.word	.LANCHOR0
 103 0060 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccn3VhA9.s 			page 5


 104 0064 00000000 		.word	.LANCHOR2
 105              		.cfi_endproc
 106              	.LFE64:
 108              		.section	.text.saveConfig,"ax",%progbits
 109              		.align	2
 110              		.global	saveConfig
 111              		.thumb
 112              		.thumb_func
 114              	saveConfig:
 115              	.LFB66:
 127:./Src/main.c  **** }
 128:./Src/main.c  **** 
 129:./Src/main.c  **** int main(void)
 130:./Src/main.c  **** {
 131:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 132:./Src/main.c  ****   HAL_Init();
 133:./Src/main.c  **** 
 134:./Src/main.c  ****   /* Configure the system clock */
 135:./Src/main.c  ****   SystemClock_Config();
 136:./Src/main.c  **** 
 137:./Src/main.c  ****   Button_init();
 138:./Src/main.c  **** 
 139:./Src/main.c  ****   Power_Set(1);
 140:./Src/main.c  **** 
 141:./Src/main.c  ****   HAL_Delay(10);
 142:./Src/main.c  **** 
 143:./Src/main.c  ****   ADC_L_init();
 144:./Src/main.c  ****   ADC_R_init();
 145:./Src/main.c  **** 
 146:./Src/main.c  **** 
 147:./Src/main.c  ****   //Telemetry_init();
 148:./Src/main.c  ****   MX_I2C2_Init();
 149:./Src/main.c  **** 
 150:./Src/main.c  ****   /* Unlock the Flash Program Erase controller */
 151:./Src/main.c  ****   //HAL_FLASH_Unlock();
 152:./Src/main.c  **** 
 153:./Src/main.c  ****   /* EEPROM Init */
 154:./Src/main.c  ****   //EE_Init();
 155:./Src/main.c  **** 
 156:./Src/main.c  **** 
 157:./Src/main.c  ****   lcd.pcf8574.PCF_I2C_ADDRESS = 0x27;
 158:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 159:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 160:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 161:./Src/main.c  **** 	lcd.type = TYPE0;
 162:./Src/main.c  **** 
 163:./Src/main.c  **** 	if(LCD_Init(&lcd)!=LCD_OK){
 164:./Src/main.c  **** 		// error occured
 165:./Src/main.c  **** 		while(1);
 166:./Src/main.c  **** 	}
 167:./Src/main.c  **** 
 168:./Src/main.c  **** 	LCD_ClearDisplay(&lcd);
 169:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 170:./Src/main.c  **** 	LCD_WriteString(&lcd, "SesselOtter V5.2");
 171:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 172:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
 173:./Src/main.c  **** 
ARM GAS  /tmp/ccn3VhA9.s 			page 6


 174:./Src/main.c  ****   Buzzer_init();
 175:./Src/main.c  ****   Led_init();
 176:./Src/main.c  ****   IS_Charge_init();
 177:./Src/main.c  **** 
 178:./Src/main.c  **** //  Timer_init();
 179:./Src/main.c  ****   //Timer_init();
 180:./Src/main.c  ****   //MX_TIM2_Init();
 181:./Src/main.c  **** 
 182:./Src/main.c  **** 
 183:./Src/main.c  ****   //PID_init(0,900); //pwm limit
 184:./Src/main.c  ****   //PID_set_L_costant(0.05,0.01,0.0);
 185:./Src/main.c  ****   //PID_set_R_costant(2.0,0.5,0.0);
 186:./Src/main.c  **** 
 187:./Src/main.c  **** //DebugPin_init();
 188:./Src/main.c  ****   //HAL_Delay(350);
 189:./Src/main.c  ****   while(IS_Button()) {
 190:./Src/main.c  ****     Led_Set(0);
 191:./Src/main.c  ****   }
 192:./Src/main.c  **** 
 193:./Src/main.c  **** 
 194:./Src/main.c  ****   MotorL_init();
 195:./Src/main.c  ****   MotorR_init();
 196:./Src/main.c  **** 
 197:./Src/main.c  ****   applcation_init();
 198:./Src/main.c  ****   Battery_TASK();
 199:./Src/main.c  **** 
 200:./Src/main.c  ****   MX_IWDG_Init();
 201:./Src/main.c  **** 
 202:./Src/main.c  ****   Led_Set(1);
 203:./Src/main.c  ****   Buzzer_TwoBeep();
 204:./Src/main.c  ****   HAL_Delay(250);
 205:./Src/main.c  **** 
 206:./Src/main.c  ****   MotorR_start();
 207:./Src/main.c  ****   MotorL_start();
 208:./Src/main.c  ****   //MotorR_pwm(80);
 209:./Src/main.c  ****   //MotorL_pwm(-200);
 210:./Src/main.c  **** 
 211:./Src/main.c  ****   Timer_init();
 212:./Src/main.c  **** 
 213:./Src/main.c  ****   //MotorR_pwm(200);
 214:./Src/main.c  ****   //MotorL_pwm(-150);
 215:./Src/main.c  **** 
 216:./Src/main.c  ****   //MotorR_pwm(-50);
 217:./Src/main.c  ****   //MotorL_pwm(50);
 218:./Src/main.c  ****   int16_t speedR = 0;
 219:./Src/main.c  ****   int16_t speedL = 0;
 220:./Src/main.c  **** 
 221:./Src/main.c  ****   uint8_t state = 0;
 222:./Src/main.c  **** 
 223:./Src/main.c  ****   LCD_ClearDisplay(&lcd);
 224:./Src/main.c  ****   HAL_Delay(5);
 225:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 226:./Src/main.c  **** 	LCD_WriteString(&lcd, "Bat:");
 227:./Src/main.c  ****   LCD_SetLocation(&lcd, 8, 1);
 228:./Src/main.c  ****   LCD_WriteString(&lcd, "V");
 229:./Src/main.c  **** 
 230:./Src/main.c  ****   LCD_SetLocation(&lcd, 15, 1);
ARM GAS  /tmp/ccn3VhA9.s 			page 7


 231:./Src/main.c  ****   LCD_WriteString(&lcd, "A");
 232:./Src/main.c  **** 
 233:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 234:./Src/main.c  **** 	LCD_WriteString(&lcd, "Speed:");
 235:./Src/main.c  ****   LCD_SetLocation(&lcd, 12, 0);
 236:./Src/main.c  ****   LCD_WriteString(&lcd, "km/h");
 237:./Src/main.c  **** 
 238:./Src/main.c  ****   uint32_t sinValue = 1999;
 239:./Src/main.c  **** 
 240:./Src/main.c  ****   int lastSpeedL = 0, lastSpeedR = 0;
 241:./Src/main.c  ****   int32_t lastMotorposR = 0, lastMotorposL = 0;
 242:./Src/main.c  ****   float speedReading = 0.0;
 243:./Src/main.c  ****   while(1){
 244:./Src/main.c  ****     sinValue++;
 245:./Src/main.c  ****     if ((sinValue) % (200) == 0) {
 246:./Src/main.c  ****       state = !state;
 247:./Src/main.c  ****       //Led_Set(state);
 248:./Src/main.c  ****       //Console_Log("otter!\n\r");
 249:./Src/main.c  ****       char str[200];
 250:./Src/main.c  ****       memset(&str[0], 0, sizeof(str));
 251:./Src/main.c  ****       sprintf(str, "%i;%i;%i;%i;%i;%i\n\r", captured_value[0], captured_value[1], captured_value[2]
 252:./Src/main.c  ****       int readR = -(CLAMP((((captured_value[1]-500)-(captured_value[0]-500)/2.0)*(captured_value[2]
 253:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 254:./Src/main.c  **** 
 255:./Src/main.c  ****       int16_t tempL = speedL;
 256:./Src/main.c  ****       speedL -=  tempL / 1.0;
 257:./Src/main.c  ****       speedL += readL / 1.0;
 258:./Src/main.c  **** 
 259:./Src/main.c  ****       int16_t tempR = speedR;
 260:./Src/main.c  ****       speedR -=  tempR / 1.0;
 261:./Src/main.c  ****       speedR += readR / 1.0;
 262:./Src/main.c  **** 
 263:./Src/main.c  **** 
 264:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 265:./Src/main.c  ****         MotorR_pwm(speedR);
 266:./Src/main.c  ****         MotorL_pwm(speedL);
 267:./Src/main.c  ****       }
 268:./Src/main.c  ****       lastSpeedL = speedL;
 269:./Src/main.c  ****       lastSpeedR = speedR;
 270:./Src/main.c  ****       //MotorR_pwm(-250);
 271:./Src/main.c  ****       //MotorL_pwm(250);
 272:./Src/main.c  ****       Console_Log(str);
 273:./Src/main.c  ****     }
 274:./Src/main.c  ****     timeout++;
 275:./Src/main.c  **** 
 276:./Src/main.c  ****     if (timeout > 1000) {
 277:./Src/main.c  ****       MotorR_pwm(0);
 278:./Src/main.c  ****       MotorL_pwm(0);
 279:./Src/main.c  ****     }
 280:./Src/main.c  **** 
 281:./Src/main.c  **** 
 282:./Src/main.c  ****     if (counterTemp + 500 < HAL_GetTick()) {
 283:./Src/main.c  ****       speedReading = ABS(MAX(((motorL.motorpos - lastMotorposL) / 90.0)*3.6, ((motorR.motorpos - la
 284:./Src/main.c  ****       counterTemp = HAL_GetTick();
 285:./Src/main.c  ****       lastMotorposL = motorL.motorpos;
 286:./Src/main.c  ****       lastMotorposR = motorR.motorpos;
 287:./Src/main.c  ****     }
ARM GAS  /tmp/ccn3VhA9.s 			page 8


 288:./Src/main.c  **** 
 289:./Src/main.c  ****     if(IS_Button()) {
 290:./Src/main.c  ****       MotorL_pwm(0);
 291:./Src/main.c  ****       MotorR_pwm(0);
 292:./Src/main.c  ****       while(IS_Button()) {
 293:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 294:./Src/main.c  ****       }
 295:./Src/main.c  ****       Buzzer_OneLongBeep();
 296:./Src/main.c  ****       HAL_Delay(350);
 297:./Src/main.c  ****       Power_Set(0);
 298:./Src/main.c  ****     }
 299:./Src/main.c  **** 
 300:./Src/main.c  ****     if ((sinValue) % (2000) == 0) {
 301:./Src/main.c  ****       //LCD_SetLocation(&lcd, 4, 0);
 302:./Src/main.c  ****       //LCD_WriteFloat(&lcd,distance/1345.0,2);
 303:./Src/main.c  ****       if (speedReading < 10.0) {
 304:./Src/main.c  ****         LCD_SetLocation(&lcd, 7, 0);
 305:./Src/main.c  ****         LCD_WriteString(&lcd, " ");
 306:./Src/main.c  ****         LCD_SetLocation(&lcd, 8, 0);
 307:./Src/main.c  ****       } else {
 308:./Src/main.c  ****         LCD_SetLocation(&lcd, 7, 0);
 309:./Src/main.c  ****       }
 310:./Src/main.c  ****       LCD_WriteFloat(&lcd,speedReading,2);
 311:./Src/main.c  ****       LCD_SetLocation(&lcd, 4, 1);
 312:./Src/main.c  ****       LCD_WriteFloat(&lcd,GET_BatteryAverage(),1);
 313:./Src/main.c  ****       float current = ABS(getMotorCurrentR() * 0.02) + ABS(getMotorCurrentL() * 0.02);
 314:./Src/main.c  ****       if (current < 10.0) {
 315:./Src/main.c  ****         LCD_SetLocation(&lcd, 10, 1);
 316:./Src/main.c  ****         LCD_WriteString(&lcd, " ");
 317:./Src/main.c  ****         LCD_SetLocation(&lcd, 11, 1);
 318:./Src/main.c  ****       } else {
 319:./Src/main.c  ****         LCD_SetLocation(&lcd, 10, 1);
 320:./Src/main.c  ****       }
 321:./Src/main.c  ****       LCD_WriteFloat(&lcd,ABS(current),2);
 322:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 323:./Src/main.c  ****       LCD_WriteString(&lcd, "A");
 324:./Src/main.c  ****     }
 325:./Src/main.c  **** 
 326:./Src/main.c  **** 
 327:./Src/main.c  **** 
 328:./Src/main.c  **** 
 329:./Src/main.c  **** 
 330:./Src/main.c  ****     Battery_TASK();
 331:./Src/main.c  ****     //Current_Motor_TASK();
 332:./Src/main.c  ****     //sWiiNunchuck_TASK();
 333:./Src/main.c  ****     //applcation_TASK();
 334:./Src/main.c  ****     //Telemetry_TASK();
 335:./Src/main.c  **** 
 336:./Src/main.c  ****     //Batteria Scarica?
 337:./Src/main.c  **** 
 338:./Src/main.c  ****     if(ABS(getMotorCurrentR() * 0.02) > 47.0 || ABS(getMotorCurrentL() * 0.02) > 47.0){
 339:./Src/main.c  ****       MotorL_pwm(0);
 340:./Src/main.c  ****       MotorR_pwm(0);
 341:./Src/main.c  ****       Buzzer_OneLongBeep();
 342:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 343:./Src/main.c  ****       HAL_Delay(5);
 344:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
ARM GAS  /tmp/ccn3VhA9.s 			page 9


 345:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 346:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 347:./Src/main.c  ****       LCD_WriteString(&lcd, "Overcurrent.");
 348:./Src/main.c  ****       HAL_Delay(500);
 349:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 350:./Src/main.c  ****       HAL_Delay(500);
 351:./Src/main.c  ****       Power_Set(0);
 352:./Src/main.c  ****     }
 353:./Src/main.c  **** 
 354:./Src/main.c  ****     if(GET_BatteryAverage() < 31.0){
 355:./Src/main.c  ****       MotorL_pwm(0);
 356:./Src/main.c  ****       MotorR_pwm(0);
 357:./Src/main.c  ****       Buzzer_OneLongBeep();
 358:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 359:./Src/main.c  ****       HAL_Delay(5);
 360:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 361:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 362:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 363:./Src/main.c  ****       LCD_WriteString(&lcd, "Battery low.");
 364:./Src/main.c  ****       HAL_Delay(500);
 365:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 366:./Src/main.c  ****       HAL_Delay(500);
 367:./Src/main.c  ****       Power_Set(0);
 368:./Src/main.c  ****     }
 369:./Src/main.c  **** 
 370:./Src/main.c  **** 
 371:./Src/main.c  ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 372:./Src/main.c  **** 
 373:./Src/main.c  ****     //counterTempTT = HAL_GetTick() - counterTemp;
 374:./Src/main.c  **** 
 375:./Src/main.c  **** 
 376:./Src/main.c  **** 
 377:./Src/main.c  ****   }
 378:./Src/main.c  **** 
 379:./Src/main.c  **** }
 380:./Src/main.c  **** 
 381:./Src/main.c  **** void saveConfig() {
 116              		.loc 1 381 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120 0000 08B5     		push	{r3, lr}
 121              	.LCFI1:
 122              		.cfi_def_cfa_offset 8
 123              		.cfi_offset 3, -8
 124              		.cfi_offset 14, -4
 382:./Src/main.c  ****   EE_WriteVariable(VirtAddVarTab[0], saveValue);
 125              		.loc 1 382 0
 126 0002 034B     		ldr	r3, .L12
 127 0004 1988     		ldrh	r1, [r3]
 128 0006 034B     		ldr	r3, .L12+4
 129 0008 1888     		ldrh	r0, [r3]
 130 000a FFF7FEFF 		bl	EE_WriteVariable
 131              	.LVL9:
 132 000e 08BD     		pop	{r3, pc}
 133              	.L13:
 134              		.align	2
ARM GAS  /tmp/ccn3VhA9.s 			page 10


 135              	.L12:
 136 0010 00000000 		.word	.LANCHOR3
 137 0014 00000000 		.word	.LANCHOR4
 138              		.cfi_endproc
 139              	.LFE66:
 141              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 142              		.align	2
 143              		.global	HAL_ADC_ConvCpltCallback
 144              		.thumb
 145              		.thumb_func
 147              	HAL_ADC_ConvCpltCallback:
 148              	.LFB69:
 383:./Src/main.c  **** }
 384:./Src/main.c  **** 
 385:./Src/main.c  **** /** System Clock Configuration
 386:./Src/main.c  **** */
 387:./Src/main.c  **** void SystemClock_Config(void)
 388:./Src/main.c  **** {
 389:./Src/main.c  **** 
 390:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 391:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 392:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 393:./Src/main.c  **** 
 394:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 395:./Src/main.c  ****     */
 396:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 397:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 398:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 399:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 400:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 401:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 402:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 403:./Src/main.c  ****   {
 404:./Src/main.c  ****     Error_Handler();
 405:./Src/main.c  ****   }
 406:./Src/main.c  **** 
 407:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 408:./Src/main.c  ****     */
 409:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 410:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 411:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 412:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 413:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 414:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 415:./Src/main.c  **** 
 416:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 417:./Src/main.c  ****   {
 418:./Src/main.c  ****     Error_Handler();
 419:./Src/main.c  ****   }
 420:./Src/main.c  **** 
 421:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 422:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 423:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 424:./Src/main.c  ****   {
 425:./Src/main.c  ****     Error_Handler();
 426:./Src/main.c  ****   }
 427:./Src/main.c  **** 
ARM GAS  /tmp/ccn3VhA9.s 			page 11


 428:./Src/main.c  ****     /**Configure the Systick interrupt time
 429:./Src/main.c  ****     */
 430:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 431:./Src/main.c  **** 
 432:./Src/main.c  ****     /**Configure the Systick
 433:./Src/main.c  ****     */
 434:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 435:./Src/main.c  **** 
 436:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 437:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 438:./Src/main.c  **** }
 439:./Src/main.c  **** 
 440:./Src/main.c  **** /* IWDG init function */
 441:./Src/main.c  **** static void MX_IWDG_Init(void)
 442:./Src/main.c  **** {
 443:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 444:./Src/main.c  ****   hiwdg.Instance = IWDG;
 445:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 446:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 447:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 448:./Src/main.c  ****   {
 449:./Src/main.c  ****     Error_Handler();
 450:./Src/main.c  ****   }
 451:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 452:./Src/main.c  **** }
 453:./Src/main.c  **** 
 454:./Src/main.c  **** 
 455:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 149              		.loc 1 455 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              	.LVL10:
 154 0000 10B5     		push	{r4, lr}
 155              	.LCFI2:
 156              		.cfi_def_cfa_offset 8
 157              		.cfi_offset 4, -8
 158              		.cfi_offset 14, -4
 159 0002 0446     		mov	r4, r0
 456:./Src/main.c  ****   if(hadc->Instance == ADC1){
 160              		.loc 1 456 0
 161 0004 0268     		ldr	r2, [r0]
 162 0006 064B     		ldr	r3, .L18
 163 0008 9A42     		cmp	r2, r3
 164 000a 01D1     		bne	.L15
 457:./Src/main.c  ****     ADC_R_callback();
 165              		.loc 1 457 0
 166 000c FFF7FEFF 		bl	ADC_R_callback
 167              	.LVL11:
 168              	.L15:
 458:./Src/main.c  ****   }
 459:./Src/main.c  ****   if(hadc->Instance == ADC3){
 169              		.loc 1 459 0
 170 0010 2268     		ldr	r2, [r4]
 171 0012 044B     		ldr	r3, .L18+4
 172 0014 9A42     		cmp	r2, r3
 173 0016 01D1     		bne	.L14
ARM GAS  /tmp/ccn3VhA9.s 			page 12


 460:./Src/main.c  ****     ADC_L_callback();
 174              		.loc 1 460 0
 175 0018 FFF7FEFF 		bl	ADC_L_callback
 176              	.LVL12:
 177              	.L14:
 178 001c 10BD     		pop	{r4, pc}
 179              	.LVL13:
 180              	.L19:
 181 001e 00BF     		.align	2
 182              	.L18:
 183 0020 00240140 		.word	1073816576
 184 0024 003C0140 		.word	1073822720
 185              		.cfi_endproc
 186              	.LFE69:
 188              		.section	.text.Error_Handler,"ax",%progbits
 189              		.align	2
 190              		.global	Error_Handler
 191              		.thumb
 192              		.thumb_func
 194              	Error_Handler:
 195              	.LFB70:
 461:./Src/main.c  ****   }
 462:./Src/main.c  **** }
 463:./Src/main.c  **** 
 464:./Src/main.c  **** 
 465:./Src/main.c  **** /**
 466:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 467:./Src/main.c  ****   * @param  None
 468:./Src/main.c  ****   * @retval None
 469:./Src/main.c  ****   */
 470:./Src/main.c  **** void Error_Handler(void)
 471:./Src/main.c  **** {
 196              		.loc 1 471 0
 197              		.cfi_startproc
 198              		@ Volatile: function does not return.
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201 0000 08B5     		push	{r3, lr}
 202              	.LCFI3:
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 3, -8
 205              		.cfi_offset 14, -4
 472:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 473:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 474:./Src/main.c  ****   MotorR_stop();
 206              		.loc 1 474 0
 207 0002 FFF7FEFF 		bl	MotorR_stop
 208              	.LVL14:
 475:./Src/main.c  ****   MotorL_stop();
 209              		.loc 1 475 0
 210 0006 FFF7FEFF 		bl	MotorL_stop
 211              	.LVL15:
 212              	.L21:
 213 000a FEE7     		b	.L21
 214              		.cfi_endproc
 215              	.LFE70:
 217              		.section	.text.MX_IWDG_Init,"ax",%progbits
ARM GAS  /tmp/ccn3VhA9.s 			page 13


 218              		.align	2
 219              		.thumb
 220              		.thumb_func
 222              	MX_IWDG_Init:
 223              	.LFB68:
 442:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 224              		.loc 1 442 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 8
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228 0000 00B5     		push	{lr}
 229              	.LCFI4:
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 14, -4
 232 0002 83B0     		sub	sp, sp, #12
 233              	.LCFI5:
 234              		.cfi_def_cfa_offset 16
 235              	.LBB2:
 443:./Src/main.c  ****   hiwdg.Instance = IWDG;
 236              		.loc 1 443 0
 237 0004 0E4B     		ldr	r3, .L26
 238 0006 DA69     		ldr	r2, [r3, #28]
 239 0008 42F40062 		orr	r2, r2, #2048
 240 000c DA61     		str	r2, [r3, #28]
 241 000e DB69     		ldr	r3, [r3, #28]
 242 0010 03F40063 		and	r3, r3, #2048
 243 0014 0193     		str	r3, [sp, #4]
 244 0016 019B     		ldr	r3, [sp, #4]
 245              	.LBE2:
 444:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 246              		.loc 1 444 0
 247 0018 0A48     		ldr	r0, .L26+4
 248 001a 0B4B     		ldr	r3, .L26+8
 249 001c 0360     		str	r3, [r0]
 445:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 250              		.loc 1 445 0
 251 001e 0123     		movs	r3, #1
 252 0020 4360     		str	r3, [r0, #4]
 446:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 253              		.loc 1 446 0
 254 0022 40F6FF73 		movw	r3, #4095
 255 0026 8360     		str	r3, [r0, #8]
 447:./Src/main.c  ****   {
 256              		.loc 1 447 0
 257 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 258              	.LVL16:
 259 002c 08B1     		cbz	r0, .L24
 449:./Src/main.c  ****   }
 260              		.loc 1 449 0
 261 002e FFF7FEFF 		bl	Error_Handler
 262              	.LVL17:
 263              	.L24:
 451:./Src/main.c  **** }
 264              		.loc 1 451 0
 265 0032 0448     		ldr	r0, .L26+4
 266 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 267              	.LVL18:
ARM GAS  /tmp/ccn3VhA9.s 			page 14


 452:./Src/main.c  **** 
 268              		.loc 1 452 0
 269 0038 03B0     		add	sp, sp, #12
 270              	.LCFI6:
 271              		.cfi_def_cfa_offset 4
 272              		@ sp needed
 273 003a 5DF804FB 		ldr	pc, [sp], #4
 274              	.L27:
 275 003e 00BF     		.align	2
 276              	.L26:
 277 0040 00100240 		.word	1073876992
 278 0044 00000000 		.word	hiwdg
 279 0048 00300040 		.word	1073754112
 280              		.cfi_endproc
 281              	.LFE68:
 283              		.section	.text.SystemClock_Config,"ax",%progbits
 284              		.align	2
 285              		.global	SystemClock_Config
 286              		.thumb
 287              		.thumb_func
 289              	SystemClock_Config:
 290              	.LFB67:
 388:./Src/main.c  **** 
 291              		.loc 1 388 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 88
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295 0000 00B5     		push	{lr}
 296              	.LCFI7:
 297              		.cfi_def_cfa_offset 4
 298              		.cfi_offset 14, -4
 299 0002 97B0     		sub	sp, sp, #92
 300              	.LCFI8:
 301              		.cfi_def_cfa_offset 96
 396:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 302              		.loc 1 396 0
 303 0004 0223     		movs	r3, #2
 304 0006 0C93     		str	r3, [sp, #48]
 397:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 305              		.loc 1 397 0
 306 0008 0122     		movs	r2, #1
 307 000a 1092     		str	r2, [sp, #64]
 398:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 308              		.loc 1 398 0
 309 000c 1022     		movs	r2, #16
 310 000e 1192     		str	r2, [sp, #68]
 399:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 311              		.loc 1 399 0
 312 0010 1393     		str	r3, [sp, #76]
 400:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 313              		.loc 1 400 0
 314 0012 0023     		movs	r3, #0
 315 0014 1493     		str	r3, [sp, #80]
 401:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 316              		.loc 1 401 0
 317 0016 4FF46013 		mov	r3, #3670016
 318 001a 1593     		str	r3, [sp, #84]
ARM GAS  /tmp/ccn3VhA9.s 			page 15


 402:./Src/main.c  ****   {
 319              		.loc 1 402 0
 320 001c 0CA8     		add	r0, sp, #48
 321 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 322              	.LVL19:
 323 0022 08B1     		cbz	r0, .L29
 404:./Src/main.c  ****   }
 324              		.loc 1 404 0
 325 0024 FFF7FEFF 		bl	Error_Handler
 326              	.LVL20:
 327              	.L29:
 409:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 328              		.loc 1 409 0
 329 0028 0F23     		movs	r3, #15
 330 002a 0793     		str	r3, [sp, #28]
 411:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 331              		.loc 1 411 0
 332 002c 0221     		movs	r1, #2
 333 002e 0891     		str	r1, [sp, #32]
 412:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 334              		.loc 1 412 0
 335 0030 0023     		movs	r3, #0
 336 0032 0993     		str	r3, [sp, #36]
 413:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 337              		.loc 1 413 0
 338 0034 4FF48062 		mov	r2, #1024
 339 0038 0A92     		str	r2, [sp, #40]
 414:./Src/main.c  **** 
 340              		.loc 1 414 0
 341 003a 0B93     		str	r3, [sp, #44]
 416:./Src/main.c  ****   {
 342              		.loc 1 416 0
 343 003c 07A8     		add	r0, sp, #28
 344 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 345              	.LVL21:
 346 0042 08B1     		cbz	r0, .L30
 418:./Src/main.c  ****   }
 347              		.loc 1 418 0
 348 0044 FFF7FEFF 		bl	Error_Handler
 349              	.LVL22:
 350              	.L30:
 421:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 351              		.loc 1 421 0
 352 0048 0223     		movs	r3, #2
 353 004a 0193     		str	r3, [sp, #4]
 422:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 354              		.loc 1 422 0
 355 004c 4FF44043 		mov	r3, #49152
 356 0050 0393     		str	r3, [sp, #12]
 423:./Src/main.c  ****   {
 357              		.loc 1 423 0
 358 0052 01A8     		add	r0, sp, #4
 359 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 360              	.LVL23:
 361 0058 08B1     		cbz	r0, .L31
 425:./Src/main.c  ****   }
 362              		.loc 1 425 0
ARM GAS  /tmp/ccn3VhA9.s 			page 16


 363 005a FFF7FEFF 		bl	Error_Handler
 364              	.LVL24:
 365              	.L31:
 430:./Src/main.c  **** 
 366              		.loc 1 430 0
 367 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 368              	.LVL25:
 369 0062 094B     		ldr	r3, .L33
 370 0064 A3FB0030 		umull	r3, r0, r3, r0
 371 0068 8009     		lsrs	r0, r0, #6
 372 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
 373              	.LVL26:
 434:./Src/main.c  **** 
 374              		.loc 1 434 0
 375 006e 0420     		movs	r0, #4
 376 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 377              	.LVL27:
 437:./Src/main.c  **** }
 378              		.loc 1 437 0
 379 0074 0022     		movs	r2, #0
 380 0076 1146     		mov	r1, r2
 381 0078 4FF0FF30 		mov	r0, #-1
 382 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 383              	.LVL28:
 438:./Src/main.c  **** 
 384              		.loc 1 438 0
 385 0080 17B0     		add	sp, sp, #92
 386              	.LCFI9:
 387              		.cfi_def_cfa_offset 4
 388              		@ sp needed
 389 0082 5DF804FB 		ldr	pc, [sp], #4
 390              	.L34:
 391 0086 00BF     		.align	2
 392              	.L33:
 393 0088 D34D6210 		.word	274877907
 394              		.cfi_endproc
 395              	.LFE67:
 397              		.global	__aeabi_i2d
 398              		.global	__aeabi_dmul
 399              		.global	__aeabi_dsub
 400              		.global	__aeabi_ddiv
 401              		.global	__aeabi_dcmpgt
 402              		.global	__aeabi_dcmplt
 403              		.global	__aeabi_d2iz
 404              		.global	__aeabi_dadd
 405              		.global	__aeabi_d2f
 406              		.global	__aeabi_fcmplt
 407              		.global	__aeabi_f2d
 408              		.section	.text.main,"ax",%progbits
 409              		.align	2
 410              		.global	main
 411              		.thumb
 412              		.thumb_func
 414              	main:
 415              	.LFB65:
 130:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 416              		.loc 1 130 0
ARM GAS  /tmp/ccn3VhA9.s 			page 17


 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 248
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 421              	.LCFI10:
 422              		.cfi_def_cfa_offset 36
 423              		.cfi_offset 4, -36
 424              		.cfi_offset 5, -32
 425              		.cfi_offset 6, -28
 426              		.cfi_offset 7, -24
 427              		.cfi_offset 8, -20
 428              		.cfi_offset 9, -16
 429              		.cfi_offset 10, -12
 430              		.cfi_offset 11, -8
 431              		.cfi_offset 14, -4
 432 0004 C3B0     		sub	sp, sp, #268
 433              	.LCFI11:
 434              		.cfi_def_cfa_offset 304
 132:./Src/main.c  **** 
 435              		.loc 1 132 0
 436 0006 FFF7FEFF 		bl	HAL_Init
 437              	.LVL29:
 135:./Src/main.c  **** 
 438              		.loc 1 135 0
 439 000a FFF7FEFF 		bl	SystemClock_Config
 440              	.LVL30:
 137:./Src/main.c  **** 
 441              		.loc 1 137 0
 442 000e FFF7FEFF 		bl	Button_init
 443              	.LVL31:
 139:./Src/main.c  **** 
 444              		.loc 1 139 0
 445 0012 0120     		movs	r0, #1
 446 0014 FFF7FEFF 		bl	Power_Set
 447              	.LVL32:
 141:./Src/main.c  **** 
 448              		.loc 1 141 0
 449 0018 0A20     		movs	r0, #10
 450 001a FFF7FEFF 		bl	HAL_Delay
 451              	.LVL33:
 143:./Src/main.c  ****   ADC_R_init();
 452              		.loc 1 143 0
 453 001e FFF7FEFF 		bl	ADC_L_init
 454              	.LVL34:
 144:./Src/main.c  **** 
 455              		.loc 1 144 0
 456 0022 FFF7FEFF 		bl	ADC_R_init
 457              	.LVL35:
 148:./Src/main.c  **** 
 458              		.loc 1 148 0
 459 0026 FFF7FEFF 		bl	MX_I2C2_Init
 460              	.LVL36:
 157:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 461              		.loc 1 157 0
 462 002a 9D4E     		ldr	r6, .L113+8
 463 002c 2723     		movs	r3, #39
 464 002e 86F84030 		strb	r3, [r6, #64]
ARM GAS  /tmp/ccn3VhA9.s 			page 18


 158:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 465              		.loc 1 158 0
 466 0032 4FF47A73 		mov	r3, #1000
 467 0036 7364     		str	r3, [r6, #68]
 159:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 468              		.loc 1 159 0
 469 0038 06F14804 		add	r4, r6, #72
 470 003c 994D     		ldr	r5, .L113+12
 471 003e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 472 0040 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 473 0042 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 474 0044 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 475 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 476 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 477 004a 95E80700 		ldmia	r5, {r0, r1, r2}
 478 004e 84E80700 		stmia	r4, {r0, r1, r2}
 160:./Src/main.c  **** 	lcd.type = TYPE0;
 479              		.loc 1 160 0
 480 0052 0123     		movs	r3, #1
 481 0054 3370     		strb	r3, [r6]
 161:./Src/main.c  **** 
 482              		.loc 1 161 0
 483 0056 0023     		movs	r3, #0
 484 0058 86F83C30 		strb	r3, [r6, #60]
 163:./Src/main.c  **** 		// error occured
 485              		.loc 1 163 0
 486 005c 3046     		mov	r0, r6
 487 005e FFF7FEFF 		bl	LCD_Init
 488              	.LVL37:
 489 0062 00B1     		cbz	r0, .L36
 490              	.L37:
 491 0064 FEE7     		b	.L37
 492              	.L36:
 168:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 493              		.loc 1 168 0
 494 0066 8E4C     		ldr	r4, .L113+8
 495 0068 2046     		mov	r0, r4
 496 006a FFF7FEFF 		bl	LCD_ClearDisplay
 497              	.LVL38:
 169:./Src/main.c  **** 	LCD_WriteString(&lcd, "SesselOtter V5.2");
 498              		.loc 1 169 0
 499 006e 0022     		movs	r2, #0
 500 0070 1146     		mov	r1, r2
 501 0072 2046     		mov	r0, r4
 502 0074 FFF7FEFF 		bl	LCD_SetLocation
 503              	.LVL39:
 170:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 504              		.loc 1 170 0
 505 0078 8B49     		ldr	r1, .L113+16
 506 007a 2046     		mov	r0, r4
 507 007c FFF7FEFF 		bl	LCD_WriteString
 508              	.LVL40:
 171:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
 509              		.loc 1 171 0
 510 0080 0122     		movs	r2, #1
 511 0082 0021     		movs	r1, #0
 512 0084 2046     		mov	r0, r4
ARM GAS  /tmp/ccn3VhA9.s 			page 19


 513 0086 FFF7FEFF 		bl	LCD_SetLocation
 514              	.LVL41:
 172:./Src/main.c  **** 
 515              		.loc 1 172 0
 516 008a 8849     		ldr	r1, .L113+20
 517 008c 2046     		mov	r0, r4
 518 008e FFF7FEFF 		bl	LCD_WriteString
 519              	.LVL42:
 174:./Src/main.c  ****   Led_init();
 520              		.loc 1 174 0
 521 0092 FFF7FEFF 		bl	Buzzer_init
 522              	.LVL43:
 175:./Src/main.c  ****   IS_Charge_init();
 523              		.loc 1 175 0
 524 0096 FFF7FEFF 		bl	Led_init
 525              	.LVL44:
 176:./Src/main.c  **** 
 526              		.loc 1 176 0
 527 009a FFF7FEFF 		bl	IS_Charge_init
 528              	.LVL45:
 529              	.LBB3:
 189:./Src/main.c  ****     Led_Set(0);
 530              		.loc 1 189 0
 531 009e 02E0     		b	.L38
 532              	.L39:
 190:./Src/main.c  ****   }
 533              		.loc 1 190 0
 534 00a0 0020     		movs	r0, #0
 535 00a2 FFF7FEFF 		bl	Led_Set
 536              	.LVL46:
 537              	.L38:
 189:./Src/main.c  ****     Led_Set(0);
 538              		.loc 1 189 0
 539 00a6 FFF7FEFF 		bl	IS_Button
 540              	.LVL47:
 541 00aa 0028     		cmp	r0, #0
 542 00ac F8D1     		bne	.L39
 543              	.LBE3:
 194:./Src/main.c  ****   MotorR_init();
 544              		.loc 1 194 0
 545 00ae FFF7FEFF 		bl	MotorL_init
 546              	.LVL48:
 195:./Src/main.c  **** 
 547              		.loc 1 195 0
 548 00b2 FFF7FEFF 		bl	MotorR_init
 549              	.LVL49:
 197:./Src/main.c  ****   Battery_TASK();
 550              		.loc 1 197 0
 551 00b6 FFF7FEFF 		bl	applcation_init
 552              	.LVL50:
 198:./Src/main.c  **** 
 553              		.loc 1 198 0
 554 00ba FFF7FEFF 		bl	Battery_TASK
 555              	.LVL51:
 200:./Src/main.c  **** 
 556              		.loc 1 200 0
 557 00be FFF7FEFF 		bl	MX_IWDG_Init
ARM GAS  /tmp/ccn3VhA9.s 			page 20


 558              	.LVL52:
 202:./Src/main.c  ****   Buzzer_TwoBeep();
 559              		.loc 1 202 0
 560 00c2 0120     		movs	r0, #1
 561 00c4 FFF7FEFF 		bl	Led_Set
 562              	.LVL53:
 203:./Src/main.c  ****   HAL_Delay(250);
 563              		.loc 1 203 0
 564 00c8 FFF7FEFF 		bl	Buzzer_TwoBeep
 565              	.LVL54:
 204:./Src/main.c  **** 
 566              		.loc 1 204 0
 567 00cc FA20     		movs	r0, #250
 568 00ce FFF7FEFF 		bl	HAL_Delay
 569              	.LVL55:
 206:./Src/main.c  ****   MotorL_start();
 570              		.loc 1 206 0
 571 00d2 FFF7FEFF 		bl	MotorR_start
 572              	.LVL56:
 207:./Src/main.c  ****   //MotorR_pwm(80);
 573              		.loc 1 207 0
 574 00d6 FFF7FEFF 		bl	MotorL_start
 575              	.LVL57:
 211:./Src/main.c  **** 
 576              		.loc 1 211 0
 577 00da FFF7FEFF 		bl	Timer_init
 578              	.LVL58:
 223:./Src/main.c  ****   HAL_Delay(5);
 579              		.loc 1 223 0
 580 00de 704C     		ldr	r4, .L113+8
 581 00e0 2046     		mov	r0, r4
 582 00e2 FFF7FEFF 		bl	LCD_ClearDisplay
 583              	.LVL59:
 224:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 584              		.loc 1 224 0
 585 00e6 0520     		movs	r0, #5
 586 00e8 FFF7FEFF 		bl	HAL_Delay
 587              	.LVL60:
 225:./Src/main.c  **** 	LCD_WriteString(&lcd, "Bat:");
 588              		.loc 1 225 0
 589 00ec 0122     		movs	r2, #1
 590 00ee 0021     		movs	r1, #0
 591 00f0 2046     		mov	r0, r4
 592 00f2 FFF7FEFF 		bl	LCD_SetLocation
 593              	.LVL61:
 226:./Src/main.c  ****   LCD_SetLocation(&lcd, 8, 1);
 594              		.loc 1 226 0
 595 00f6 6E49     		ldr	r1, .L113+24
 596 00f8 2046     		mov	r0, r4
 597 00fa FFF7FEFF 		bl	LCD_WriteString
 598              	.LVL62:
 227:./Src/main.c  ****   LCD_WriteString(&lcd, "V");
 599              		.loc 1 227 0
 600 00fe 0122     		movs	r2, #1
 601 0100 0821     		movs	r1, #8
 602 0102 2046     		mov	r0, r4
 603 0104 FFF7FEFF 		bl	LCD_SetLocation
ARM GAS  /tmp/ccn3VhA9.s 			page 21


 604              	.LVL63:
 228:./Src/main.c  **** 
 605              		.loc 1 228 0
 606 0108 6A49     		ldr	r1, .L113+28
 607 010a 2046     		mov	r0, r4
 608 010c FFF7FEFF 		bl	LCD_WriteString
 609              	.LVL64:
 230:./Src/main.c  ****   LCD_WriteString(&lcd, "A");
 610              		.loc 1 230 0
 611 0110 0122     		movs	r2, #1
 612 0112 0F21     		movs	r1, #15
 613 0114 2046     		mov	r0, r4
 614 0116 FFF7FEFF 		bl	LCD_SetLocation
 615              	.LVL65:
 231:./Src/main.c  **** 
 616              		.loc 1 231 0
 617 011a 6749     		ldr	r1, .L113+32
 618 011c 2046     		mov	r0, r4
 619 011e FFF7FEFF 		bl	LCD_WriteString
 620              	.LVL66:
 233:./Src/main.c  **** 	LCD_WriteString(&lcd, "Speed:");
 621              		.loc 1 233 0
 622 0122 0022     		movs	r2, #0
 623 0124 1146     		mov	r1, r2
 624 0126 2046     		mov	r0, r4
 625 0128 FFF7FEFF 		bl	LCD_SetLocation
 626              	.LVL67:
 234:./Src/main.c  ****   LCD_SetLocation(&lcd, 12, 0);
 627              		.loc 1 234 0
 628 012c 6349     		ldr	r1, .L113+36
 629 012e 2046     		mov	r0, r4
 630 0130 FFF7FEFF 		bl	LCD_WriteString
 631              	.LVL68:
 235:./Src/main.c  ****   LCD_WriteString(&lcd, "km/h");
 632              		.loc 1 235 0
 633 0134 0022     		movs	r2, #0
 634 0136 0C21     		movs	r1, #12
 635 0138 2046     		mov	r0, r4
 636 013a FFF7FEFF 		bl	LCD_SetLocation
 637              	.LVL69:
 236:./Src/main.c  **** 
 638              		.loc 1 236 0
 639 013e 6049     		ldr	r1, .L113+40
 640 0140 2046     		mov	r0, r4
 641 0142 FFF7FEFF 		bl	LCD_WriteString
 642              	.LVL70:
 242:./Src/main.c  ****   while(1){
 643              		.loc 1 242 0
 644 0146 0023     		movs	r3, #0
 645 0148 0493     		str	r3, [sp, #16]	@ float
 241:./Src/main.c  ****   float speedReading = 0.0;
 646              		.loc 1 241 0
 647 014a 4FF0000A 		mov	r10, #0
 648 014e 5746     		mov	r7, r10
 240:./Src/main.c  ****   int32_t lastMotorposR = 0, lastMotorposL = 0;
 649              		.loc 1 240 0
 650 0150 CDF83CA0 		str	r10, [sp, #60]
ARM GAS  /tmp/ccn3VhA9.s 			page 22


 238:./Src/main.c  **** 
 651              		.loc 1 238 0
 652 0154 40F2CF79 		movw	r9, #1999
 219:./Src/main.c  **** 
 653              		.loc 1 219 0
 654 0158 D346     		mov	fp, r10
 218:./Src/main.c  ****   int16_t speedL = 0;
 655              		.loc 1 218 0
 656 015a 5646     		mov	r6, r10
 657 015c 5546     		mov	r5, r10
 658 015e 5446     		mov	r4, r10
 659              	.LVL71:
 660              	.L85:
 244:./Src/main.c  ****     if ((sinValue) % (200) == 0) {
 661              		.loc 1 244 0
 662 0160 09F10109 		add	r9, r9, #1
 663              	.LVL72:
 245:./Src/main.c  ****       state = !state;
 664              		.loc 1 245 0
 665 0164 574B     		ldr	r3, .L113+44
 666 0166 A3FB0923 		umull	r2, r3, r3, r9
 667 016a 9B09     		lsrs	r3, r3, #6
 668 016c C822     		movs	r2, #200
 669 016e 02FB1393 		mls	r3, r2, r3, r9
 670 0172 002B     		cmp	r3, #0
 671 0174 40F00A81 		bne	.L40
 672              	.LBB4:
 250:./Src/main.c  ****       sprintf(str, "%i;%i;%i;%i;%i;%i\n\r", captured_value[0], captured_value[1], captured_value[2]
 673              		.loc 1 250 0
 674 0178 0021     		movs	r1, #0
 675 017a 10A8     		add	r0, sp, #64
 676 017c FFF7FEFF 		bl	memset
 677              	.LVL73:
 251:./Src/main.c  ****       int readR = -(CLAMP((((captured_value[1]-500)-(captured_value[0]-500)/2.0)*(captured_value[2]
 678              		.loc 1 251 0
 679 0180 DFF85481 		ldr	r8, .L113+64
 680 0184 B8F80020 		ldrh	r2, [r8]
 681 0188 B8F80230 		ldrh	r3, [r8, #2]
 682 018c B8F80410 		ldrh	r1, [r8, #4]
 683 0190 B8F80600 		ldrh	r0, [r8, #6]
 684 0194 B8F808E0 		ldrh	lr, [r8, #8]
 685 0198 B8F80AC0 		ldrh	ip, [r8, #10]
 686 019c CDF80CC0 		str	ip, [sp, #12]
 687 01a0 CDF808E0 		str	lr, [sp, #8]
 688 01a4 0190     		str	r0, [sp, #4]
 689 01a6 0091     		str	r1, [sp]
 690 01a8 4749     		ldr	r1, .L113+48
 691 01aa 10A8     		add	r0, sp, #64
 692 01ac FFF7FEFF 		bl	sprintf
 693              	.LVL74:
 252:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 694              		.loc 1 252 0
 695 01b0 B8F80200 		ldrh	r0, [r8, #2]
 696 01b4 A0F5FA70 		sub	r0, r0, #500
 697 01b8 FFF7FEFF 		bl	__aeabi_i2d
 698              	.LVL75:
 699 01bc CDE90601 		strd	r0, [sp, #24]
ARM GAS  /tmp/ccn3VhA9.s 			page 23


 700 01c0 B8F80000 		ldrh	r0, [r8]
 701 01c4 A0F5FA70 		sub	r0, r0, #500
 702 01c8 FFF7FEFF 		bl	__aeabi_i2d
 703              	.LVL76:
 704 01cc 0022     		movs	r2, #0
 705 01ce 3F4B     		ldr	r3, .L113+52
 706 01d0 FFF7FEFF 		bl	__aeabi_dmul
 707              	.LVL77:
 708 01d4 0246     		mov	r2, r0
 709 01d6 0B46     		mov	r3, r1
 710 01d8 CDE90823 		strd	r2, [sp, #32]
 711 01dc DDE90601 		ldrd	r0, [sp, #24]
 712 01e0 FFF7FEFF 		bl	__aeabi_dsub
 713              	.LVL78:
 714 01e4 CDE90C01 		strd	r0, [sp, #48]
 715 01e8 B8F80400 		ldrh	r0, [r8, #4]
 716 01ec FFF7FEFF 		bl	__aeabi_i2d
 717              	.LVL79:
 718 01f0 0022     		movs	r2, #0
 719 01f2 374B     		ldr	r3, .L113+56
 720 01f4 FFF7FEFF 		bl	__aeabi_ddiv
 721              	.LVL80:
 722 01f8 0246     		mov	r2, r0
 723 01fa 0B46     		mov	r3, r1
 724 01fc CDE90A23 		strd	r2, [sp, #40]
 725 0200 DDE90C01 		ldrd	r0, [sp, #48]
 726 0204 FFF7FEFF 		bl	__aeabi_dmul
 727              	.LVL81:
 728 0208 8246     		mov	r10, r0
 729 020a 8846     		mov	r8, r1
 730 020c 0022     		movs	r2, #0
 731 020e 314B     		ldr	r3, .L113+60
 732 0210 5046     		mov	r0, r10
 733 0212 4146     		mov	r1, r8
 734 0214 FFF7FEFF 		bl	__aeabi_dcmpgt
 735              	.LVL82:
 736 0218 70B9     		cbnz	r0, .L86
 252:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 737              		.loc 1 252 0 is_stmt 0 discriminator 2
 738 021a 1FA3     		adr	r3, .L113
 739 021c D3E90023 		ldrd	r2, [r3]
 740 0220 5046     		mov	r0, r10
 741 0222 4146     		mov	r1, r8
 742 0224 FFF7FEFF 		bl	__aeabi_dcmplt
 743              	.LVL83:
 744 0228 48B9     		cbnz	r0, .L87
 252:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 745              		.loc 1 252 0 discriminator 5
 746 022a 5046     		mov	r0, r10
 747 022c 08F10041 		add	r1, r8, #-2147483648
 748 0230 FFF7FEFF 		bl	__aeabi_d2iz
 749              	.LVL84:
 750 0234 8046     		mov	r8, r0
 751 0236 04E0     		b	.L41
 752              	.L86:
 252:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500)/2.0)*(captured_value[2]
 753              		.loc 1 252 0
ARM GAS  /tmp/ccn3VhA9.s 			page 24


 754 0238 DFF8A080 		ldr	r8, .L113+68
 755 023c 01E0     		b	.L41
 756              	.L87:
 757 023e 4FF47A78 		mov	r8, #1000
 758              	.L41:
 759              	.LVL85:
 253:./Src/main.c  **** 
 760              		.loc 1 253 0 is_stmt 1 discriminator 8
 761 0242 DDE90823 		ldrd	r2, [sp, #32]
 762 0246 DDE90601 		ldrd	r0, [sp, #24]
 763 024a FFF7FEFF 		bl	__aeabi_dadd
 764              	.LVL86:
 765 024e 0246     		mov	r2, r0
 766 0250 0B46     		mov	r3, r1
 767 0252 DDE90A01 		ldrd	r0, [sp, #40]
 768 0256 FFF7FEFF 		bl	__aeabi_dmul
 769              	.LVL87:
 770 025a 8646     		mov	lr, r0
 771 025c 8A46     		mov	r10, r1
 772 025e 0022     		movs	r2, #0
 773 0260 1C4B     		ldr	r3, .L113+60
 774 0262 CDF818E0 		str	lr, [sp, #24]
 775 0266 7046     		mov	r0, lr
 776 0268 5146     		mov	r1, r10
 777 026a FFF7FEFF 		bl	__aeabi_dcmpgt
 778              	.LVL88:
 779 026e 70B9     		cbnz	r0, .L88
 253:./Src/main.c  **** 
 780              		.loc 1 253 0 is_stmt 0 discriminator 2
 781 0270 09A3     		adr	r3, .L113
 782 0272 D3E90023 		ldrd	r2, [r3]
 783 0276 0698     		ldr	r0, [sp, #24]
 784 0278 5146     		mov	r1, r10
 785 027a FFF7FEFF 		bl	__aeabi_dcmplt
 786              	.LVL89:
 787 027e 78BB     		cbnz	r0, .L89
 253:./Src/main.c  **** 
 788              		.loc 1 253 0 discriminator 5
 789 0280 0698     		ldr	r0, [sp, #24]
 790 0282 0AF10041 		add	r1, r10, #-2147483648
 791 0286 FFF7FEFF 		bl	__aeabi_d2iz
 792              	.LVL90:
 793 028a 8246     		mov	r10, r0
 794 028c 2AE0     		b	.L42
 795              	.L88:
 253:./Src/main.c  **** 
 796              		.loc 1 253 0
 797 028e DFF84CA0 		ldr	r10, .L113+68
 798 0292 27E0     		b	.L42
 799              	.L114:
 800 0294 AFF30080 		.align	3
 801              	.L113:
 802 0298 00000000 		.word	0
 803 029c 00408FC0 		.word	-1064353792
 804 02a0 00000000 		.word	lcd
 805 02a4 00000000 		.word	hi2c2
 806 02a8 00000000 		.word	.LC0
ARM GAS  /tmp/ccn3VhA9.s 			page 25


 807 02ac 14000000 		.word	.LC1
 808 02b0 24000000 		.word	.LC2
 809 02b4 2C000000 		.word	.LC3
 810 02b8 30000000 		.word	.LC4
 811 02bc 34000000 		.word	.LC5
 812 02c0 3C000000 		.word	.LC6
 813 02c4 1F85EB51 		.word	1374389535
 814 02c8 44000000 		.word	.LC7
 815 02cc 0000E03F 		.word	1071644672
 816 02d0 00407F40 		.word	1082081280
 817 02d4 00408F40 		.word	1083129856
 818 02d8 00000000 		.word	.LANCHOR2
 819 02dc 18FCFFFF 		.word	-1000
 820              	.L89:
 821 02e0 4FF47A7A 		mov	r10, #1000
 822              	.L42:
 823              	.LVL91:
 256:./Src/main.c  ****       speedL += readL / 1.0;
 824              		.loc 1 256 0 is_stmt 1 discriminator 8
 825 02e4 2846     		mov	r0, r5
 826 02e6 FFF7FEFF 		bl	__aeabi_i2d
 827              	.LVL92:
 828 02ea 0246     		mov	r2, r0
 829 02ec 0B46     		mov	r3, r1
 830 02ee FFF7FEFF 		bl	__aeabi_dsub
 831              	.LVL93:
 832 02f2 FFF7FEFF 		bl	__aeabi_d2iz
 833              	.LVL94:
 834 02f6 05B2     		sxth	r5, r0
 835              	.LVL95:
 257:./Src/main.c  **** 
 836              		.loc 1 257 0 discriminator 8
 837 02f8 5046     		mov	r0, r10
 838 02fa FFF7FEFF 		bl	__aeabi_i2d
 839              	.LVL96:
 840 02fe CDE90601 		strd	r0, [sp, #24]
 841 0302 2846     		mov	r0, r5
 842 0304 FFF7FEFF 		bl	__aeabi_i2d
 843              	.LVL97:
 844 0308 DDE90623 		ldrd	r2, [sp, #24]
 845 030c FFF7FEFF 		bl	__aeabi_dadd
 846              	.LVL98:
 847 0310 FFF7FEFF 		bl	__aeabi_d2iz
 848              	.LVL99:
 849 0314 05B2     		sxth	r5, r0
 850              	.LVL100:
 260:./Src/main.c  ****       speedR += readR / 1.0;
 851              		.loc 1 260 0 discriminator 8
 852 0316 3046     		mov	r0, r6
 853 0318 FFF7FEFF 		bl	__aeabi_i2d
 854              	.LVL101:
 855 031c 0246     		mov	r2, r0
 856 031e 0B46     		mov	r3, r1
 857 0320 FFF7FEFF 		bl	__aeabi_dsub
 858              	.LVL102:
 859 0324 FFF7FEFF 		bl	__aeabi_d2iz
 860              	.LVL103:
ARM GAS  /tmp/ccn3VhA9.s 			page 26


 861 0328 06B2     		sxth	r6, r0
 862              	.LVL104:
 261:./Src/main.c  **** 
 863              		.loc 1 261 0 discriminator 8
 864 032a 4046     		mov	r0, r8
 865 032c FFF7FEFF 		bl	__aeabi_i2d
 866              	.LVL105:
 867 0330 CDE90601 		strd	r0, [sp, #24]
 868 0334 3046     		mov	r0, r6
 869 0336 FFF7FEFF 		bl	__aeabi_i2d
 870              	.LVL106:
 871 033a DDE90623 		ldrd	r2, [sp, #24]
 872 033e FFF7FEFF 		bl	__aeabi_dadd
 873              	.LVL107:
 874 0342 FFF7FEFF 		bl	__aeabi_d2iz
 875              	.LVL108:
 876 0346 06B2     		sxth	r6, r0
 877              	.LVL109:
 264:./Src/main.c  ****         MotorR_pwm(speedR);
 878              		.loc 1 264 0 discriminator 8
 879 0348 A846     		mov	r8, r5
 880              	.LVL110:
 881 034a 0BF13203 		add	r3, fp, #50
 882 034e 9D42     		cmp	r5, r3
 883 0350 17DA     		bge	.L43
 264:./Src/main.c  ****         MotorR_pwm(speedR);
 884              		.loc 1 264 0 is_stmt 0 discriminator 1
 885 0352 ABF13203 		sub	r3, fp, #50
 886 0356 9D42     		cmp	r5, r3
 887 0358 13DD     		ble	.L43
 264:./Src/main.c  ****         MotorR_pwm(speedR);
 888              		.loc 1 264 0 discriminator 2
 889 035a 0F9A     		ldr	r2, [sp, #60]
 890 035c 1346     		mov	r3, r2
 891 035e 3233     		adds	r3, r3, #50
 892 0360 9E42     		cmp	r6, r3
 893 0362 0EDA     		bge	.L43
 264:./Src/main.c  ****         MotorR_pwm(speedR);
 894              		.loc 1 264 0 discriminator 3
 895 0364 A2F13203 		sub	r3, r2, #50
 896 0368 9E42     		cmp	r6, r3
 897 036a 0ADD     		ble	.L43
 264:./Src/main.c  ****         MotorR_pwm(speedR);
 898              		.loc 1 264 0 discriminator 4
 899 036c AE4B     		ldr	r3, .L115+8
 900 036e 1B68     		ldr	r3, [r3]
 901 0370 B3F57A7F 		cmp	r3, #1000
 902 0374 05D2     		bcs	.L43
 265:./Src/main.c  ****         MotorL_pwm(speedL);
 903              		.loc 1 265 0 is_stmt 1
 904 0376 3046     		mov	r0, r6
 905 0378 FFF7FEFF 		bl	MotorR_pwm
 906              	.LVL111:
 266:./Src/main.c  ****       }
 907              		.loc 1 266 0
 908 037c 2846     		mov	r0, r5
 909 037e FFF7FEFF 		bl	MotorL_pwm
ARM GAS  /tmp/ccn3VhA9.s 			page 27


 910              	.LVL112:
 911              	.L43:
 269:./Src/main.c  ****       //MotorR_pwm(-250);
 912              		.loc 1 269 0
 913 0382 0F96     		str	r6, [sp, #60]
 914              	.LVL113:
 272:./Src/main.c  ****     }
 915              		.loc 1 272 0
 916 0384 10A8     		add	r0, sp, #64
 917 0386 FFF7FEFF 		bl	Console_Log
 918              	.LVL114:
 268:./Src/main.c  ****       lastSpeedR = speedR;
 919              		.loc 1 268 0
 920 038a C346     		mov	fp, r8
 921              	.LVL115:
 922              	.L40:
 923              	.LBE4:
 274:./Src/main.c  **** 
 924              		.loc 1 274 0
 925 038c A64A     		ldr	r2, .L115+8
 926 038e 1368     		ldr	r3, [r2]
 927 0390 0133     		adds	r3, r3, #1
 928 0392 1360     		str	r3, [r2]
 276:./Src/main.c  ****       MotorR_pwm(0);
 929              		.loc 1 276 0
 930 0394 B3F57A7F 		cmp	r3, #1000
 931 0398 05D9     		bls	.L44
 277:./Src/main.c  ****       MotorL_pwm(0);
 932              		.loc 1 277 0
 933 039a 0020     		movs	r0, #0
 934 039c FFF7FEFF 		bl	MotorR_pwm
 935              	.LVL116:
 278:./Src/main.c  ****     }
 936              		.loc 1 278 0
 937 03a0 0020     		movs	r0, #0
 938 03a2 FFF7FEFF 		bl	MotorL_pwm
 939              	.LVL117:
 940              	.L44:
 282:./Src/main.c  ****       speedReading = ABS(MAX(((motorL.motorpos - lastMotorposL) / 90.0)*3.6, ((motorR.motorpos - la
 941              		.loc 1 282 0
 942 03a6 A14B     		ldr	r3, .L115+12
 943 03a8 1B68     		ldr	r3, [r3]
 944 03aa 03F5FA78 		add	r8, r3, #500
 945 03ae FFF7FEFF 		bl	HAL_GetTick
 946              	.LVL118:
 947 03b2 8045     		cmp	r8, r0
 948 03b4 80F0F680 		bcs	.L45
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 949              		.loc 1 283 0
 950 03b8 9D4B     		ldr	r3, .L115+16
 951 03ba 5869     		ldr	r0, [r3, #20]
 952 03bc 001B     		subs	r0, r0, r4
 953 03be FFF7FEFF 		bl	__aeabi_i2d
 954              	.LVL119:
 955 03c2 0022     		movs	r2, #0
 956 03c4 9B4B     		ldr	r3, .L115+20
 957 03c6 FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  /tmp/ccn3VhA9.s 			page 28


 958              	.LVL120:
 959 03ca 95A3     		adr	r3, .L115
 960 03cc D3E90023 		ldrd	r2, [r3]
 961 03d0 FFF7FEFF 		bl	__aeabi_dmul
 962              	.LVL121:
 963 03d4 CDE90401 		strd	r0, [sp, #16]
 964              	.LVL122:
 965 03d8 974B     		ldr	r3, .L115+24
 966 03da 5869     		ldr	r0, [r3, #20]
 967 03dc C01B     		subs	r0, r0, r7
 968 03de FFF7FEFF 		bl	__aeabi_i2d
 969              	.LVL123:
 970 03e2 0022     		movs	r2, #0
 971 03e4 934B     		ldr	r3, .L115+20
 972 03e6 FFF7FEFF 		bl	__aeabi_ddiv
 973              	.LVL124:
 974 03ea 8DA3     		adr	r3, .L115
 975 03ec D3E90023 		ldrd	r2, [r3]
 976 03f0 FFF7FEFF 		bl	__aeabi_dmul
 977              	.LVL125:
 978 03f4 0246     		mov	r2, r0
 979 03f6 0B46     		mov	r3, r1
 980 03f8 DDE90401 		ldrd	r0, [sp, #16]
 981 03fc FFF7FEFF 		bl	__aeabi_dcmpgt
 982              	.LVL126:
 983 0400 C8B1     		cbz	r0, .L102
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 984              		.loc 1 283 0 is_stmt 0 discriminator 1
 985 0402 8B4B     		ldr	r3, .L115+16
 986 0404 5869     		ldr	r0, [r3, #20]
 987 0406 001B     		subs	r0, r0, r4
 988 0408 FFF7FEFF 		bl	__aeabi_i2d
 989              	.LVL127:
 990 040c 0022     		movs	r2, #0
 991 040e 894B     		ldr	r3, .L115+20
 992 0410 FFF7FEFF 		bl	__aeabi_ddiv
 993              	.LVL128:
 994 0414 82A3     		adr	r3, .L115
 995 0416 D3E90023 		ldrd	r2, [r3]
 996 041a FFF7FEFF 		bl	__aeabi_dmul
 997              	.LVL129:
 998 041e 4FF00108 		mov	r8, #1
 999 0422 0022     		movs	r2, #0
 1000 0424 0023     		movs	r3, #0
 1001 0426 FFF7FEFF 		bl	__aeabi_dcmplt
 1002              	.LVL130:
 1003 042a 08B9     		cbnz	r0, .L48
 1004 042c 4FF00008 		mov	r8, #0
 1005              	.L48:
 1006 0430 5FFA88F3 		uxtb	r3, r8
 1007 0434 18E0     		b	.L49
 1008              	.L102:
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1009              		.loc 1 283 0 discriminator 2
 1010 0436 804B     		ldr	r3, .L115+24
 1011 0438 5869     		ldr	r0, [r3, #20]
 1012 043a C01B     		subs	r0, r0, r7
ARM GAS  /tmp/ccn3VhA9.s 			page 29


 1013 043c FFF7FEFF 		bl	__aeabi_i2d
 1014              	.LVL131:
 1015 0440 0022     		movs	r2, #0
 1016 0442 7C4B     		ldr	r3, .L115+20
 1017 0444 FFF7FEFF 		bl	__aeabi_ddiv
 1018              	.LVL132:
 1019 0448 75A3     		adr	r3, .L115
 1020 044a D3E90023 		ldrd	r2, [r3]
 1021 044e FFF7FEFF 		bl	__aeabi_dmul
 1022              	.LVL133:
 1023 0452 4FF00108 		mov	r8, #1
 1024 0456 0022     		movs	r2, #0
 1025 0458 0023     		movs	r3, #0
 1026 045a FFF7FEFF 		bl	__aeabi_dcmplt
 1027              	.LVL134:
 1028 045e 08B9     		cbnz	r0, .L50
 1029 0460 4FF00008 		mov	r8, #0
 1030              	.L50:
 1031 0464 5FFA88F3 		uxtb	r3, r8
 1032              	.L49:
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1033              		.loc 1 283 0 discriminator 4
 1034 0468 002B     		cmp	r3, #0
 1035 046a 48D0     		beq	.L51
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1036              		.loc 1 283 0 discriminator 5
 1037 046c 704B     		ldr	r3, .L115+16
 1038 046e 5869     		ldr	r0, [r3, #20]
 1039 0470 001B     		subs	r0, r0, r4
 1040 0472 FFF7FEFF 		bl	__aeabi_i2d
 1041              	.LVL135:
 1042 0476 0022     		movs	r2, #0
 1043 0478 6E4B     		ldr	r3, .L115+20
 1044 047a FFF7FEFF 		bl	__aeabi_ddiv
 1045              	.LVL136:
 1046 047e 68A3     		adr	r3, .L115
 1047 0480 D3E90023 		ldrd	r2, [r3]
 1048 0484 FFF7FEFF 		bl	__aeabi_dmul
 1049              	.LVL137:
 1050 0488 CDE90401 		strd	r0, [sp, #16]
 1051 048c 6A4B     		ldr	r3, .L115+24
 1052 048e 5869     		ldr	r0, [r3, #20]
 1053 0490 C01B     		subs	r0, r0, r7
 1054 0492 FFF7FEFF 		bl	__aeabi_i2d
 1055              	.LVL138:
 1056 0496 0022     		movs	r2, #0
 1057 0498 664B     		ldr	r3, .L115+20
 1058 049a FFF7FEFF 		bl	__aeabi_ddiv
 1059              	.LVL139:
 1060 049e 60A3     		adr	r3, .L115
 1061 04a0 D3E90023 		ldrd	r2, [r3]
 1062 04a4 FFF7FEFF 		bl	__aeabi_dmul
 1063              	.LVL140:
 1064 04a8 0246     		mov	r2, r0
 1065 04aa 0B46     		mov	r3, r1
 1066 04ac DDE90401 		ldrd	r0, [sp, #16]
 1067 04b0 FFF7FEFF 		bl	__aeabi_dcmpgt
ARM GAS  /tmp/ccn3VhA9.s 			page 30


 1068              	.LVL141:
 1069 04b4 88B1     		cbz	r0, .L103
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1070              		.loc 1 283 0 discriminator 7
 1071 04b6 5E4B     		ldr	r3, .L115+16
 1072 04b8 5869     		ldr	r0, [r3, #20]
 1073 04ba 001B     		subs	r0, r0, r4
 1074 04bc FFF7FEFF 		bl	__aeabi_i2d
 1075              	.LVL142:
 1076 04c0 0022     		movs	r2, #0
 1077 04c2 5C4B     		ldr	r3, .L115+20
 1078 04c4 FFF7FEFF 		bl	__aeabi_ddiv
 1079              	.LVL143:
 1080 04c8 55A3     		adr	r3, .L115
 1081 04ca D3E90023 		ldrd	r2, [r3]
 1082 04ce FFF7FEFF 		bl	__aeabi_dmul
 1083              	.LVL144:
 1084 04d2 0246     		mov	r2, r0
 1085 04d4 01F10043 		add	r3, r1, #-2147483648
 1086 04d8 57E0     		b	.L54
 1087              	.L103:
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1088              		.loc 1 283 0 discriminator 8
 1089 04da 574B     		ldr	r3, .L115+24
 1090 04dc 5869     		ldr	r0, [r3, #20]
 1091 04de C01B     		subs	r0, r0, r7
 1092 04e0 FFF7FEFF 		bl	__aeabi_i2d
 1093              	.LVL145:
 1094 04e4 0022     		movs	r2, #0
 1095 04e6 534B     		ldr	r3, .L115+20
 1096 04e8 FFF7FEFF 		bl	__aeabi_ddiv
 1097              	.LVL146:
 1098 04ec 4CA3     		adr	r3, .L115
 1099 04ee D3E90023 		ldrd	r2, [r3]
 1100 04f2 FFF7FEFF 		bl	__aeabi_dmul
 1101              	.LVL147:
 1102 04f6 0246     		mov	r2, r0
 1103 04f8 01F10043 		add	r3, r1, #-2147483648
 1104 04fc 45E0     		b	.L54
 1105              	.L51:
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1106              		.loc 1 283 0 discriminator 6
 1107 04fe 4C4B     		ldr	r3, .L115+16
 1108 0500 5869     		ldr	r0, [r3, #20]
 1109 0502 001B     		subs	r0, r0, r4
 1110 0504 FFF7FEFF 		bl	__aeabi_i2d
 1111              	.LVL148:
 1112 0508 0022     		movs	r2, #0
 1113 050a 4A4B     		ldr	r3, .L115+20
 1114 050c FFF7FEFF 		bl	__aeabi_ddiv
 1115              	.LVL149:
 1116 0510 43A3     		adr	r3, .L115
 1117 0512 D3E90023 		ldrd	r2, [r3]
 1118 0516 FFF7FEFF 		bl	__aeabi_dmul
 1119              	.LVL150:
 1120 051a CDE90401 		strd	r0, [sp, #16]
 1121 051e 464B     		ldr	r3, .L115+24
ARM GAS  /tmp/ccn3VhA9.s 			page 31


 1122 0520 5869     		ldr	r0, [r3, #20]
 1123 0522 C01B     		subs	r0, r0, r7
 1124 0524 FFF7FEFF 		bl	__aeabi_i2d
 1125              	.LVL151:
 1126 0528 0022     		movs	r2, #0
 1127 052a 424B     		ldr	r3, .L115+20
 1128 052c FFF7FEFF 		bl	__aeabi_ddiv
 1129              	.LVL152:
 1130 0530 3BA3     		adr	r3, .L115
 1131 0532 D3E90023 		ldrd	r2, [r3]
 1132 0536 FFF7FEFF 		bl	__aeabi_dmul
 1133              	.LVL153:
 1134 053a 0246     		mov	r2, r0
 1135 053c 0B46     		mov	r3, r1
 1136 053e DDE90401 		ldrd	r0, [sp, #16]
 1137 0542 FFF7FEFF 		bl	__aeabi_dcmpgt
 1138              	.LVL154:
 1139 0546 80B1     		cbz	r0, .L104
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1140              		.loc 1 283 0 discriminator 12
 1141 0548 394B     		ldr	r3, .L115+16
 1142 054a 5869     		ldr	r0, [r3, #20]
 1143 054c 001B     		subs	r0, r0, r4
 1144 054e FFF7FEFF 		bl	__aeabi_i2d
 1145              	.LVL155:
 1146 0552 0022     		movs	r2, #0
 1147 0554 374B     		ldr	r3, .L115+20
 1148 0556 FFF7FEFF 		bl	__aeabi_ddiv
 1149              	.LVL156:
 1150 055a 31A3     		adr	r3, .L115
 1151 055c D3E90023 		ldrd	r2, [r3]
 1152 0560 FFF7FEFF 		bl	__aeabi_dmul
 1153              	.LVL157:
 1154 0564 0246     		mov	r2, r0
 1155 0566 0B46     		mov	r3, r1
 1156 0568 0FE0     		b	.L54
 1157              	.L104:
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1158              		.loc 1 283 0 discriminator 13
 1159 056a 334B     		ldr	r3, .L115+24
 1160 056c 5869     		ldr	r0, [r3, #20]
 1161 056e C01B     		subs	r0, r0, r7
 1162 0570 FFF7FEFF 		bl	__aeabi_i2d
 1163              	.LVL158:
 1164 0574 0022     		movs	r2, #0
 1165 0576 2F4B     		ldr	r3, .L115+20
 1166 0578 FFF7FEFF 		bl	__aeabi_ddiv
 1167              	.LVL159:
 1168 057c 28A3     		adr	r3, .L115
 1169 057e D3E90023 		ldrd	r2, [r3]
 1170 0582 FFF7FEFF 		bl	__aeabi_dmul
 1171              	.LVL160:
 1172 0586 0246     		mov	r2, r0
 1173 0588 0B46     		mov	r3, r1
 1174              	.L54:
 283:./Src/main.c  ****       counterTemp = HAL_GetTick();
 1175              		.loc 1 283 0 discriminator 16
ARM GAS  /tmp/ccn3VhA9.s 			page 32


 1176 058a 1046     		mov	r0, r2
 1177 058c 1946     		mov	r1, r3
 1178 058e FFF7FEFF 		bl	__aeabi_d2f
 1179              	.LVL161:
 1180 0592 0490     		str	r0, [sp, #16]	@ float
 1181              	.LVL162:
 284:./Src/main.c  ****       lastMotorposL = motorL.motorpos;
 1182              		.loc 1 284 0 is_stmt 1 discriminator 16
 1183 0594 FFF7FEFF 		bl	HAL_GetTick
 1184              	.LVL163:
 1185 0598 244B     		ldr	r3, .L115+12
 1186 059a 1860     		str	r0, [r3]
 285:./Src/main.c  ****       lastMotorposR = motorR.motorpos;
 1187              		.loc 1 285 0 discriminator 16
 1188 059c 244B     		ldr	r3, .L115+16
 1189 059e 5C69     		ldr	r4, [r3, #20]
 1190              	.LVL164:
 286:./Src/main.c  ****     }
 1191              		.loc 1 286 0 discriminator 16
 1192 05a0 254B     		ldr	r3, .L115+24
 1193 05a2 5F69     		ldr	r7, [r3, #20]
 1194              	.LVL165:
 1195              	.L45:
 1196              	.LBB5:
 289:./Src/main.c  ****       MotorL_pwm(0);
 1197              		.loc 1 289 0
 1198 05a4 FFF7FEFF 		bl	IS_Button
 1199              	.LVL166:
 1200 05a8 B0B1     		cbz	r0, .L57
 290:./Src/main.c  ****       MotorR_pwm(0);
 1201              		.loc 1 290 0
 1202 05aa 0020     		movs	r0, #0
 1203 05ac FFF7FEFF 		bl	MotorL_pwm
 1204              	.LVL167:
 291:./Src/main.c  ****       while(IS_Button()) {
 1205              		.loc 1 291 0
 1206 05b0 0020     		movs	r0, #0
 1207 05b2 FFF7FEFF 		bl	MotorR_pwm
 1208              	.LVL168:
 292:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 1209              		.loc 1 292 0
 1210 05b6 02E0     		b	.L58
 1211              	.L59:
 293:./Src/main.c  ****       }
 1212              		.loc 1 293 0
 1213 05b8 2048     		ldr	r0, .L115+28
 1214 05ba FFF7FEFF 		bl	HAL_IWDG_Refresh
 1215              	.LVL169:
 1216              	.L58:
 292:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 1217              		.loc 1 292 0
 1218 05be FFF7FEFF 		bl	IS_Button
 1219              	.LVL170:
 1220 05c2 0028     		cmp	r0, #0
 1221 05c4 F8D1     		bne	.L59
 295:./Src/main.c  ****       HAL_Delay(350);
 1222              		.loc 1 295 0
ARM GAS  /tmp/ccn3VhA9.s 			page 33


 1223 05c6 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1224              	.LVL171:
 296:./Src/main.c  ****       Power_Set(0);
 1225              		.loc 1 296 0
 1226 05ca 4FF4AF70 		mov	r0, #350
 1227 05ce FFF7FEFF 		bl	HAL_Delay
 1228              	.LVL172:
 297:./Src/main.c  ****     }
 1229              		.loc 1 297 0
 1230 05d2 0020     		movs	r0, #0
 1231 05d4 FFF7FEFF 		bl	Power_Set
 1232              	.LVL173:
 1233              	.L57:
 1234              	.LBE5:
 300:./Src/main.c  ****       //LCD_SetLocation(&lcd, 4, 0);
 1235              		.loc 1 300 0
 1236 05d8 194B     		ldr	r3, .L115+32
 1237 05da A3FB0923 		umull	r2, r3, r3, r9
 1238 05de DB09     		lsrs	r3, r3, #7
 1239 05e0 4FF4FA62 		mov	r2, #2000
 1240 05e4 02FB1393 		mls	r3, r2, r3, r9
 1241 05e8 002B     		cmp	r3, #0
 1242 05ea 40F0DB80 		bne	.L60
 1243              	.LBB6:
 303:./Src/main.c  ****         LCD_SetLocation(&lcd, 7, 0);
 1244              		.loc 1 303 0
 1245 05ee 1549     		ldr	r1, .L115+36
 1246 05f0 0498     		ldr	r0, [sp, #16]	@ float
 1247 05f2 FFF7FEFF 		bl	__aeabi_fcmplt
 1248              	.LVL174:
 1249 05f6 58B3     		cbz	r0, .L105
 304:./Src/main.c  ****         LCD_WriteString(&lcd, " ");
 1250              		.loc 1 304 0
 1251 05f8 DFF85080 		ldr	r8, .L115+44
 1252 05fc 0022     		movs	r2, #0
 1253 05fe 0721     		movs	r1, #7
 1254 0600 4046     		mov	r0, r8
 1255 0602 FFF7FEFF 		bl	LCD_SetLocation
 1256              	.LVL175:
 305:./Src/main.c  ****         LCD_SetLocation(&lcd, 8, 0);
 1257              		.loc 1 305 0
 1258 0606 1049     		ldr	r1, .L115+40
 1259 0608 4046     		mov	r0, r8
 1260 060a FFF7FEFF 		bl	LCD_WriteString
 1261              	.LVL176:
 306:./Src/main.c  ****       } else {
 1262              		.loc 1 306 0
 1263 060e 0022     		movs	r2, #0
 1264 0610 0821     		movs	r1, #8
 1265 0612 4046     		mov	r0, r8
 1266 0614 FFF7FEFF 		bl	LCD_SetLocation
 1267              	.LVL177:
 1268 0618 1FE0     		b	.L63
 1269              	.L116:
 1270 061a 00BFAFF3 		.align	3
 1270      0080
 1271              	.L115:
ARM GAS  /tmp/ccn3VhA9.s 			page 34


 1272 0620 CDCCCCCC 		.word	-858993459
 1273 0624 CCCC0C40 		.word	1074580684
 1274 0628 00000000 		.word	.LANCHOR1
 1275 062c 00000000 		.word	counterTemp
 1276 0630 00000000 		.word	motorL
 1277 0634 00805640 		.word	1079410688
 1278 0638 00000000 		.word	motorR
 1279 063c 00000000 		.word	hiwdg
 1280 0640 D34D6210 		.word	274877907
 1281 0644 00002041 		.word	1092616192
 1282 0648 58000000 		.word	.LC8
 1283 064c 00000000 		.word	lcd
 1284              	.L105:
 308:./Src/main.c  ****       }
 1285              		.loc 1 308 0
 1286 0650 0022     		movs	r2, #0
 1287 0652 0721     		movs	r1, #7
 1288 0654 B848     		ldr	r0, .L117+8
 1289 0656 FFF7FEFF 		bl	LCD_SetLocation
 1290              	.LVL178:
 1291              	.L63:
 310:./Src/main.c  ****       LCD_SetLocation(&lcd, 4, 1);
 1292              		.loc 1 310 0
 1293 065a 0498     		ldr	r0, [sp, #16]	@ float
 1294 065c FFF7FEFF 		bl	__aeabi_f2d
 1295              	.LVL179:
 1296 0660 DFF8D482 		ldr	r8, .L117+8
 1297 0664 0223     		movs	r3, #2
 1298 0666 0093     		str	r3, [sp]
 1299 0668 0246     		mov	r2, r0
 1300 066a 0B46     		mov	r3, r1
 1301 066c 4046     		mov	r0, r8
 1302 066e FFF7FEFF 		bl	LCD_WriteFloat
 1303              	.LVL180:
 311:./Src/main.c  ****       LCD_WriteFloat(&lcd,GET_BatteryAverage(),1);
 1304              		.loc 1 311 0
 1305 0672 0122     		movs	r2, #1
 1306 0674 0421     		movs	r1, #4
 1307 0676 4046     		mov	r0, r8
 1308 0678 FFF7FEFF 		bl	LCD_SetLocation
 1309              	.LVL181:
 312:./Src/main.c  ****       float current = ABS(getMotorCurrentR() * 0.02) + ABS(getMotorCurrentL() * 0.02);
 1310              		.loc 1 312 0
 1311 067c FFF7FEFF 		bl	GET_BatteryAverage
 1312              	.LVL182:
 1313 0680 FFF7FEFF 		bl	__aeabi_f2d
 1314              	.LVL183:
 1315 0684 0123     		movs	r3, #1
 1316 0686 0093     		str	r3, [sp]
 1317 0688 0246     		mov	r2, r0
 1318 068a 0B46     		mov	r3, r1
 1319 068c 4046     		mov	r0, r8
 1320 068e FFF7FEFF 		bl	LCD_WriteFloat
 1321              	.LVL184:
 313:./Src/main.c  ****       if (current < 10.0) {
 1322              		.loc 1 313 0
 1323 0692 FFF7FEFF 		bl	getMotorCurrentR
ARM GAS  /tmp/ccn3VhA9.s 			page 35


 1324              	.LVL185:
 1325 0696 FFF7FEFF 		bl	__aeabi_i2d
 1326              	.LVL186:
 1327 069a A5A3     		adr	r3, .L117
 1328 069c D3E90023 		ldrd	r2, [r3]
 1329 06a0 FFF7FEFF 		bl	__aeabi_dmul
 1330              	.LVL187:
 1331 06a4 0022     		movs	r2, #0
 1332 06a6 0023     		movs	r3, #0
 1333 06a8 FFF7FEFF 		bl	__aeabi_dcmplt
 1334              	.LVL188:
 1335 06ac 60B1     		cbz	r0, .L106
 313:./Src/main.c  ****       if (current < 10.0) {
 1336              		.loc 1 313 0 is_stmt 0 discriminator 1
 1337 06ae FFF7FEFF 		bl	getMotorCurrentR
 1338              	.LVL189:
 1339 06b2 FFF7FEFF 		bl	__aeabi_i2d
 1340              	.LVL190:
 1341 06b6 9EA3     		adr	r3, .L117
 1342 06b8 D3E90023 		ldrd	r2, [r3]
 1343 06bc FFF7FEFF 		bl	__aeabi_dmul
 1344              	.LVL191:
 1345 06c0 8246     		mov	r10, r0
 1346 06c2 01F10048 		add	r8, r1, #-2147483648
 1347 06c6 0AE0     		b	.L66
 1348              	.L106:
 313:./Src/main.c  ****       if (current < 10.0) {
 1349              		.loc 1 313 0 discriminator 2
 1350 06c8 FFF7FEFF 		bl	getMotorCurrentR
 1351              	.LVL192:
 1352 06cc FFF7FEFF 		bl	__aeabi_i2d
 1353              	.LVL193:
 1354 06d0 97A3     		adr	r3, .L117
 1355 06d2 D3E90023 		ldrd	r2, [r3]
 1356 06d6 FFF7FEFF 		bl	__aeabi_dmul
 1357              	.LVL194:
 1358 06da 8246     		mov	r10, r0
 1359 06dc 8846     		mov	r8, r1
 1360              	.L66:
 313:./Src/main.c  ****       if (current < 10.0) {
 1361              		.loc 1 313 0 discriminator 4
 1362 06de FFF7FEFF 		bl	getMotorCurrentL
 1363              	.LVL195:
 1364 06e2 FFF7FEFF 		bl	__aeabi_i2d
 1365              	.LVL196:
 1366 06e6 92A3     		adr	r3, .L117
 1367 06e8 D3E90023 		ldrd	r2, [r3]
 1368 06ec FFF7FEFF 		bl	__aeabi_dmul
 1369              	.LVL197:
 1370 06f0 0022     		movs	r2, #0
 1371 06f2 0023     		movs	r3, #0
 1372 06f4 FFF7FEFF 		bl	__aeabi_dcmplt
 1373              	.LVL198:
 1374 06f8 58B1     		cbz	r0, .L107
 313:./Src/main.c  ****       if (current < 10.0) {
 1375              		.loc 1 313 0 discriminator 5
 1376 06fa FFF7FEFF 		bl	getMotorCurrentL
ARM GAS  /tmp/ccn3VhA9.s 			page 36


 1377              	.LVL199:
 1378 06fe FFF7FEFF 		bl	__aeabi_i2d
 1379              	.LVL200:
 1380 0702 8BA3     		adr	r3, .L117
 1381 0704 D3E90023 		ldrd	r2, [r3]
 1382 0708 FFF7FEFF 		bl	__aeabi_dmul
 1383              	.LVL201:
 1384 070c 01F10041 		add	r1, r1, #-2147483648
 1385 0710 08E0     		b	.L69
 1386              	.L107:
 313:./Src/main.c  ****       if (current < 10.0) {
 1387              		.loc 1 313 0 discriminator 6
 1388 0712 FFF7FEFF 		bl	getMotorCurrentL
 1389              	.LVL202:
 1390 0716 FFF7FEFF 		bl	__aeabi_i2d
 1391              	.LVL203:
 1392 071a 85A3     		adr	r3, .L117
 1393 071c D3E90023 		ldrd	r2, [r3]
 1394 0720 FFF7FEFF 		bl	__aeabi_dmul
 1395              	.LVL204:
 1396              	.L69:
 313:./Src/main.c  ****       if (current < 10.0) {
 1397              		.loc 1 313 0 discriminator 8
 1398 0724 0246     		mov	r2, r0
 1399 0726 0B46     		mov	r3, r1
 1400 0728 5046     		mov	r0, r10
 1401 072a 4146     		mov	r1, r8
 1402 072c FFF7FEFF 		bl	__aeabi_dadd
 1403              	.LVL205:
 1404 0730 FFF7FEFF 		bl	__aeabi_d2f
 1405              	.LVL206:
 1406 0734 8046     		mov	r8, r0
 1407              	.LVL207:
 314:./Src/main.c  ****         LCD_SetLocation(&lcd, 10, 1);
 1408              		.loc 1 314 0 is_stmt 1 discriminator 8
 1409 0736 8149     		ldr	r1, .L117+12
 1410 0738 FFF7FEFF 		bl	__aeabi_fcmplt
 1411              	.LVL208:
 1412 073c 80B1     		cbz	r0, .L108
 315:./Src/main.c  ****         LCD_WriteString(&lcd, " ");
 1413              		.loc 1 315 0
 1414 073e DFF8F8A1 		ldr	r10, .L117+8
 1415 0742 0122     		movs	r2, #1
 1416 0744 0A21     		movs	r1, #10
 1417 0746 5046     		mov	r0, r10
 1418 0748 FFF7FEFF 		bl	LCD_SetLocation
 1419              	.LVL209:
 316:./Src/main.c  ****         LCD_SetLocation(&lcd, 11, 1);
 1420              		.loc 1 316 0
 1421 074c 7C49     		ldr	r1, .L117+16
 1422 074e 5046     		mov	r0, r10
 1423 0750 FFF7FEFF 		bl	LCD_WriteString
 1424              	.LVL210:
 317:./Src/main.c  ****       } else {
 1425              		.loc 1 317 0
 1426 0754 0122     		movs	r2, #1
 1427 0756 0B21     		movs	r1, #11
ARM GAS  /tmp/ccn3VhA9.s 			page 37


 1428 0758 5046     		mov	r0, r10
 1429 075a FFF7FEFF 		bl	LCD_SetLocation
 1430              	.LVL211:
 1431 075e 04E0     		b	.L72
 1432              	.L108:
 319:./Src/main.c  ****       }
 1433              		.loc 1 319 0
 1434 0760 0122     		movs	r2, #1
 1435 0762 0A21     		movs	r1, #10
 1436 0764 7448     		ldr	r0, .L117+8
 1437 0766 FFF7FEFF 		bl	LCD_SetLocation
 1438              	.LVL212:
 1439              	.L72:
 321:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 1440              		.loc 1 321 0
 1441 076a 0021     		movs	r1, #0
 1442 076c 4046     		mov	r0, r8
 1443 076e FFF7FEFF 		bl	__aeabi_fcmplt
 1444              	.LVL213:
 1445 0772 10B1     		cbz	r0, .L109
 321:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 1446              		.loc 1 321 0 is_stmt 0 discriminator 1
 1447 0774 08F10040 		add	r0, r8, #-2147483648
 1448 0778 00E0     		b	.L73
 1449              	.L109:
 321:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 1450              		.loc 1 321 0
 1451 077a 4046     		mov	r0, r8
 1452              	.L73:
 321:./Src/main.c  ****       LCD_SetLocation(&lcd, 15, 1);
 1453              		.loc 1 321 0 discriminator 4
 1454 077c FFF7FEFF 		bl	__aeabi_f2d
 1455              	.LVL214:
 1456 0780 DFF8B481 		ldr	r8, .L117+8
 1457              	.LVL215:
 1458 0784 0223     		movs	r3, #2
 1459 0786 0093     		str	r3, [sp]
 1460 0788 0246     		mov	r2, r0
 1461 078a 0B46     		mov	r3, r1
 1462 078c 4046     		mov	r0, r8
 1463 078e FFF7FEFF 		bl	LCD_WriteFloat
 1464              	.LVL216:
 322:./Src/main.c  ****       LCD_WriteString(&lcd, "A");
 1465              		.loc 1 322 0 is_stmt 1 discriminator 4
 1466 0792 0122     		movs	r2, #1
 1467 0794 0F21     		movs	r1, #15
 1468 0796 4046     		mov	r0, r8
 1469 0798 FFF7FEFF 		bl	LCD_SetLocation
 1470              	.LVL217:
 323:./Src/main.c  ****     }
 1471              		.loc 1 323 0 discriminator 4
 1472 079c 6949     		ldr	r1, .L117+20
 1473 079e 4046     		mov	r0, r8
 1474 07a0 FFF7FEFF 		bl	LCD_WriteString
 1475              	.LVL218:
 1476              	.L60:
 1477              	.LBE6:
ARM GAS  /tmp/ccn3VhA9.s 			page 38


 330:./Src/main.c  ****     //Current_Motor_TASK();
 1478              		.loc 1 330 0
 1479 07a4 FFF7FEFF 		bl	Battery_TASK
 1480              	.LVL219:
 1481              	.LBB7:
 338:./Src/main.c  ****       MotorL_pwm(0);
 1482              		.loc 1 338 0
 1483 07a8 FFF7FEFF 		bl	getMotorCurrentR
 1484              	.LVL220:
 1485 07ac FFF7FEFF 		bl	__aeabi_i2d
 1486              	.LVL221:
 1487 07b0 5FA3     		adr	r3, .L117
 1488 07b2 D3E90023 		ldrd	r2, [r3]
 1489 07b6 FFF7FEFF 		bl	__aeabi_dmul
 1490              	.LVL222:
 1491 07ba 0022     		movs	r2, #0
 1492 07bc 0023     		movs	r3, #0
 1493 07be FFF7FEFF 		bl	__aeabi_dcmplt
 1494              	.LVL223:
 1495 07c2 78B1     		cbz	r0, .L110
 338:./Src/main.c  ****       MotorL_pwm(0);
 1496              		.loc 1 338 0 is_stmt 0 discriminator 1
 1497 07c4 FFF7FEFF 		bl	getMotorCurrentR
 1498              	.LVL224:
 1499 07c8 FFF7FEFF 		bl	__aeabi_i2d
 1500              	.LVL225:
 1501 07cc 58A3     		adr	r3, .L117
 1502 07ce D3E90023 		ldrd	r2, [r3]
 1503 07d2 FFF7FEFF 		bl	__aeabi_dmul
 1504              	.LVL226:
 1505 07d6 0022     		movs	r2, #0
 1506 07d8 5B4B     		ldr	r3, .L117+24
 1507 07da FFF7FEFF 		bl	__aeabi_dcmplt
 1508              	.LVL227:
 1509 07de 0028     		cmp	r0, #0
 1510 07e0 39D1     		bne	.L77
 1511 07e2 0DE0     		b	.L78
 1512              	.L110:
 338:./Src/main.c  ****       MotorL_pwm(0);
 1513              		.loc 1 338 0 discriminator 2
 1514 07e4 FFF7FEFF 		bl	getMotorCurrentR
 1515              	.LVL228:
 1516 07e8 FFF7FEFF 		bl	__aeabi_i2d
 1517              	.LVL229:
 1518 07ec 50A3     		adr	r3, .L117
 1519 07ee D3E90023 		ldrd	r2, [r3]
 1520 07f2 FFF7FEFF 		bl	__aeabi_dmul
 1521              	.LVL230:
 1522 07f6 0022     		movs	r2, #0
 1523 07f8 544B     		ldr	r3, .L117+28
 1524 07fa FFF7FEFF 		bl	__aeabi_dcmpgt
 1525              	.LVL231:
 1526 07fe 50BB     		cbnz	r0, .L77
 1527              	.L78:
 338:./Src/main.c  ****       MotorL_pwm(0);
 1528              		.loc 1 338 0 discriminator 3
 1529 0800 FFF7FEFF 		bl	getMotorCurrentL
ARM GAS  /tmp/ccn3VhA9.s 			page 39


 1530              	.LVL232:
 1531 0804 FFF7FEFF 		bl	__aeabi_i2d
 1532              	.LVL233:
 1533 0808 49A3     		adr	r3, .L117
 1534 080a D3E90023 		ldrd	r2, [r3]
 1535 080e FFF7FEFF 		bl	__aeabi_dmul
 1536              	.LVL234:
 1537 0812 0022     		movs	r2, #0
 1538 0814 0023     		movs	r3, #0
 1539 0816 FFF7FEFF 		bl	__aeabi_dcmplt
 1540              	.LVL235:
 1541 081a 70B1     		cbz	r0, .L111
 338:./Src/main.c  ****       MotorL_pwm(0);
 1542              		.loc 1 338 0 discriminator 4
 1543 081c FFF7FEFF 		bl	getMotorCurrentL
 1544              	.LVL236:
 1545 0820 FFF7FEFF 		bl	__aeabi_i2d
 1546              	.LVL237:
 1547 0824 42A3     		adr	r3, .L117
 1548 0826 D3E90023 		ldrd	r2, [r3]
 1549 082a FFF7FEFF 		bl	__aeabi_dmul
 1550              	.LVL238:
 1551 082e 0022     		movs	r2, #0
 1552 0830 454B     		ldr	r3, .L117+24
 1553 0832 FFF7FEFF 		bl	__aeabi_dcmplt
 1554              	.LVL239:
 1555 0836 70B9     		cbnz	r0, .L77
 1556 0838 3DE0     		b	.L81
 1557              	.L111:
 338:./Src/main.c  ****       MotorL_pwm(0);
 1558              		.loc 1 338 0 discriminator 5
 1559 083a FFF7FEFF 		bl	getMotorCurrentL
 1560              	.LVL240:
 1561 083e FFF7FEFF 		bl	__aeabi_i2d
 1562              	.LVL241:
 1563 0842 3BA3     		adr	r3, .L117
 1564 0844 D3E90023 		ldrd	r2, [r3]
 1565 0848 FFF7FEFF 		bl	__aeabi_dmul
 1566              	.LVL242:
 1567 084c 0022     		movs	r2, #0
 1568 084e 3F4B     		ldr	r3, .L117+28
 1569 0850 FFF7FEFF 		bl	__aeabi_dcmpgt
 1570              	.LVL243:
 1571 0854 78B3     		cbz	r0, .L81
 1572              	.L77:
 339:./Src/main.c  ****       MotorR_pwm(0);
 1573              		.loc 1 339 0 is_stmt 1
 1574 0856 0020     		movs	r0, #0
 1575 0858 FFF7FEFF 		bl	MotorL_pwm
 1576              	.LVL244:
 340:./Src/main.c  ****       Buzzer_OneLongBeep();
 1577              		.loc 1 340 0
 1578 085c 0020     		movs	r0, #0
 1579 085e FFF7FEFF 		bl	MotorR_pwm
 1580              	.LVL245:
 341:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 1581              		.loc 1 341 0
ARM GAS  /tmp/ccn3VhA9.s 			page 40


 1582 0862 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1583              	.LVL246:
 342:./Src/main.c  ****       HAL_Delay(5);
 1584              		.loc 1 342 0
 1585 0866 DFF8D080 		ldr	r8, .L117+8
 1586 086a 4046     		mov	r0, r8
 1587 086c FFF7FEFF 		bl	LCD_ClearDisplay
 1588              	.LVL247:
 343:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 1589              		.loc 1 343 0
 1590 0870 0520     		movs	r0, #5
 1591 0872 FFF7FEFF 		bl	HAL_Delay
 1592              	.LVL248:
 344:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 1593              		.loc 1 344 0
 1594 0876 0022     		movs	r2, #0
 1595 0878 1146     		mov	r1, r2
 1596 087a 4046     		mov	r0, r8
 1597 087c FFF7FEFF 		bl	LCD_SetLocation
 1598              	.LVL249:
 345:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 1599              		.loc 1 345 0
 1600 0880 3349     		ldr	r1, .L117+32
 1601 0882 4046     		mov	r0, r8
 1602 0884 FFF7FEFF 		bl	LCD_WriteString
 1603              	.LVL250:
 346:./Src/main.c  ****       LCD_WriteString(&lcd, "Overcurrent.");
 1604              		.loc 1 346 0
 1605 0888 0122     		movs	r2, #1
 1606 088a 0021     		movs	r1, #0
 1607 088c 4046     		mov	r0, r8
 1608 088e FFF7FEFF 		bl	LCD_SetLocation
 1609              	.LVL251:
 347:./Src/main.c  ****       HAL_Delay(500);
 1610              		.loc 1 347 0
 1611 0892 3049     		ldr	r1, .L117+36
 1612 0894 4046     		mov	r0, r8
 1613 0896 FFF7FEFF 		bl	LCD_WriteString
 1614              	.LVL252:
 348:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 1615              		.loc 1 348 0
 1616 089a 4FF4FA70 		mov	r0, #500
 1617 089e FFF7FEFF 		bl	HAL_Delay
 1618              	.LVL253:
 349:./Src/main.c  ****       HAL_Delay(500);
 1619              		.loc 1 349 0
 1620 08a2 2D48     		ldr	r0, .L117+40
 1621 08a4 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1622              	.LVL254:
 350:./Src/main.c  ****       Power_Set(0);
 1623              		.loc 1 350 0
 1624 08a8 4FF4FA70 		mov	r0, #500
 1625 08ac FFF7FEFF 		bl	HAL_Delay
 1626              	.LVL255:
 351:./Src/main.c  ****     }
 1627              		.loc 1 351 0
 1628 08b0 0020     		movs	r0, #0
ARM GAS  /tmp/ccn3VhA9.s 			page 41


 1629 08b2 FFF7FEFF 		bl	Power_Set
 1630              	.LVL256:
 1631              	.L81:
 1632              	.LBE7:
 354:./Src/main.c  ****       MotorL_pwm(0);
 1633              		.loc 1 354 0
 1634 08b6 FFF7FEFF 		bl	GET_BatteryAverage
 1635              	.LVL257:
 1636 08ba 2849     		ldr	r1, .L117+44
 1637 08bc FFF7FEFF 		bl	__aeabi_fcmplt
 1638              	.LVL258:
 1639 08c0 78B3     		cbz	r0, .L83
 355:./Src/main.c  ****       MotorR_pwm(0);
 1640              		.loc 1 355 0
 1641 08c2 0020     		movs	r0, #0
 1642 08c4 FFF7FEFF 		bl	MotorL_pwm
 1643              	.LVL259:
 356:./Src/main.c  ****       Buzzer_OneLongBeep();
 1644              		.loc 1 356 0
 1645 08c8 0020     		movs	r0, #0
 1646 08ca FFF7FEFF 		bl	MotorR_pwm
 1647              	.LVL260:
 357:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 1648              		.loc 1 357 0
 1649 08ce FFF7FEFF 		bl	Buzzer_OneLongBeep
 1650              	.LVL261:
 358:./Src/main.c  ****       HAL_Delay(5);
 1651              		.loc 1 358 0
 1652 08d2 DFF86480 		ldr	r8, .L117+8
 1653 08d6 4046     		mov	r0, r8
 1654 08d8 FFF7FEFF 		bl	LCD_ClearDisplay
 1655              	.LVL262:
 359:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 1656              		.loc 1 359 0
 1657 08dc 0520     		movs	r0, #5
 1658 08de FFF7FEFF 		bl	HAL_Delay
 1659              	.LVL263:
 360:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 1660              		.loc 1 360 0
 1661 08e2 0022     		movs	r2, #0
 1662 08e4 1146     		mov	r1, r2
 1663 08e6 4046     		mov	r0, r8
 1664 08e8 FFF7FEFF 		bl	LCD_SetLocation
 1665              	.LVL264:
 361:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 1666              		.loc 1 361 0
 1667 08ec 1849     		ldr	r1, .L117+32
 1668 08ee 4046     		mov	r0, r8
 1669 08f0 FFF7FEFF 		bl	LCD_WriteString
 1670              	.LVL265:
 362:./Src/main.c  ****       LCD_WriteString(&lcd, "Battery low.");
 1671              		.loc 1 362 0
 1672 08f4 0122     		movs	r2, #1
 1673 08f6 0021     		movs	r1, #0
 1674 08f8 4046     		mov	r0, r8
 1675 08fa FFF7FEFF 		bl	LCD_SetLocation
 1676              	.LVL266:
ARM GAS  /tmp/ccn3VhA9.s 			page 42


 363:./Src/main.c  ****       HAL_Delay(500);
 1677              		.loc 1 363 0
 1678 08fe 1849     		ldr	r1, .L117+48
 1679 0900 4046     		mov	r0, r8
 1680 0902 FFF7FEFF 		bl	LCD_WriteString
 1681              	.LVL267:
 364:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 1682              		.loc 1 364 0
 1683 0906 4FF4FA70 		mov	r0, #500
 1684 090a FFF7FEFF 		bl	HAL_Delay
 1685              	.LVL268:
 365:./Src/main.c  ****       HAL_Delay(500);
 1686              		.loc 1 365 0
 1687 090e 1248     		ldr	r0, .L117+40
 1688 0910 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1689              	.LVL269:
 366:./Src/main.c  ****       Power_Set(0);
 1690              		.loc 1 366 0
 1691 0914 4FF4FA70 		mov	r0, #500
 1692 0918 FFF7FEFF 		bl	HAL_Delay
 1693              	.LVL270:
 367:./Src/main.c  ****     }
 1694              		.loc 1 367 0
 1695 091c 0020     		movs	r0, #0
 1696 091e FFF7FEFF 		bl	Power_Set
 1697              	.LVL271:
 1698              	.L83:
 371:./Src/main.c  **** 
 1699              		.loc 1 371 0
 1700 0922 0D48     		ldr	r0, .L117+40
 1701 0924 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1702              	.LVL272:
 377:./Src/main.c  **** 
 1703              		.loc 1 377 0
 1704 0928 1AE4     		b	.L85
 1705              	.L118:
 1706 092a 00BFAFF3 		.align	3
 1706      0080
 1707              	.L117:
 1708 0930 7B14AE47 		.word	1202590843
 1709 0934 E17A943F 		.word	1066695393
 1710 0938 00000000 		.word	lcd
 1711 093c 00002041 		.word	1092616192
 1712 0940 58000000 		.word	.LC8
 1713 0944 30000000 		.word	.LC4
 1714 0948 008047C0 		.word	-1069056000
 1715 094c 00804740 		.word	1078427648
 1716 0950 5C000000 		.word	.LC9
 1717 0954 6C000000 		.word	.LC10
 1718 0958 00000000 		.word	hiwdg
 1719 095c 0000F841 		.word	1106771968
 1720 0960 7C000000 		.word	.LC11
 1721              		.cfi_endproc
 1722              	.LFE65:
 1724              		.global	timeout
 1725              		.global	rx_count
 1726              		.global	data_ready
ARM GAS  /tmp/ccn3VhA9.s 			page 43


 1727              		.global	pointer
 1728              		.global	rc_data
 1729              		.global	captured_value
 1730              		.comm	htim2,60,4
 1731              		.global	saveValue
 1732              		.comm	lcd,140,4
 1733              		.comm	counterTempTT,4,4
 1734              		.comm	counterTemp,4,4
 1735              		.global	speed
 1736              		.comm	hiwdg,16,4
 1737              		.global	VarValue
 1738              		.global	VarDataTab
 1739              		.global	VirtAddVarTab
 1740              		.section	.bss.pointer,"aw",%nobits
 1743              	pointer:
 1744 0000 00       		.space	1
 1745              		.section	.bss.rc_data,"aw",%nobits
 1746              		.align	2
 1749              	rc_data:
 1750 0000 00000000 		.space	10
 1750      00000000 
 1750      0000
 1751              		.section	.bss.saveValue,"aw",%nobits
 1752              		.align	1
 1753              		.set	.LANCHOR3,. + 0
 1756              	saveValue:
 1757 0000 0000     		.space	2
 1758              		.section	.bss.captured_value,"aw",%nobits
 1759              		.align	2
 1760              		.set	.LANCHOR2,. + 0
 1763              	captured_value:
 1764 0000 00000000 		.space	16
 1764      00000000 
 1764      00000000 
 1764      00000000 
 1765              		.section	.bss.VarValue,"aw",%nobits
 1766              		.align	1
 1769              	VarValue:
 1770 0000 0000     		.space	2
 1771              		.section	.bss.rx_count,"aw",%nobits
 1772              		.set	.LANCHOR0,. + 0
 1775              	rx_count:
 1776 0000 00       		.space	1
 1777              		.section	.data.VirtAddVarTab,"aw",%progbits
 1778              		.align	2
 1779              		.set	.LANCHOR4,. + 0
 1782              	VirtAddVarTab:
 1783 0000 3713     		.short	4919
 1784 0002 00000000 		.space	4
 1785              		.section	.rodata.str1.4,"aMS",%progbits,1
 1786              		.align	2
 1787              	.LC0:
 1788 0000 53657373 		.ascii	"SesselOtter V5.2\000"
 1788      656C4F74 
 1788      74657220 
 1788      56352E32 
 1788      00
ARM GAS  /tmp/ccn3VhA9.s 			page 44


 1789 0011 000000   		.space	3
 1790              	.LC1:
 1791 0014 496E6974 		.ascii	"Initializing...\000"
 1791      69616C69 
 1791      7A696E67 
 1791      2E2E2E00 
 1792              	.LC2:
 1793 0024 4261743A 		.ascii	"Bat:\000"
 1793      00
 1794 0029 000000   		.space	3
 1795              	.LC3:
 1796 002c 5600     		.ascii	"V\000"
 1797 002e 0000     		.space	2
 1798              	.LC4:
 1799 0030 4100     		.ascii	"A\000"
 1800 0032 0000     		.space	2
 1801              	.LC5:
 1802 0034 53706565 		.ascii	"Speed:\000"
 1802      643A00
 1803 003b 00       		.space	1
 1804              	.LC6:
 1805 003c 6B6D2F68 		.ascii	"km/h\000"
 1805      00
 1806 0041 000000   		.space	3
 1807              	.LC7:
 1808 0044 25693B25 		.ascii	"%i;%i;%i;%i;%i;%i\012\015\000"
 1808      693B2569 
 1808      3B25693B 
 1808      25693B25 
 1808      690A0D00 
 1809              	.LC8:
 1810 0058 2000     		.ascii	" \000"
 1811 005a 0000     		.space	2
 1812              	.LC9:
 1813 005c 456D6572 		.ascii	"Emergency Off!\000"
 1813      67656E63 
 1813      79204F66 
 1813      662100
 1814 006b 00       		.space	1
 1815              	.LC10:
 1816 006c 4F766572 		.ascii	"Overcurrent.\000"
 1816      63757272 
 1816      656E742E 
 1816      00
 1817 0079 000000   		.space	3
 1818              	.LC11:
 1819 007c 42617474 		.ascii	"Battery low.\000"
 1819      65727920 
 1819      6C6F772E 
 1819      00
 1820              		.section	.bss.timeout,"aw",%nobits
 1821              		.align	2
 1822              		.set	.LANCHOR1,. + 0
 1825              	timeout:
 1826 0000 00000000 		.space	4
 1827              		.section	.bss.speed,"aw",%nobits
 1828              		.align	1
ARM GAS  /tmp/ccn3VhA9.s 			page 45


 1831              	speed:
 1832 0000 0000     		.space	2
 1833              		.section	.bss.VarDataTab,"aw",%nobits
 1834              		.align	2
 1837              	VarDataTab:
 1838 0000 00000000 		.space	6
 1838      0000
 1839              		.section	.bss.data_ready,"aw",%nobits
 1842              	data_ready:
 1843 0000 00       		.space	1
 1844              		.text
 1845              	.Letext0:
 1846              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1847              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1848              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1849              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1850              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1851              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1852              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1853              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1854              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1855              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 1856              		.file 12 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1857              		.file 13 "./Inc/motor_L.h"
 1858              		.file 14 "./Inc/motor_R.h"
 1859              		.file 15 "./Inc/pcf8574.h"
 1860              		.file 16 "./Inc/hd44780.h"
 1861              		.file 17 "./Drivers/CMSIS/Include/core_cm3.h"
 1862              		.file 18 "./Inc/delay.h"
 1863              		.file 19 "./Inc/eeprom.h"
 1864              		.file 20 "./Inc/ADC_R.h"
 1865              		.file 21 "./Inc/ADC_L.h"
 1866              		.file 22 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1867              		.file 23 "./Inc/varie.h"
 1868              		.file 24 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/stdio.h"
 1869              		.file 25 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1870              		.file 26 "./Inc/application.h"
 1871              		.file 27 "<built-in>"
ARM GAS  /tmp/ccn3VhA9.s 			page 46


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccn3VhA9.s:20     .text.PPM_ISR_Callback:00000000 $t
     /tmp/ccn3VhA9.s:25     .text.PPM_ISR_Callback:00000000 PPM_ISR_Callback
     /tmp/ccn3VhA9.s:102    .text.PPM_ISR_Callback:0000005c $d
     /tmp/ccn3VhA9.s:109    .text.saveConfig:00000000 $t
     /tmp/ccn3VhA9.s:114    .text.saveConfig:00000000 saveConfig
     /tmp/ccn3VhA9.s:136    .text.saveConfig:00000010 $d
     /tmp/ccn3VhA9.s:142    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccn3VhA9.s:147    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccn3VhA9.s:183    .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/ccn3VhA9.s:189    .text.Error_Handler:00000000 $t
     /tmp/ccn3VhA9.s:194    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccn3VhA9.s:218    .text.MX_IWDG_Init:00000000 $t
     /tmp/ccn3VhA9.s:222    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/ccn3VhA9.s:277    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/ccn3VhA9.s:284    .text.SystemClock_Config:00000000 $t
     /tmp/ccn3VhA9.s:289    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccn3VhA9.s:393    .text.SystemClock_Config:00000088 $d
     /tmp/ccn3VhA9.s:409    .text.main:00000000 $t
     /tmp/ccn3VhA9.s:414    .text.main:00000000 main
     /tmp/ccn3VhA9.s:802    .text.main:00000298 $d
                            *COM*:0000008c lcd
     /tmp/ccn3VhA9.s:821    .text.main:000002e0 $t
     /tmp/ccn3VhA9.s:1272   .text.main:00000620 $d
                            *COM*:00000004 counterTemp
     /tmp/ccn3VhA9.s:1286   .text.main:00000650 $t
     /tmp/ccn3VhA9.s:1708   .text.main:00000930 $d
     /tmp/ccn3VhA9.s:1825   .bss.timeout:00000000 timeout
     /tmp/ccn3VhA9.s:1775   .bss.rx_count:00000000 rx_count
     /tmp/ccn3VhA9.s:1842   .bss.data_ready:00000000 data_ready
     /tmp/ccn3VhA9.s:1743   .bss.pointer:00000000 pointer
     /tmp/ccn3VhA9.s:1749   .bss.rc_data:00000000 rc_data
     /tmp/ccn3VhA9.s:1763   .bss.captured_value:00000000 captured_value
                            *COM*:0000003c htim2
     /tmp/ccn3VhA9.s:1756   .bss.saveValue:00000000 saveValue
                            *COM*:00000004 counterTempTT
     /tmp/ccn3VhA9.s:1831   .bss.speed:00000000 speed
     /tmp/ccn3VhA9.s:1769   .bss.VarValue:00000000 VarValue
     /tmp/ccn3VhA9.s:1837   .bss.VarDataTab:00000000 VarDataTab
     /tmp/ccn3VhA9.s:1782   .data.VirtAddVarTab:00000000 VirtAddVarTab
     /tmp/ccn3VhA9.s:1744   .bss.pointer:00000000 $d
     /tmp/ccn3VhA9.s:1746   .bss.rc_data:00000000 $d
     /tmp/ccn3VhA9.s:1752   .bss.saveValue:00000000 $d
     /tmp/ccn3VhA9.s:1759   .bss.captured_value:00000000 $d
     /tmp/ccn3VhA9.s:1766   .bss.VarValue:00000000 $d
     /tmp/ccn3VhA9.s:1776   .bss.rx_count:00000000 $d
     /tmp/ccn3VhA9.s:1778   .data.VirtAddVarTab:00000000 $d
     /tmp/ccn3VhA9.s:1786   .rodata.str1.4:00000000 $d
     /tmp/ccn3VhA9.s:1821   .bss.timeout:00000000 $d
     /tmp/ccn3VhA9.s:1828   .bss.speed:00000000 $d
     /tmp/ccn3VhA9.s:1834   .bss.VarDataTab:00000000 $d
     /tmp/ccn3VhA9.s:1843   .bss.data_ready:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccn3VhA9.s 			page 47


_stop_timer
_init_us
EE_WriteVariable
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_dmul
__aeabi_dsub
__aeabi_ddiv
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_d2iz
__aeabi_dadd
__aeabi_d2f
__aeabi_fcmplt
__aeabi_f2d
HAL_Init
Button_init
Power_Set
HAL_Delay
ADC_L_init
ADC_R_init
MX_I2C2_Init
LCD_Init
LCD_ClearDisplay
LCD_SetLocation
LCD_WriteString
Buzzer_init
Led_init
IS_Charge_init
Led_Set
IS_Button
MotorL_init
MotorR_init
applcation_init
Battery_TASK
Buzzer_TwoBeep
MotorR_start
MotorL_start
Timer_init
memset
sprintf
hi2c2
MotorR_pwm
MotorL_pwm
Console_Log
ARM GAS  /tmp/ccn3VhA9.s 			page 48


HAL_GetTick
HAL_IWDG_Refresh
Buzzer_OneLongBeep
motorL
motorR
LCD_WriteFloat
GET_BatteryAverage
getMotorCurrentR
getMotorCurrentL
