ARM GAS  /tmp/cc3hI5o4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PPM_ISR_Callback,"ax",%progbits
  20              		.align	2
  21              		.global	PPM_ISR_Callback
  22              		.thumb
  23              		.thumb_func
  25              	PPM_ISR_Callback:
  26              	.LFB64:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/cc3hI5o4.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "motor_L.h"
  46:./Src/main.c  **** #include "motor_R.h"
  47:./Src/main.c  **** #include "varie.h"
  48:./Src/main.c  **** #include "ADC_L.h"
  49:./Src/main.c  **** #include "ADC_R.h"
  50:./Src/main.c  **** #include "delay.h"
  51:./Src/main.c  **** #include "pid.h"
  52:./Src/main.c  **** #include "application.h"
  53:./Src/main.c  **** #include "telemetry.h"
  54:./Src/main.c  **** #include <math.h>
  55:./Src/main.c  **** 
  56:./Src/main.c  **** // copied from STMBL
  57:./Src/main.c  **** #define NO 0
  58:./Src/main.c  **** #define YES 1
  59:./Src/main.c  **** #define ABS(a) (((a) < 0.0) ? -(a) : (a))
  60:./Src/main.c  **** #define LIMIT(x, lowhigh) (((x) > (lowhigh)) ? (lowhigh) : (((x) < (-lowhigh)) ? (-lowhigh) : (x)))
  61:./Src/main.c  **** #define SAT(x, lowhigh) (((x) > (lowhigh)) ? (1.0) : (((x) < (-lowhigh)) ? (-1.0) : (0.0)))
  62:./Src/main.c  **** #define SAT2(x, low, high) (((x) > (high)) ? (1.0) : (((x) < (low)) ? (-1.0) : (0.0)))
  63:./Src/main.c  **** #define STEP(from, to, step) (((from) < (to)) ? (MIN((from) + (step), (to))) : (MAX((from) - (step)
  64:./Src/main.c  **** #define DEG(a) ((a)*M_PI / 180.0)
  65:./Src/main.c  **** #define RAD(a) ((a)*180.0 / M_PI)
  66:./Src/main.c  **** #define SIGN(a) (((a) < 0.0) ? (-1.0) : (((a) > 0.0) ? (1.0) : (0.0)))
  67:./Src/main.c  **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  68:./Src/main.c  **** #define SCALE(value, high, max) MIN(MAX(((max) - (value)) / ((max) - (high)), 0.0), 1.0)
  69:./Src/main.c  **** #define MIN(a, b) (((a) < (b)) ? (a) : (b))
  70:./Src/main.c  **** #define MAX(a, b) (((a) > (b)) ? (a) : (b))
  71:./Src/main.c  **** #define MIN3(a, b, c) MIN(a, MIN(b, c))
  72:./Src/main.c  **** #define MAX3(a, b, c) MAX(a, MAX(b, c))
  73:./Src/main.c  **** 
  74:./Src/main.c  **** #define PI 3.14159265
  75:./Src/main.c  **** 
  76:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  77:./Src/main.c  **** 
  78:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  79:./Src/main.c  **** void SystemClock_Config(void);
  80:./Src/main.c  **** void Error_Handler(void);
  81:./Src/main.c  **** //extern struct PID_dati pid_R_;
  82:./Src/main.c  **** static void MX_IWDG_Init(void);
  83:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  84:./Src/main.c  **** 
  85:./Src/main.c  **** volatile __IO int16_t speed = 0;
  86:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  87:./Src/main.c  **** extern struct MOTOR_Ldati motorL;
  88:./Src/main.c  **** extern struct MOTOR_Rdati motorR;
ARM GAS  /tmp/cc3hI5o4.s 			page 3


  89:./Src/main.c  **** //extern struct COMMAND_data commandsequence;
  90:./Src/main.c  **** 
  91:./Src/main.c  **** //TEMP
  92:./Src/main.c  **** /*
  93:./Src/main.c  **** extern volatile __IO struct MOTOR_Rdati motorR;
  94:./Src/main.c  **** volatile __IO uint8_t temp8,temp8case,temp_MOTOR_R_START;
  95:./Src/main.c  **** volatile __IO int32_t temp_SET_SPPED;
  96:./Src/main.c  **** volatile __IO uint8_t bufferTX[100],ai2cBuffer[10];
  97:./Src/main.c  **** int32_t speed;
  98:./Src/main.c  **** */
  99:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
 100:./Src/main.c  **** 
 101:./Src/main.c  **** TIM_HandleTypeDef htim2;
 102:./Src/main.c  **** 
 103:./Src/main.c  **** uint16_t captured_value[8] = {0};
 104:./Src/main.c  **** uint16_t rc_data[5] = {0};
 105:./Src/main.c  **** uint8_t pointer = 0;
 106:./Src/main.c  **** uint8_t data_ready = 0;
 107:./Src/main.c  **** /* USER CODE END PV */
 108:./Src/main.c  **** uint8_t rx_count = 0;
 109:./Src/main.c  **** 
 110:./Src/main.c  **** void PPM_ISR_Callback() {
  28              		.loc 1 110 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
 111:./Src/main.c  ****   // Dummy loop with 16 bit count wrap around
 112:./Src/main.c  ****   uint16_t rc_delay = TIM2->CNT;
  37              		.loc 1 112 0
  38 0002 4FF08043 		mov	r3, #1073741824
  39 0006 5C6A     		ldr	r4, [r3, #36]
  40 0008 A4B2     		uxth	r4, r4
  41              	.LVL0:
 113:./Src/main.c  ****   _stop_timer();
  42              		.loc 1 113 0
  43 000a FFF7FEFF 		bl	_stop_timer
  44              	.LVL1:
 114:./Src/main.c  **** 
 115:./Src/main.c  ****   if (rc_delay > 4000) {
  45              		.loc 1 115 0
  46 000e B4F57A6F 		cmp	r4, #4000
  47 0012 03D9     		bls	.L2
 116:./Src/main.c  ****     rx_count = 0;
  48              		.loc 1 116 0
  49 0014 0022     		movs	r2, #0
  50 0016 0E4B     		ldr	r3, .L8
  51 0018 1A70     		strb	r2, [r3]
  52 001a 15E0     		b	.L3
  53              	.L2:
 117:./Src/main.c  ****   }
 118:./Src/main.c  ****   else {
 119:./Src/main.c  ****     captured_value[rx_count] = CLAMP(rc_delay, 1000, 2000) - 1000;
ARM GAS  /tmp/cc3hI5o4.s 			page 4


  54              		.loc 1 119 0
  55 001c 0C4B     		ldr	r3, .L8
  56 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  57 0020 B4F5FA6F 		cmp	r4, #2000
  58 0024 06D8     		bhi	.L5
  59              		.loc 1 119 0 is_stmt 0 discriminator 1
  60 0026 B4F57A7F 		cmp	r4, #1000
  61 002a 06D3     		bcc	.L6
  62              		.loc 1 119 0 discriminator 3
  63 002c A4F57A74 		sub	r4, r4, #1000
  64              	.LVL2:
  65 0030 A4B2     		uxth	r4, r4
  66              	.LVL3:
  67 0032 03E0     		b	.L4
  68              	.LVL4:
  69              	.L5:
  70              		.loc 1 119 0
  71 0034 4FF47A74 		mov	r4, #1000
  72              	.LVL5:
  73 0038 00E0     		b	.L4
  74              	.LVL6:
  75              	.L6:
  76 003a 0024     		movs	r4, #0
  77              	.LVL7:
  78              	.L4:
  79              		.loc 1 119 0 discriminator 8
  80 003c 054A     		ldr	r2, .L8+4
  81 003e 22F81340 		strh	r4, [r2, r3, lsl #1]	@ movhi
 120:./Src/main.c  ****     rx_count++;
  82              		.loc 1 120 0 is_stmt 1 discriminator 8
  83 0042 0133     		adds	r3, r3, #1
  84 0044 024A     		ldr	r2, .L8
  85 0046 1370     		strb	r3, [r2]
  86              	.L3:
 121:./Src/main.c  ****   }
 122:./Src/main.c  ****   _init_us();
  87              		.loc 1 122 0
  88 0048 FFF7FEFF 		bl	_init_us
  89              	.LVL8:
  90 004c 10BD     		pop	{r4, pc}
  91              	.L9:
  92 004e 00BF     		.align	2
  93              	.L8:
  94 0050 00000000 		.word	.LANCHOR0
  95 0054 00000000 		.word	.LANCHOR1
  96              		.cfi_endproc
  97              	.LFE64:
  99              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 100              		.align	2
 101              		.global	HAL_ADC_ConvCpltCallback
 102              		.thumb
 103              		.thumb_func
 105              	HAL_ADC_ConvCpltCallback:
 106              	.LFB68:
 123:./Src/main.c  **** }
 124:./Src/main.c  **** 
 125:./Src/main.c  **** int main(void)
ARM GAS  /tmp/cc3hI5o4.s 			page 5


 126:./Src/main.c  **** {
 127:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 128:./Src/main.c  ****   HAL_Init();
 129:./Src/main.c  **** 
 130:./Src/main.c  ****   /* Configure the system clock */
 131:./Src/main.c  ****   SystemClock_Config();
 132:./Src/main.c  **** 
 133:./Src/main.c  ****   MX_IWDG_Init();
 134:./Src/main.c  **** 
 135:./Src/main.c  ****   _init_us();
 136:./Src/main.c  **** 
 137:./Src/main.c  ****   //MX_I2C2_Init();
 138:./Src/main.c  ****   Telemetry_init();
 139:./Src/main.c  **** 
 140:./Src/main.c  ****  /*
 141:./Src/main.c  ****   while(1){
 142:./Src/main.c  **** 
 143:./Src/main.c  ****       Telemetry_TASK();
 144:./Src/main.c  ****       if(telemetry.dataREADY_JOYSTICK){
 145:./Src/main.c  ****           telemetry.dataREADY_JOYSTICK = 0;
 146:./Src/main.c  ****       }
 147:./Src/main.c  **** 
 148:./Src/main.c  ****   }
 149:./Src/main.c  ****   */
 150:./Src/main.c  **** 
 151:./Src/main.c  ****   Buzzer_init();
 152:./Src/main.c  ****   Led_init();
 153:./Src/main.c  ****   IS_Charge_init();
 154:./Src/main.c  **** 
 155:./Src/main.c  ****   ADC_L_init();
 156:./Src/main.c  ****   ADC_R_init();
 157:./Src/main.c  ****   MotorL_init();
 158:./Src/main.c  ****   MotorR_init();
 159:./Src/main.c  **** 
 160:./Src/main.c  **** //  Timer_init();
 161:./Src/main.c  ****   //Timer_init();
 162:./Src/main.c  ****   //MX_TIM2_Init();
 163:./Src/main.c  **** 
 164:./Src/main.c  **** 
 165:./Src/main.c  ****   //PID_init(0,900); //pwm limit
 166:./Src/main.c  ****   //PID_set_L_costant(0.05,0.01,0.0);
 167:./Src/main.c  ****   //PID_set_R_costant(2.0,0.5,0.0);
 168:./Src/main.c  **** 
 169:./Src/main.c  **** //DebugPin_init();
 170:./Src/main.c  **** 
 171:./Src/main.c  ****   Led_Set(1);
 172:./Src/main.c  ****   Buzzer_OneBeep();
 173:./Src/main.c  ****   HAL_Delay(350);
 174:./Src/main.c  ****   Led_Set(0);
 175:./Src/main.c  **** 
 176:./Src/main.c  ****   applcation_init();
 177:./Src/main.c  ****   MotorR_start();
 178:./Src/main.c  ****   MotorL_start();
 179:./Src/main.c  **** 
 180:./Src/main.c  ****   //Timer_init();
 181:./Src/main.c  **** 
 182:./Src/main.c  ****   //MotorR_pwm(200);
ARM GAS  /tmp/cc3hI5o4.s 			page 6


 183:./Src/main.c  ****   //MotorL_pwm(-150);
 184:./Src/main.c  **** 
 185:./Src/main.c  ****   MotorR_pwm(-250);
 186:./Src/main.c  ****   MotorL_pwm(250);
 187:./Src/main.c  **** 
 188:./Src/main.c  ****   uint32_t sinValue = 45 * 50;
 189:./Src/main.c  ****   uint8_t state = 0;
 190:./Src/main.c  ****   while(1){
 191:./Src/main.c  ****     sinValue++;
 192:./Src/main.c  ****     //int speedL = -CLAMP(getMotorR(), -200, 200);
 193:./Src/main.c  ****     //int speedR = -CLAMP(getMotorL(), -200, 200);
 194:./Src/main.c  ****     //MotorL_pwm(speedL*10);
 195:./Src/main.c  ****     //MotorR_pwm(speedR*10);
 196:./Src/main.c  ****     //counterTemp = HAL_GetTick();
 197:./Src/main.c  ****     if ((sinValue) % (1000) == 0) {
 198:./Src/main.c  ****       //state = !state;
 199:./Src/main.c  ****       //Led_Set(state);
 200:./Src/main.c  ****       //Console_Log("otter!\n\r");
 201:./Src/main.c  ****       //Buzzer_OneBeep();
 202:./Src/main.c  ****       //char str[200];
 203:./Src/main.c  ****       //memset(&str[0], 0, sizeof(str));
 204:./Src/main.c  ****       //sprintf(str, "%i;%i;%i;%i;%i;%i\n\r", captured_value[0], captured_value[1], captured_value[
 205:./Src/main.c  ****       //HAL_IWDG_Refresh(&hiwdg);
 206:./Src/main.c  ****       //MotorR_pwm(CLAMP((((captured_value[1]-500)-(captured_value[0]-500))*(captured_value[2]/500.
 207:./Src/main.c  ****       //HAL_IWDG_Refresh(&hiwdg);
 208:./Src/main.c  ****       //MotorL_pwm(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500.
 209:./Src/main.c  ****       //MotorR_pwm(-250);
 210:./Src/main.c  ****       //MotorL_pwm(250);
 211:./Src/main.c  ****       //Console_Log(str);
 212:./Src/main.c  ****     }
 213:./Src/main.c  **** 
 214:./Src/main.c  **** 
 215:./Src/main.c  **** 
 216:./Src/main.c  ****     //Battery_TASK();
 217:./Src/main.c  ****     //Current_Motor_TASK();
 218:./Src/main.c  ****     //sWiiNunchuck_TASK();
 219:./Src/main.c  ****     //applcation_TASK();
 220:./Src/main.c  ****     //Telemetry_TASK();
 221:./Src/main.c  **** 
 222:./Src/main.c  ****     //Batteria Scarica?
 223:./Src/main.c  ****     /*if(GET_BatteryAverage() < 31.0){
 224:./Src/main.c  ****       TASK_BATTERY_LOW_VOLTAGE();
 225:./Src/main.c  ****     }*/
 226:./Src/main.c  ****     //In Carica?
 227:./Src/main.c  ****     /*if(IS_Charge()==0){
 228:./Src/main.c  ****       WAIT_CHARGE_FINISH();
 229:./Src/main.c  ****     }*/
 230:./Src/main.c  **** 
 231:./Src/main.c  ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 232:./Src/main.c  **** 
 233:./Src/main.c  ****     //counterTempTT = HAL_GetTick() - counterTemp;
 234:./Src/main.c  **** 
 235:./Src/main.c  **** 
 236:./Src/main.c  **** 
 237:./Src/main.c  ****   }
 238:./Src/main.c  **** 
 239:./Src/main.c  **** }
ARM GAS  /tmp/cc3hI5o4.s 			page 7


 240:./Src/main.c  **** 
 241:./Src/main.c  **** /** System Clock Configuration
 242:./Src/main.c  **** */
 243:./Src/main.c  **** void SystemClock_Config(void)
 244:./Src/main.c  **** {
 245:./Src/main.c  **** 
 246:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 247:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 248:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 249:./Src/main.c  **** 
 250:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 251:./Src/main.c  ****     */
 252:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 253:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 254:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 255:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 256:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 257:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 258:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 259:./Src/main.c  ****   {
 260:./Src/main.c  ****     Error_Handler();
 261:./Src/main.c  ****   }
 262:./Src/main.c  **** 
 263:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 264:./Src/main.c  ****     */
 265:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 266:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 267:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 268:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 269:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 270:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 271:./Src/main.c  **** 
 272:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 273:./Src/main.c  ****   {
 274:./Src/main.c  ****     Error_Handler();
 275:./Src/main.c  ****   }
 276:./Src/main.c  **** 
 277:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 278:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 279:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 280:./Src/main.c  ****   {
 281:./Src/main.c  ****     Error_Handler();
 282:./Src/main.c  ****   }
 283:./Src/main.c  **** 
 284:./Src/main.c  ****     /**Configure the Systick interrupt time
 285:./Src/main.c  ****     */
 286:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 287:./Src/main.c  **** 
 288:./Src/main.c  ****     /**Configure the Systick
 289:./Src/main.c  ****     */
 290:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 291:./Src/main.c  **** 
 292:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 293:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 294:./Src/main.c  **** }
 295:./Src/main.c  **** 
 296:./Src/main.c  **** /* IWDG init function */
ARM GAS  /tmp/cc3hI5o4.s 			page 8


 297:./Src/main.c  **** static void MX_IWDG_Init(void)
 298:./Src/main.c  **** {
 299:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 300:./Src/main.c  ****   hiwdg.Instance = IWDG;
 301:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 302:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 303:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 304:./Src/main.c  ****   {
 305:./Src/main.c  ****     Error_Handler();
 306:./Src/main.c  ****   }
 307:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 308:./Src/main.c  **** }
 309:./Src/main.c  **** 
 310:./Src/main.c  **** 
 311:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 107              		.loc 1 311 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              	.LVL9:
 112 0000 10B5     		push	{r4, lr}
 113              	.LCFI1:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 4, -8
 116              		.cfi_offset 14, -4
 117 0002 0446     		mov	r4, r0
 312:./Src/main.c  ****   if(hadc->Instance == ADC1){
 118              		.loc 1 312 0
 119 0004 0268     		ldr	r2, [r0]
 120 0006 064B     		ldr	r3, .L14
 121 0008 9A42     		cmp	r2, r3
 122 000a 01D1     		bne	.L11
 313:./Src/main.c  ****     ADC_R_callback();
 123              		.loc 1 313 0
 124 000c FFF7FEFF 		bl	ADC_R_callback
 125              	.LVL10:
 126              	.L11:
 314:./Src/main.c  ****   }
 315:./Src/main.c  ****   if(hadc->Instance == ADC3){
 127              		.loc 1 315 0
 128 0010 2268     		ldr	r2, [r4]
 129 0012 044B     		ldr	r3, .L14+4
 130 0014 9A42     		cmp	r2, r3
 131 0016 01D1     		bne	.L10
 316:./Src/main.c  ****     ADC_L_callback();
 132              		.loc 1 316 0
 133 0018 FFF7FEFF 		bl	ADC_L_callback
 134              	.LVL11:
 135              	.L10:
 136 001c 10BD     		pop	{r4, pc}
 137              	.LVL12:
 138              	.L15:
 139 001e 00BF     		.align	2
 140              	.L14:
 141 0020 00240140 		.word	1073816576
 142 0024 003C0140 		.word	1073822720
 143              		.cfi_endproc
ARM GAS  /tmp/cc3hI5o4.s 			page 9


 144              	.LFE68:
 146              		.section	.text.Error_Handler,"ax",%progbits
 147              		.align	2
 148              		.global	Error_Handler
 149              		.thumb
 150              		.thumb_func
 152              	Error_Handler:
 153              	.LFB69:
 317:./Src/main.c  ****   }
 318:./Src/main.c  **** }
 319:./Src/main.c  **** 
 320:./Src/main.c  **** 
 321:./Src/main.c  **** /**
 322:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 323:./Src/main.c  ****   * @param  None
 324:./Src/main.c  ****   * @retval None
 325:./Src/main.c  ****   */
 326:./Src/main.c  **** void Error_Handler(void)
 327:./Src/main.c  **** {
 154              		.loc 1 327 0
 155              		.cfi_startproc
 156              		@ Volatile: function does not return.
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159 0000 08B5     		push	{r3, lr}
 160              	.LCFI2:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 3, -8
 163              		.cfi_offset 14, -4
 328:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 329:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 330:./Src/main.c  ****   MotorR_stop();
 164              		.loc 1 330 0
 165 0002 FFF7FEFF 		bl	MotorR_stop
 166              	.LVL13:
 331:./Src/main.c  ****   MotorL_stop();
 167              		.loc 1 331 0
 168 0006 FFF7FEFF 		bl	MotorL_stop
 169              	.LVL14:
 170              	.L17:
 171 000a FEE7     		b	.L17
 172              		.cfi_endproc
 173              	.LFE69:
 175              		.section	.text.MX_IWDG_Init,"ax",%progbits
 176              		.align	2
 177              		.thumb
 178              		.thumb_func
 180              	MX_IWDG_Init:
 181              	.LFB67:
 298:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 182              		.loc 1 298 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 8
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186 0000 00B5     		push	{lr}
 187              	.LCFI3:
 188              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc3hI5o4.s 			page 10


 189              		.cfi_offset 14, -4
 190 0002 83B0     		sub	sp, sp, #12
 191              	.LCFI4:
 192              		.cfi_def_cfa_offset 16
 193              	.LBB2:
 299:./Src/main.c  ****   hiwdg.Instance = IWDG;
 194              		.loc 1 299 0
 195 0004 0E4B     		ldr	r3, .L22
 196 0006 DA69     		ldr	r2, [r3, #28]
 197 0008 42F40062 		orr	r2, r2, #2048
 198 000c DA61     		str	r2, [r3, #28]
 199 000e DB69     		ldr	r3, [r3, #28]
 200 0010 03F40063 		and	r3, r3, #2048
 201 0014 0193     		str	r3, [sp, #4]
 202 0016 019B     		ldr	r3, [sp, #4]
 203              	.LBE2:
 300:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 204              		.loc 1 300 0
 205 0018 0A48     		ldr	r0, .L22+4
 206 001a 0B4B     		ldr	r3, .L22+8
 207 001c 0360     		str	r3, [r0]
 301:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 208              		.loc 1 301 0
 209 001e 0123     		movs	r3, #1
 210 0020 4360     		str	r3, [r0, #4]
 302:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 211              		.loc 1 302 0
 212 0022 40F6FF73 		movw	r3, #4095
 213 0026 8360     		str	r3, [r0, #8]
 303:./Src/main.c  ****   {
 214              		.loc 1 303 0
 215 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 216              	.LVL15:
 217 002c 08B1     		cbz	r0, .L20
 305:./Src/main.c  ****   }
 218              		.loc 1 305 0
 219 002e FFF7FEFF 		bl	Error_Handler
 220              	.LVL16:
 221              	.L20:
 307:./Src/main.c  **** }
 222              		.loc 1 307 0
 223 0032 0448     		ldr	r0, .L22+4
 224 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 225              	.LVL17:
 308:./Src/main.c  **** 
 226              		.loc 1 308 0
 227 0038 03B0     		add	sp, sp, #12
 228              	.LCFI5:
 229              		.cfi_def_cfa_offset 4
 230              		@ sp needed
 231 003a 5DF804FB 		ldr	pc, [sp], #4
 232              	.L23:
 233 003e 00BF     		.align	2
 234              	.L22:
 235 0040 00100240 		.word	1073876992
 236 0044 00000000 		.word	hiwdg
 237 0048 00300040 		.word	1073754112
ARM GAS  /tmp/cc3hI5o4.s 			page 11


 238              		.cfi_endproc
 239              	.LFE67:
 241              		.section	.text.SystemClock_Config,"ax",%progbits
 242              		.align	2
 243              		.global	SystemClock_Config
 244              		.thumb
 245              		.thumb_func
 247              	SystemClock_Config:
 248              	.LFB66:
 244:./Src/main.c  **** 
 249              		.loc 1 244 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 88
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253 0000 00B5     		push	{lr}
 254              	.LCFI6:
 255              		.cfi_def_cfa_offset 4
 256              		.cfi_offset 14, -4
 257 0002 97B0     		sub	sp, sp, #92
 258              	.LCFI7:
 259              		.cfi_def_cfa_offset 96
 252:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 260              		.loc 1 252 0
 261 0004 0223     		movs	r3, #2
 262 0006 0C93     		str	r3, [sp, #48]
 253:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 263              		.loc 1 253 0
 264 0008 0122     		movs	r2, #1
 265 000a 1092     		str	r2, [sp, #64]
 254:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 266              		.loc 1 254 0
 267 000c 1022     		movs	r2, #16
 268 000e 1192     		str	r2, [sp, #68]
 255:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 269              		.loc 1 255 0
 270 0010 1393     		str	r3, [sp, #76]
 256:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 271              		.loc 1 256 0
 272 0012 0023     		movs	r3, #0
 273 0014 1493     		str	r3, [sp, #80]
 257:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 274              		.loc 1 257 0
 275 0016 4FF46013 		mov	r3, #3670016
 276 001a 1593     		str	r3, [sp, #84]
 258:./Src/main.c  ****   {
 277              		.loc 1 258 0
 278 001c 0CA8     		add	r0, sp, #48
 279 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 280              	.LVL18:
 281 0022 08B1     		cbz	r0, .L25
 260:./Src/main.c  ****   }
 282              		.loc 1 260 0
 283 0024 FFF7FEFF 		bl	Error_Handler
 284              	.LVL19:
 285              	.L25:
 265:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 286              		.loc 1 265 0
ARM GAS  /tmp/cc3hI5o4.s 			page 12


 287 0028 0F23     		movs	r3, #15
 288 002a 0793     		str	r3, [sp, #28]
 267:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 289              		.loc 1 267 0
 290 002c 0221     		movs	r1, #2
 291 002e 0891     		str	r1, [sp, #32]
 268:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 292              		.loc 1 268 0
 293 0030 0023     		movs	r3, #0
 294 0032 0993     		str	r3, [sp, #36]
 269:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 295              		.loc 1 269 0
 296 0034 4FF48062 		mov	r2, #1024
 297 0038 0A92     		str	r2, [sp, #40]
 270:./Src/main.c  **** 
 298              		.loc 1 270 0
 299 003a 0B93     		str	r3, [sp, #44]
 272:./Src/main.c  ****   {
 300              		.loc 1 272 0
 301 003c 07A8     		add	r0, sp, #28
 302 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 303              	.LVL20:
 304 0042 08B1     		cbz	r0, .L26
 274:./Src/main.c  ****   }
 305              		.loc 1 274 0
 306 0044 FFF7FEFF 		bl	Error_Handler
 307              	.LVL21:
 308              	.L26:
 277:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 309              		.loc 1 277 0
 310 0048 0223     		movs	r3, #2
 311 004a 0193     		str	r3, [sp, #4]
 278:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 312              		.loc 1 278 0
 313 004c 4FF44043 		mov	r3, #49152
 314 0050 0393     		str	r3, [sp, #12]
 279:./Src/main.c  ****   {
 315              		.loc 1 279 0
 316 0052 01A8     		add	r0, sp, #4
 317 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 318              	.LVL22:
 319 0058 08B1     		cbz	r0, .L27
 281:./Src/main.c  ****   }
 320              		.loc 1 281 0
 321 005a FFF7FEFF 		bl	Error_Handler
 322              	.LVL23:
 323              	.L27:
 286:./Src/main.c  **** 
 324              		.loc 1 286 0
 325 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 326              	.LVL24:
 327 0062 094B     		ldr	r3, .L29
 328 0064 A3FB0030 		umull	r3, r0, r3, r0
 329 0068 8009     		lsrs	r0, r0, #6
 330 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
 331              	.LVL25:
 290:./Src/main.c  **** 
ARM GAS  /tmp/cc3hI5o4.s 			page 13


 332              		.loc 1 290 0
 333 006e 0420     		movs	r0, #4
 334 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 335              	.LVL26:
 293:./Src/main.c  **** }
 336              		.loc 1 293 0
 337 0074 0022     		movs	r2, #0
 338 0076 1146     		mov	r1, r2
 339 0078 4FF0FF30 		mov	r0, #-1
 340 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 341              	.LVL27:
 294:./Src/main.c  **** 
 342              		.loc 1 294 0
 343 0080 17B0     		add	sp, sp, #92
 344              	.LCFI8:
 345              		.cfi_def_cfa_offset 4
 346              		@ sp needed
 347 0082 5DF804FB 		ldr	pc, [sp], #4
 348              	.L30:
 349 0086 00BF     		.align	2
 350              	.L29:
 351 0088 D34D6210 		.word	274877907
 352              		.cfi_endproc
 353              	.LFE66:
 355              		.section	.text.main,"ax",%progbits
 356              		.align	2
 357              		.global	main
 358              		.thumb
 359              		.thumb_func
 361              	main:
 362              	.LFB65:
 126:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 363              		.loc 1 126 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367 0000 08B5     		push	{r3, lr}
 368              	.LCFI9:
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 3, -8
 371              		.cfi_offset 14, -4
 128:./Src/main.c  **** 
 372              		.loc 1 128 0
 373 0002 FFF7FEFF 		bl	HAL_Init
 374              	.LVL28:
 131:./Src/main.c  **** 
 375              		.loc 1 131 0
 376 0006 FFF7FEFF 		bl	SystemClock_Config
 377              	.LVL29:
 133:./Src/main.c  **** 
 378              		.loc 1 133 0
 379 000a FFF7FEFF 		bl	MX_IWDG_Init
 380              	.LVL30:
 135:./Src/main.c  **** 
 381              		.loc 1 135 0
 382 000e FFF7FEFF 		bl	_init_us
 383              	.LVL31:
ARM GAS  /tmp/cc3hI5o4.s 			page 14


 138:./Src/main.c  **** 
 384              		.loc 1 138 0
 385 0012 FFF7FEFF 		bl	Telemetry_init
 386              	.LVL32:
 151:./Src/main.c  ****   Led_init();
 387              		.loc 1 151 0
 388 0016 FFF7FEFF 		bl	Buzzer_init
 389              	.LVL33:
 152:./Src/main.c  ****   IS_Charge_init();
 390              		.loc 1 152 0
 391 001a FFF7FEFF 		bl	Led_init
 392              	.LVL34:
 153:./Src/main.c  **** 
 393              		.loc 1 153 0
 394 001e FFF7FEFF 		bl	IS_Charge_init
 395              	.LVL35:
 155:./Src/main.c  ****   ADC_R_init();
 396              		.loc 1 155 0
 397 0022 FFF7FEFF 		bl	ADC_L_init
 398              	.LVL36:
 156:./Src/main.c  ****   MotorL_init();
 399              		.loc 1 156 0
 400 0026 FFF7FEFF 		bl	ADC_R_init
 401              	.LVL37:
 157:./Src/main.c  ****   MotorR_init();
 402              		.loc 1 157 0
 403 002a FFF7FEFF 		bl	MotorL_init
 404              	.LVL38:
 158:./Src/main.c  **** 
 405              		.loc 1 158 0
 406 002e FFF7FEFF 		bl	MotorR_init
 407              	.LVL39:
 171:./Src/main.c  ****   Buzzer_OneBeep();
 408              		.loc 1 171 0
 409 0032 0120     		movs	r0, #1
 410 0034 FFF7FEFF 		bl	Led_Set
 411              	.LVL40:
 172:./Src/main.c  ****   HAL_Delay(350);
 412              		.loc 1 172 0
 413 0038 FFF7FEFF 		bl	Buzzer_OneBeep
 414              	.LVL41:
 173:./Src/main.c  ****   Led_Set(0);
 415              		.loc 1 173 0
 416 003c 4FF4AF70 		mov	r0, #350
 417 0040 FFF7FEFF 		bl	HAL_Delay
 418              	.LVL42:
 174:./Src/main.c  **** 
 419              		.loc 1 174 0
 420 0044 0020     		movs	r0, #0
 421 0046 FFF7FEFF 		bl	Led_Set
 422              	.LVL43:
 176:./Src/main.c  ****   MotorR_start();
 423              		.loc 1 176 0
 424 004a FFF7FEFF 		bl	applcation_init
 425              	.LVL44:
 177:./Src/main.c  ****   MotorL_start();
 426              		.loc 1 177 0
ARM GAS  /tmp/cc3hI5o4.s 			page 15


 427 004e FFF7FEFF 		bl	MotorR_start
 428              	.LVL45:
 178:./Src/main.c  **** 
 429              		.loc 1 178 0
 430 0052 FFF7FEFF 		bl	MotorL_start
 431              	.LVL46:
 185:./Src/main.c  ****   MotorL_pwm(250);
 432              		.loc 1 185 0
 433 0056 6FF0F900 		mvn	r0, #249
 434 005a FFF7FEFF 		bl	MotorR_pwm
 435              	.LVL47:
 186:./Src/main.c  **** 
 436              		.loc 1 186 0
 437 005e FA20     		movs	r0, #250
 438 0060 FFF7FEFF 		bl	MotorL_pwm
 439              	.LVL48:
 440              	.L32:
 231:./Src/main.c  **** 
 441              		.loc 1 231 0
 442 0064 0148     		ldr	r0, .L34
 443 0066 FFF7FEFF 		bl	HAL_IWDG_Refresh
 444              	.LVL49:
 445 006a FBE7     		b	.L32
 446              	.L35:
 447              		.align	2
 448              	.L34:
 449 006c 00000000 		.word	hiwdg
 450              		.cfi_endproc
 451              	.LFE65:
 453              		.global	rx_count
 454              		.global	data_ready
 455              		.global	pointer
 456              		.global	rc_data
 457              		.global	captured_value
 458              		.comm	htim2,60,4
 459              		.comm	counterTempTT,4,4
 460              		.comm	counterTemp,4,4
 461              		.global	speed
 462              		.comm	hiwdg,16,4
 463              		.section	.bss.pointer,"aw",%nobits
 466              	pointer:
 467 0000 00       		.space	1
 468              		.section	.bss.rc_data,"aw",%nobits
 469              		.align	2
 472              	rc_data:
 473 0000 00000000 		.space	10
 473      00000000 
 473      0000
 474              		.section	.bss.captured_value,"aw",%nobits
 475              		.align	2
 476              		.set	.LANCHOR1,. + 0
 479              	captured_value:
 480 0000 00000000 		.space	16
 480      00000000 
 480      00000000 
 480      00000000 
 481              		.section	.bss.rx_count,"aw",%nobits
ARM GAS  /tmp/cc3hI5o4.s 			page 16


 482              		.set	.LANCHOR0,. + 0
 485              	rx_count:
 486 0000 00       		.space	1
 487              		.section	.bss.speed,"aw",%nobits
 488              		.align	1
 491              	speed:
 492 0000 0000     		.space	2
 493              		.section	.bss.data_ready,"aw",%nobits
 496              	data_ready:
 497 0000 00       		.space	1
 498              		.text
 499              	.Letext0:
 500              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 501              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 502              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 503              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 504              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 505              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 506              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 507              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 508              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 509              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 510              		.file 12 "./Drivers/CMSIS/Include/core_cm3.h"
 511              		.file 13 "./Inc/delay.h"
 512              		.file 14 "./Inc/ADC_R.h"
 513              		.file 15 "./Inc/ADC_L.h"
 514              		.file 16 "./Inc/motor_R.h"
 515              		.file 17 "./Inc/motor_L.h"
 516              		.file 18 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 517              		.file 19 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 518              		.file 20 "./Inc/telemetry.h"
 519              		.file 21 "./Inc/varie.h"
 520              		.file 22 "./Inc/application.h"
ARM GAS  /tmp/cc3hI5o4.s 			page 17


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc3hI5o4.s:20     .text.PPM_ISR_Callback:00000000 $t
     /tmp/cc3hI5o4.s:25     .text.PPM_ISR_Callback:00000000 PPM_ISR_Callback
     /tmp/cc3hI5o4.s:94     .text.PPM_ISR_Callback:00000050 $d
     /tmp/cc3hI5o4.s:100    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/cc3hI5o4.s:105    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/cc3hI5o4.s:141    .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/cc3hI5o4.s:147    .text.Error_Handler:00000000 $t
     /tmp/cc3hI5o4.s:152    .text.Error_Handler:00000000 Error_Handler
     /tmp/cc3hI5o4.s:176    .text.MX_IWDG_Init:00000000 $t
     /tmp/cc3hI5o4.s:180    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/cc3hI5o4.s:235    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/cc3hI5o4.s:242    .text.SystemClock_Config:00000000 $t
     /tmp/cc3hI5o4.s:247    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc3hI5o4.s:351    .text.SystemClock_Config:00000088 $d
     /tmp/cc3hI5o4.s:356    .text.main:00000000 $t
     /tmp/cc3hI5o4.s:361    .text.main:00000000 main
     /tmp/cc3hI5o4.s:449    .text.main:0000006c $d
     /tmp/cc3hI5o4.s:485    .bss.rx_count:00000000 rx_count
     /tmp/cc3hI5o4.s:496    .bss.data_ready:00000000 data_ready
     /tmp/cc3hI5o4.s:466    .bss.pointer:00000000 pointer
     /tmp/cc3hI5o4.s:472    .bss.rc_data:00000000 rc_data
     /tmp/cc3hI5o4.s:479    .bss.captured_value:00000000 captured_value
                            *COM*:0000003c htim2
                            *COM*:00000004 counterTempTT
                            *COM*:00000004 counterTemp
     /tmp/cc3hI5o4.s:491    .bss.speed:00000000 speed
     /tmp/cc3hI5o4.s:467    .bss.pointer:00000000 $d
     /tmp/cc3hI5o4.s:469    .bss.rc_data:00000000 $d
     /tmp/cc3hI5o4.s:475    .bss.captured_value:00000000 $d
     /tmp/cc3hI5o4.s:486    .bss.rx_count:00000000 $d
     /tmp/cc3hI5o4.s:488    .bss.speed:00000000 $d
     /tmp/cc3hI5o4.s:497    .bss.data_ready:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_stop_timer
_init_us
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
Telemetry_init
Buzzer_init
Led_init
ARM GAS  /tmp/cc3hI5o4.s 			page 18


IS_Charge_init
ADC_L_init
ADC_R_init
MotorL_init
MotorR_init
Led_Set
Buzzer_OneBeep
HAL_Delay
applcation_init
MotorR_start
MotorL_start
MotorR_pwm
MotorL_pwm
HAL_IWDG_Refresh
