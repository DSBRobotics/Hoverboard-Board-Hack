ARM GAS  /tmp/ccwXPmxK.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  20              		.align	2
  21              		.global	HAL_ADC_ConvCpltCallback
  22              		.thumb
  23              		.thumb_func
  25              	HAL_ADC_ConvCpltCallback:
  26              	.LFB67:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/ccwXPmxK.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "motor_L.h"
  46:./Src/main.c  **** #include "motor_R.h"
  47:./Src/main.c  **** #include "varie.h"
  48:./Src/main.c  **** #include "ADC_L.h"
  49:./Src/main.c  **** #include "ADC_R.h"
  50:./Src/main.c  **** #include "delay.h"
  51:./Src/main.c  **** #include "pid.h"
  52:./Src/main.c  **** #include "application.h"
  53:./Src/main.c  **** #include "telemetry.h"
  54:./Src/main.c  **** #include <math.h>
  55:./Src/main.c  **** 
  56:./Src/main.c  **** // copied from STMBL
  57:./Src/main.c  **** #define NO 0
  58:./Src/main.c  **** #define YES 1
  59:./Src/main.c  **** #define ABS(a) (((a) < 0.0) ? -(a) : (a))
  60:./Src/main.c  **** #define LIMIT(x, lowhigh) (((x) > (lowhigh)) ? (lowhigh) : (((x) < (-lowhigh)) ? (-lowhigh) : (x)))
  61:./Src/main.c  **** #define SAT(x, lowhigh) (((x) > (lowhigh)) ? (1.0) : (((x) < (-lowhigh)) ? (-1.0) : (0.0)))
  62:./Src/main.c  **** #define SAT2(x, low, high) (((x) > (high)) ? (1.0) : (((x) < (low)) ? (-1.0) : (0.0)))
  63:./Src/main.c  **** #define STEP(from, to, step) (((from) < (to)) ? (MIN((from) + (step), (to))) : (MAX((from) - (step)
  64:./Src/main.c  **** #define DEG(a) ((a)*M_PI / 180.0)
  65:./Src/main.c  **** #define RAD(a) ((a)*180.0 / M_PI)
  66:./Src/main.c  **** #define SIGN(a) (((a) < 0.0) ? (-1.0) : (((a) > 0.0) ? (1.0) : (0.0)))
  67:./Src/main.c  **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  68:./Src/main.c  **** #define SCALE(value, high, max) MIN(MAX(((max) - (value)) / ((max) - (high)), 0.0), 1.0)
  69:./Src/main.c  **** #define MIN(a, b) (((a) < (b)) ? (a) : (b))
  70:./Src/main.c  **** #define MAX(a, b) (((a) > (b)) ? (a) : (b))
  71:./Src/main.c  **** #define MIN3(a, b, c) MIN(a, MIN(b, c))
  72:./Src/main.c  **** #define MAX3(a, b, c) MAX(a, MAX(b, c))
  73:./Src/main.c  **** 
  74:./Src/main.c  **** #define PI 3.14159265
  75:./Src/main.c  **** 
  76:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  77:./Src/main.c  **** 
  78:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  79:./Src/main.c  **** void SystemClock_Config(void);
  80:./Src/main.c  **** void Error_Handler(void);
  81:./Src/main.c  **** //extern struct PID_dati pid_R_;
  82:./Src/main.c  **** static void MX_IWDG_Init(void);
  83:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  84:./Src/main.c  **** 
  85:./Src/main.c  **** volatile __IO int16_t speed = 0;
  86:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  87:./Src/main.c  **** //extern struct COMMAND_data commandsequence;
  88:./Src/main.c  **** 
ARM GAS  /tmp/ccwXPmxK.s 			page 3


  89:./Src/main.c  **** //TEMP
  90:./Src/main.c  **** /*
  91:./Src/main.c  **** extern volatile __IO struct MOTOR_Rdati motorR;
  92:./Src/main.c  **** volatile __IO uint8_t temp8,temp8case,temp_MOTOR_R_START;
  93:./Src/main.c  **** volatile __IO int32_t temp_SET_SPPED;
  94:./Src/main.c  **** volatile __IO uint8_t bufferTX[100],ai2cBuffer[10];
  95:./Src/main.c  **** int32_t speed;
  96:./Src/main.c  **** */
  97:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
  98:./Src/main.c  **** 
  99:./Src/main.c  **** int main(void)
 100:./Src/main.c  **** {
 101:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 102:./Src/main.c  ****   HAL_Init();
 103:./Src/main.c  **** 
 104:./Src/main.c  ****   /* Configure the system clock */
 105:./Src/main.c  ****   SystemClock_Config();
 106:./Src/main.c  **** 
 107:./Src/main.c  ****   Button_init();
 108:./Src/main.c  **** 
 109:./Src/main.c  ****   Power_Set(1);
 110:./Src/main.c  **** 
 111:./Src/main.c  **** 
 112:./Src/main.c  ****   Telemetry_init();
 113:./Src/main.c  **** 
 114:./Src/main.c  ****   Buzzer_init();
 115:./Src/main.c  ****   Led_init();
 116:./Src/main.c  ****   IS_Charge_init();
 117:./Src/main.c  **** 
 118:./Src/main.c  ****   ADC_L_init();
 119:./Src/main.c  ****   ADC_R_init();
 120:./Src/main.c  ****   MotorL_init();
 121:./Src/main.c  ****   MotorR_init();
 122:./Src/main.c  **** 
 123:./Src/main.c  **** 
 124:./Src/main.c  ****   //PID_init(0,900); //pwm limit
 125:./Src/main.c  ****   //PID_set_L_costant(0.05,0.01,0.0);
 126:./Src/main.c  ****   //PID_set_R_costant(2.0,0.5,0.0);
 127:./Src/main.c  **** 
 128:./Src/main.c  **** //DebugPin_init();
 129:./Src/main.c  ****   HAL_Delay(350);
 130:./Src/main.c  ****   while(IS_Button()) {
 131:./Src/main.c  ****     Led_Set(0);
 132:./Src/main.c  ****   }
 133:./Src/main.c  **** 
 134:./Src/main.c  ****   applcation_init();
 135:./Src/main.c  ****   Battery_TASK();
 136:./Src/main.c  **** 
 137:./Src/main.c  ****   MX_IWDG_Init();
 138:./Src/main.c  **** 
 139:./Src/main.c  ****   Led_Set(1);
 140:./Src/main.c  ****   Buzzer_TwoBeep();
 141:./Src/main.c  ****   HAL_Delay(350);
 142:./Src/main.c  **** 
 143:./Src/main.c  ****   MotorR_start();
 144:./Src/main.c  ****   MotorL_start();
 145:./Src/main.c  ****   //MotorR_pwm(80);
ARM GAS  /tmp/ccwXPmxK.s 			page 4


 146:./Src/main.c  ****   //MotorL_pwm(-200);
 147:./Src/main.c  **** 
 148:./Src/main.c  ****   uint32_t sinValue = 45 * 50;
 149:./Src/main.c  ****   uint8_t state = 0;
 150:./Src/main.c  ****   int lastSpeedL = 0, lastSpeedR = 0;
 151:./Src/main.c  ****   while(1){
 152:./Src/main.c  ****     sinValue++;
 153:./Src/main.c  ****     counterTemp = HAL_GetTick();
 154:./Src/main.c  ****     if(IS_Button()) {
 155:./Src/main.c  ****       while(IS_Button()) {
 156:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 157:./Src/main.c  ****       }
 158:./Src/main.c  ****       Buzzer_OneLongBeep();
 159:./Src/main.c  ****       HAL_Delay(350);
 160:./Src/main.c  ****       Power_Set(0);
 161:./Src/main.c  ****     }
 162:./Src/main.c  ****     if ((sinValue) % (500) == 0) {
 163:./Src/main.c  ****       uint16_t distance = CLAMP(ADC_PA3() - 175, 0, 4095);
 164:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 165:./Src/main.c  ****       int speedL = -CLAMP((distance - 1000) +  (steering / 10.0), -800, 800);
 166:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  (steering / 10.0), -800, 800);
 167:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 168:./Src/main.c  ****         if (distance > 850) {
 169:./Src/main.c  ****           MotorL_pwm(speedL);
 170:./Src/main.c  ****           MotorR_pwm(speedR);
 171:./Src/main.c  ****         } else {
 172:./Src/main.c  ****           MotorL_pwm(0);
 173:./Src/main.c  ****           MotorR_pwm(0);
 174:./Src/main.c  ****         }
 175:./Src/main.c  ****       }
 176:./Src/main.c  ****       if (distance > 3000) { // Error, robot too far away!
 177:./Src/main.c  ****         MotorL_pwm(0);
 178:./Src/main.c  ****         MotorR_pwm(0);
 179:./Src/main.c  ****         while(1) {
 180:./Src/main.c  ****           Power_Set(0);
 181:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 182:./Src/main.c  ****         }
 183:./Src/main.c  ****       }
 184:./Src/main.c  **** 
 185:./Src/main.c  ****       char str[100];
 186:./Src/main.c  ****       memset(&str[0], 0, sizeof(str));
 187:./Src/main.c  ****       sprintf(str, "%i;%i\n\r", getMotorCurrentR(), getMotorCurrentL());
 188:./Src/main.c  ****       Console_Log(str);
 189:./Src/main.c  **** 
 190:./Src/main.c  **** 
 191:./Src/main.c  ****       lastSpeedL = speedL;
 192:./Src/main.c  ****       lastSpeedR = speedR;
 193:./Src/main.c  ****     }
 194:./Src/main.c  **** 
 195:./Src/main.c  **** 
 196:./Src/main.c  **** 
 197:./Src/main.c  ****     Battery_TASK();
 198:./Src/main.c  ****     //Current_Motor_TASK();
 199:./Src/main.c  ****     //sWiiNunchuck_TASK();
 200:./Src/main.c  ****     //applcation_TASK();
 201:./Src/main.c  ****     //Telemetry_TASK();
 202:./Src/main.c  **** 
ARM GAS  /tmp/ccwXPmxK.s 			page 5


 203:./Src/main.c  ****     //Batteria Scarica?
 204:./Src/main.c  ****     if(GET_BatteryAverage() < 31.0 || ABS(getMotorCurrentR() * 0.02) > 20.0 || ABS(getMotorCurrentL
 205:./Src/main.c  ****       MotorL_pwm(0);
 206:./Src/main.c  ****       MotorR_pwm(0);
 207:./Src/main.c  ****       Buzzer_OneLongBeep();
 208:./Src/main.c  ****       HAL_Delay(350);
 209:./Src/main.c  ****       Power_Set(0);
 210:./Src/main.c  ****     }
 211:./Src/main.c  ****     //In Carica?
 212:./Src/main.c  ****     /*if(IS_Charge()==0){
 213:./Src/main.c  ****       WAIT_CHARGE_FINISH();
 214:./Src/main.c  ****     }*/
 215:./Src/main.c  **** 
 216:./Src/main.c  ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 217:./Src/main.c  **** 
 218:./Src/main.c  ****     counterTempTT = HAL_GetTick() - counterTemp;
 219:./Src/main.c  **** 
 220:./Src/main.c  **** 
 221:./Src/main.c  **** 
 222:./Src/main.c  ****   }
 223:./Src/main.c  **** 
 224:./Src/main.c  **** }
 225:./Src/main.c  **** 
 226:./Src/main.c  **** /** System Clock Configuration
 227:./Src/main.c  **** */
 228:./Src/main.c  **** void SystemClock_Config(void)
 229:./Src/main.c  **** {
 230:./Src/main.c  **** 
 231:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 232:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 233:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 234:./Src/main.c  **** 
 235:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 236:./Src/main.c  ****     */
 237:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 238:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 239:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 240:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 241:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 242:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 243:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 244:./Src/main.c  ****   {
 245:./Src/main.c  ****     Error_Handler();
 246:./Src/main.c  ****   }
 247:./Src/main.c  **** 
 248:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 249:./Src/main.c  ****     */
 250:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 251:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 252:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 253:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 254:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 255:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 256:./Src/main.c  **** 
 257:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 258:./Src/main.c  ****   {
 259:./Src/main.c  ****     Error_Handler();
ARM GAS  /tmp/ccwXPmxK.s 			page 6


 260:./Src/main.c  ****   }
 261:./Src/main.c  **** 
 262:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 263:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 264:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 265:./Src/main.c  ****   {
 266:./Src/main.c  ****     Error_Handler();
 267:./Src/main.c  ****   }
 268:./Src/main.c  **** 
 269:./Src/main.c  ****     /**Configure the Systick interrupt time
 270:./Src/main.c  ****     */
 271:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 272:./Src/main.c  **** 
 273:./Src/main.c  ****     /**Configure the Systick
 274:./Src/main.c  ****     */
 275:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 276:./Src/main.c  **** 
 277:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 278:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 279:./Src/main.c  **** }
 280:./Src/main.c  **** 
 281:./Src/main.c  **** /* IWDG init function */
 282:./Src/main.c  **** static void MX_IWDG_Init(void)
 283:./Src/main.c  **** {
 284:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 285:./Src/main.c  ****   hiwdg.Instance = IWDG;
 286:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 287:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 288:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 289:./Src/main.c  ****   {
 290:./Src/main.c  ****     Error_Handler();
 291:./Src/main.c  ****   }
 292:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 293:./Src/main.c  **** }
 294:./Src/main.c  **** 
 295:./Src/main.c  **** 
 296:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
  28              		.loc 1 296 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38 0002 0446     		mov	r4, r0
 297:./Src/main.c  ****   if(hadc->Instance == ADC1){
  39              		.loc 1 297 0
  40 0004 0268     		ldr	r2, [r0]
  41 0006 064B     		ldr	r3, .L5
  42 0008 9A42     		cmp	r2, r3
  43 000a 01D1     		bne	.L2
 298:./Src/main.c  ****     ADC_R_callback();
  44              		.loc 1 298 0
  45 000c FFF7FEFF 		bl	ADC_R_callback
ARM GAS  /tmp/ccwXPmxK.s 			page 7


  46              	.LVL1:
  47              	.L2:
 299:./Src/main.c  ****   }
 300:./Src/main.c  ****   if(hadc->Instance == ADC3){
  48              		.loc 1 300 0
  49 0010 2268     		ldr	r2, [r4]
  50 0012 044B     		ldr	r3, .L5+4
  51 0014 9A42     		cmp	r2, r3
  52 0016 01D1     		bne	.L1
 301:./Src/main.c  ****     ADC_L_callback();
  53              		.loc 1 301 0
  54 0018 FFF7FEFF 		bl	ADC_L_callback
  55              	.LVL2:
  56              	.L1:
  57 001c 10BD     		pop	{r4, pc}
  58              	.LVL3:
  59              	.L6:
  60 001e 00BF     		.align	2
  61              	.L5:
  62 0020 00240140 		.word	1073816576
  63 0024 003C0140 		.word	1073822720
  64              		.cfi_endproc
  65              	.LFE67:
  67              		.section	.text.Error_Handler,"ax",%progbits
  68              		.align	2
  69              		.global	Error_Handler
  70              		.thumb
  71              		.thumb_func
  73              	Error_Handler:
  74              	.LFB68:
 302:./Src/main.c  ****   }
 303:./Src/main.c  **** }
 304:./Src/main.c  **** 
 305:./Src/main.c  **** 
 306:./Src/main.c  **** /**
 307:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 308:./Src/main.c  ****   * @param  None
 309:./Src/main.c  ****   * @retval None
 310:./Src/main.c  ****   */
 311:./Src/main.c  **** void Error_Handler(void)
 312:./Src/main.c  **** {
  75              		.loc 1 312 0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80 0000 08B5     		push	{r3, lr}
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 3, -8
  84              		.cfi_offset 14, -4
 313:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 314:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 315:./Src/main.c  ****   MotorR_stop();
  85              		.loc 1 315 0
  86 0002 FFF7FEFF 		bl	MotorR_stop
  87              	.LVL4:
ARM GAS  /tmp/ccwXPmxK.s 			page 8


 316:./Src/main.c  ****   MotorL_stop();
  88              		.loc 1 316 0
  89 0006 FFF7FEFF 		bl	MotorL_stop
  90              	.LVL5:
  91              	.L8:
  92 000a FEE7     		b	.L8
  93              		.cfi_endproc
  94              	.LFE68:
  96              		.section	.text.MX_IWDG_Init,"ax",%progbits
  97              		.align	2
  98              		.thumb
  99              		.thumb_func
 101              	MX_IWDG_Init:
 102              	.LFB66:
 283:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 103              		.loc 1 283 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 8
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107 0000 00B5     		push	{lr}
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 4
 110              		.cfi_offset 14, -4
 111 0002 83B0     		sub	sp, sp, #12
 112              	.LCFI3:
 113              		.cfi_def_cfa_offset 16
 114              	.LBB2:
 284:./Src/main.c  ****   hiwdg.Instance = IWDG;
 115              		.loc 1 284 0
 116 0004 0E4B     		ldr	r3, .L13
 117 0006 DA69     		ldr	r2, [r3, #28]
 118 0008 42F40062 		orr	r2, r2, #2048
 119 000c DA61     		str	r2, [r3, #28]
 120 000e DB69     		ldr	r3, [r3, #28]
 121 0010 03F40063 		and	r3, r3, #2048
 122 0014 0193     		str	r3, [sp, #4]
 123 0016 019B     		ldr	r3, [sp, #4]
 124              	.LBE2:
 285:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 125              		.loc 1 285 0
 126 0018 0A48     		ldr	r0, .L13+4
 127 001a 0B4B     		ldr	r3, .L13+8
 128 001c 0360     		str	r3, [r0]
 286:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 129              		.loc 1 286 0
 130 001e 0123     		movs	r3, #1
 131 0020 4360     		str	r3, [r0, #4]
 287:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 132              		.loc 1 287 0
 133 0022 40F6FF73 		movw	r3, #4095
 134 0026 8360     		str	r3, [r0, #8]
 288:./Src/main.c  ****   {
 135              		.loc 1 288 0
 136 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 137              	.LVL6:
 138 002c 08B1     		cbz	r0, .L11
 290:./Src/main.c  ****   }
ARM GAS  /tmp/ccwXPmxK.s 			page 9


 139              		.loc 1 290 0
 140 002e FFF7FEFF 		bl	Error_Handler
 141              	.LVL7:
 142              	.L11:
 292:./Src/main.c  **** }
 143              		.loc 1 292 0
 144 0032 0448     		ldr	r0, .L13+4
 145 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 146              	.LVL8:
 293:./Src/main.c  **** 
 147              		.loc 1 293 0
 148 0038 03B0     		add	sp, sp, #12
 149              	.LCFI4:
 150              		.cfi_def_cfa_offset 4
 151              		@ sp needed
 152 003a 5DF804FB 		ldr	pc, [sp], #4
 153              	.L14:
 154 003e 00BF     		.align	2
 155              	.L13:
 156 0040 00100240 		.word	1073876992
 157 0044 00000000 		.word	hiwdg
 158 0048 00300040 		.word	1073754112
 159              		.cfi_endproc
 160              	.LFE66:
 162              		.section	.text.SystemClock_Config,"ax",%progbits
 163              		.align	2
 164              		.global	SystemClock_Config
 165              		.thumb
 166              		.thumb_func
 168              	SystemClock_Config:
 169              	.LFB65:
 229:./Src/main.c  **** 
 170              		.loc 1 229 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 88
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174 0000 00B5     		push	{lr}
 175              	.LCFI5:
 176              		.cfi_def_cfa_offset 4
 177              		.cfi_offset 14, -4
 178 0002 97B0     		sub	sp, sp, #92
 179              	.LCFI6:
 180              		.cfi_def_cfa_offset 96
 237:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 181              		.loc 1 237 0
 182 0004 0223     		movs	r3, #2
 183 0006 0C93     		str	r3, [sp, #48]
 238:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 184              		.loc 1 238 0
 185 0008 0122     		movs	r2, #1
 186 000a 1092     		str	r2, [sp, #64]
 239:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 187              		.loc 1 239 0
 188 000c 1022     		movs	r2, #16
 189 000e 1192     		str	r2, [sp, #68]
 240:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 190              		.loc 1 240 0
ARM GAS  /tmp/ccwXPmxK.s 			page 10


 191 0010 1393     		str	r3, [sp, #76]
 241:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 192              		.loc 1 241 0
 193 0012 0023     		movs	r3, #0
 194 0014 1493     		str	r3, [sp, #80]
 242:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 195              		.loc 1 242 0
 196 0016 4FF46013 		mov	r3, #3670016
 197 001a 1593     		str	r3, [sp, #84]
 243:./Src/main.c  ****   {
 198              		.loc 1 243 0
 199 001c 0CA8     		add	r0, sp, #48
 200 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 201              	.LVL9:
 202 0022 08B1     		cbz	r0, .L16
 245:./Src/main.c  ****   }
 203              		.loc 1 245 0
 204 0024 FFF7FEFF 		bl	Error_Handler
 205              	.LVL10:
 206              	.L16:
 250:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 207              		.loc 1 250 0
 208 0028 0F23     		movs	r3, #15
 209 002a 0793     		str	r3, [sp, #28]
 252:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 210              		.loc 1 252 0
 211 002c 0221     		movs	r1, #2
 212 002e 0891     		str	r1, [sp, #32]
 253:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 213              		.loc 1 253 0
 214 0030 0023     		movs	r3, #0
 215 0032 0993     		str	r3, [sp, #36]
 254:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 216              		.loc 1 254 0
 217 0034 4FF48062 		mov	r2, #1024
 218 0038 0A92     		str	r2, [sp, #40]
 255:./Src/main.c  **** 
 219              		.loc 1 255 0
 220 003a 0B93     		str	r3, [sp, #44]
 257:./Src/main.c  ****   {
 221              		.loc 1 257 0
 222 003c 07A8     		add	r0, sp, #28
 223 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 224              	.LVL11:
 225 0042 08B1     		cbz	r0, .L17
 259:./Src/main.c  ****   }
 226              		.loc 1 259 0
 227 0044 FFF7FEFF 		bl	Error_Handler
 228              	.LVL12:
 229              	.L17:
 262:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 230              		.loc 1 262 0
 231 0048 0223     		movs	r3, #2
 232 004a 0193     		str	r3, [sp, #4]
 263:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 233              		.loc 1 263 0
 234 004c 4FF44043 		mov	r3, #49152
ARM GAS  /tmp/ccwXPmxK.s 			page 11


 235 0050 0393     		str	r3, [sp, #12]
 264:./Src/main.c  ****   {
 236              		.loc 1 264 0
 237 0052 01A8     		add	r0, sp, #4
 238 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 239              	.LVL13:
 240 0058 08B1     		cbz	r0, .L18
 266:./Src/main.c  ****   }
 241              		.loc 1 266 0
 242 005a FFF7FEFF 		bl	Error_Handler
 243              	.LVL14:
 244              	.L18:
 271:./Src/main.c  **** 
 245              		.loc 1 271 0
 246 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 247              	.LVL15:
 248 0062 094B     		ldr	r3, .L20
 249 0064 A3FB0030 		umull	r3, r0, r3, r0
 250 0068 8009     		lsrs	r0, r0, #6
 251 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
 252              	.LVL16:
 275:./Src/main.c  **** 
 253              		.loc 1 275 0
 254 006e 0420     		movs	r0, #4
 255 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 256              	.LVL17:
 278:./Src/main.c  **** }
 257              		.loc 1 278 0
 258 0074 0022     		movs	r2, #0
 259 0076 1146     		mov	r1, r2
 260 0078 4FF0FF30 		mov	r0, #-1
 261 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262              	.LVL18:
 279:./Src/main.c  **** 
 263              		.loc 1 279 0
 264 0080 17B0     		add	sp, sp, #92
 265              	.LCFI7:
 266              		.cfi_def_cfa_offset 4
 267              		@ sp needed
 268 0082 5DF804FB 		ldr	pc, [sp], #4
 269              	.L21:
 270 0086 00BF     		.align	2
 271              	.L20:
 272 0088 D34D6210 		.word	274877907
 273              		.cfi_endproc
 274              	.LFE65:
 276              		.global	__aeabi_i2d
 277              		.global	__aeabi_ddiv
 278              		.global	__aeabi_dadd
 279              		.global	__aeabi_dcmpgt
 280              		.global	__aeabi_dcmplt
 281              		.global	__aeabi_d2iz
 282              		.global	__aeabi_dsub
 283              		.global	__aeabi_fcmplt
 284              		.global	__aeabi_dmul
 285              		.section	.text.main,"ax",%progbits
 286              		.align	2
ARM GAS  /tmp/ccwXPmxK.s 			page 12


 287              		.global	main
 288              		.thumb
 289              		.thumb_func
 291              	main:
 292              	.LFB64:
 100:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 293              		.loc 1 100 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 112
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 298              	.LCFI8:
 299              		.cfi_def_cfa_offset 36
 300              		.cfi_offset 4, -36
 301              		.cfi_offset 5, -32
 302              		.cfi_offset 6, -28
 303              		.cfi_offset 7, -24
 304              		.cfi_offset 8, -20
 305              		.cfi_offset 9, -16
 306              		.cfi_offset 10, -12
 307              		.cfi_offset 11, -8
 308              		.cfi_offset 14, -4
 309 0004 9DB0     		sub	sp, sp, #116
 310              	.LCFI9:
 311              		.cfi_def_cfa_offset 152
 102:./Src/main.c  **** 
 312              		.loc 1 102 0
 313 0006 FFF7FEFF 		bl	HAL_Init
 314              	.LVL19:
 105:./Src/main.c  **** 
 315              		.loc 1 105 0
 316 000a FFF7FEFF 		bl	SystemClock_Config
 317              	.LVL20:
 107:./Src/main.c  **** 
 318              		.loc 1 107 0
 319 000e FFF7FEFF 		bl	Button_init
 320              	.LVL21:
 109:./Src/main.c  **** 
 321              		.loc 1 109 0
 322 0012 0120     		movs	r0, #1
 323 0014 FFF7FEFF 		bl	Power_Set
 324              	.LVL22:
 112:./Src/main.c  **** 
 325              		.loc 1 112 0
 326 0018 FFF7FEFF 		bl	Telemetry_init
 327              	.LVL23:
 114:./Src/main.c  ****   Led_init();
 328              		.loc 1 114 0
 329 001c FFF7FEFF 		bl	Buzzer_init
 330              	.LVL24:
 115:./Src/main.c  ****   IS_Charge_init();
 331              		.loc 1 115 0
 332 0020 FFF7FEFF 		bl	Led_init
 333              	.LVL25:
 116:./Src/main.c  **** 
 334              		.loc 1 116 0
 335 0024 FFF7FEFF 		bl	IS_Charge_init
ARM GAS  /tmp/ccwXPmxK.s 			page 13


 336              	.LVL26:
 118:./Src/main.c  ****   ADC_R_init();
 337              		.loc 1 118 0
 338 0028 FFF7FEFF 		bl	ADC_L_init
 339              	.LVL27:
 119:./Src/main.c  ****   MotorL_init();
 340              		.loc 1 119 0
 341 002c FFF7FEFF 		bl	ADC_R_init
 342              	.LVL28:
 120:./Src/main.c  ****   MotorR_init();
 343              		.loc 1 120 0
 344 0030 FFF7FEFF 		bl	MotorL_init
 345              	.LVL29:
 121:./Src/main.c  **** 
 346              		.loc 1 121 0
 347 0034 FFF7FEFF 		bl	MotorR_init
 348              	.LVL30:
 129:./Src/main.c  ****   while(IS_Button()) {
 349              		.loc 1 129 0
 350 0038 4FF4AF70 		mov	r0, #350
 351 003c FFF7FEFF 		bl	HAL_Delay
 352              	.LVL31:
 353              	.LBB3:
 130:./Src/main.c  ****     Led_Set(0);
 354              		.loc 1 130 0
 355 0040 02E0     		b	.L23
 356              	.L24:
 131:./Src/main.c  ****   }
 357              		.loc 1 131 0
 358 0042 0020     		movs	r0, #0
 359 0044 FFF7FEFF 		bl	Led_Set
 360              	.LVL32:
 361              	.L23:
 130:./Src/main.c  ****     Led_Set(0);
 362              		.loc 1 130 0
 363 0048 FFF7FEFF 		bl	IS_Button
 364              	.LVL33:
 365 004c 0028     		cmp	r0, #0
 366 004e F8D1     		bne	.L24
 367              	.LBE3:
 134:./Src/main.c  ****   Battery_TASK();
 368              		.loc 1 134 0
 369 0050 FFF7FEFF 		bl	applcation_init
 370              	.LVL34:
 135:./Src/main.c  **** 
 371              		.loc 1 135 0
 372 0054 FFF7FEFF 		bl	Battery_TASK
 373              	.LVL35:
 137:./Src/main.c  **** 
 374              		.loc 1 137 0
 375 0058 FFF7FEFF 		bl	MX_IWDG_Init
 376              	.LVL36:
 139:./Src/main.c  ****   Buzzer_TwoBeep();
 377              		.loc 1 139 0
 378 005c 0120     		movs	r0, #1
 379 005e FFF7FEFF 		bl	Led_Set
 380              	.LVL37:
ARM GAS  /tmp/ccwXPmxK.s 			page 14


 140:./Src/main.c  ****   HAL_Delay(350);
 381              		.loc 1 140 0
 382 0062 FFF7FEFF 		bl	Buzzer_TwoBeep
 383              	.LVL38:
 141:./Src/main.c  **** 
 384              		.loc 1 141 0
 385 0066 4FF4AF70 		mov	r0, #350
 386 006a FFF7FEFF 		bl	HAL_Delay
 387              	.LVL39:
 143:./Src/main.c  ****   MotorL_start();
 388              		.loc 1 143 0
 389 006e FFF7FEFF 		bl	MotorR_start
 390              	.LVL40:
 144:./Src/main.c  ****   //MotorR_pwm(80);
 391              		.loc 1 144 0
 392 0072 FFF7FEFF 		bl	MotorL_start
 393              	.LVL41:
 150:./Src/main.c  ****   while(1){
 394              		.loc 1 150 0
 395 0076 4FF00009 		mov	r9, #0
 396 007a CB46     		mov	fp, r9
 148:./Src/main.c  ****   uint8_t state = 0;
 397              		.loc 1 148 0
 398 007c 40F6CA04 		movw	r4, #2250
 399 0080 4F46     		mov	r7, r9
 400              	.LVL42:
 401              	.L44:
 152:./Src/main.c  ****     counterTemp = HAL_GetTick();
 402              		.loc 1 152 0
 403 0082 0134     		adds	r4, r4, #1
 404              	.LVL43:
 153:./Src/main.c  ****     if(IS_Button()) {
 405              		.loc 1 153 0
 406 0084 FFF7FEFF 		bl	HAL_GetTick
 407              	.LVL44:
 408 0088 A74B     		ldr	r3, .L57+8
 409 008a 1860     		str	r0, [r3]
 410              	.LBB4:
 154:./Src/main.c  ****       while(IS_Button()) {
 411              		.loc 1 154 0
 412 008c FFF7FEFF 		bl	IS_Button
 413              	.LVL45:
 414 0090 18B9     		cbnz	r0, .L25
 415 0092 0FE0     		b	.L26
 416              	.L27:
 156:./Src/main.c  ****       }
 417              		.loc 1 156 0
 418 0094 A548     		ldr	r0, .L57+12
 419 0096 FFF7FEFF 		bl	HAL_IWDG_Refresh
 420              	.LVL46:
 421              	.L25:
 155:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 422              		.loc 1 155 0
 423 009a FFF7FEFF 		bl	IS_Button
 424              	.LVL47:
 425 009e 0028     		cmp	r0, #0
 426 00a0 F8D1     		bne	.L27
ARM GAS  /tmp/ccwXPmxK.s 			page 15


 158:./Src/main.c  ****       HAL_Delay(350);
 427              		.loc 1 158 0
 428 00a2 FFF7FEFF 		bl	Buzzer_OneLongBeep
 429              	.LVL48:
 159:./Src/main.c  ****       Power_Set(0);
 430              		.loc 1 159 0
 431 00a6 4FF4AF70 		mov	r0, #350
 432 00aa FFF7FEFF 		bl	HAL_Delay
 433              	.LVL49:
 160:./Src/main.c  ****     }
 434              		.loc 1 160 0
 435 00ae 0020     		movs	r0, #0
 436 00b0 FFF7FEFF 		bl	Power_Set
 437              	.LVL50:
 438              	.L26:
 439              	.LBE4:
 162:./Src/main.c  ****       uint16_t distance = CLAMP(ADC_PA3() - 175, 0, 4095);
 440              		.loc 1 162 0
 441 00b4 9E4B     		ldr	r3, .L57+16
 442 00b6 A3FB0423 		umull	r2, r3, r3, r4
 443 00ba 5B09     		lsrs	r3, r3, #5
 444 00bc 4FF4FA72 		mov	r2, #500
 445 00c0 02FB1343 		mls	r3, r2, r3, r4
 446 00c4 002B     		cmp	r3, #0
 447 00c6 40F0B180 		bne	.L28
 448              	.LBB5:
 163:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 449              		.loc 1 163 0
 450 00ca FFF7FEFF 		bl	ADC_PA3
 451              	.LVL51:
 452 00ce AF38     		subs	r0, r0, #175
 453 00d0 B0F5805F 		cmp	r0, #4096
 454 00d4 08DA     		bge	.L45
 163:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 455              		.loc 1 163 0 is_stmt 0 discriminator 1
 456 00d6 FFF7FEFF 		bl	ADC_PA3
 457              	.LVL52:
 458 00da AF28     		cmp	r0, #175
 459 00dc 07D4     		bmi	.L46
 163:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 460              		.loc 1 163 0 discriminator 3
 461 00de FFF7FEFF 		bl	ADC_PA3
 462              	.LVL53:
 463 00e2 AF38     		subs	r0, r0, #175
 464 00e4 85B2     		uxth	r5, r0
 465 00e6 03E0     		b	.L29
 466              	.L45:
 163:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 467              		.loc 1 163 0
 468 00e8 40F6FF75 		movw	r5, #4095
 469 00ec 00E0     		b	.L29
 470              	.L46:
 471 00ee 0025     		movs	r5, #0
 472              	.L29:
 473              	.LVL54:
 164:./Src/main.c  ****       int speedL = -CLAMP((distance - 1000) +  (steering / 10.0), -800, 800);
 474              		.loc 1 164 0 is_stmt 1 discriminator 8
ARM GAS  /tmp/ccwXPmxK.s 			page 16


 475 00f0 FFF7FEFF 		bl	ADC_PA2
 476              	.LVL55:
 477 00f4 A0F50060 		sub	r0, r0, #2048
 478 00f8 06B2     		sxth	r6, r0
 479              	.LVL56:
 165:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  (steering / 10.0), -800, 800);
 480              		.loc 1 165 0 discriminator 8
 481 00fa A5F57A70 		sub	r0, r5, #1000
 482 00fe FFF7FEFF 		bl	__aeabi_i2d
 483              	.LVL57:
 484 0102 8046     		mov	r8, r0
 485 0104 8946     		mov	r9, r1
 486 0106 3046     		mov	r0, r6
 487 0108 FFF7FEFF 		bl	__aeabi_i2d
 488              	.LVL58:
 489 010c 0022     		movs	r2, #0
 490 010e 894B     		ldr	r3, .L57+20
 491 0110 FFF7FEFF 		bl	__aeabi_ddiv
 492              	.LVL59:
 493 0114 0246     		mov	r2, r0
 494 0116 0B46     		mov	r3, r1
 495 0118 CDE90023 		strd	r2, [sp]
 496 011c 4046     		mov	r0, r8
 497 011e 4946     		mov	r1, r9
 498 0120 FFF7FEFF 		bl	__aeabi_dadd
 499              	.LVL60:
 500 0124 8246     		mov	r10, r0
 501 0126 0E46     		mov	r6, r1
 502              	.LVL61:
 503 0128 0022     		movs	r2, #0
 504 012a 834B     		ldr	r3, .L57+24
 505 012c 5046     		mov	r0, r10
 506 012e 3146     		mov	r1, r6
 507 0130 FFF7FEFF 		bl	__aeabi_dcmpgt
 508              	.LVL62:
 509 0134 68B9     		cbnz	r0, .L47
 165:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  (steering / 10.0), -800, 800);
 510              		.loc 1 165 0 is_stmt 0 discriminator 2
 511 0136 0022     		movs	r2, #0
 512 0138 804B     		ldr	r3, .L57+28
 513 013a 5046     		mov	r0, r10
 514 013c 3146     		mov	r1, r6
 515 013e FFF7FEFF 		bl	__aeabi_dcmplt
 516              	.LVL63:
 517 0142 40B9     		cbnz	r0, .L48
 165:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  (steering / 10.0), -800, 800);
 518              		.loc 1 165 0 discriminator 5
 519 0144 5046     		mov	r0, r10
 520 0146 06F10041 		add	r1, r6, #-2147483648
 521 014a FFF7FEFF 		bl	__aeabi_d2iz
 522              	.LVL64:
 523 014e 0646     		mov	r6, r0
 524 0150 03E0     		b	.L30
 525              	.L47:
 165:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  (steering / 10.0), -800, 800);
 526              		.loc 1 165 0
 527 0152 7B4E     		ldr	r6, .L57+32
ARM GAS  /tmp/ccwXPmxK.s 			page 17


 528 0154 01E0     		b	.L30
 529              	.L48:
 530 0156 4FF44876 		mov	r6, #800
 531              	.L30:
 532              	.LVL65:
 166:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 533              		.loc 1 166 0 is_stmt 1 discriminator 8
 534 015a DDE90023 		ldrd	r2, [sp]
 535 015e 4046     		mov	r0, r8
 536 0160 4946     		mov	r1, r9
 537 0162 FFF7FEFF 		bl	__aeabi_dsub
 538              	.LVL66:
 539 0166 8146     		mov	r9, r0
 540 0168 8846     		mov	r8, r1
 541 016a 0022     		movs	r2, #0
 542 016c 724B     		ldr	r3, .L57+24
 543 016e 4846     		mov	r0, r9
 544 0170 4146     		mov	r1, r8
 545 0172 FFF7FEFF 		bl	__aeabi_dcmpgt
 546              	.LVL67:
 547 0176 68B9     		cbnz	r0, .L49
 166:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 548              		.loc 1 166 0 is_stmt 0 discriminator 2
 549 0178 0022     		movs	r2, #0
 550 017a 704B     		ldr	r3, .L57+28
 551 017c 4846     		mov	r0, r9
 552 017e 4146     		mov	r1, r8
 553 0180 FFF7FEFF 		bl	__aeabi_dcmplt
 554              	.LVL68:
 555 0184 48B9     		cbnz	r0, .L50
 166:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 556              		.loc 1 166 0 discriminator 5
 557 0186 4846     		mov	r0, r9
 558 0188 08F10041 		add	r1, r8, #-2147483648
 559 018c FFF7FEFF 		bl	__aeabi_d2iz
 560              	.LVL69:
 561 0190 8046     		mov	r8, r0
 562 0192 04E0     		b	.L31
 563              	.L49:
 166:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 564              		.loc 1 166 0
 565 0194 DFF8A881 		ldr	r8, .L57+32
 566 0198 01E0     		b	.L31
 567              	.L50:
 568 019a 4FF44878 		mov	r8, #800
 569              	.L31:
 570              	.LVL70:
 167:./Src/main.c  ****         if (distance > 850) {
 571              		.loc 1 167 0 is_stmt 1 discriminator 8
 572 019e 0BF13203 		add	r3, fp, #50
 573 01a2 9E42     		cmp	r6, r3
 574 01a4 1CDA     		bge	.L32
 167:./Src/main.c  ****         if (distance > 850) {
 575              		.loc 1 167 0 is_stmt 0 discriminator 1
 576 01a6 ABF1320B 		sub	fp, fp, #50
 577              	.LVL71:
 578 01aa 5E45     		cmp	r6, fp
ARM GAS  /tmp/ccwXPmxK.s 			page 18


 579 01ac 18DD     		ble	.L32
 167:./Src/main.c  ****         if (distance > 850) {
 580              		.loc 1 167 0 discriminator 2
 581 01ae 07F13203 		add	r3, r7, #50
 582 01b2 9845     		cmp	r8, r3
 583 01b4 14DA     		bge	.L32
 167:./Src/main.c  ****         if (distance > 850) {
 584              		.loc 1 167 0 discriminator 3
 585 01b6 323F     		subs	r7, r7, #50
 586              	.LVL72:
 587 01b8 B845     		cmp	r8, r7
 588 01ba 11DD     		ble	.L32
 168:./Src/main.c  ****           MotorL_pwm(speedL);
 589              		.loc 1 168 0 is_stmt 1
 590 01bc 40F25233 		movw	r3, #850
 591 01c0 9D42     		cmp	r5, r3
 592 01c2 07D9     		bls	.L33
 169:./Src/main.c  ****           MotorR_pwm(speedR);
 593              		.loc 1 169 0
 594 01c4 30B2     		sxth	r0, r6
 595 01c6 FFF7FEFF 		bl	MotorL_pwm
 596              	.LVL73:
 170:./Src/main.c  ****         } else {
 597              		.loc 1 170 0
 598 01ca 0FFA88F0 		sxth	r0, r8
 599 01ce FFF7FEFF 		bl	MotorR_pwm
 600              	.LVL74:
 601 01d2 05E0     		b	.L32
 602              	.L33:
 172:./Src/main.c  ****           MotorR_pwm(0);
 603              		.loc 1 172 0
 604 01d4 0020     		movs	r0, #0
 605 01d6 FFF7FEFF 		bl	MotorL_pwm
 606              	.LVL75:
 173:./Src/main.c  ****         }
 607              		.loc 1 173 0
 608 01da 0020     		movs	r0, #0
 609 01dc FFF7FEFF 		bl	MotorR_pwm
 610              	.LVL76:
 611              	.L32:
 176:./Src/main.c  ****         MotorL_pwm(0);
 612              		.loc 1 176 0
 613 01e0 40F6B833 		movw	r3, #3000
 614 01e4 9D42     		cmp	r5, r3
 615 01e6 0CD9     		bls	.L34
 177:./Src/main.c  ****         MotorR_pwm(0);
 616              		.loc 1 177 0
 617 01e8 0020     		movs	r0, #0
 618 01ea FFF7FEFF 		bl	MotorL_pwm
 619              	.LVL77:
 178:./Src/main.c  ****         while(1) {
 620              		.loc 1 178 0
 621 01ee 0020     		movs	r0, #0
 622 01f0 FFF7FEFF 		bl	MotorR_pwm
 623              	.LVL78:
 624              	.L35:
 180:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
ARM GAS  /tmp/ccwXPmxK.s 			page 19


 625              		.loc 1 180 0 discriminator 1
 626 01f4 0020     		movs	r0, #0
 627 01f6 FFF7FEFF 		bl	Power_Set
 628              	.LVL79:
 181:./Src/main.c  ****         }
 629              		.loc 1 181 0 discriminator 1
 630 01fa 4C48     		ldr	r0, .L57+12
 631 01fc FFF7FEFF 		bl	HAL_IWDG_Refresh
 632              	.LVL80:
 633 0200 F8E7     		b	.L35
 634              	.L34:
 186:./Src/main.c  ****       sprintf(str, "%i;%i\n\r", getMotorCurrentR(), getMotorCurrentL());
 635              		.loc 1 186 0
 636 0202 6422     		movs	r2, #100
 637 0204 0021     		movs	r1, #0
 638 0206 03A8     		add	r0, sp, #12
 639 0208 FFF7FEFF 		bl	memset
 640              	.LVL81:
 187:./Src/main.c  ****       Console_Log(str);
 641              		.loc 1 187 0
 642 020c FFF7FEFF 		bl	getMotorCurrentR
 643              	.LVL82:
 644 0210 0546     		mov	r5, r0
 645              	.LVL83:
 646 0212 FFF7FEFF 		bl	getMotorCurrentL
 647              	.LVL84:
 648 0216 0346     		mov	r3, r0
 649 0218 2A46     		mov	r2, r5
 650 021a 4A49     		ldr	r1, .L57+36
 651 021c 03A8     		add	r0, sp, #12
 652 021e FFF7FEFF 		bl	sprintf
 653              	.LVL85:
 188:./Src/main.c  **** 
 654              		.loc 1 188 0
 655 0222 03A8     		add	r0, sp, #12
 656 0224 FFF7FEFF 		bl	Console_Log
 657              	.LVL86:
 192:./Src/main.c  ****     }
 658              		.loc 1 192 0
 659 0228 4746     		mov	r7, r8
 191:./Src/main.c  ****       lastSpeedR = speedR;
 660              		.loc 1 191 0
 661 022a B346     		mov	fp, r6
 662              	.LVL87:
 663              	.L28:
 664              	.LBE5:
 197:./Src/main.c  ****     //Current_Motor_TASK();
 665              		.loc 1 197 0
 666 022c FFF7FEFF 		bl	Battery_TASK
 667              	.LVL88:
 668              	.LBB6:
 204:./Src/main.c  ****       MotorL_pwm(0);
 669              		.loc 1 204 0
 670 0230 FFF7FEFF 		bl	GET_BatteryAverage
 671              	.LVL89:
 672 0234 4449     		ldr	r1, .L57+40
 673 0236 FFF7FEFF 		bl	__aeabi_fcmplt
ARM GAS  /tmp/ccwXPmxK.s 			page 20


 674              	.LVL90:
 675 023a 0028     		cmp	r0, #0
 676 023c 56D1     		bne	.L36
 204:./Src/main.c  ****       MotorL_pwm(0);
 677              		.loc 1 204 0 is_stmt 0 discriminator 1
 678 023e FFF7FEFF 		bl	getMotorCurrentR
 679              	.LVL91:
 680 0242 FFF7FEFF 		bl	__aeabi_i2d
 681              	.LVL92:
 682 0246 36A3     		adr	r3, .L57
 683 0248 D3E90023 		ldrd	r2, [r3]
 684 024c FFF7FEFF 		bl	__aeabi_dmul
 685              	.LVL93:
 686 0250 0022     		movs	r2, #0
 687 0252 0023     		movs	r3, #0
 688 0254 FFF7FEFF 		bl	__aeabi_dcmplt
 689              	.LVL94:
 690 0258 78B1     		cbz	r0, .L53
 204:./Src/main.c  ****       MotorL_pwm(0);
 691              		.loc 1 204 0 discriminator 2
 692 025a FFF7FEFF 		bl	getMotorCurrentR
 693              	.LVL95:
 694 025e FFF7FEFF 		bl	__aeabi_i2d
 695              	.LVL96:
 696 0262 2FA3     		adr	r3, .L57
 697 0264 D3E90023 		ldrd	r2, [r3]
 698 0268 FFF7FEFF 		bl	__aeabi_dmul
 699              	.LVL97:
 700 026c 0022     		movs	r2, #0
 701 026e 374B     		ldr	r3, .L57+44
 702 0270 FFF7FEFF 		bl	__aeabi_dcmplt
 703              	.LVL98:
 704 0274 0028     		cmp	r0, #0
 705 0276 39D1     		bne	.L36
 706 0278 0DE0     		b	.L39
 707              	.L53:
 204:./Src/main.c  ****       MotorL_pwm(0);
 708              		.loc 1 204 0 discriminator 3
 709 027a FFF7FEFF 		bl	getMotorCurrentR
 710              	.LVL99:
 711 027e FFF7FEFF 		bl	__aeabi_i2d
 712              	.LVL100:
 713 0282 27A3     		adr	r3, .L57
 714 0284 D3E90023 		ldrd	r2, [r3]
 715 0288 FFF7FEFF 		bl	__aeabi_dmul
 716              	.LVL101:
 717 028c 0022     		movs	r2, #0
 718 028e 304B     		ldr	r3, .L57+48
 719 0290 FFF7FEFF 		bl	__aeabi_dcmpgt
 720              	.LVL102:
 721 0294 50BB     		cbnz	r0, .L36
 722              	.L39:
 204:./Src/main.c  ****       MotorL_pwm(0);
 723              		.loc 1 204 0 discriminator 4
 724 0296 FFF7FEFF 		bl	getMotorCurrentL
 725              	.LVL103:
 726 029a FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  /tmp/ccwXPmxK.s 			page 21


 727              	.LVL104:
 728 029e 20A3     		adr	r3, .L57
 729 02a0 D3E90023 		ldrd	r2, [r3]
 730 02a4 FFF7FEFF 		bl	__aeabi_dmul
 731              	.LVL105:
 732 02a8 0022     		movs	r2, #0
 733 02aa 0023     		movs	r3, #0
 734 02ac FFF7FEFF 		bl	__aeabi_dcmplt
 735              	.LVL106:
 736 02b0 70B1     		cbz	r0, .L54
 204:./Src/main.c  ****       MotorL_pwm(0);
 737              		.loc 1 204 0 discriminator 5
 738 02b2 FFF7FEFF 		bl	getMotorCurrentL
 739              	.LVL107:
 740 02b6 FFF7FEFF 		bl	__aeabi_i2d
 741              	.LVL108:
 742 02ba 19A3     		adr	r3, .L57
 743 02bc D3E90023 		ldrd	r2, [r3]
 744 02c0 FFF7FEFF 		bl	__aeabi_dmul
 745              	.LVL109:
 746 02c4 0022     		movs	r2, #0
 747 02c6 214B     		ldr	r3, .L57+44
 748 02c8 FFF7FEFF 		bl	__aeabi_dcmplt
 749              	.LVL110:
 750 02cc 70B9     		cbnz	r0, .L36
 751 02ce 1CE0     		b	.L42
 752              	.L54:
 204:./Src/main.c  ****       MotorL_pwm(0);
 753              		.loc 1 204 0 discriminator 6
 754 02d0 FFF7FEFF 		bl	getMotorCurrentL
 755              	.LVL111:
 756 02d4 FFF7FEFF 		bl	__aeabi_i2d
 757              	.LVL112:
 758 02d8 11A3     		adr	r3, .L57
 759 02da D3E90023 		ldrd	r2, [r3]
 760 02de FFF7FEFF 		bl	__aeabi_dmul
 761              	.LVL113:
 762 02e2 0022     		movs	r2, #0
 763 02e4 1A4B     		ldr	r3, .L57+48
 764 02e6 FFF7FEFF 		bl	__aeabi_dcmpgt
 765              	.LVL114:
 766 02ea 70B1     		cbz	r0, .L42
 767              	.L36:
 205:./Src/main.c  ****       MotorR_pwm(0);
 768              		.loc 1 205 0 is_stmt 1
 769 02ec 0020     		movs	r0, #0
 770 02ee FFF7FEFF 		bl	MotorL_pwm
 771              	.LVL115:
 206:./Src/main.c  ****       Buzzer_OneLongBeep();
 772              		.loc 1 206 0
 773 02f2 0020     		movs	r0, #0
 774 02f4 FFF7FEFF 		bl	MotorR_pwm
 775              	.LVL116:
 207:./Src/main.c  ****       HAL_Delay(350);
 776              		.loc 1 207 0
 777 02f8 FFF7FEFF 		bl	Buzzer_OneLongBeep
 778              	.LVL117:
ARM GAS  /tmp/ccwXPmxK.s 			page 22


 208:./Src/main.c  ****       Power_Set(0);
 779              		.loc 1 208 0
 780 02fc 4FF4AF70 		mov	r0, #350
 781 0300 FFF7FEFF 		bl	HAL_Delay
 782              	.LVL118:
 209:./Src/main.c  ****     }
 783              		.loc 1 209 0
 784 0304 0020     		movs	r0, #0
 785 0306 FFF7FEFF 		bl	Power_Set
 786              	.LVL119:
 787              	.L42:
 788              	.LBE6:
 216:./Src/main.c  **** 
 789              		.loc 1 216 0
 790 030a 0848     		ldr	r0, .L57+12
 791 030c FFF7FEFF 		bl	HAL_IWDG_Refresh
 792              	.LVL120:
 218:./Src/main.c  **** 
 793              		.loc 1 218 0
 794 0310 FFF7FEFF 		bl	HAL_GetTick
 795              	.LVL121:
 796 0314 044B     		ldr	r3, .L57+8
 797 0316 1B68     		ldr	r3, [r3]
 798 0318 C01A     		subs	r0, r0, r3
 799 031a 0E4A     		ldr	r2, .L57+52
 800 031c 1060     		str	r0, [r2]
 222:./Src/main.c  **** 
 801              		.loc 1 222 0
 802 031e B0E6     		b	.L44
 803              	.L58:
 804              		.align	3
 805              	.L57:
 806 0320 7B14AE47 		.word	1202590843
 807 0324 E17A943F 		.word	1066695393
 808 0328 00000000 		.word	counterTemp
 809 032c 00000000 		.word	hiwdg
 810 0330 D34D6210 		.word	274877907
 811 0334 00002440 		.word	1076101120
 812 0338 00008940 		.word	1082720256
 813 033c 000089C0 		.word	-1064763392
 814 0340 E0FCFFFF 		.word	-800
 815 0344 00000000 		.word	.LC0
 816 0348 0000F841 		.word	1106771968
 817 034c 000034C0 		.word	-1070333952
 818 0350 00003440 		.word	1077149696
 819 0354 00000000 		.word	counterTempTT
 820              		.cfi_endproc
 821              	.LFE64:
 823              		.comm	counterTempTT,4,4
 824              		.comm	counterTemp,4,4
 825              		.global	speed
 826              		.comm	hiwdg,16,4
 827              		.section	.rodata.str1.4,"aMS",%progbits,1
 828              		.align	2
 829              	.LC0:
 830 0000 25693B25 		.ascii	"%i;%i\012\015\000"
 830      690A0D00 
ARM GAS  /tmp/ccwXPmxK.s 			page 23


 831              		.section	.bss.speed,"aw",%nobits
 832              		.align	1
 835              	speed:
 836 0000 0000     		.space	2
 837              		.text
 838              	.Letext0:
 839              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 840              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 841              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 842              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 843              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 844              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 845              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 846              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 847              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 848              		.file 11 "./Drivers/CMSIS/Include/core_cm3.h"
 849              		.file 12 "./Inc/ADC_R.h"
 850              		.file 13 "./Inc/ADC_L.h"
 851              		.file 14 "./Inc/motor_R.h"
 852              		.file 15 "./Inc/motor_L.h"
 853              		.file 16 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 854              		.file 17 "./Inc/varie.h"
 855              		.file 18 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 856              		.file 19 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/stdio.h"
 857              		.file 20 "./Inc/application.h"
 858              		.file 21 "./Inc/telemetry.h"
 859              		.file 22 "<built-in>"
ARM GAS  /tmp/ccwXPmxK.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccwXPmxK.s:20     .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccwXPmxK.s:25     .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccwXPmxK.s:62     .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/ccwXPmxK.s:68     .text.Error_Handler:00000000 $t
     /tmp/ccwXPmxK.s:73     .text.Error_Handler:00000000 Error_Handler
     /tmp/ccwXPmxK.s:97     .text.MX_IWDG_Init:00000000 $t
     /tmp/ccwXPmxK.s:101    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/ccwXPmxK.s:156    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/ccwXPmxK.s:163    .text.SystemClock_Config:00000000 $t
     /tmp/ccwXPmxK.s:168    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccwXPmxK.s:272    .text.SystemClock_Config:00000088 $d
     /tmp/ccwXPmxK.s:286    .text.main:00000000 $t
     /tmp/ccwXPmxK.s:291    .text.main:00000000 main
     /tmp/ccwXPmxK.s:806    .text.main:00000320 $d
                            *COM*:00000004 counterTemp
                            *COM*:00000004 counterTempTT
     /tmp/ccwXPmxK.s:835    .bss.speed:00000000 speed
     /tmp/ccwXPmxK.s:828    .rodata.str1.4:00000000 $d
     /tmp/ccwXPmxK.s:832    .bss.speed:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_ddiv
__aeabi_dadd
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_d2iz
__aeabi_dsub
__aeabi_fcmplt
__aeabi_dmul
HAL_Init
Button_init
Power_Set
Telemetry_init
Buzzer_init
Led_init
IS_Charge_init
ADC_L_init
ADC_R_init
MotorL_init
ARM GAS  /tmp/ccwXPmxK.s 			page 25


MotorR_init
HAL_Delay
Led_Set
IS_Button
applcation_init
Battery_TASK
Buzzer_TwoBeep
MotorR_start
MotorL_start
HAL_GetTick
HAL_IWDG_Refresh
Buzzer_OneLongBeep
ADC_PA3
ADC_PA2
MotorL_pwm
MotorR_pwm
memset
getMotorCurrentR
getMotorCurrentL
sprintf
Console_Log
GET_BatteryAverage
