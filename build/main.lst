ARM GAS  /tmp/ccmDHPqP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.saveConfig,"ax",%progbits
  20              		.align	2
  21              		.global	saveConfig
  22              		.thumb
  23              		.thumb_func
  25              	saveConfig:
  26              	.LFB65:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/ccmDHPqP.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "eeprom.h"
  46:./Src/main.c  **** #include "motor_L.h"
  47:./Src/main.c  **** #include "motor_R.h"
  48:./Src/main.c  **** #include "varie.h"
  49:./Src/main.c  **** #include "ADC_L.h"
  50:./Src/main.c  **** #include "ADC_R.h"
  51:./Src/main.c  **** #include "delay.h"
  52:./Src/main.c  **** #include "pid.h"
  53:./Src/main.c  **** #include "application.h"
  54:./Src/main.c  **** #include "telemetry.h"
  55:./Src/main.c  **** #include "hd44780.h"
  56:./Src/main.c  **** #include <math.h>
  57:./Src/main.c  **** 
  58:./Src/main.c  **** // copied from STMBL
  59:./Src/main.c  **** #define NO 0
  60:./Src/main.c  **** #define YES 1
  61:./Src/main.c  **** #define ABS(a) (((a) < 0.0) ? -(a) : (a))
  62:./Src/main.c  **** #define LIMIT(x, lowhigh) (((x) > (lowhigh)) ? (lowhigh) : (((x) < (-lowhigh)) ? (-lowhigh) : (x)))
  63:./Src/main.c  **** #define SAT(x, lowhigh) (((x) > (lowhigh)) ? (1.0) : (((x) < (-lowhigh)) ? (-1.0) : (0.0)))
  64:./Src/main.c  **** #define SAT2(x, low, high) (((x) > (high)) ? (1.0) : (((x) < (low)) ? (-1.0) : (0.0)))
  65:./Src/main.c  **** #define STEP(from, to, step) (((from) < (to)) ? (MIN((from) + (step), (to))) : (MAX((from) - (step)
  66:./Src/main.c  **** #define DEG(a) ((a)*M_PI / 180.0)
  67:./Src/main.c  **** #define RAD(a) ((a)*180.0 / M_PI)
  68:./Src/main.c  **** #define SIGN(a) (((a) < 0.0) ? (-1.0) : (((a) > 0.0) ? (1.0) : (0.0)))
  69:./Src/main.c  **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  70:./Src/main.c  **** #define SCALE(value, high, max) MIN(MAX(((max) - (value)) / ((max) - (high)), 0.0), 1.0)
  71:./Src/main.c  **** #define MIN(a, b) (((a) < (b)) ? (a) : (b))
  72:./Src/main.c  **** #define MAX(a, b) (((a) > (b)) ? (a) : (b))
  73:./Src/main.c  **** #define MIN3(a, b, c) MIN(a, MIN(b, c))
  74:./Src/main.c  **** #define MAX3(a, b, c) MAX(a, MAX(b, c))
  75:./Src/main.c  **** 
  76:./Src/main.c  **** #define PI 3.14159265
  77:./Src/main.c  **** 
  78:./Src/main.c  **** /* Virtual address defined by the user: 0xFFFF value is prohibited */
  79:./Src/main.c  **** uint16_t VirtAddVarTab[NB_OF_VAR] = {0x1337};
  80:./Src/main.c  **** uint16_t VarDataTab[NB_OF_VAR] = {0};
  81:./Src/main.c  **** uint16_t VarValue = 0;
  82:./Src/main.c  **** 
  83:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  84:./Src/main.c  **** 
  85:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  86:./Src/main.c  **** void SystemClock_Config(void);
  87:./Src/main.c  **** void Error_Handler(void);
  88:./Src/main.c  **** //extern struct PID_dati pid_R_;
ARM GAS  /tmp/ccmDHPqP.s 			page 3


  89:./Src/main.c  **** static void MX_IWDG_Init(void);
  90:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  91:./Src/main.c  **** 
  92:./Src/main.c  **** volatile __IO int16_t speed = 0;
  93:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  94:./Src/main.c  **** //extern struct COMMAND_data commandsequence;
  95:./Src/main.c  **** 
  96:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
  97:./Src/main.c  **** LCD_PCF8574_HandleTypeDef lcd;
  98:./Src/main.c  **** extern I2C_HandleTypeDef hi2c2;
  99:./Src/main.c  **** uint16_t saveValue = 0;
 100:./Src/main.c  **** 
 101:./Src/main.c  **** int main(void)
 102:./Src/main.c  **** {
 103:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 104:./Src/main.c  ****   HAL_Init();
 105:./Src/main.c  **** 
 106:./Src/main.c  ****   /* Configure the system clock */
 107:./Src/main.c  ****   SystemClock_Config();
 108:./Src/main.c  **** 
 109:./Src/main.c  ****   Button_init();
 110:./Src/main.c  **** 
 111:./Src/main.c  ****   Power_Set(1);
 112:./Src/main.c  **** 
 113:./Src/main.c  **** 
 114:./Src/main.c  ****   //Telemetry_init();
 115:./Src/main.c  ****   MX_I2C2_Init();
 116:./Src/main.c  **** 
 117:./Src/main.c  ****   /* Unlock the Flash Program Erase controller */
 118:./Src/main.c  ****   HAL_FLASH_Unlock();
 119:./Src/main.c  **** 
 120:./Src/main.c  ****   /* EEPROM Init */
 121:./Src/main.c  ****   EE_Init();
 122:./Src/main.c  **** 
 123:./Src/main.c  **** 
 124:./Src/main.c  ****   lcd.pcf8574.PCF_I2C_ADDRESS = 0x27;
 125:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 126:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 127:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 128:./Src/main.c  **** 	lcd.type = TYPE0;
 129:./Src/main.c  **** 
 130:./Src/main.c  **** 	if(LCD_Init(&lcd)!=LCD_OK){
 131:./Src/main.c  **** 		// error occured
 132:./Src/main.c  **** 		while(1);
 133:./Src/main.c  **** 	}
 134:./Src/main.c  **** 
 135:./Src/main.c  **** 	LCD_ClearDisplay(&lcd);
 136:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 137:./Src/main.c  **** 	LCD_WriteString(&lcd, "TranspOtter V1.1");
 138:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 139:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
 140:./Src/main.c  **** 
 141:./Src/main.c  ****   Buzzer_init();
 142:./Src/main.c  ****   Led_init();
 143:./Src/main.c  ****   IS_Charge_init();
 144:./Src/main.c  **** 
 145:./Src/main.c  ****   ADC_L_init();
ARM GAS  /tmp/ccmDHPqP.s 			page 4


 146:./Src/main.c  ****   ADC_R_init();
 147:./Src/main.c  ****   MotorL_init();
 148:./Src/main.c  ****   MotorR_init();
 149:./Src/main.c  **** 
 150:./Src/main.c  ****   EE_ReadVariable(VirtAddVarTab[0], &saveValue);
 151:./Src/main.c  **** 
 152:./Src/main.c  **** 
 153:./Src/main.c  ****   //PID_init(0,900); //pwm limit
 154:./Src/main.c  ****   //PID_set_L_costant(0.05,0.01,0.0);
 155:./Src/main.c  ****   //PID_set_R_costant(2.0,0.5,0.0);
 156:./Src/main.c  **** 
 157:./Src/main.c  **** //DebugPin_init();
 158:./Src/main.c  ****   HAL_Delay(550);
 159:./Src/main.c  ****   while(IS_Button()) {
 160:./Src/main.c  ****     Led_Set(0);
 161:./Src/main.c  ****   }
 162:./Src/main.c  **** 
 163:./Src/main.c  ****   applcation_init();
 164:./Src/main.c  ****   Battery_TASK();
 165:./Src/main.c  **** 
 166:./Src/main.c  ****   MX_IWDG_Init();
 167:./Src/main.c  **** 
 168:./Src/main.c  ****   Led_Set(1);
 169:./Src/main.c  ****   Buzzer_TwoBeep();
 170:./Src/main.c  ****   HAL_Delay(250);
 171:./Src/main.c  **** 
 172:./Src/main.c  ****   MotorR_start();
 173:./Src/main.c  ****   MotorL_start();
 174:./Src/main.c  ****   //MotorR_pwm(80);
 175:./Src/main.c  ****   //MotorL_pwm(-200);
 176:./Src/main.c  **** 
 177:./Src/main.c  ****   LCD_ClearDisplay(&lcd);
 178:./Src/main.c  ****   HAL_Delay(5);
 179:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 180:./Src/main.c  **** 	LCD_WriteString(&lcd, "Bat:");
 181:./Src/main.c  ****   LCD_SetLocation(&lcd, 8, 1);
 182:./Src/main.c  ****   LCD_WriteString(&lcd, "V");
 183:./Src/main.c  **** 
 184:./Src/main.c  ****   LCD_SetLocation(&lcd, 15, 1);
 185:./Src/main.c  ****   LCD_WriteString(&lcd, "A");
 186:./Src/main.c  **** 
 187:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 188:./Src/main.c  **** 	LCD_WriteString(&lcd, "Len:");
 189:./Src/main.c  ****   LCD_SetLocation(&lcd, 8, 0);
 190:./Src/main.c  ****   LCD_WriteString(&lcd, "m(");
 191:./Src/main.c  ****   LCD_SetLocation(&lcd, 14, 0);
 192:./Src/main.c  ****   LCD_WriteString(&lcd, "m)");
 193:./Src/main.c  **** 
 194:./Src/main.c  ****   uint32_t sinValue = 1999;
 195:./Src/main.c  ****   uint8_t state = 0;
 196:./Src/main.c  ****   int lastSpeedL = 0, lastSpeedR = 0, lastDistance = 0;
 197:./Src/main.c  ****   float setDistance = saveValue / 1000.0;
 198:./Src/main.c  ****   while(1){
 199:./Src/main.c  ****     sinValue++;
 200:./Src/main.c  ****     counterTemp = HAL_GetTick();
 201:./Src/main.c  **** 
 202:./Src/main.c  ****     if(IS_Button()) {
ARM GAS  /tmp/ccmDHPqP.s 			page 5


 203:./Src/main.c  ****       MotorL_pwm(0);
 204:./Src/main.c  ****       MotorR_pwm(0);
 205:./Src/main.c  ****       while(IS_Button()) {
 206:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 207:./Src/main.c  ****       }
 208:./Src/main.c  ****       Buzzer_OneBeep();
 209:./Src/main.c  ****       HAL_Delay(300);
 210:./Src/main.c  ****       if (IS_Button()) {
 211:./Src/main.c  ****         while(IS_Button()) {
 212:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 213:./Src/main.c  ****         }
 214:./Src/main.c  ****         Buzzer_OneLongBeep();
 215:./Src/main.c  ****         HAL_Delay(350);
 216:./Src/main.c  ****         Power_Set(0);
 217:./Src/main.c  ****       } else {
 218:./Src/main.c  ****         setDistance += 0.25;
 219:./Src/main.c  ****         if (setDistance > 2.6) {
 220:./Src/main.c  ****           setDistance = 0.25;
 221:./Src/main.c  ****         }
 222:./Src/main.c  ****         saveValue = setDistance * 1000;
 223:./Src/main.c  ****         saveConfig();
 224:./Src/main.c  ****       }
 225:./Src/main.c  ****     }
 226:./Src/main.c  **** 
 227:./Src/main.c  ****     #define VEL_P     0.9
 228:./Src/main.c  **** 
 229:./Src/main.c  ****     if ((sinValue) % (250) == 0) {
 230:./Src/main.c  ****       uint16_t distance = CLAMP(((int)ADC_PA3()) - 180, 0, 4095);
 231:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 232:./Src/main.c  ****       int speedL, speedR;
 233:./Src/main.c  **** 
 234:./Src/main.c  ****       float vel_scale = get_powerMax(GET_BatteryAverage()) * VEL_P;
 235:./Src/main.c  **** 
 236:./Src/main.c  ****       speedL = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) +  CLAMP((steering / 10.
 237:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 238:./Src/main.c  **** 
 239:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 240:./Src/main.c  ****         if (distance - (int)(setDistance * 1345) > -200) {
 241:./Src/main.c  ****           MotorL_pwm(speedL);
 242:./Src/main.c  ****           MotorR_pwm(speedR);
 243:./Src/main.c  ****         } else {
 244:./Src/main.c  ****           MotorL_pwm(0);
 245:./Src/main.c  ****           MotorR_pwm(0);
 246:./Src/main.c  ****         }
 247:./Src/main.c  ****       }
 248:./Src/main.c  ****       if ((distance / 1345.0) - setDistance > 0.7 && (lastDistance / 1345.0) - setDistance > 0.7) {
 249:./Src/main.c  ****         MotorL_pwm(0);
 250:./Src/main.c  ****         MotorR_pwm(0);
 251:./Src/main.c  ****         Buzzer_OneLongBeep();
 252:./Src/main.c  ****         LCD_ClearDisplay(&lcd);
 253:./Src/main.c  ****         HAL_Delay(5);
 254:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 0);
 255:./Src/main.c  ****       	LCD_WriteString(&lcd, "Emergency Off!");
 256:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 1);
 257:./Src/main.c  ****       	LCD_WriteString(&lcd, "Keeper to fast.");
 258:./Src/main.c  ****         HAL_Delay(500);
 259:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
ARM GAS  /tmp/ccmDHPqP.s 			page 6


 260:./Src/main.c  ****         HAL_Delay(500);
 261:./Src/main.c  ****         Power_Set(0);
 262:./Src/main.c  ****       }
 263:./Src/main.c  **** 
 264:./Src/main.c  ****       if ((sinValue) % (2000) == 0) {
 265:./Src/main.c  ****         LCD_SetLocation(&lcd, 4, 0);
 266:./Src/main.c  ****         LCD_WriteFloat(&lcd,distance/1345.0,2);
 267:./Src/main.c  ****         LCD_SetLocation(&lcd, 10, 0);
 268:./Src/main.c  ****         LCD_WriteFloat(&lcd,setDistance,2);
 269:./Src/main.c  ****         LCD_SetLocation(&lcd, 4, 1);
 270:./Src/main.c  ****         LCD_WriteFloat(&lcd,GET_BatteryAverage(),1);
 271:./Src/main.c  ****         LCD_SetLocation(&lcd, 11, 1);
 272:./Src/main.c  ****         LCD_WriteFloat(&lcd,MAX(ABS(getMotorCurrentR() * 0.02), ABS(getMotorCurrentL() * 0.02)),2);
 273:./Src/main.c  ****       }
 274:./Src/main.c  **** 
 275:./Src/main.c  **** 
 276:./Src/main.c  ****       //char str[100];
 277:./Src/main.c  ****       //memset(&str[0], 0, sizeof(str));
 278:./Src/main.c  ****       //sprintf(str, "%i;%i\n\r", distance, steering);
 279:./Src/main.c  ****       //Console_Log(str);
 280:./Src/main.c  **** 
 281:./Src/main.c  **** 
 282:./Src/main.c  ****       lastSpeedL = speedL;
 283:./Src/main.c  ****       lastSpeedR = speedR;
 284:./Src/main.c  ****       lastDistance = distance;
 285:./Src/main.c  ****     }
 286:./Src/main.c  **** 
 287:./Src/main.c  **** 
 288:./Src/main.c  **** 
 289:./Src/main.c  ****     Battery_TASK();
 290:./Src/main.c  ****     //Current_Motor_TASK();
 291:./Src/main.c  ****     //sWiiNunchuck_TASK();
 292:./Src/main.c  ****     //applcation_TASK();
 293:./Src/main.c  ****     //Telemetry_TASK();
 294:./Src/main.c  **** 
 295:./Src/main.c  ****     //Batteria Scarica?
 296:./Src/main.c  ****     if(ABS(getMotorCurrentR() * 0.02) > 20.0 || ABS(getMotorCurrentL() * 0.02) > 20.0){
 297:./Src/main.c  ****       MotorL_pwm(0);
 298:./Src/main.c  ****       MotorR_pwm(0);
 299:./Src/main.c  ****       Buzzer_OneLongBeep();
 300:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 301:./Src/main.c  ****       HAL_Delay(5);
 302:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 303:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 304:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 305:./Src/main.c  ****       LCD_WriteString(&lcd, "Overcurrent.");
 306:./Src/main.c  ****       HAL_Delay(500);
 307:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 308:./Src/main.c  ****       HAL_Delay(500);
 309:./Src/main.c  ****       Power_Set(0);
 310:./Src/main.c  ****     }
 311:./Src/main.c  **** 
 312:./Src/main.c  ****     if(GET_BatteryAverage() < 31.0){
 313:./Src/main.c  ****       MotorL_pwm(0);
 314:./Src/main.c  ****       MotorR_pwm(0);
 315:./Src/main.c  ****       Buzzer_OneLongBeep();
 316:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
ARM GAS  /tmp/ccmDHPqP.s 			page 7


 317:./Src/main.c  ****       HAL_Delay(5);
 318:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 319:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 320:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 321:./Src/main.c  ****       LCD_WriteString(&lcd, "Battery low.");
 322:./Src/main.c  ****       HAL_Delay(500);
 323:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 324:./Src/main.c  ****       HAL_Delay(500);
 325:./Src/main.c  ****       Power_Set(0);
 326:./Src/main.c  ****     }
 327:./Src/main.c  ****     //In Carica?
 328:./Src/main.c  ****     /*if(IS_Charge()==0){
 329:./Src/main.c  ****       WAIT_CHARGE_FINISH();
 330:./Src/main.c  ****     }*/
 331:./Src/main.c  **** 
 332:./Src/main.c  ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 333:./Src/main.c  **** 
 334:./Src/main.c  ****     counterTempTT = HAL_GetTick() - counterTemp;
 335:./Src/main.c  **** 
 336:./Src/main.c  **** 
 337:./Src/main.c  **** 
 338:./Src/main.c  ****   }
 339:./Src/main.c  **** 
 340:./Src/main.c  **** }
 341:./Src/main.c  **** 
 342:./Src/main.c  **** void saveConfig() {
  28              		.loc 1 342 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 343:./Src/main.c  ****   EE_WriteVariable(VirtAddVarTab[0], saveValue);
  37              		.loc 1 343 0
  38 0002 034B     		ldr	r3, .L3
  39 0004 1988     		ldrh	r1, [r3]
  40 0006 034B     		ldr	r3, .L3+4
  41 0008 1888     		ldrh	r0, [r3]
  42 000a FFF7FEFF 		bl	EE_WriteVariable
  43              	.LVL0:
  44 000e 08BD     		pop	{r3, pc}
  45              	.L4:
  46              		.align	2
  47              	.L3:
  48 0010 00000000 		.word	.LANCHOR0
  49 0014 00000000 		.word	.LANCHOR1
  50              		.cfi_endproc
  51              	.LFE65:
  53              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  54              		.align	2
  55              		.global	HAL_ADC_ConvCpltCallback
  56              		.thumb
  57              		.thumb_func
  59              	HAL_ADC_ConvCpltCallback:
ARM GAS  /tmp/ccmDHPqP.s 			page 8


  60              	.LFB68:
 344:./Src/main.c  **** }
 345:./Src/main.c  **** 
 346:./Src/main.c  **** /** System Clock Configuration
 347:./Src/main.c  **** */
 348:./Src/main.c  **** void SystemClock_Config(void)
 349:./Src/main.c  **** {
 350:./Src/main.c  **** 
 351:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 352:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 353:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 354:./Src/main.c  **** 
 355:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 356:./Src/main.c  ****     */
 357:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 358:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 359:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 360:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 361:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 362:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 363:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 364:./Src/main.c  ****   {
 365:./Src/main.c  ****     Error_Handler();
 366:./Src/main.c  ****   }
 367:./Src/main.c  **** 
 368:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 369:./Src/main.c  ****     */
 370:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 371:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 372:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 373:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 374:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 375:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 376:./Src/main.c  **** 
 377:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 378:./Src/main.c  ****   {
 379:./Src/main.c  ****     Error_Handler();
 380:./Src/main.c  ****   }
 381:./Src/main.c  **** 
 382:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 383:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 384:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 385:./Src/main.c  ****   {
 386:./Src/main.c  ****     Error_Handler();
 387:./Src/main.c  ****   }
 388:./Src/main.c  **** 
 389:./Src/main.c  ****     /**Configure the Systick interrupt time
 390:./Src/main.c  ****     */
 391:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 392:./Src/main.c  **** 
 393:./Src/main.c  ****     /**Configure the Systick
 394:./Src/main.c  ****     */
 395:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 396:./Src/main.c  **** 
 397:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 398:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 399:./Src/main.c  **** }
ARM GAS  /tmp/ccmDHPqP.s 			page 9


 400:./Src/main.c  **** 
 401:./Src/main.c  **** /* IWDG init function */
 402:./Src/main.c  **** static void MX_IWDG_Init(void)
 403:./Src/main.c  **** {
 404:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 405:./Src/main.c  ****   hiwdg.Instance = IWDG;
 406:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 407:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 408:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 409:./Src/main.c  ****   {
 410:./Src/main.c  ****     Error_Handler();
 411:./Src/main.c  ****   }
 412:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 413:./Src/main.c  **** }
 414:./Src/main.c  **** 
 415:./Src/main.c  **** 
 416:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
  61              		.loc 1 416 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              	.LVL1:
  66 0000 10B5     		push	{r4, lr}
  67              	.LCFI1:
  68              		.cfi_def_cfa_offset 8
  69              		.cfi_offset 4, -8
  70              		.cfi_offset 14, -4
  71 0002 0446     		mov	r4, r0
 417:./Src/main.c  ****   if(hadc->Instance == ADC1){
  72              		.loc 1 417 0
  73 0004 0268     		ldr	r2, [r0]
  74 0006 064B     		ldr	r3, .L9
  75 0008 9A42     		cmp	r2, r3
  76 000a 01D1     		bne	.L6
 418:./Src/main.c  ****     ADC_R_callback();
  77              		.loc 1 418 0
  78 000c FFF7FEFF 		bl	ADC_R_callback
  79              	.LVL2:
  80              	.L6:
 419:./Src/main.c  ****   }
 420:./Src/main.c  ****   if(hadc->Instance == ADC3){
  81              		.loc 1 420 0
  82 0010 2268     		ldr	r2, [r4]
  83 0012 044B     		ldr	r3, .L9+4
  84 0014 9A42     		cmp	r2, r3
  85 0016 01D1     		bne	.L5
 421:./Src/main.c  ****     ADC_L_callback();
  86              		.loc 1 421 0
  87 0018 FFF7FEFF 		bl	ADC_L_callback
  88              	.LVL3:
  89              	.L5:
  90 001c 10BD     		pop	{r4, pc}
  91              	.LVL4:
  92              	.L10:
  93 001e 00BF     		.align	2
  94              	.L9:
  95 0020 00240140 		.word	1073816576
ARM GAS  /tmp/ccmDHPqP.s 			page 10


  96 0024 003C0140 		.word	1073822720
  97              		.cfi_endproc
  98              	.LFE68:
 100              		.section	.text.Error_Handler,"ax",%progbits
 101              		.align	2
 102              		.global	Error_Handler
 103              		.thumb
 104              		.thumb_func
 106              	Error_Handler:
 107              	.LFB69:
 422:./Src/main.c  ****   }
 423:./Src/main.c  **** }
 424:./Src/main.c  **** 
 425:./Src/main.c  **** 
 426:./Src/main.c  **** /**
 427:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 428:./Src/main.c  ****   * @param  None
 429:./Src/main.c  ****   * @retval None
 430:./Src/main.c  ****   */
 431:./Src/main.c  **** void Error_Handler(void)
 432:./Src/main.c  **** {
 108              		.loc 1 432 0
 109              		.cfi_startproc
 110              		@ Volatile: function does not return.
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113 0000 08B5     		push	{r3, lr}
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 3, -8
 117              		.cfi_offset 14, -4
 433:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 434:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 435:./Src/main.c  ****   MotorR_stop();
 118              		.loc 1 435 0
 119 0002 FFF7FEFF 		bl	MotorR_stop
 120              	.LVL5:
 436:./Src/main.c  ****   MotorL_stop();
 121              		.loc 1 436 0
 122 0006 FFF7FEFF 		bl	MotorL_stop
 123              	.LVL6:
 124              	.L12:
 125 000a FEE7     		b	.L12
 126              		.cfi_endproc
 127              	.LFE69:
 129              		.section	.text.MX_IWDG_Init,"ax",%progbits
 130              		.align	2
 131              		.thumb
 132              		.thumb_func
 134              	MX_IWDG_Init:
 135              	.LFB67:
 403:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 136              		.loc 1 403 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 8
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccmDHPqP.s 			page 11


 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 4
 143              		.cfi_offset 14, -4
 144 0002 83B0     		sub	sp, sp, #12
 145              	.LCFI4:
 146              		.cfi_def_cfa_offset 16
 147              	.LBB2:
 404:./Src/main.c  ****   hiwdg.Instance = IWDG;
 148              		.loc 1 404 0
 149 0004 0E4B     		ldr	r3, .L17
 150 0006 DA69     		ldr	r2, [r3, #28]
 151 0008 42F40062 		orr	r2, r2, #2048
 152 000c DA61     		str	r2, [r3, #28]
 153 000e DB69     		ldr	r3, [r3, #28]
 154 0010 03F40063 		and	r3, r3, #2048
 155 0014 0193     		str	r3, [sp, #4]
 156 0016 019B     		ldr	r3, [sp, #4]
 157              	.LBE2:
 405:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 158              		.loc 1 405 0
 159 0018 0A48     		ldr	r0, .L17+4
 160 001a 0B4B     		ldr	r3, .L17+8
 161 001c 0360     		str	r3, [r0]
 406:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 162              		.loc 1 406 0
 163 001e 0123     		movs	r3, #1
 164 0020 4360     		str	r3, [r0, #4]
 407:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 165              		.loc 1 407 0
 166 0022 40F6FF73 		movw	r3, #4095
 167 0026 8360     		str	r3, [r0, #8]
 408:./Src/main.c  ****   {
 168              		.loc 1 408 0
 169 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 170              	.LVL7:
 171 002c 08B1     		cbz	r0, .L15
 410:./Src/main.c  ****   }
 172              		.loc 1 410 0
 173 002e FFF7FEFF 		bl	Error_Handler
 174              	.LVL8:
 175              	.L15:
 412:./Src/main.c  **** }
 176              		.loc 1 412 0
 177 0032 0448     		ldr	r0, .L17+4
 178 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 179              	.LVL9:
 413:./Src/main.c  **** 
 180              		.loc 1 413 0
 181 0038 03B0     		add	sp, sp, #12
 182              	.LCFI5:
 183              		.cfi_def_cfa_offset 4
 184              		@ sp needed
 185 003a 5DF804FB 		ldr	pc, [sp], #4
 186              	.L18:
 187 003e 00BF     		.align	2
 188              	.L17:
 189 0040 00100240 		.word	1073876992
ARM GAS  /tmp/ccmDHPqP.s 			page 12


 190 0044 00000000 		.word	hiwdg
 191 0048 00300040 		.word	1073754112
 192              		.cfi_endproc
 193              	.LFE67:
 195              		.section	.text.SystemClock_Config,"ax",%progbits
 196              		.align	2
 197              		.global	SystemClock_Config
 198              		.thumb
 199              		.thumb_func
 201              	SystemClock_Config:
 202              	.LFB66:
 349:./Src/main.c  **** 
 203              		.loc 1 349 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 88
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 00B5     		push	{lr}
 208              	.LCFI6:
 209              		.cfi_def_cfa_offset 4
 210              		.cfi_offset 14, -4
 211 0002 97B0     		sub	sp, sp, #92
 212              	.LCFI7:
 213              		.cfi_def_cfa_offset 96
 357:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 214              		.loc 1 357 0
 215 0004 0223     		movs	r3, #2
 216 0006 0C93     		str	r3, [sp, #48]
 358:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 217              		.loc 1 358 0
 218 0008 0122     		movs	r2, #1
 219 000a 1092     		str	r2, [sp, #64]
 359:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 220              		.loc 1 359 0
 221 000c 1022     		movs	r2, #16
 222 000e 1192     		str	r2, [sp, #68]
 360:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 223              		.loc 1 360 0
 224 0010 1393     		str	r3, [sp, #76]
 361:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 225              		.loc 1 361 0
 226 0012 0023     		movs	r3, #0
 227 0014 1493     		str	r3, [sp, #80]
 362:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 228              		.loc 1 362 0
 229 0016 4FF46013 		mov	r3, #3670016
 230 001a 1593     		str	r3, [sp, #84]
 363:./Src/main.c  ****   {
 231              		.loc 1 363 0
 232 001c 0CA8     		add	r0, sp, #48
 233 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 234              	.LVL10:
 235 0022 08B1     		cbz	r0, .L20
 365:./Src/main.c  ****   }
 236              		.loc 1 365 0
 237 0024 FFF7FEFF 		bl	Error_Handler
 238              	.LVL11:
 239              	.L20:
ARM GAS  /tmp/ccmDHPqP.s 			page 13


 370:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 240              		.loc 1 370 0
 241 0028 0F23     		movs	r3, #15
 242 002a 0793     		str	r3, [sp, #28]
 372:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 243              		.loc 1 372 0
 244 002c 0221     		movs	r1, #2
 245 002e 0891     		str	r1, [sp, #32]
 373:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 246              		.loc 1 373 0
 247 0030 0023     		movs	r3, #0
 248 0032 0993     		str	r3, [sp, #36]
 374:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 249              		.loc 1 374 0
 250 0034 4FF48062 		mov	r2, #1024
 251 0038 0A92     		str	r2, [sp, #40]
 375:./Src/main.c  **** 
 252              		.loc 1 375 0
 253 003a 0B93     		str	r3, [sp, #44]
 377:./Src/main.c  ****   {
 254              		.loc 1 377 0
 255 003c 07A8     		add	r0, sp, #28
 256 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 257              	.LVL12:
 258 0042 08B1     		cbz	r0, .L21
 379:./Src/main.c  ****   }
 259              		.loc 1 379 0
 260 0044 FFF7FEFF 		bl	Error_Handler
 261              	.LVL13:
 262              	.L21:
 382:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 263              		.loc 1 382 0
 264 0048 0223     		movs	r3, #2
 265 004a 0193     		str	r3, [sp, #4]
 383:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 266              		.loc 1 383 0
 267 004c 4FF44043 		mov	r3, #49152
 268 0050 0393     		str	r3, [sp, #12]
 384:./Src/main.c  ****   {
 269              		.loc 1 384 0
 270 0052 01A8     		add	r0, sp, #4
 271 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 272              	.LVL14:
 273 0058 08B1     		cbz	r0, .L22
 386:./Src/main.c  ****   }
 274              		.loc 1 386 0
 275 005a FFF7FEFF 		bl	Error_Handler
 276              	.LVL15:
 277              	.L22:
 391:./Src/main.c  **** 
 278              		.loc 1 391 0
 279 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 280              	.LVL16:
 281 0062 094B     		ldr	r3, .L24
 282 0064 A3FB0030 		umull	r3, r0, r3, r0
 283 0068 8009     		lsrs	r0, r0, #6
 284 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
ARM GAS  /tmp/ccmDHPqP.s 			page 14


 285              	.LVL17:
 395:./Src/main.c  **** 
 286              		.loc 1 395 0
 287 006e 0420     		movs	r0, #4
 288 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 289              	.LVL18:
 398:./Src/main.c  **** }
 290              		.loc 1 398 0
 291 0074 0022     		movs	r2, #0
 292 0076 1146     		mov	r1, r2
 293 0078 4FF0FF30 		mov	r0, #-1
 294 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 295              	.LVL19:
 399:./Src/main.c  **** 
 296              		.loc 1 399 0
 297 0080 17B0     		add	sp, sp, #92
 298              	.LCFI8:
 299              		.cfi_def_cfa_offset 4
 300              		@ sp needed
 301 0082 5DF804FB 		ldr	pc, [sp], #4
 302              	.L25:
 303 0086 00BF     		.align	2
 304              	.L24:
 305 0088 D34D6210 		.word	274877907
 306              		.cfi_endproc
 307              	.LFE66:
 309              		.global	__aeabi_i2d
 310              		.global	__aeabi_ddiv
 311              		.global	__aeabi_d2f
 312              		.global	__aeabi_fadd
 313              		.global	__aeabi_f2d
 314              		.global	__aeabi_dcmpgt
 315              		.global	__aeabi_fmul
 316              		.global	__aeabi_f2uiz
 317              		.global	__aeabi_dmul
 318              		.global	__aeabi_f2iz
 319              		.global	__aeabi_i2f
 320              		.global	__aeabi_dcmplt
 321              		.global	__aeabi_dadd
 322              		.global	__aeabi_d2iz
 323              		.global	__aeabi_dsub
 324              		.global	__aeabi_fcmplt
 325              		.section	.text.main,"ax",%progbits
 326              		.align	2
 327              		.global	main
 328              		.thumb
 329              		.thumb_func
 331              	main:
 332              	.LFB64:
 102:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 333              		.loc 1 102 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 24
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 338              	.LCFI9:
 339              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/ccmDHPqP.s 			page 15


 340              		.cfi_offset 4, -36
 341              		.cfi_offset 5, -32
 342              		.cfi_offset 6, -28
 343              		.cfi_offset 7, -24
 344              		.cfi_offset 8, -20
 345              		.cfi_offset 9, -16
 346              		.cfi_offset 10, -12
 347              		.cfi_offset 11, -8
 348              		.cfi_offset 14, -4
 349 0004 89B0     		sub	sp, sp, #36
 350              	.LCFI10:
 351              		.cfi_def_cfa_offset 72
 104:./Src/main.c  **** 
 352              		.loc 1 104 0
 353 0006 FFF7FEFF 		bl	HAL_Init
 354              	.LVL20:
 107:./Src/main.c  **** 
 355              		.loc 1 107 0
 356 000a FFF7FEFF 		bl	SystemClock_Config
 357              	.LVL21:
 109:./Src/main.c  **** 
 358              		.loc 1 109 0
 359 000e FFF7FEFF 		bl	Button_init
 360              	.LVL22:
 111:./Src/main.c  **** 
 361              		.loc 1 111 0
 362 0012 0120     		movs	r0, #1
 363 0014 FFF7FEFF 		bl	Power_Set
 364              	.LVL23:
 115:./Src/main.c  **** 
 365              		.loc 1 115 0
 366 0018 FFF7FEFF 		bl	MX_I2C2_Init
 367              	.LVL24:
 118:./Src/main.c  **** 
 368              		.loc 1 118 0
 369 001c FFF7FEFF 		bl	HAL_FLASH_Unlock
 370              	.LVL25:
 121:./Src/main.c  **** 
 371              		.loc 1 121 0
 372 0020 FFF7FEFF 		bl	EE_Init
 373              	.LVL26:
 124:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 374              		.loc 1 124 0
 375 0024 C44E     		ldr	r6, .L133+16
 376 0026 2723     		movs	r3, #39
 377 0028 86F84030 		strb	r3, [r6, #64]
 125:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 378              		.loc 1 125 0
 379 002c 4FF47A73 		mov	r3, #1000
 380 0030 7364     		str	r3, [r6, #68]
 126:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 381              		.loc 1 126 0
 382 0032 06F14804 		add	r4, r6, #72
 383 0036 C14D     		ldr	r5, .L133+20
 384 0038 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 385 003a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 386 003c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccmDHPqP.s 			page 16


 387 003e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 388 0040 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 389 0042 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 390 0044 95E80700 		ldmia	r5, {r0, r1, r2}
 391 0048 84E80700 		stmia	r4, {r0, r1, r2}
 127:./Src/main.c  **** 	lcd.type = TYPE0;
 392              		.loc 1 127 0
 393 004c 0123     		movs	r3, #1
 394 004e 3370     		strb	r3, [r6]
 128:./Src/main.c  **** 
 395              		.loc 1 128 0
 396 0050 0023     		movs	r3, #0
 397 0052 86F83C30 		strb	r3, [r6, #60]
 130:./Src/main.c  **** 		// error occured
 398              		.loc 1 130 0
 399 0056 3046     		mov	r0, r6
 400 0058 FFF7FEFF 		bl	LCD_Init
 401              	.LVL27:
 402 005c 00B1     		cbz	r0, .L27
 403              	.L28:
 404 005e FEE7     		b	.L28
 405              	.L27:
 135:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 406              		.loc 1 135 0
 407 0060 B54C     		ldr	r4, .L133+16
 408 0062 2046     		mov	r0, r4
 409 0064 FFF7FEFF 		bl	LCD_ClearDisplay
 410              	.LVL28:
 136:./Src/main.c  **** 	LCD_WriteString(&lcd, "TranspOtter V1.1");
 411              		.loc 1 136 0
 412 0068 0022     		movs	r2, #0
 413 006a 1146     		mov	r1, r2
 414 006c 2046     		mov	r0, r4
 415 006e FFF7FEFF 		bl	LCD_SetLocation
 416              	.LVL29:
 137:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 417              		.loc 1 137 0
 418 0072 B349     		ldr	r1, .L133+24
 419 0074 2046     		mov	r0, r4
 420 0076 FFF7FEFF 		bl	LCD_WriteString
 421              	.LVL30:
 138:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
 422              		.loc 1 138 0
 423 007a 0122     		movs	r2, #1
 424 007c 0021     		movs	r1, #0
 425 007e 2046     		mov	r0, r4
 426 0080 FFF7FEFF 		bl	LCD_SetLocation
 427              	.LVL31:
 139:./Src/main.c  **** 
 428              		.loc 1 139 0
 429 0084 AF49     		ldr	r1, .L133+28
 430 0086 2046     		mov	r0, r4
 431 0088 FFF7FEFF 		bl	LCD_WriteString
 432              	.LVL32:
 141:./Src/main.c  ****   Led_init();
 433              		.loc 1 141 0
 434 008c FFF7FEFF 		bl	Buzzer_init
ARM GAS  /tmp/ccmDHPqP.s 			page 17


 435              	.LVL33:
 142:./Src/main.c  ****   IS_Charge_init();
 436              		.loc 1 142 0
 437 0090 FFF7FEFF 		bl	Led_init
 438              	.LVL34:
 143:./Src/main.c  **** 
 439              		.loc 1 143 0
 440 0094 FFF7FEFF 		bl	IS_Charge_init
 441              	.LVL35:
 145:./Src/main.c  ****   ADC_R_init();
 442              		.loc 1 145 0
 443 0098 FFF7FEFF 		bl	ADC_L_init
 444              	.LVL36:
 146:./Src/main.c  ****   MotorL_init();
 445              		.loc 1 146 0
 446 009c FFF7FEFF 		bl	ADC_R_init
 447              	.LVL37:
 147:./Src/main.c  ****   MotorR_init();
 448              		.loc 1 147 0
 449 00a0 FFF7FEFF 		bl	MotorL_init
 450              	.LVL38:
 148:./Src/main.c  **** 
 451              		.loc 1 148 0
 452 00a4 FFF7FEFF 		bl	MotorR_init
 453              	.LVL39:
 150:./Src/main.c  **** 
 454              		.loc 1 150 0
 455 00a8 A749     		ldr	r1, .L133+32
 456 00aa A84B     		ldr	r3, .L133+36
 457 00ac 1888     		ldrh	r0, [r3]
 458 00ae FFF7FEFF 		bl	EE_ReadVariable
 459              	.LVL40:
 158:./Src/main.c  ****   while(IS_Button()) {
 460              		.loc 1 158 0
 461 00b2 40F22620 		movw	r0, #550
 462 00b6 FFF7FEFF 		bl	HAL_Delay
 463              	.LVL41:
 464              	.LBB3:
 159:./Src/main.c  ****     Led_Set(0);
 465              		.loc 1 159 0
 466 00ba 02E0     		b	.L29
 467              	.L30:
 160:./Src/main.c  ****   }
 468              		.loc 1 160 0
 469 00bc 0020     		movs	r0, #0
 470 00be FFF7FEFF 		bl	Led_Set
 471              	.LVL42:
 472              	.L29:
 159:./Src/main.c  ****     Led_Set(0);
 473              		.loc 1 159 0
 474 00c2 FFF7FEFF 		bl	IS_Button
 475              	.LVL43:
 476 00c6 0028     		cmp	r0, #0
 477 00c8 F8D1     		bne	.L30
 478              	.LBE3:
 163:./Src/main.c  ****   Battery_TASK();
 479              		.loc 1 163 0
ARM GAS  /tmp/ccmDHPqP.s 			page 18


 480 00ca FFF7FEFF 		bl	applcation_init
 481              	.LVL44:
 164:./Src/main.c  **** 
 482              		.loc 1 164 0
 483 00ce FFF7FEFF 		bl	Battery_TASK
 484              	.LVL45:
 166:./Src/main.c  **** 
 485              		.loc 1 166 0
 486 00d2 FFF7FEFF 		bl	MX_IWDG_Init
 487              	.LVL46:
 168:./Src/main.c  ****   Buzzer_TwoBeep();
 488              		.loc 1 168 0
 489 00d6 0120     		movs	r0, #1
 490 00d8 FFF7FEFF 		bl	Led_Set
 491              	.LVL47:
 169:./Src/main.c  ****   HAL_Delay(250);
 492              		.loc 1 169 0
 493 00dc FFF7FEFF 		bl	Buzzer_TwoBeep
 494              	.LVL48:
 170:./Src/main.c  **** 
 495              		.loc 1 170 0
 496 00e0 FA20     		movs	r0, #250
 497 00e2 FFF7FEFF 		bl	HAL_Delay
 498              	.LVL49:
 172:./Src/main.c  ****   MotorL_start();
 499              		.loc 1 172 0
 500 00e6 FFF7FEFF 		bl	MotorR_start
 501              	.LVL50:
 173:./Src/main.c  ****   //MotorR_pwm(80);
 502              		.loc 1 173 0
 503 00ea FFF7FEFF 		bl	MotorL_start
 504              	.LVL51:
 177:./Src/main.c  ****   HAL_Delay(5);
 505              		.loc 1 177 0
 506 00ee 924C     		ldr	r4, .L133+16
 507 00f0 2046     		mov	r0, r4
 508 00f2 FFF7FEFF 		bl	LCD_ClearDisplay
 509              	.LVL52:
 178:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 510              		.loc 1 178 0
 511 00f6 0520     		movs	r0, #5
 512 00f8 FFF7FEFF 		bl	HAL_Delay
 513              	.LVL53:
 179:./Src/main.c  **** 	LCD_WriteString(&lcd, "Bat:");
 514              		.loc 1 179 0
 515 00fc 0122     		movs	r2, #1
 516 00fe 0021     		movs	r1, #0
 517 0100 2046     		mov	r0, r4
 518 0102 FFF7FEFF 		bl	LCD_SetLocation
 519              	.LVL54:
 180:./Src/main.c  ****   LCD_SetLocation(&lcd, 8, 1);
 520              		.loc 1 180 0
 521 0106 9249     		ldr	r1, .L133+40
 522 0108 2046     		mov	r0, r4
 523 010a FFF7FEFF 		bl	LCD_WriteString
 524              	.LVL55:
 181:./Src/main.c  ****   LCD_WriteString(&lcd, "V");
ARM GAS  /tmp/ccmDHPqP.s 			page 19


 525              		.loc 1 181 0
 526 010e 0122     		movs	r2, #1
 527 0110 0821     		movs	r1, #8
 528 0112 2046     		mov	r0, r4
 529 0114 FFF7FEFF 		bl	LCD_SetLocation
 530              	.LVL56:
 182:./Src/main.c  **** 
 531              		.loc 1 182 0
 532 0118 8E49     		ldr	r1, .L133+44
 533 011a 2046     		mov	r0, r4
 534 011c FFF7FEFF 		bl	LCD_WriteString
 535              	.LVL57:
 184:./Src/main.c  ****   LCD_WriteString(&lcd, "A");
 536              		.loc 1 184 0
 537 0120 0122     		movs	r2, #1
 538 0122 0F21     		movs	r1, #15
 539 0124 2046     		mov	r0, r4
 540 0126 FFF7FEFF 		bl	LCD_SetLocation
 541              	.LVL58:
 185:./Src/main.c  **** 
 542              		.loc 1 185 0
 543 012a 8B49     		ldr	r1, .L133+48
 544 012c 2046     		mov	r0, r4
 545 012e FFF7FEFF 		bl	LCD_WriteString
 546              	.LVL59:
 187:./Src/main.c  **** 	LCD_WriteString(&lcd, "Len:");
 547              		.loc 1 187 0
 548 0132 0022     		movs	r2, #0
 549 0134 1146     		mov	r1, r2
 550 0136 2046     		mov	r0, r4
 551 0138 FFF7FEFF 		bl	LCD_SetLocation
 552              	.LVL60:
 188:./Src/main.c  ****   LCD_SetLocation(&lcd, 8, 0);
 553              		.loc 1 188 0
 554 013c 8749     		ldr	r1, .L133+52
 555 013e 2046     		mov	r0, r4
 556 0140 FFF7FEFF 		bl	LCD_WriteString
 557              	.LVL61:
 189:./Src/main.c  ****   LCD_WriteString(&lcd, "m(");
 558              		.loc 1 189 0
 559 0144 0022     		movs	r2, #0
 560 0146 0821     		movs	r1, #8
 561 0148 2046     		mov	r0, r4
 562 014a FFF7FEFF 		bl	LCD_SetLocation
 563              	.LVL62:
 190:./Src/main.c  ****   LCD_SetLocation(&lcd, 14, 0);
 564              		.loc 1 190 0
 565 014e 8449     		ldr	r1, .L133+56
 566 0150 2046     		mov	r0, r4
 567 0152 FFF7FEFF 		bl	LCD_WriteString
 568              	.LVL63:
 191:./Src/main.c  ****   LCD_WriteString(&lcd, "m)");
 569              		.loc 1 191 0
 570 0156 0022     		movs	r2, #0
 571 0158 0E21     		movs	r1, #14
 572 015a 2046     		mov	r0, r4
 573 015c FFF7FEFF 		bl	LCD_SetLocation
ARM GAS  /tmp/ccmDHPqP.s 			page 20


 574              	.LVL64:
 192:./Src/main.c  **** 
 575              		.loc 1 192 0
 576 0160 8049     		ldr	r1, .L133+60
 577 0162 2046     		mov	r0, r4
 578 0164 FFF7FEFF 		bl	LCD_WriteString
 579              	.LVL65:
 197:./Src/main.c  ****   while(1){
 580              		.loc 1 197 0
 581 0168 774B     		ldr	r3, .L133+32
 582 016a 1888     		ldrh	r0, [r3]
 583 016c FFF7FEFF 		bl	__aeabi_i2d
 584              	.LVL66:
 585 0170 0022     		movs	r2, #0
 586 0172 7D4B     		ldr	r3, .L133+64
 587 0174 FFF7FEFF 		bl	__aeabi_ddiv
 588              	.LVL67:
 589 0178 FFF7FEFF 		bl	__aeabi_d2f
 590              	.LVL68:
 591 017c 0746     		mov	r7, r0
 592              	.LVL69:
 196:./Src/main.c  ****   float setDistance = saveValue / 1000.0;
 593              		.loc 1 196 0
 594 017e 0023     		movs	r3, #0
 595 0180 0693     		str	r3, [sp, #24]
 596 0182 0793     		str	r3, [sp, #28]
 597 0184 9B46     		mov	fp, r3
 194:./Src/main.c  ****   uint8_t state = 0;
 598              		.loc 1 194 0
 599 0186 40F2CF76 		movw	r6, #1999
 600              	.LVL70:
 601              	.L82:
 199:./Src/main.c  ****     counterTemp = HAL_GetTick();
 602              		.loc 1 199 0
 603 018a 0136     		adds	r6, r6, #1
 604              	.LVL71:
 200:./Src/main.c  **** 
 605              		.loc 1 200 0
 606 018c FFF7FEFF 		bl	HAL_GetTick
 607              	.LVL72:
 608 0190 764B     		ldr	r3, .L133+68
 609 0192 1860     		str	r0, [r3]
 610              	.LBB4:
 202:./Src/main.c  ****       MotorL_pwm(0);
 611              		.loc 1 202 0
 612 0194 FFF7FEFF 		bl	IS_Button
 613              	.LVL73:
 614 0198 0028     		cmp	r0, #0
 615 019a 42D0     		beq	.L31
 203:./Src/main.c  ****       MotorR_pwm(0);
 616              		.loc 1 203 0
 617 019c 0020     		movs	r0, #0
 618 019e FFF7FEFF 		bl	MotorL_pwm
 619              	.LVL74:
 204:./Src/main.c  ****       while(IS_Button()) {
 620              		.loc 1 204 0
 621 01a2 0020     		movs	r0, #0
ARM GAS  /tmp/ccmDHPqP.s 			page 21


 622 01a4 FFF7FEFF 		bl	MotorR_pwm
 623              	.LVL75:
 205:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 624              		.loc 1 205 0
 625 01a8 02E0     		b	.L32
 626              	.L33:
 206:./Src/main.c  ****       }
 627              		.loc 1 206 0
 628 01aa 7148     		ldr	r0, .L133+72
 629 01ac FFF7FEFF 		bl	HAL_IWDG_Refresh
 630              	.LVL76:
 631              	.L32:
 205:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 632              		.loc 1 205 0
 633 01b0 FFF7FEFF 		bl	IS_Button
 634              	.LVL77:
 635 01b4 0028     		cmp	r0, #0
 636 01b6 F8D1     		bne	.L33
 208:./Src/main.c  ****       HAL_Delay(300);
 637              		.loc 1 208 0
 638 01b8 FFF7FEFF 		bl	Buzzer_OneBeep
 639              	.LVL78:
 209:./Src/main.c  ****       if (IS_Button()) {
 640              		.loc 1 209 0
 641 01bc 4FF49670 		mov	r0, #300
 642 01c0 FFF7FEFF 		bl	HAL_Delay
 643              	.LVL79:
 210:./Src/main.c  ****         while(IS_Button()) {
 644              		.loc 1 210 0
 645 01c4 FFF7FEFF 		bl	IS_Button
 646              	.LVL80:
 647 01c8 18B9     		cbnz	r0, .L34
 648 01ca 10E0     		b	.L118
 649              	.L36:
 212:./Src/main.c  ****         }
 650              		.loc 1 212 0
 651 01cc 6848     		ldr	r0, .L133+72
 652 01ce FFF7FEFF 		bl	HAL_IWDG_Refresh
 653              	.LVL81:
 654              	.L34:
 211:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 655              		.loc 1 211 0
 656 01d2 FFF7FEFF 		bl	IS_Button
 657              	.LVL82:
 658 01d6 0028     		cmp	r0, #0
 659 01d8 F8D1     		bne	.L36
 214:./Src/main.c  ****         HAL_Delay(350);
 660              		.loc 1 214 0
 661 01da FFF7FEFF 		bl	Buzzer_OneLongBeep
 662              	.LVL83:
 215:./Src/main.c  ****         Power_Set(0);
 663              		.loc 1 215 0
 664 01de 4FF4AF70 		mov	r0, #350
 665 01e2 FFF7FEFF 		bl	HAL_Delay
 666              	.LVL84:
 216:./Src/main.c  ****       } else {
 667              		.loc 1 216 0
ARM GAS  /tmp/ccmDHPqP.s 			page 22


 668 01e6 0020     		movs	r0, #0
 669 01e8 FFF7FEFF 		bl	Power_Set
 670              	.LVL85:
 671 01ec 19E0     		b	.L31
 672              	.L118:
 673              	.LBB5:
 218:./Src/main.c  ****         if (setDistance > 2.6) {
 674              		.loc 1 218 0
 675 01ee 4FF07A51 		mov	r1, #1048576000
 676 01f2 3846     		mov	r0, r7
 677 01f4 FFF7FEFF 		bl	__aeabi_fadd
 678              	.LVL86:
 679 01f8 0746     		mov	r7, r0
 680              	.LVL87:
 219:./Src/main.c  ****           setDistance = 0.25;
 681              		.loc 1 219 0
 682 01fa FFF7FEFF 		bl	__aeabi_f2d
 683              	.LVL88:
 684 01fe 4AA3     		adr	r3, .L133
 685 0200 D3E90023 		ldrd	r2, [r3]
 686 0204 FFF7FEFF 		bl	__aeabi_dcmpgt
 687              	.LVL89:
 688 0208 08B1     		cbz	r0, .L37
 220:./Src/main.c  ****         }
 689              		.loc 1 220 0
 690 020a 4FF07A57 		mov	r7, #1048576000
 691              	.LVL90:
 692              	.L37:
 222:./Src/main.c  ****         saveConfig();
 693              		.loc 1 222 0
 694 020e 5949     		ldr	r1, .L133+76
 695 0210 3846     		mov	r0, r7
 696 0212 FFF7FEFF 		bl	__aeabi_fmul
 697              	.LVL91:
 698 0216 FFF7FEFF 		bl	__aeabi_f2uiz
 699              	.LVL92:
 700 021a 4B4B     		ldr	r3, .L133+32
 701 021c 1880     		strh	r0, [r3]	@ movhi
 223:./Src/main.c  ****       }
 702              		.loc 1 223 0
 703 021e FFF7FEFF 		bl	saveConfig
 704              	.LVL93:
 705              	.L31:
 706              	.LBE5:
 707              	.LBE4:
 229:./Src/main.c  ****       uint16_t distance = CLAMP(((int)ADC_PA3()) - 180, 0, 4095);
 708              		.loc 1 229 0
 709 0222 554B     		ldr	r3, .L133+80
 710 0224 A3FB0623 		umull	r2, r3, r3, r6
 711 0228 1B09     		lsrs	r3, r3, #4
 712 022a FA22     		movs	r2, #250
 713 022c 02FB1363 		mls	r3, r2, r3, r6
 714 0230 002B     		cmp	r3, #0
 715 0232 40F0D182 		bne	.L38
 716              	.LBB6:
 230:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 717              		.loc 1 230 0
ARM GAS  /tmp/ccmDHPqP.s 			page 23


 718 0236 FFF7FEFF 		bl	ADC_PA3
 719              	.LVL94:
 720 023a B438     		subs	r0, r0, #180
 721 023c B0F5805F 		cmp	r0, #4096
 722 0240 09DA     		bge	.L84
 230:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 723              		.loc 1 230 0 is_stmt 0 discriminator 1
 724 0242 FFF7FEFF 		bl	ADC_PA3
 725              	.LVL95:
 726 0246 B428     		cmp	r0, #180
 727 0248 08D4     		bmi	.L85
 230:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 728              		.loc 1 230 0 discriminator 3
 729 024a FFF7FEFF 		bl	ADC_PA3
 730              	.LVL96:
 731 024e B438     		subs	r0, r0, #180
 732 0250 1FFA80FA 		uxth	r10, r0
 733 0254 04E0     		b	.L39
 734              	.L84:
 230:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 735              		.loc 1 230 0
 736 0256 40F6FF7A 		movw	r10, #4095
 737 025a 01E0     		b	.L39
 738              	.L85:
 739 025c 4FF0000A 		mov	r10, #0
 740              	.L39:
 741              	.LVL97:
 231:./Src/main.c  ****       int speedL, speedR;
 742              		.loc 1 231 0 is_stmt 1 discriminator 8
 743 0260 FFF7FEFF 		bl	ADC_PA2
 744              	.LVL98:
 745 0264 A0F50060 		sub	r0, r0, #2048
 746 0268 04B2     		sxth	r4, r0
 747              	.LVL99:
 234:./Src/main.c  **** 
 748              		.loc 1 234 0 discriminator 8
 749 026a FFF7FEFF 		bl	GET_BatteryAverage
 750              	.LVL100:
 751 026e FFF7FEFF 		bl	get_powerMax
 752              	.LVL101:
 753 0272 FFF7FEFF 		bl	__aeabi_f2d
 754              	.LVL102:
 755 0276 2EA3     		adr	r3, .L133+8
 756 0278 D3E90023 		ldrd	r2, [r3]
 757 027c FFF7FEFF 		bl	__aeabi_dmul
 758              	.LVL103:
 759 0280 FFF7FEFF 		bl	__aeabi_d2f
 760              	.LVL104:
 761 0284 0546     		mov	r5, r0
 762              	.LVL105:
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 763              		.loc 1 236 0 discriminator 8
 764 0286 CDF814A0 		str	r10, [sp, #20]
 765 028a 3C49     		ldr	r1, .L133+84
 766 028c 3846     		mov	r0, r7
 767              	.LVL106:
 768 028e FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  /tmp/ccmDHPqP.s 			page 24


 769              	.LVL107:
 770 0292 FFF7FEFF 		bl	__aeabi_f2iz
 771              	.LVL108:
 772 0296 C0EB0A0A 		rsb	r10, r0, r10
 773              	.LVL109:
 774 029a 5046     		mov	r0, r10
 775 029c FFF7FEFF 		bl	__aeabi_i2f
 776              	.LVL110:
 777 02a0 2946     		mov	r1, r5
 778 02a2 FFF7FEFF 		bl	__aeabi_fmul
 779              	.LVL111:
 780 02a6 FFF7FEFF 		bl	__aeabi_f2d
 781              	.LVL112:
 782 02aa CDE90201 		strd	r0, [sp, #8]
 783 02ae 2046     		mov	r0, r4
 784 02b0 FFF7FEFF 		bl	__aeabi_i2d
 785              	.LVL113:
 786 02b4 0022     		movs	r2, #0
 787 02b6 324B     		ldr	r3, .L133+88
 788 02b8 FFF7FEFF 		bl	__aeabi_ddiv
 789              	.LVL114:
 790 02bc 8046     		mov	r8, r0
 791 02be 8946     		mov	r9, r1
 792 02c0 0022     		movs	r2, #0
 793 02c2 304B     		ldr	r3, .L133+92
 794 02c4 FFF7FEFF 		bl	__aeabi_dcmpgt
 795              	.LVL115:
 796 02c8 48B9     		cbnz	r0, .L86
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 797              		.loc 1 236 0 is_stmt 0 discriminator 2
 798 02ca 0022     		movs	r2, #0
 799 02cc 2E4B     		ldr	r3, .L133+96
 800 02ce 4046     		mov	r0, r8
 801 02d0 4946     		mov	r1, r9
 802 02d2 FFF7FEFF 		bl	__aeabi_dcmplt
 803              	.LVL116:
 804 02d6 28B1     		cbz	r0, .L119
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 805              		.loc 1 236 0
 806 02d8 0020     		movs	r0, #0
 807 02da 2B49     		ldr	r1, .L133+96
 808 02dc 04E0     		b	.L40
 809              	.L86:
 810 02de 0020     		movs	r0, #0
 811 02e0 2849     		ldr	r1, .L133+92
 812 02e2 01E0     		b	.L40
 813              	.L119:
 814 02e4 4046     		mov	r0, r8
 815 02e6 4946     		mov	r1, r9
 816              	.L40:
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 817              		.loc 1 236 0 discriminator 8
 818 02e8 DDE90223 		ldrd	r2, [sp, #8]
 819 02ec FFF7FEFF 		bl	__aeabi_dadd
 820              	.LVL117:
 821 02f0 0022     		movs	r2, #0
 822 02f2 264B     		ldr	r3, .L133+100
ARM GAS  /tmp/ccmDHPqP.s 			page 25


 823 02f4 FFF7FEFF 		bl	__aeabi_dcmpgt
 824              	.LVL118:
 825 02f8 0028     		cmp	r0, #0
 826 02fa 77D1     		bne	.L88
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 827              		.loc 1 236 0 discriminator 10
 828 02fc 0022     		movs	r2, #0
 829 02fe 214B     		ldr	r3, .L133+92
 830 0300 4046     		mov	r0, r8
 831 0302 4946     		mov	r1, r9
 832 0304 FFF7FEFF 		bl	__aeabi_dcmpgt
 833              	.LVL119:
 834 0308 48B9     		cbnz	r0, .L89
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 835              		.loc 1 236 0 discriminator 13
 836 030a 0022     		movs	r2, #0
 837 030c 1E4B     		ldr	r3, .L133+96
 838 030e 4046     		mov	r0, r8
 839 0310 4946     		mov	r1, r9
 840 0312 FFF7FEFF 		bl	__aeabi_dcmplt
 841              	.LVL120:
 842 0316 D8B3     		cbz	r0, .L120
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 843              		.loc 1 236 0
 844 0318 0020     		movs	r0, #0
 845 031a 1B49     		ldr	r1, .L133+96
 846 031c 3AE0     		b	.L43
 847              	.L89:
 848 031e 0020     		movs	r0, #0
 849 0320 1849     		ldr	r1, .L133+92
 850 0322 37E0     		b	.L43
 851              	.L134:
 852 0324 AFF30080 		.align	3
 853              	.L133:
 854 0328 CDCCCCCC 		.word	-858993459
 855 032c CCCC0440 		.word	1074056396
 856 0330 CDCCCCCC 		.word	-858993459
 857 0334 CCCCEC3F 		.word	1072483532
 858 0338 00000000 		.word	lcd
 859 033c 00000000 		.word	hi2c2
 860 0340 00000000 		.word	.LC0
 861 0344 14000000 		.word	.LC1
 862 0348 00000000 		.word	.LANCHOR0
 863 034c 00000000 		.word	.LANCHOR1
 864 0350 24000000 		.word	.LC2
 865 0354 2C000000 		.word	.LC3
 866 0358 30000000 		.word	.LC4
 867 035c 34000000 		.word	.LC5
 868 0360 3C000000 		.word	.LC6
 869 0364 40000000 		.word	.LC7
 870 0368 00408F40 		.word	1083129856
 871 036c 00000000 		.word	counterTemp
 872 0370 00000000 		.word	hiwdg
 873 0374 00007A44 		.word	1148846080
 874 0378 D34D6210 		.word	274877907
 875 037c 0020A844 		.word	1151868928
 876 0380 00002440 		.word	1076101120
ARM GAS  /tmp/ccmDHPqP.s 			page 26


 877 0384 00004940 		.word	1078525952
 878 0388 000049C0 		.word	-1068957696
 879 038c 00008940 		.word	1082720256
 880              	.L120:
 881 0390 4046     		mov	r0, r8
 882 0392 4946     		mov	r1, r9
 883              	.L43:
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 884              		.loc 1 236 0 discriminator 19
 885 0394 DDE90223 		ldrd	r2, [sp, #8]
 886 0398 FFF7FEFF 		bl	__aeabi_dadd
 887              	.LVL121:
 888 039c 0022     		movs	r2, #0
 889 039e BE4B     		ldr	r3, .L135+24
 890 03a0 FFF7FEFF 		bl	__aeabi_dcmplt
 891              	.LVL122:
 892 03a4 20BB     		cbnz	r0, .L91
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 893              		.loc 1 236 0 discriminator 21
 894 03a6 0022     		movs	r2, #0
 895 03a8 BC4B     		ldr	r3, .L135+28
 896 03aa 4046     		mov	r0, r8
 897 03ac 4946     		mov	r1, r9
 898 03ae FFF7FEFF 		bl	__aeabi_dcmpgt
 899              	.LVL123:
 900 03b2 48B9     		cbnz	r0, .L92
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 901              		.loc 1 236 0 discriminator 24
 902 03b4 0022     		movs	r2, #0
 903 03b6 BA4B     		ldr	r3, .L135+32
 904 03b8 4046     		mov	r0, r8
 905 03ba 4946     		mov	r1, r9
 906 03bc FFF7FEFF 		bl	__aeabi_dcmplt
 907              	.LVL124:
 908 03c0 28B1     		cbz	r0, .L121
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 909              		.loc 1 236 0
 910 03c2 0020     		movs	r0, #0
 911 03c4 B649     		ldr	r1, .L135+32
 912 03c6 04E0     		b	.L45
 913              	.L92:
 914 03c8 0020     		movs	r0, #0
 915 03ca B449     		ldr	r1, .L135+28
 916 03cc 01E0     		b	.L45
 917              	.L121:
 918 03ce 4046     		mov	r0, r8
 919 03d0 4946     		mov	r1, r9
 920              	.L45:
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 921              		.loc 1 236 0 discriminator 30
 922 03d2 DDE90223 		ldrd	r2, [sp, #8]
 923 03d6 FFF7FEFF 		bl	__aeabi_dadd
 924              	.LVL125:
 925 03da 0246     		mov	r2, r0
 926 03dc 0B46     		mov	r3, r1
 927 03de 1046     		mov	r0, r2
 928 03e0 03F10041 		add	r1, r3, #-2147483648
ARM GAS  /tmp/ccmDHPqP.s 			page 27


 929 03e4 FFF7FEFF 		bl	__aeabi_d2iz
 930              	.LVL126:
 931 03e8 0446     		mov	r4, r0
 932              	.LVL127:
 933 03ea 03E0     		b	.L42
 934              	.LVL128:
 935              	.L88:
 236:./Src/main.c  ****       speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 10.
 936              		.loc 1 236 0
 937 03ec AD4C     		ldr	r4, .L135+36
 938              	.LVL129:
 939 03ee 01E0     		b	.L42
 940              	.LVL130:
 941              	.L91:
 942 03f0 4FF44874 		mov	r4, #800
 943              	.LVL131:
 944              	.L42:
 237:./Src/main.c  **** 
 945              		.loc 1 237 0 is_stmt 1 discriminator 32
 946 03f4 0022     		movs	r2, #0
 947 03f6 A94B     		ldr	r3, .L135+28
 948 03f8 4046     		mov	r0, r8
 949 03fa 4946     		mov	r1, r9
 950 03fc FFF7FEFF 		bl	__aeabi_dcmpgt
 951              	.LVL132:
 952 0400 48B9     		cbnz	r0, .L94
 237:./Src/main.c  **** 
 953              		.loc 1 237 0 is_stmt 0 discriminator 2
 954 0402 0022     		movs	r2, #0
 955 0404 A64B     		ldr	r3, .L135+32
 956 0406 4046     		mov	r0, r8
 957 0408 4946     		mov	r1, r9
 958 040a FFF7FEFF 		bl	__aeabi_dcmplt
 959              	.LVL133:
 960 040e 28B1     		cbz	r0, .L122
 237:./Src/main.c  **** 
 961              		.loc 1 237 0
 962 0410 0022     		movs	r2, #0
 963 0412 A34B     		ldr	r3, .L135+32
 964 0414 04E0     		b	.L47
 965              	.L94:
 966 0416 0022     		movs	r2, #0
 967 0418 A04B     		ldr	r3, .L135+28
 968 041a 01E0     		b	.L47
 969              	.L122:
 970 041c 4246     		mov	r2, r8
 971 041e 4B46     		mov	r3, r9
 972              	.L47:
 237:./Src/main.c  **** 
 973              		.loc 1 237 0 discriminator 8
 974 0420 DDE90201 		ldrd	r0, [sp, #8]
 975 0424 FFF7FEFF 		bl	__aeabi_dsub
 976              	.LVL134:
 977 0428 0022     		movs	r2, #0
 978 042a 9F4B     		ldr	r3, .L135+40
 979 042c FFF7FEFF 		bl	__aeabi_dcmpgt
 980              	.LVL135:
ARM GAS  /tmp/ccmDHPqP.s 			page 28


 981 0430 0028     		cmp	r0, #0
 982 0432 44D1     		bne	.L96
 237:./Src/main.c  **** 
 983              		.loc 1 237 0 discriminator 10
 984 0434 0022     		movs	r2, #0
 985 0436 994B     		ldr	r3, .L135+28
 986 0438 4046     		mov	r0, r8
 987 043a 4946     		mov	r1, r9
 988 043c FFF7FEFF 		bl	__aeabi_dcmpgt
 989              	.LVL136:
 990 0440 48B9     		cbnz	r0, .L97
 237:./Src/main.c  **** 
 991              		.loc 1 237 0 discriminator 13
 992 0442 0022     		movs	r2, #0
 993 0444 964B     		ldr	r3, .L135+32
 994 0446 4046     		mov	r0, r8
 995 0448 4946     		mov	r1, r9
 996 044a FFF7FEFF 		bl	__aeabi_dcmplt
 997              	.LVL137:
 998 044e 28B1     		cbz	r0, .L123
 237:./Src/main.c  **** 
 999              		.loc 1 237 0
 1000 0450 0022     		movs	r2, #0
 1001 0452 934B     		ldr	r3, .L135+32
 1002 0454 04E0     		b	.L50
 1003              	.L97:
 1004 0456 0022     		movs	r2, #0
 1005 0458 904B     		ldr	r3, .L135+28
 1006 045a 01E0     		b	.L50
 1007              	.L123:
 1008 045c 4246     		mov	r2, r8
 1009 045e 4B46     		mov	r3, r9
 1010              	.L50:
 237:./Src/main.c  **** 
 1011              		.loc 1 237 0 discriminator 19
 1012 0460 DDE90201 		ldrd	r0, [sp, #8]
 1013 0464 FFF7FEFF 		bl	__aeabi_dsub
 1014              	.LVL138:
 1015 0468 0022     		movs	r2, #0
 1016 046a 8B4B     		ldr	r3, .L135+24
 1017 046c FFF7FEFF 		bl	__aeabi_dcmplt
 1018              	.LVL139:
 1019 0470 38BB     		cbnz	r0, .L99
 237:./Src/main.c  **** 
 1020              		.loc 1 237 0 discriminator 21
 1021 0472 0022     		movs	r2, #0
 1022 0474 894B     		ldr	r3, .L135+28
 1023 0476 4046     		mov	r0, r8
 1024 0478 4946     		mov	r1, r9
 1025 047a FFF7FEFF 		bl	__aeabi_dcmpgt
 1026              	.LVL140:
 1027 047e 58B9     		cbnz	r0, .L100
 237:./Src/main.c  **** 
 1028              		.loc 1 237 0 discriminator 24
 1029 0480 0022     		movs	r2, #0
 1030 0482 874B     		ldr	r3, .L135+32
 1031 0484 4046     		mov	r0, r8
ARM GAS  /tmp/ccmDHPqP.s 			page 29


 1032 0486 4946     		mov	r1, r9
 1033 0488 FFF7FEFF 		bl	__aeabi_dcmplt
 1034              	.LVL141:
 1035 048c 40B1     		cbz	r0, .L52
 237:./Src/main.c  **** 
 1036              		.loc 1 237 0
 1037 048e 4FF00008 		mov	r8, #0
 1038 0492 DFF80C92 		ldr	r9, .L135+32
 1039 0496 03E0     		b	.L52
 1040              	.L100:
 1041 0498 4FF00008 		mov	r8, #0
 1042 049c DFF8FC91 		ldr	r9, .L135+28
 1043              	.L52:
 237:./Src/main.c  **** 
 1044              		.loc 1 237 0 discriminator 30
 1045 04a0 4246     		mov	r2, r8
 1046 04a2 4B46     		mov	r3, r9
 1047 04a4 DDE90201 		ldrd	r0, [sp, #8]
 1048 04a8 FFF7FEFF 		bl	__aeabi_dsub
 1049              	.LVL142:
 1050 04ac 0246     		mov	r2, r0
 1051 04ae 0B46     		mov	r3, r1
 1052 04b0 1046     		mov	r0, r2
 1053 04b2 03F10041 		add	r1, r3, #-2147483648
 1054 04b6 FFF7FEFF 		bl	__aeabi_d2iz
 1055              	.LVL143:
 1056 04ba 0546     		mov	r5, r0
 1057              	.LVL144:
 1058 04bc 03E0     		b	.L49
 1059              	.LVL145:
 1060              	.L96:
 237:./Src/main.c  **** 
 1061              		.loc 1 237 0
 1062 04be 794D     		ldr	r5, .L135+36
 1063              	.LVL146:
 1064 04c0 01E0     		b	.L49
 1065              	.LVL147:
 1066              	.L99:
 1067 04c2 4FF44875 		mov	r5, #800
 1068              	.LVL148:
 1069              	.L49:
 239:./Src/main.c  ****         if (distance - (int)(setDistance * 1345) > -200) {
 1070              		.loc 1 239 0 is_stmt 1 discriminator 32
 1071 04c6 0BF13203 		add	r3, fp, #50
 1072 04ca 9C42     		cmp	r4, r3
 1073 04cc 1CDA     		bge	.L54
 239:./Src/main.c  ****         if (distance - (int)(setDistance * 1345) > -200) {
 1074              		.loc 1 239 0 is_stmt 0 discriminator 1
 1075 04ce ABF1320B 		sub	fp, fp, #50
 1076              	.LVL149:
 1077 04d2 5C45     		cmp	r4, fp
 1078 04d4 18DD     		ble	.L54
 239:./Src/main.c  ****         if (distance - (int)(setDistance * 1345) > -200) {
 1079              		.loc 1 239 0 discriminator 2
 1080 04d6 079A     		ldr	r2, [sp, #28]
 1081 04d8 1346     		mov	r3, r2
 1082 04da 3233     		adds	r3, r3, #50
ARM GAS  /tmp/ccmDHPqP.s 			page 30


 1083 04dc 9D42     		cmp	r5, r3
 1084 04de 13DA     		bge	.L54
 239:./Src/main.c  ****         if (distance - (int)(setDistance * 1345) > -200) {
 1085              		.loc 1 239 0 discriminator 3
 1086 04e0 A2F13203 		sub	r3, r2, #50
 1087 04e4 9D42     		cmp	r5, r3
 1088 04e6 0FDD     		ble	.L54
 240:./Src/main.c  ****           MotorL_pwm(speedL);
 1089              		.loc 1 240 0 is_stmt 1
 1090 04e8 1AF1C70F 		cmn	r10, #199
 1091 04ec 06DB     		blt	.L55
 241:./Src/main.c  ****           MotorR_pwm(speedR);
 1092              		.loc 1 241 0
 1093 04ee 20B2     		sxth	r0, r4
 1094 04f0 FFF7FEFF 		bl	MotorL_pwm
 1095              	.LVL150:
 242:./Src/main.c  ****         } else {
 1096              		.loc 1 242 0
 1097 04f4 28B2     		sxth	r0, r5
 1098 04f6 FFF7FEFF 		bl	MotorR_pwm
 1099              	.LVL151:
 1100 04fa 05E0     		b	.L54
 1101              	.L55:
 244:./Src/main.c  ****           MotorR_pwm(0);
 1102              		.loc 1 244 0
 1103 04fc 0020     		movs	r0, #0
 1104 04fe FFF7FEFF 		bl	MotorL_pwm
 1105              	.LVL152:
 245:./Src/main.c  ****         }
 1106              		.loc 1 245 0
 1107 0502 0020     		movs	r0, #0
 1108 0504 FFF7FEFF 		bl	MotorR_pwm
 1109              	.LVL153:
 1110              	.L54:
 248:./Src/main.c  ****         MotorL_pwm(0);
 1111              		.loc 1 248 0
 1112 0508 0598     		ldr	r0, [sp, #20]
 1113 050a FFF7FEFF 		bl	__aeabi_i2d
 1114              	.LVL154:
 1115 050e 5CA3     		adr	r3, .L135
 1116 0510 D3E90023 		ldrd	r2, [r3]
 1117 0514 FFF7FEFF 		bl	__aeabi_ddiv
 1118              	.LVL155:
 1119 0518 8246     		mov	r10, r0
 1120 051a 8B46     		mov	fp, r1
 1121 051c CDE902AB 		strd	r10, [sp, #8]
 1122 0520 3846     		mov	r0, r7
 1123 0522 FFF7FEFF 		bl	__aeabi_f2d
 1124              	.LVL156:
 1125 0526 8046     		mov	r8, r0
 1126 0528 8946     		mov	r9, r1
 1127 052a 0246     		mov	r2, r0
 1128 052c 0B46     		mov	r3, r1
 1129 052e 5046     		mov	r0, r10
 1130 0530 5946     		mov	r1, fp
 1131 0532 FFF7FEFF 		bl	__aeabi_dsub
 1132              	.LVL157:
ARM GAS  /tmp/ccmDHPqP.s 			page 31


 1133 0536 54A3     		adr	r3, .L135+8
 1134 0538 D3E90023 		ldrd	r2, [r3]
 1135 053c FFF7FEFF 		bl	__aeabi_dcmpgt
 1136              	.LVL158:
 1137 0540 0028     		cmp	r0, #0
 1138 0542 41D0     		beq	.L56
 248:./Src/main.c  ****         MotorL_pwm(0);
 1139              		.loc 1 248 0 is_stmt 0 discriminator 1
 1140 0544 0698     		ldr	r0, [sp, #24]
 1141 0546 FFF7FEFF 		bl	__aeabi_i2d
 1142              	.LVL159:
 1143 054a 4DA3     		adr	r3, .L135
 1144 054c D3E90023 		ldrd	r2, [r3]
 1145 0550 FFF7FEFF 		bl	__aeabi_ddiv
 1146              	.LVL160:
 1147 0554 4246     		mov	r2, r8
 1148 0556 4B46     		mov	r3, r9
 1149 0558 FFF7FEFF 		bl	__aeabi_dsub
 1150              	.LVL161:
 1151 055c 4AA3     		adr	r3, .L135+8
 1152 055e D3E90023 		ldrd	r2, [r3]
 1153 0562 FFF7FEFF 		bl	__aeabi_dcmpgt
 1154              	.LVL162:
 1155 0566 78B3     		cbz	r0, .L56
 249:./Src/main.c  ****         MotorR_pwm(0);
 1156              		.loc 1 249 0 is_stmt 1
 1157 0568 0020     		movs	r0, #0
 1158 056a FFF7FEFF 		bl	MotorL_pwm
 1159              	.LVL163:
 250:./Src/main.c  ****         Buzzer_OneLongBeep();
 1160              		.loc 1 250 0
 1161 056e 0020     		movs	r0, #0
 1162 0570 FFF7FEFF 		bl	MotorR_pwm
 1163              	.LVL164:
 251:./Src/main.c  ****         LCD_ClearDisplay(&lcd);
 1164              		.loc 1 251 0
 1165 0574 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1166              	.LVL165:
 252:./Src/main.c  ****         HAL_Delay(5);
 1167              		.loc 1 252 0
 1168 0578 DFF840A1 		ldr	r10, .L135+60
 1169 057c 5046     		mov	r0, r10
 1170 057e FFF7FEFF 		bl	LCD_ClearDisplay
 1171              	.LVL166:
 253:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 0);
 1172              		.loc 1 253 0
 1173 0582 0520     		movs	r0, #5
 1174 0584 FFF7FEFF 		bl	HAL_Delay
 1175              	.LVL167:
 254:./Src/main.c  ****       	LCD_WriteString(&lcd, "Emergency Off!");
 1176              		.loc 1 254 0
 1177 0588 0022     		movs	r2, #0
 1178 058a 1146     		mov	r1, r2
 1179 058c 5046     		mov	r0, r10
 1180 058e FFF7FEFF 		bl	LCD_SetLocation
 1181              	.LVL168:
 255:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 1);
ARM GAS  /tmp/ccmDHPqP.s 			page 32


 1182              		.loc 1 255 0
 1183 0592 4649     		ldr	r1, .L135+44
 1184 0594 5046     		mov	r0, r10
 1185 0596 FFF7FEFF 		bl	LCD_WriteString
 1186              	.LVL169:
 256:./Src/main.c  ****       	LCD_WriteString(&lcd, "Keeper to fast.");
 1187              		.loc 1 256 0
 1188 059a 0122     		movs	r2, #1
 1189 059c 0021     		movs	r1, #0
 1190 059e 5046     		mov	r0, r10
 1191 05a0 FFF7FEFF 		bl	LCD_SetLocation
 1192              	.LVL170:
 257:./Src/main.c  ****         HAL_Delay(500);
 1193              		.loc 1 257 0
 1194 05a4 4249     		ldr	r1, .L135+48
 1195 05a6 5046     		mov	r0, r10
 1196 05a8 FFF7FEFF 		bl	LCD_WriteString
 1197              	.LVL171:
 258:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 1198              		.loc 1 258 0
 1199 05ac 4FF4FA70 		mov	r0, #500
 1200 05b0 FFF7FEFF 		bl	HAL_Delay
 1201              	.LVL172:
 259:./Src/main.c  ****         HAL_Delay(500);
 1202              		.loc 1 259 0
 1203 05b4 3F48     		ldr	r0, .L135+52
 1204 05b6 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1205              	.LVL173:
 260:./Src/main.c  ****         Power_Set(0);
 1206              		.loc 1 260 0
 1207 05ba 4FF4FA70 		mov	r0, #500
 1208 05be FFF7FEFF 		bl	HAL_Delay
 1209              	.LVL174:
 261:./Src/main.c  ****       }
 1210              		.loc 1 261 0
 1211 05c2 0020     		movs	r0, #0
 1212 05c4 FFF7FEFF 		bl	Power_Set
 1213              	.LVL175:
 1214              	.L56:
 264:./Src/main.c  ****         LCD_SetLocation(&lcd, 4, 0);
 1215              		.loc 1 264 0
 1216 05c8 3B4B     		ldr	r3, .L135+56
 1217 05ca A3FB0623 		umull	r2, r3, r3, r6
 1218 05ce DB09     		lsrs	r3, r3, #7
 1219 05d0 4FF4FA62 		mov	r2, #2000
 1220 05d4 02FB1363 		mls	r3, r2, r3, r6
 1221 05d8 002B     		cmp	r3, #0
 1222 05da 40F0F980 		bne	.L101
 1223              	.LBB7:
 265:./Src/main.c  ****         LCD_WriteFloat(&lcd,distance/1345.0,2);
 1224              		.loc 1 265 0
 1225 05de DFF8DCA0 		ldr	r10, .L135+60
 1226 05e2 0022     		movs	r2, #0
 1227 05e4 0421     		movs	r1, #4
 1228 05e6 5046     		mov	r0, r10
 1229 05e8 FFF7FEFF 		bl	LCD_SetLocation
 1230              	.LVL176:
ARM GAS  /tmp/ccmDHPqP.s 			page 33


 266:./Src/main.c  ****         LCD_SetLocation(&lcd, 10, 0);
 1231              		.loc 1 266 0
 1232 05ec 4FF0020B 		mov	fp, #2
 1233 05f0 CDF800B0 		str	fp, [sp]
 1234 05f4 DDE90223 		ldrd	r2, [sp, #8]
 1235 05f8 5046     		mov	r0, r10
 1236 05fa FFF7FEFF 		bl	LCD_WriteFloat
 1237              	.LVL177:
 267:./Src/main.c  ****         LCD_WriteFloat(&lcd,setDistance,2);
 1238              		.loc 1 267 0
 1239 05fe 0022     		movs	r2, #0
 1240 0600 0A21     		movs	r1, #10
 1241 0602 5046     		mov	r0, r10
 1242 0604 FFF7FEFF 		bl	LCD_SetLocation
 1243              	.LVL178:
 268:./Src/main.c  ****         LCD_SetLocation(&lcd, 4, 1);
 1244              		.loc 1 268 0
 1245 0608 CDF800B0 		str	fp, [sp]
 1246 060c 4246     		mov	r2, r8
 1247 060e 4B46     		mov	r3, r9
 1248 0610 5046     		mov	r0, r10
 1249 0612 FFF7FEFF 		bl	LCD_WriteFloat
 1250              	.LVL179:
 269:./Src/main.c  ****         LCD_WriteFloat(&lcd,GET_BatteryAverage(),1);
 1251              		.loc 1 269 0
 1252 0616 0122     		movs	r2, #1
 1253 0618 0421     		movs	r1, #4
 1254 061a 5046     		mov	r0, r10
 1255 061c FFF7FEFF 		bl	LCD_SetLocation
 1256              	.LVL180:
 270:./Src/main.c  ****         LCD_SetLocation(&lcd, 11, 1);
 1257              		.loc 1 270 0
 1258 0620 FFF7FEFF 		bl	GET_BatteryAverage
 1259              	.LVL181:
 1260 0624 FFF7FEFF 		bl	__aeabi_f2d
 1261              	.LVL182:
 1262 0628 4FF00108 		mov	r8, #1
 1263 062c CDF80080 		str	r8, [sp]
 1264 0630 0246     		mov	r2, r0
 1265 0632 0B46     		mov	r3, r1
 1266 0634 5046     		mov	r0, r10
 1267 0636 FFF7FEFF 		bl	LCD_WriteFloat
 1268              	.LVL183:
 271:./Src/main.c  ****         LCD_WriteFloat(&lcd,MAX(ABS(getMotorCurrentR() * 0.02), ABS(getMotorCurrentL() * 0.02)),2);
 1269              		.loc 1 271 0
 1270 063a 4246     		mov	r2, r8
 1271 063c 0B21     		movs	r1, #11
 1272 063e 5046     		mov	r0, r10
 1273 0640 FFF7FEFF 		bl	LCD_SetLocation
 1274              	.LVL184:
 272:./Src/main.c  ****       }
 1275              		.loc 1 272 0
 1276 0644 FFF7FEFF 		bl	getMotorCurrentR
 1277              	.LVL185:
 1278 0648 FFF7FEFF 		bl	__aeabi_i2d
 1279              	.LVL186:
 1280 064c 10A3     		adr	r3, .L135+16
ARM GAS  /tmp/ccmDHPqP.s 			page 34


 1281 064e D3E90023 		ldrd	r2, [r3]
 1282 0652 FFF7FEFF 		bl	__aeabi_dmul
 1283              	.LVL187:
 1284 0656 0022     		movs	r2, #0
 1285 0658 0023     		movs	r3, #0
 1286 065a FFF7FEFF 		bl	__aeabi_dcmplt
 1287              	.LVL188:
 1288 065e 78B3     		cbz	r0, .L124
 272:./Src/main.c  ****       }
 1289              		.loc 1 272 0 is_stmt 0 discriminator 1
 1290 0660 FFF7FEFF 		bl	getMotorCurrentR
 1291              	.LVL189:
 1292 0664 FFF7FEFF 		bl	__aeabi_i2d
 1293              	.LVL190:
 1294 0668 09A3     		adr	r3, .L135+16
 1295 066a D3E90023 		ldrd	r2, [r3]
 1296 066e FFF7FEFF 		bl	__aeabi_dmul
 1297              	.LVL191:
 1298 0672 8146     		mov	r9, r0
 1299 0674 01F10048 		add	r8, r1, #-2147483648
 1300 0678 2DE0     		b	.L61
 1301              	.L136:
 1302 067a 00BFAFF3 		.align	3
 1302      0080
 1303              	.L135:
 1304 0680 00000000 		.word	0
 1305 0684 00049540 		.word	1083507712
 1306 0688 66666666 		.word	1717986918
 1307 068c 6666E63F 		.word	1072064102
 1308 0690 7B14AE47 		.word	1202590843
 1309 0694 E17A943F 		.word	1066695393
 1310 0698 000089C0 		.word	-1064763392
 1311 069c 00004940 		.word	1078525952
 1312 06a0 000049C0 		.word	-1068957696
 1313 06a4 E0FCFFFF 		.word	-800
 1314 06a8 00008940 		.word	1082720256
 1315 06ac 44000000 		.word	.LC8
 1316 06b0 54000000 		.word	.LC9
 1317 06b4 00000000 		.word	hiwdg
 1318 06b8 D34D6210 		.word	274877907
 1319 06bc 00000000 		.word	lcd
 1320              	.L124:
 272:./Src/main.c  ****       }
 1321              		.loc 1 272 0 discriminator 2
 1322 06c0 FFF7FEFF 		bl	getMotorCurrentR
 1323              	.LVL192:
 1324 06c4 FFF7FEFF 		bl	__aeabi_i2d
 1325              	.LVL193:
 1326 06c8 A7A3     		adr	r3, .L137
 1327 06ca D3E90023 		ldrd	r2, [r3]
 1328 06ce FFF7FEFF 		bl	__aeabi_dmul
 1329              	.LVL194:
 1330 06d2 8146     		mov	r9, r0
 1331 06d4 8846     		mov	r8, r1
 1332              	.L61:
 272:./Src/main.c  ****       }
 1333              		.loc 1 272 0 discriminator 4
ARM GAS  /tmp/ccmDHPqP.s 			page 35


 1334 06d6 FFF7FEFF 		bl	getMotorCurrentL
 1335              	.LVL195:
 1336 06da FFF7FEFF 		bl	__aeabi_i2d
 1337              	.LVL196:
 1338 06de A2A3     		adr	r3, .L137
 1339 06e0 D3E90023 		ldrd	r2, [r3]
 1340 06e4 FFF7FEFF 		bl	__aeabi_dmul
 1341              	.LVL197:
 1342 06e8 0022     		movs	r2, #0
 1343 06ea 0023     		movs	r3, #0
 1344 06ec FFF7FEFF 		bl	__aeabi_dcmplt
 1345              	.LVL198:
 1346 06f0 58B1     		cbz	r0, .L125
 272:./Src/main.c  ****       }
 1347              		.loc 1 272 0 discriminator 5
 1348 06f2 FFF7FEFF 		bl	getMotorCurrentL
 1349              	.LVL199:
 1350 06f6 FFF7FEFF 		bl	__aeabi_i2d
 1351              	.LVL200:
 1352 06fa 9BA3     		adr	r3, .L137
 1353 06fc D3E90023 		ldrd	r2, [r3]
 1354 0700 FFF7FEFF 		bl	__aeabi_dmul
 1355              	.LVL201:
 1356 0704 01F10041 		add	r1, r1, #-2147483648
 1357 0708 08E0     		b	.L64
 1358              	.L125:
 272:./Src/main.c  ****       }
 1359              		.loc 1 272 0 discriminator 6
 1360 070a FFF7FEFF 		bl	getMotorCurrentL
 1361              	.LVL202:
 1362 070e FFF7FEFF 		bl	__aeabi_i2d
 1363              	.LVL203:
 1364 0712 95A3     		adr	r3, .L137
 1365 0714 D3E90023 		ldrd	r2, [r3]
 1366 0718 FFF7FEFF 		bl	__aeabi_dmul
 1367              	.LVL204:
 1368              	.L64:
 272:./Src/main.c  ****       }
 1369              		.loc 1 272 0 discriminator 8
 1370 071c 0246     		mov	r2, r0
 1371 071e 0B46     		mov	r3, r1
 1372 0720 4846     		mov	r0, r9
 1373 0722 4146     		mov	r1, r8
 1374 0724 FFF7FEFF 		bl	__aeabi_dcmpgt
 1375              	.LVL205:
 1376 0728 18B3     		cbz	r0, .L126
 272:./Src/main.c  ****       }
 1377              		.loc 1 272 0 discriminator 9
 1378 072a FFF7FEFF 		bl	getMotorCurrentR
 1379              	.LVL206:
 1380 072e FFF7FEFF 		bl	__aeabi_i2d
 1381              	.LVL207:
 1382 0732 8DA3     		adr	r3, .L137
 1383 0734 D3E90023 		ldrd	r2, [r3]
 1384 0738 FFF7FEFF 		bl	__aeabi_dmul
 1385              	.LVL208:
 1386 073c 0022     		movs	r2, #0
ARM GAS  /tmp/ccmDHPqP.s 			page 36


 1387 073e 0023     		movs	r3, #0
 1388 0740 FFF7FEFF 		bl	__aeabi_dcmplt
 1389              	.LVL209:
 1390 0744 58B1     		cbz	r0, .L127
 272:./Src/main.c  ****       }
 1391              		.loc 1 272 0 discriminator 11
 1392 0746 FFF7FEFF 		bl	getMotorCurrentR
 1393              	.LVL210:
 1394 074a FFF7FEFF 		bl	__aeabi_i2d
 1395              	.LVL211:
 1396 074e 86A3     		adr	r3, .L137
 1397 0750 D3E90023 		ldrd	r2, [r3]
 1398 0754 FFF7FEFF 		bl	__aeabi_dmul
 1399              	.LVL212:
 1400 0758 01F10041 		add	r1, r1, #-2147483648
 1401 075c 2CE0     		b	.L69
 1402              	.L127:
 272:./Src/main.c  ****       }
 1403              		.loc 1 272 0 discriminator 12
 1404 075e FFF7FEFF 		bl	getMotorCurrentR
 1405              	.LVL213:
 1406 0762 FFF7FEFF 		bl	__aeabi_i2d
 1407              	.LVL214:
 1408 0766 80A3     		adr	r3, .L137
 1409 0768 D3E90023 		ldrd	r2, [r3]
 1410 076c FFF7FEFF 		bl	__aeabi_dmul
 1411              	.LVL215:
 1412 0770 22E0     		b	.L69
 1413              	.L126:
 272:./Src/main.c  ****       }
 1414              		.loc 1 272 0 discriminator 10
 1415 0772 FFF7FEFF 		bl	getMotorCurrentL
 1416              	.LVL216:
 1417 0776 FFF7FEFF 		bl	__aeabi_i2d
 1418              	.LVL217:
 1419 077a 7BA3     		adr	r3, .L137
 1420 077c D3E90023 		ldrd	r2, [r3]
 1421 0780 FFF7FEFF 		bl	__aeabi_dmul
 1422              	.LVL218:
 1423 0784 0022     		movs	r2, #0
 1424 0786 0023     		movs	r3, #0
 1425 0788 FFF7FEFF 		bl	__aeabi_dcmplt
 1426              	.LVL219:
 1427 078c 58B1     		cbz	r0, .L128
 272:./Src/main.c  ****       }
 1428              		.loc 1 272 0 discriminator 16
 1429 078e FFF7FEFF 		bl	getMotorCurrentL
 1430              	.LVL220:
 1431 0792 FFF7FEFF 		bl	__aeabi_i2d
 1432              	.LVL221:
 1433 0796 74A3     		adr	r3, .L137
 1434 0798 D3E90023 		ldrd	r2, [r3]
 1435 079c FFF7FEFF 		bl	__aeabi_dmul
 1436              	.LVL222:
 1437 07a0 01F10041 		add	r1, r1, #-2147483648
 1438 07a4 08E0     		b	.L69
 1439              	.L128:
ARM GAS  /tmp/ccmDHPqP.s 			page 37


 272:./Src/main.c  ****       }
 1440              		.loc 1 272 0 discriminator 17
 1441 07a6 FFF7FEFF 		bl	getMotorCurrentL
 1442              	.LVL223:
 1443 07aa FFF7FEFF 		bl	__aeabi_i2d
 1444              	.LVL224:
 1445 07ae 6EA3     		adr	r3, .L137
 1446 07b0 D3E90023 		ldrd	r2, [r3]
 1447 07b4 FFF7FEFF 		bl	__aeabi_dmul
 1448              	.LVL225:
 1449              	.L69:
 272:./Src/main.c  ****       }
 1450              		.loc 1 272 0 discriminator 20
 1451 07b8 0223     		movs	r3, #2
 1452 07ba 0093     		str	r3, [sp]
 1453 07bc 0246     		mov	r2, r0
 1454 07be 0B46     		mov	r3, r1
 1455 07c0 6B48     		ldr	r0, .L137+8
 1456 07c2 FFF7FEFF 		bl	LCD_WriteFloat
 1457              	.LVL226:
 1458              	.LBE7:
 284:./Src/main.c  ****     }
 1459              		.loc 1 284 0 is_stmt 1 discriminator 20
 1460 07c6 059B     		ldr	r3, [sp, #20]
 1461 07c8 0693     		str	r3, [sp, #24]
 1462              	.LVL227:
 283:./Src/main.c  ****       lastDistance = distance;
 1463              		.loc 1 283 0 discriminator 20
 1464 07ca 0795     		str	r5, [sp, #28]
 1465              	.LVL228:
 282:./Src/main.c  ****       lastSpeedR = speedR;
 1466              		.loc 1 282 0 discriminator 20
 1467 07cc A346     		mov	fp, r4
 1468 07ce 03E0     		b	.L38
 1469              	.LVL229:
 1470              	.L101:
 284:./Src/main.c  ****     }
 1471              		.loc 1 284 0
 1472 07d0 059B     		ldr	r3, [sp, #20]
 1473 07d2 0693     		str	r3, [sp, #24]
 1474              	.LVL230:
 283:./Src/main.c  ****       lastDistance = distance;
 1475              		.loc 1 283 0
 1476 07d4 0795     		str	r5, [sp, #28]
 1477              	.LVL231:
 282:./Src/main.c  ****       lastSpeedR = speedR;
 1478              		.loc 1 282 0
 1479 07d6 A346     		mov	fp, r4
 1480              	.LVL232:
 1481              	.L38:
 1482              	.LBE6:
 289:./Src/main.c  ****     //Current_Motor_TASK();
 1483              		.loc 1 289 0
 1484 07d8 FFF7FEFF 		bl	Battery_TASK
 1485              	.LVL233:
 1486              	.LBB8:
 296:./Src/main.c  ****       MotorL_pwm(0);
ARM GAS  /tmp/ccmDHPqP.s 			page 38


 1487              		.loc 1 296 0
 1488 07dc FFF7FEFF 		bl	getMotorCurrentR
 1489              	.LVL234:
 1490 07e0 FFF7FEFF 		bl	__aeabi_i2d
 1491              	.LVL235:
 1492 07e4 60A3     		adr	r3, .L137
 1493 07e6 D3E90023 		ldrd	r2, [r3]
 1494 07ea FFF7FEFF 		bl	__aeabi_dmul
 1495              	.LVL236:
 1496 07ee 0022     		movs	r2, #0
 1497 07f0 0023     		movs	r3, #0
 1498 07f2 FFF7FEFF 		bl	__aeabi_dcmplt
 1499              	.LVL237:
 1500 07f6 78B1     		cbz	r0, .L129
 296:./Src/main.c  ****       MotorL_pwm(0);
 1501              		.loc 1 296 0 is_stmt 0 discriminator 1
 1502 07f8 FFF7FEFF 		bl	getMotorCurrentR
 1503              	.LVL238:
 1504 07fc FFF7FEFF 		bl	__aeabi_i2d
 1505              	.LVL239:
 1506 0800 59A3     		adr	r3, .L137
 1507 0802 D3E90023 		ldrd	r2, [r3]
 1508 0806 FFF7FEFF 		bl	__aeabi_dmul
 1509              	.LVL240:
 1510 080a 0022     		movs	r2, #0
 1511 080c 594B     		ldr	r3, .L137+12
 1512 080e FFF7FEFF 		bl	__aeabi_dcmplt
 1513              	.LVL241:
 1514 0812 0028     		cmp	r0, #0
 1515 0814 39D1     		bne	.L74
 1516 0816 0DE0     		b	.L75
 1517              	.L129:
 296:./Src/main.c  ****       MotorL_pwm(0);
 1518              		.loc 1 296 0 discriminator 2
 1519 0818 FFF7FEFF 		bl	getMotorCurrentR
 1520              	.LVL242:
 1521 081c FFF7FEFF 		bl	__aeabi_i2d
 1522              	.LVL243:
 1523 0820 51A3     		adr	r3, .L137
 1524 0822 D3E90023 		ldrd	r2, [r3]
 1525 0826 FFF7FEFF 		bl	__aeabi_dmul
 1526              	.LVL244:
 1527 082a 0022     		movs	r2, #0
 1528 082c 524B     		ldr	r3, .L137+16
 1529 082e FFF7FEFF 		bl	__aeabi_dcmpgt
 1530              	.LVL245:
 1531 0832 50BB     		cbnz	r0, .L74
 1532              	.L75:
 296:./Src/main.c  ****       MotorL_pwm(0);
 1533              		.loc 1 296 0 discriminator 3
 1534 0834 FFF7FEFF 		bl	getMotorCurrentL
 1535              	.LVL246:
 1536 0838 FFF7FEFF 		bl	__aeabi_i2d
 1537              	.LVL247:
 1538 083c 4AA3     		adr	r3, .L137
 1539 083e D3E90023 		ldrd	r2, [r3]
 1540 0842 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccmDHPqP.s 			page 39


 1541              	.LVL248:
 1542 0846 0022     		movs	r2, #0
 1543 0848 0023     		movs	r3, #0
 1544 084a FFF7FEFF 		bl	__aeabi_dcmplt
 1545              	.LVL249:
 1546 084e 70B1     		cbz	r0, .L130
 296:./Src/main.c  ****       MotorL_pwm(0);
 1547              		.loc 1 296 0 discriminator 4
 1548 0850 FFF7FEFF 		bl	getMotorCurrentL
 1549              	.LVL250:
 1550 0854 FFF7FEFF 		bl	__aeabi_i2d
 1551              	.LVL251:
 1552 0858 43A3     		adr	r3, .L137
 1553 085a D3E90023 		ldrd	r2, [r3]
 1554 085e FFF7FEFF 		bl	__aeabi_dmul
 1555              	.LVL252:
 1556 0862 0022     		movs	r2, #0
 1557 0864 434B     		ldr	r3, .L137+12
 1558 0866 FFF7FEFF 		bl	__aeabi_dcmplt
 1559              	.LVL253:
 1560 086a 70B9     		cbnz	r0, .L74
 1561 086c 3CE0     		b	.L78
 1562              	.L130:
 296:./Src/main.c  ****       MotorL_pwm(0);
 1563              		.loc 1 296 0 discriminator 5
 1564 086e FFF7FEFF 		bl	getMotorCurrentL
 1565              	.LVL254:
 1566 0872 FFF7FEFF 		bl	__aeabi_i2d
 1567              	.LVL255:
 1568 0876 3CA3     		adr	r3, .L137
 1569 0878 D3E90023 		ldrd	r2, [r3]
 1570 087c FFF7FEFF 		bl	__aeabi_dmul
 1571              	.LVL256:
 1572 0880 0022     		movs	r2, #0
 1573 0882 3D4B     		ldr	r3, .L137+16
 1574 0884 FFF7FEFF 		bl	__aeabi_dcmpgt
 1575              	.LVL257:
 1576 0888 70B3     		cbz	r0, .L78
 1577              	.L74:
 297:./Src/main.c  ****       MotorR_pwm(0);
 1578              		.loc 1 297 0 is_stmt 1
 1579 088a 0020     		movs	r0, #0
 1580 088c FFF7FEFF 		bl	MotorL_pwm
 1581              	.LVL258:
 298:./Src/main.c  ****       Buzzer_OneLongBeep();
 1582              		.loc 1 298 0
 1583 0890 0020     		movs	r0, #0
 1584 0892 FFF7FEFF 		bl	MotorR_pwm
 1585              	.LVL259:
 299:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 1586              		.loc 1 299 0
 1587 0896 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1588              	.LVL260:
 300:./Src/main.c  ****       HAL_Delay(5);
 1589              		.loc 1 300 0
 1590 089a 354C     		ldr	r4, .L137+8
 1591 089c 2046     		mov	r0, r4
ARM GAS  /tmp/ccmDHPqP.s 			page 40


 1592 089e FFF7FEFF 		bl	LCD_ClearDisplay
 1593              	.LVL261:
 301:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 1594              		.loc 1 301 0
 1595 08a2 0520     		movs	r0, #5
 1596 08a4 FFF7FEFF 		bl	HAL_Delay
 1597              	.LVL262:
 302:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 1598              		.loc 1 302 0
 1599 08a8 0022     		movs	r2, #0
 1600 08aa 1146     		mov	r1, r2
 1601 08ac 2046     		mov	r0, r4
 1602 08ae FFF7FEFF 		bl	LCD_SetLocation
 1603              	.LVL263:
 303:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 1604              		.loc 1 303 0
 1605 08b2 3249     		ldr	r1, .L137+20
 1606 08b4 2046     		mov	r0, r4
 1607 08b6 FFF7FEFF 		bl	LCD_WriteString
 1608              	.LVL264:
 304:./Src/main.c  ****       LCD_WriteString(&lcd, "Overcurrent.");
 1609              		.loc 1 304 0
 1610 08ba 0122     		movs	r2, #1
 1611 08bc 0021     		movs	r1, #0
 1612 08be 2046     		mov	r0, r4
 1613 08c0 FFF7FEFF 		bl	LCD_SetLocation
 1614              	.LVL265:
 305:./Src/main.c  ****       HAL_Delay(500);
 1615              		.loc 1 305 0
 1616 08c4 2E49     		ldr	r1, .L137+24
 1617 08c6 2046     		mov	r0, r4
 1618 08c8 FFF7FEFF 		bl	LCD_WriteString
 1619              	.LVL266:
 306:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 1620              		.loc 1 306 0
 1621 08cc 4FF4FA70 		mov	r0, #500
 1622 08d0 FFF7FEFF 		bl	HAL_Delay
 1623              	.LVL267:
 307:./Src/main.c  ****       HAL_Delay(500);
 1624              		.loc 1 307 0
 1625 08d4 2B48     		ldr	r0, .L137+28
 1626 08d6 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1627              	.LVL268:
 308:./Src/main.c  ****       Power_Set(0);
 1628              		.loc 1 308 0
 1629 08da 4FF4FA70 		mov	r0, #500
 1630 08de FFF7FEFF 		bl	HAL_Delay
 1631              	.LVL269:
 309:./Src/main.c  ****     }
 1632              		.loc 1 309 0
 1633 08e2 0020     		movs	r0, #0
 1634 08e4 FFF7FEFF 		bl	Power_Set
 1635              	.LVL270:
 1636              	.L78:
 1637              	.LBE8:
 312:./Src/main.c  ****       MotorL_pwm(0);
 1638              		.loc 1 312 0
ARM GAS  /tmp/ccmDHPqP.s 			page 41


 1639 08e8 FFF7FEFF 		bl	GET_BatteryAverage
 1640              	.LVL271:
 1641 08ec 2649     		ldr	r1, .L137+32
 1642 08ee FFF7FEFF 		bl	__aeabi_fcmplt
 1643              	.LVL272:
 1644 08f2 70B3     		cbz	r0, .L80
 313:./Src/main.c  ****       MotorR_pwm(0);
 1645              		.loc 1 313 0
 1646 08f4 0020     		movs	r0, #0
 1647 08f6 FFF7FEFF 		bl	MotorL_pwm
 1648              	.LVL273:
 314:./Src/main.c  ****       Buzzer_OneLongBeep();
 1649              		.loc 1 314 0
 1650 08fa 0020     		movs	r0, #0
 1651 08fc FFF7FEFF 		bl	MotorR_pwm
 1652              	.LVL274:
 315:./Src/main.c  ****       LCD_ClearDisplay(&lcd);
 1653              		.loc 1 315 0
 1654 0900 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1655              	.LVL275:
 316:./Src/main.c  ****       HAL_Delay(5);
 1656              		.loc 1 316 0
 1657 0904 1A4C     		ldr	r4, .L137+8
 1658 0906 2046     		mov	r0, r4
 1659 0908 FFF7FEFF 		bl	LCD_ClearDisplay
 1660              	.LVL276:
 317:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 0);
 1661              		.loc 1 317 0
 1662 090c 0520     		movs	r0, #5
 1663 090e FFF7FEFF 		bl	HAL_Delay
 1664              	.LVL277:
 318:./Src/main.c  ****       LCD_WriteString(&lcd, "Emergency Off!");
 1665              		.loc 1 318 0
 1666 0912 0022     		movs	r2, #0
 1667 0914 1146     		mov	r1, r2
 1668 0916 2046     		mov	r0, r4
 1669 0918 FFF7FEFF 		bl	LCD_SetLocation
 1670              	.LVL278:
 319:./Src/main.c  ****       LCD_SetLocation(&lcd, 0, 1);
 1671              		.loc 1 319 0
 1672 091c 1749     		ldr	r1, .L137+20
 1673 091e 2046     		mov	r0, r4
 1674 0920 FFF7FEFF 		bl	LCD_WriteString
 1675              	.LVL279:
 320:./Src/main.c  ****       LCD_WriteString(&lcd, "Battery low.");
 1676              		.loc 1 320 0
 1677 0924 0122     		movs	r2, #1
 1678 0926 0021     		movs	r1, #0
 1679 0928 2046     		mov	r0, r4
 1680 092a FFF7FEFF 		bl	LCD_SetLocation
 1681              	.LVL280:
 321:./Src/main.c  ****       HAL_Delay(500);
 1682              		.loc 1 321 0
 1683 092e 1749     		ldr	r1, .L137+36
 1684 0930 2046     		mov	r0, r4
 1685 0932 FFF7FEFF 		bl	LCD_WriteString
 1686              	.LVL281:
ARM GAS  /tmp/ccmDHPqP.s 			page 42


 322:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);
 1687              		.loc 1 322 0
 1688 0936 4FF4FA70 		mov	r0, #500
 1689 093a FFF7FEFF 		bl	HAL_Delay
 1690              	.LVL282:
 323:./Src/main.c  ****       HAL_Delay(500);
 1691              		.loc 1 323 0
 1692 093e 1148     		ldr	r0, .L137+28
 1693 0940 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1694              	.LVL283:
 324:./Src/main.c  ****       Power_Set(0);
 1695              		.loc 1 324 0
 1696 0944 4FF4FA70 		mov	r0, #500
 1697 0948 FFF7FEFF 		bl	HAL_Delay
 1698              	.LVL284:
 325:./Src/main.c  ****     }
 1699              		.loc 1 325 0
 1700 094c 0020     		movs	r0, #0
 1701 094e FFF7FEFF 		bl	Power_Set
 1702              	.LVL285:
 1703              	.L80:
 332:./Src/main.c  **** 
 1704              		.loc 1 332 0
 1705 0952 0C48     		ldr	r0, .L137+28
 1706 0954 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1707              	.LVL286:
 334:./Src/main.c  **** 
 1708              		.loc 1 334 0
 1709 0958 FFF7FEFF 		bl	HAL_GetTick
 1710              	.LVL287:
 1711 095c 0C4B     		ldr	r3, .L137+40
 1712 095e 1B68     		ldr	r3, [r3]
 1713 0960 C01A     		subs	r0, r0, r3
 1714 0962 0C4B     		ldr	r3, .L137+44
 1715 0964 1860     		str	r0, [r3]
 338:./Src/main.c  **** 
 1716              		.loc 1 338 0
 1717 0966 10E4     		b	.L82
 1718              	.L138:
 1719              		.align	3
 1720              	.L137:
 1721 0968 7B14AE47 		.word	1202590843
 1722 096c E17A943F 		.word	1066695393
 1723 0970 00000000 		.word	lcd
 1724 0974 000034C0 		.word	-1070333952
 1725 0978 00003440 		.word	1077149696
 1726 097c 44000000 		.word	.LC8
 1727 0980 64000000 		.word	.LC10
 1728 0984 00000000 		.word	hiwdg
 1729 0988 0000F841 		.word	1106771968
 1730 098c 74000000 		.word	.LC11
 1731 0990 00000000 		.word	counterTemp
 1732 0994 00000000 		.word	counterTempTT
 1733              		.cfi_endproc
 1734              	.LFE64:
 1736              		.global	saveValue
 1737              		.comm	lcd,140,4
ARM GAS  /tmp/ccmDHPqP.s 			page 43


 1738              		.comm	counterTempTT,4,4
 1739              		.comm	counterTemp,4,4
 1740              		.global	speed
 1741              		.comm	hiwdg,16,4
 1742              		.global	VarValue
 1743              		.global	VarDataTab
 1744              		.global	VirtAddVarTab
 1745              		.section	.bss.saveValue,"aw",%nobits
 1746              		.align	1
 1747              		.set	.LANCHOR0,. + 0
 1750              	saveValue:
 1751 0000 0000     		.space	2
 1752              		.section	.bss.VarValue,"aw",%nobits
 1753              		.align	1
 1756              	VarValue:
 1757 0000 0000     		.space	2
 1758              		.section	.rodata.str1.4,"aMS",%progbits,1
 1759              		.align	2
 1760              	.LC0:
 1761 0000 5472616E 		.ascii	"TranspOtter V1.1\000"
 1761      73704F74 
 1761      74657220 
 1761      56312E31 
 1761      00
 1762 0011 000000   		.space	3
 1763              	.LC1:
 1764 0014 496E6974 		.ascii	"Initializing...\000"
 1764      69616C69 
 1764      7A696E67 
 1764      2E2E2E00 
 1765              	.LC2:
 1766 0024 4261743A 		.ascii	"Bat:\000"
 1766      00
 1767 0029 000000   		.space	3
 1768              	.LC3:
 1769 002c 5600     		.ascii	"V\000"
 1770 002e 0000     		.space	2
 1771              	.LC4:
 1772 0030 4100     		.ascii	"A\000"
 1773 0032 0000     		.space	2
 1774              	.LC5:
 1775 0034 4C656E3A 		.ascii	"Len:\000"
 1775      00
 1776 0039 000000   		.space	3
 1777              	.LC6:
 1778 003c 6D2800   		.ascii	"m(\000"
 1779 003f 00       		.space	1
 1780              	.LC7:
 1781 0040 6D2900   		.ascii	"m)\000"
 1782 0043 00       		.space	1
 1783              	.LC8:
 1784 0044 456D6572 		.ascii	"Emergency Off!\000"
 1784      67656E63 
 1784      79204F66 
 1784      662100
 1785 0053 00       		.space	1
 1786              	.LC9:
ARM GAS  /tmp/ccmDHPqP.s 			page 44


 1787 0054 4B656570 		.ascii	"Keeper to fast.\000"
 1787      65722074 
 1787      6F206661 
 1787      73742E00 
 1788              	.LC10:
 1789 0064 4F766572 		.ascii	"Overcurrent.\000"
 1789      63757272 
 1789      656E742E 
 1789      00
 1790 0071 000000   		.space	3
 1791              	.LC11:
 1792 0074 42617474 		.ascii	"Battery low.\000"
 1792      65727920 
 1792      6C6F772E 
 1792      00
 1793              		.section	.data.VirtAddVarTab,"aw",%progbits
 1794              		.align	2
 1795              		.set	.LANCHOR1,. + 0
 1798              	VirtAddVarTab:
 1799 0000 3713     		.short	4919
 1800 0002 00000000 		.space	4
 1801              		.section	.bss.VarDataTab,"aw",%nobits
 1802              		.align	2
 1805              	VarDataTab:
 1806 0000 00000000 		.space	6
 1806      0000
 1807              		.section	.bss.speed,"aw",%nobits
 1808              		.align	1
 1811              	speed:
 1812 0000 0000     		.space	2
 1813              		.text
 1814              	.Letext0:
 1815              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1816              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1817              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1818              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1819              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1820              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1821              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1822              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1823              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1824              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 1825              		.file 12 "./Inc/pcf8574.h"
 1826              		.file 13 "./Inc/hd44780.h"
 1827              		.file 14 "./Drivers/CMSIS/Include/core_cm3.h"
 1828              		.file 15 "./Inc/eeprom.h"
 1829              		.file 16 "./Inc/ADC_R.h"
 1830              		.file 17 "./Inc/ADC_L.h"
 1831              		.file 18 "./Inc/motor_R.h"
 1832              		.file 19 "./Inc/motor_L.h"
 1833              		.file 20 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1834              		.file 21 "./Inc/varie.h"
 1835              		.file 22 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1836              		.file 23 "./Inc/application.h"
 1837              		.file 24 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash.h"
ARM GAS  /tmp/ccmDHPqP.s 			page 45


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccmDHPqP.s:20     .text.saveConfig:00000000 $t
     /tmp/ccmDHPqP.s:25     .text.saveConfig:00000000 saveConfig
     /tmp/ccmDHPqP.s:48     .text.saveConfig:00000010 $d
     /tmp/ccmDHPqP.s:54     .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccmDHPqP.s:59     .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccmDHPqP.s:95     .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/ccmDHPqP.s:101    .text.Error_Handler:00000000 $t
     /tmp/ccmDHPqP.s:106    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccmDHPqP.s:130    .text.MX_IWDG_Init:00000000 $t
     /tmp/ccmDHPqP.s:134    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/ccmDHPqP.s:189    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/ccmDHPqP.s:196    .text.SystemClock_Config:00000000 $t
     /tmp/ccmDHPqP.s:201    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccmDHPqP.s:305    .text.SystemClock_Config:00000088 $d
     /tmp/ccmDHPqP.s:326    .text.main:00000000 $t
     /tmp/ccmDHPqP.s:331    .text.main:00000000 main
     /tmp/ccmDHPqP.s:854    .text.main:00000328 $d
                            *COM*:0000008c lcd
                            *COM*:00000004 counterTemp
     /tmp/ccmDHPqP.s:881    .text.main:00000390 $t
     /tmp/ccmDHPqP.s:1304   .text.main:00000680 $d
     /tmp/ccmDHPqP.s:1322   .text.main:000006c0 $t
     /tmp/ccmDHPqP.s:1721   .text.main:00000968 $d
                            *COM*:00000004 counterTempTT
     /tmp/ccmDHPqP.s:1750   .bss.saveValue:00000000 saveValue
     /tmp/ccmDHPqP.s:1811   .bss.speed:00000000 speed
     /tmp/ccmDHPqP.s:1756   .bss.VarValue:00000000 VarValue
     /tmp/ccmDHPqP.s:1805   .bss.VarDataTab:00000000 VarDataTab
     /tmp/ccmDHPqP.s:1798   .data.VirtAddVarTab:00000000 VirtAddVarTab
     /tmp/ccmDHPqP.s:1746   .bss.saveValue:00000000 $d
     /tmp/ccmDHPqP.s:1753   .bss.VarValue:00000000 $d
     /tmp/ccmDHPqP.s:1759   .rodata.str1.4:00000000 $d
     /tmp/ccmDHPqP.s:1794   .data.VirtAddVarTab:00000000 $d
     /tmp/ccmDHPqP.s:1802   .bss.VarDataTab:00000000 $d
     /tmp/ccmDHPqP.s:1808   .bss.speed:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
EE_WriteVariable
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_ddiv
ARM GAS  /tmp/ccmDHPqP.s 			page 46


__aeabi_d2f
__aeabi_fadd
__aeabi_f2d
__aeabi_dcmpgt
__aeabi_fmul
__aeabi_f2uiz
__aeabi_dmul
__aeabi_f2iz
__aeabi_i2f
__aeabi_dcmplt
__aeabi_dadd
__aeabi_d2iz
__aeabi_dsub
__aeabi_fcmplt
HAL_Init
Button_init
Power_Set
MX_I2C2_Init
HAL_FLASH_Unlock
EE_Init
LCD_Init
LCD_ClearDisplay
LCD_SetLocation
LCD_WriteString
Buzzer_init
Led_init
IS_Charge_init
ADC_L_init
ADC_R_init
MotorL_init
MotorR_init
EE_ReadVariable
HAL_Delay
Led_Set
IS_Button
applcation_init
Battery_TASK
Buzzer_TwoBeep
MotorR_start
MotorL_start
HAL_GetTick
MotorL_pwm
MotorR_pwm
HAL_IWDG_Refresh
Buzzer_OneBeep
Buzzer_OneLongBeep
ADC_PA3
ADC_PA2
GET_BatteryAverage
get_powerMax
hi2c2
LCD_WriteFloat
getMotorCurrentR
getMotorCurrentL
