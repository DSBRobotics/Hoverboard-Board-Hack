ARM GAS  /tmp/ccEIq7ZR.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.saveConfig,"ax",%progbits
  20              		.align	2
  21              		.global	saveConfig
  22              		.thumb
  23              		.thumb_func
  25              	saveConfig:
  26              	.LFB65:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/ccEIq7ZR.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "eeprom.h"
  46:./Src/main.c  **** #include "motor_L.h"
  47:./Src/main.c  **** #include "motor_R.h"
  48:./Src/main.c  **** #include "varie.h"
  49:./Src/main.c  **** #include "ADC_L.h"
  50:./Src/main.c  **** #include "ADC_R.h"
  51:./Src/main.c  **** #include "delay.h"
  52:./Src/main.c  **** #include "pid.h"
  53:./Src/main.c  **** #include "application.h"
  54:./Src/main.c  **** #include "telemetry.h"
  55:./Src/main.c  **** #include "hd44780.h"
  56:./Src/main.c  **** #include <math.h>
  57:./Src/main.c  **** 
  58:./Src/main.c  **** // copied from STMBL
  59:./Src/main.c  **** #define NO 0
  60:./Src/main.c  **** #define YES 1
  61:./Src/main.c  **** #define ABS(a) (((a) < 0.0) ? -(a) : (a))
  62:./Src/main.c  **** #define LIMIT(x, lowhigh) (((x) > (lowhigh)) ? (lowhigh) : (((x) < (-lowhigh)) ? (-lowhigh) : (x)))
  63:./Src/main.c  **** #define SAT(x, lowhigh) (((x) > (lowhigh)) ? (1.0) : (((x) < (-lowhigh)) ? (-1.0) : (0.0)))
  64:./Src/main.c  **** #define SAT2(x, low, high) (((x) > (high)) ? (1.0) : (((x) < (low)) ? (-1.0) : (0.0)))
  65:./Src/main.c  **** #define STEP(from, to, step) (((from) < (to)) ? (MIN((from) + (step), (to))) : (MAX((from) - (step)
  66:./Src/main.c  **** #define DEG(a) ((a)*M_PI / 180.0)
  67:./Src/main.c  **** #define RAD(a) ((a)*180.0 / M_PI)
  68:./Src/main.c  **** #define SIGN(a) (((a) < 0.0) ? (-1.0) : (((a) > 0.0) ? (1.0) : (0.0)))
  69:./Src/main.c  **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  70:./Src/main.c  **** #define SCALE(value, high, max) MIN(MAX(((max) - (value)) / ((max) - (high)), 0.0), 1.0)
  71:./Src/main.c  **** #define MIN(a, b) (((a) < (b)) ? (a) : (b))
  72:./Src/main.c  **** #define MAX(a, b) (((a) > (b)) ? (a) : (b))
  73:./Src/main.c  **** #define MIN3(a, b, c) MIN(a, MIN(b, c))
  74:./Src/main.c  **** #define MAX3(a, b, c) MAX(a, MAX(b, c))
  75:./Src/main.c  **** 
  76:./Src/main.c  **** #define PI 3.14159265
  77:./Src/main.c  **** 
  78:./Src/main.c  **** /* Virtual address defined by the user: 0xFFFF value is prohibited */
  79:./Src/main.c  **** uint16_t VirtAddVarTab[NB_OF_VAR] = {0x1337};
  80:./Src/main.c  **** uint16_t VarDataTab[NB_OF_VAR] = {0};
  81:./Src/main.c  **** uint16_t VarValue = 0;
  82:./Src/main.c  **** 
  83:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  84:./Src/main.c  **** 
  85:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  86:./Src/main.c  **** void SystemClock_Config(void);
  87:./Src/main.c  **** void Error_Handler(void);
  88:./Src/main.c  **** //extern struct PID_dati pid_R_;
ARM GAS  /tmp/ccEIq7ZR.s 			page 3


  89:./Src/main.c  **** static void MX_IWDG_Init(void);
  90:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  91:./Src/main.c  **** 
  92:./Src/main.c  **** volatile __IO int16_t speed = 0;
  93:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  94:./Src/main.c  **** //extern struct COMMAND_data commandsequence;
  95:./Src/main.c  **** 
  96:./Src/main.c  **** 
  97:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
  98:./Src/main.c  **** LCD_PCF8574_HandleTypeDef lcd;
  99:./Src/main.c  **** extern I2C_HandleTypeDef hi2c2;
 100:./Src/main.c  **** uint16_t saveValue = 0;
 101:./Src/main.c  **** 
 102:./Src/main.c  **** #define SAFETYREMOTE
 103:./Src/main.c  **** 
 104:./Src/main.c  **** int main(void)
 105:./Src/main.c  **** {
 106:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 107:./Src/main.c  ****   HAL_Init();
 108:./Src/main.c  **** 
 109:./Src/main.c  ****   /* Configure the system clock */
 110:./Src/main.c  ****   SystemClock_Config();
 111:./Src/main.c  **** 
 112:./Src/main.c  ****   Button_init();
 113:./Src/main.c  **** 
 114:./Src/main.c  ****   Power_Set(1);
 115:./Src/main.c  **** 
 116:./Src/main.c  **** 
 117:./Src/main.c  ****   //Telemetry_init();
 118:./Src/main.c  ****   MX_I2C2_Init();
 119:./Src/main.c  **** 
 120:./Src/main.c  ****   /* Unlock the Flash Program Erase controller */
 121:./Src/main.c  ****   HAL_FLASH_Unlock();
 122:./Src/main.c  **** 
 123:./Src/main.c  ****   /* EEPROM Init */
 124:./Src/main.c  ****   EE_Init();
 125:./Src/main.c  **** 
 126:./Src/main.c  **** 
 127:./Src/main.c  ****   lcd.pcf8574.PCF_I2C_ADDRESS = 0x27;
 128:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 129:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 130:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 131:./Src/main.c  **** 	lcd.type = TYPE0;
 132:./Src/main.c  **** 
 133:./Src/main.c  **** 	if(LCD_Init(&lcd)!=LCD_OK){
 134:./Src/main.c  **** 		// error occured
 135:./Src/main.c  **** 		//while(1);
 136:./Src/main.c  ****     //TODO
 137:./Src/main.c  **** 	}
 138:./Src/main.c  **** 
 139:./Src/main.c  **** 	LCD_ClearDisplay(&lcd);
 140:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 141:./Src/main.c  **** 	LCD_WriteString(&lcd, "TranspOtter V1.3");
 142:./Src/main.c  **** 
 143:./Src/main.c  ****   #ifdef SAFETYREMOTE
 144:./Src/main.c  ****     char message[6] = "     ";
 145:./Src/main.c  ****     HAL_I2C_Master_Receive(&hi2c2, (42), &message, 6, HAL_MAX_DELAY);
ARM GAS  /tmp/ccEIq7ZR.s 			page 4


 146:./Src/main.c  ****   #endif
 147:./Src/main.c  **** 
 148:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 1);
 149:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
 150:./Src/main.c  ****   //LCD_WriteString(&lcd, message);
 151:./Src/main.c  **** 
 152:./Src/main.c  ****   Buzzer_init();
 153:./Src/main.c  ****   Led_init();
 154:./Src/main.c  ****   IS_Charge_init();
 155:./Src/main.c  **** 
 156:./Src/main.c  ****   //DebugPin_init();
 157:./Src/main.c  ****   HAL_Delay(550);
 158:./Src/main.c  ****   int buttonTimeout = 0;
 159:./Src/main.c  ****   while(IS_Button()) {
 160:./Src/main.c  ****     Led_Set(0);
 161:./Src/main.c  ****   }
 162:./Src/main.c  **** 
 163:./Src/main.c  ****   if (0) {
 164:./Src/main.c  ****     ADC_L_init();
 165:./Src/main.c  ****     ADC_R_init();
 166:./Src/main.c  ****     MotorL_init();
 167:./Src/main.c  ****     MotorR_init();
 168:./Src/main.c  **** 
 169:./Src/main.c  ****     EE_ReadVariable(VirtAddVarTab[0], &saveValue);
 170:./Src/main.c  **** 
 171:./Src/main.c  **** 
 172:./Src/main.c  ****     //PID_init(0,900); //pwm limit
 173:./Src/main.c  ****     //PID_set_L_costant(0.05,0.01,0.0);
 174:./Src/main.c  ****     //PID_set_R_costant(2.0,0.5,0.0);
 175:./Src/main.c  **** 
 176:./Src/main.c  ****     applcation_init();
 177:./Src/main.c  ****     Battery_TASK();
 178:./Src/main.c  **** 
 179:./Src/main.c  ****     MX_IWDG_Init();
 180:./Src/main.c  **** 
 181:./Src/main.c  ****     Led_Set(1);
 182:./Src/main.c  ****     Buzzer_TwoBeep();
 183:./Src/main.c  ****     HAL_Delay(250);
 184:./Src/main.c  **** 
 185:./Src/main.c  ****     MotorR_start();
 186:./Src/main.c  ****     MotorL_start();
 187:./Src/main.c  ****     //MotorR_pwm(80);
 188:./Src/main.c  ****     //MotorL_pwm(-200);
 189:./Src/main.c  **** 
 190:./Src/main.c  ****     LCD_ClearDisplay(&lcd);
 191:./Src/main.c  ****     HAL_Delay(5);
 192:./Src/main.c  ****     LCD_SetLocation(&lcd, 0, 1);
 193:./Src/main.c  ****   	LCD_WriteString(&lcd, "Bat:");
 194:./Src/main.c  ****     LCD_SetLocation(&lcd, 8, 1);
 195:./Src/main.c  ****     LCD_WriteString(&lcd, "V");
 196:./Src/main.c  **** 
 197:./Src/main.c  ****     LCD_SetLocation(&lcd, 15, 1);
 198:./Src/main.c  ****     LCD_WriteString(&lcd, "A");
 199:./Src/main.c  **** 
 200:./Src/main.c  ****     LCD_SetLocation(&lcd, 0, 0);
 201:./Src/main.c  ****   	LCD_WriteString(&lcd, "Len:");
 202:./Src/main.c  ****     LCD_SetLocation(&lcd, 8, 0);
ARM GAS  /tmp/ccEIq7ZR.s 			page 5


 203:./Src/main.c  ****     LCD_WriteString(&lcd, "m(");
 204:./Src/main.c  ****     LCD_SetLocation(&lcd, 14, 0);
 205:./Src/main.c  ****     LCD_WriteString(&lcd, "m)");
 206:./Src/main.c  **** 
 207:./Src/main.c  ****     uint32_t sinValue = 1999;
 208:./Src/main.c  ****     uint8_t state = 0;
 209:./Src/main.c  ****     int lastSpeedL = 0, lastSpeedR = 0, lastDistance = 0;
 210:./Src/main.c  ****     float setDistance = saveValue / 1000.0;
 211:./Src/main.c  ****     while(1){
 212:./Src/main.c  ****       sinValue++;
 213:./Src/main.c  ****       counterTemp = HAL_GetTick();
 214:./Src/main.c  **** 
 215:./Src/main.c  ****       if(IS_Button()) {
 216:./Src/main.c  ****         MotorL_pwm(0);
 217:./Src/main.c  ****         MotorR_pwm(0);
 218:./Src/main.c  ****         while(IS_Button()) {
 219:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 220:./Src/main.c  ****         }
 221:./Src/main.c  ****         Buzzer_OneBeep();
 222:./Src/main.c  ****         HAL_Delay(300);
 223:./Src/main.c  ****         if (IS_Button()) {
 224:./Src/main.c  ****           while(IS_Button()) {
 225:./Src/main.c  ****             HAL_IWDG_Refresh(&hiwdg);
 226:./Src/main.c  ****           }
 227:./Src/main.c  ****           Buzzer_OneLongBeep();
 228:./Src/main.c  ****           HAL_Delay(350);
 229:./Src/main.c  ****           Power_Set(0);
 230:./Src/main.c  ****         } else {
 231:./Src/main.c  ****           setDistance += 0.25;
 232:./Src/main.c  ****           if (setDistance > 2.6) {
 233:./Src/main.c  ****             setDistance = 0.25;
 234:./Src/main.c  ****           }
 235:./Src/main.c  ****           saveValue = setDistance * 1000;
 236:./Src/main.c  ****           saveConfig();
 237:./Src/main.c  ****         }
 238:./Src/main.c  ****       }
 239:./Src/main.c  **** 
 240:./Src/main.c  ****       #define VEL_P     0.9
 241:./Src/main.c  **** 
 242:./Src/main.c  ****       if ((sinValue) % (250) == 0) {
 243:./Src/main.c  ****         uint16_t distance = CLAMP(((int)ADC_PA3()) - 180, 0, 4095);
 244:./Src/main.c  ****         int16_t steering = ADC_PA2() - 2048;
 245:./Src/main.c  ****         int speedL, speedR;
 246:./Src/main.c  **** 
 247:./Src/main.c  ****         float vel_scale = get_powerMax(GET_BatteryAverage()) * VEL_P;
 248:./Src/main.c  **** 
 249:./Src/main.c  ****         speedL = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) +  CLAMP((steering / 1
 250:./Src/main.c  ****         speedR = -CLAMP(((distance - (int)(setDistance * 1345)) * vel_scale) -  CLAMP((steering / 1
 251:./Src/main.c  **** 
 252:./Src/main.c  ****         if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && 
 253:./Src/main.c  ****           if (distance - (int)(setDistance * 1345) > -200) {
 254:./Src/main.c  ****             MotorL_pwm(speedL);
 255:./Src/main.c  ****             MotorR_pwm(speedR);
 256:./Src/main.c  ****           } else {
 257:./Src/main.c  ****             MotorL_pwm(0);
 258:./Src/main.c  ****             MotorR_pwm(0);
 259:./Src/main.c  ****           }
ARM GAS  /tmp/ccEIq7ZR.s 			page 6


 260:./Src/main.c  ****         }
 261:./Src/main.c  ****         if ((distance / 1345.0) - setDistance > 0.7 && (lastDistance / 1345.0) - setDistance > 0.7)
 262:./Src/main.c  ****           MotorL_pwm(0);
 263:./Src/main.c  ****           MotorR_pwm(0);
 264:./Src/main.c  ****           Buzzer_OneLongBeep();
 265:./Src/main.c  ****           LCD_ClearDisplay(&lcd);
 266:./Src/main.c  ****           HAL_Delay(5);
 267:./Src/main.c  ****           LCD_SetLocation(&lcd, 0, 0);
 268:./Src/main.c  ****         	LCD_WriteString(&lcd, "Emergency Off!");
 269:./Src/main.c  ****           LCD_SetLocation(&lcd, 0, 1);
 270:./Src/main.c  ****         	LCD_WriteString(&lcd, "Keeper to fast.");
 271:./Src/main.c  ****           HAL_Delay(500);
 272:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 273:./Src/main.c  ****           HAL_Delay(500);
 274:./Src/main.c  ****           Power_Set(0);
 275:./Src/main.c  ****         }
 276:./Src/main.c  **** 
 277:./Src/main.c  ****         if ((sinValue) % (2000) == 0) {
 278:./Src/main.c  ****           LCD_SetLocation(&lcd, 4, 0);
 279:./Src/main.c  ****           LCD_WriteFloat(&lcd,distance/1345.0,2);
 280:./Src/main.c  ****           LCD_SetLocation(&lcd, 10, 0);
 281:./Src/main.c  ****           LCD_WriteFloat(&lcd,setDistance,2);
 282:./Src/main.c  ****           LCD_SetLocation(&lcd, 4, 1);
 283:./Src/main.c  ****           LCD_WriteFloat(&lcd,GET_BatteryAverage(),1);
 284:./Src/main.c  ****           LCD_SetLocation(&lcd, 11, 1);
 285:./Src/main.c  ****           LCD_WriteFloat(&lcd,MAX(ABS(getMotorCurrentR() * 0.02), ABS(getMotorCurrentL() * 0.02)),2
 286:./Src/main.c  ****         }
 287:./Src/main.c  **** 
 288:./Src/main.c  **** 
 289:./Src/main.c  ****         //char str[100];
 290:./Src/main.c  ****         //memset(&str[0], 0, sizeof(str));
 291:./Src/main.c  ****         //sprintf(str, "%i;%i\n\r", distance, steering);
 292:./Src/main.c  ****         //Console_Log(str);
 293:./Src/main.c  **** 
 294:./Src/main.c  **** 
 295:./Src/main.c  ****         lastSpeedL = speedL;
 296:./Src/main.c  ****         lastSpeedR = speedR;
 297:./Src/main.c  ****         lastDistance = distance;
 298:./Src/main.c  ****       }
 299:./Src/main.c  **** 
 300:./Src/main.c  **** 
 301:./Src/main.c  **** 
 302:./Src/main.c  ****       Battery_TASK();
 303:./Src/main.c  ****       //Current_Motor_TASK();
 304:./Src/main.c  ****       //sWiiNunchuck_TASK();
 305:./Src/main.c  ****       //applcation_TASK();
 306:./Src/main.c  ****       //Telemetry_TASK();
 307:./Src/main.c  **** 
 308:./Src/main.c  ****       //Batteria Scarica?
 309:./Src/main.c  ****       if(ABS(getMotorCurrentR() * 0.02) > 20.0 || ABS(getMotorCurrentL() * 0.02) > 20.0){
 310:./Src/main.c  ****         MotorL_pwm(0);
 311:./Src/main.c  ****         MotorR_pwm(0);
 312:./Src/main.c  ****         Buzzer_OneLongBeep();
 313:./Src/main.c  ****         LCD_ClearDisplay(&lcd);
 314:./Src/main.c  ****         HAL_Delay(5);
 315:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 0);
 316:./Src/main.c  ****         LCD_WriteString(&lcd, "Emergency Off!");
ARM GAS  /tmp/ccEIq7ZR.s 			page 7


 317:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 1);
 318:./Src/main.c  ****         LCD_WriteString(&lcd, "Overcurrent.");
 319:./Src/main.c  ****         HAL_Delay(500);
 320:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 321:./Src/main.c  ****         HAL_Delay(500);
 322:./Src/main.c  ****         Power_Set(0);
 323:./Src/main.c  ****       }
 324:./Src/main.c  **** 
 325:./Src/main.c  ****       if(GET_BatteryAverage() < 31.0){
 326:./Src/main.c  ****         MotorL_pwm(0);
 327:./Src/main.c  ****         MotorR_pwm(0);
 328:./Src/main.c  ****         Buzzer_OneLongBeep();
 329:./Src/main.c  ****         LCD_ClearDisplay(&lcd);
 330:./Src/main.c  ****         HAL_Delay(5);
 331:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 0);
 332:./Src/main.c  ****         LCD_WriteString(&lcd, "Emergency Off!");
 333:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 1);
 334:./Src/main.c  ****         LCD_WriteString(&lcd, "Battery low.");
 335:./Src/main.c  ****         HAL_Delay(500);
 336:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 337:./Src/main.c  ****         HAL_Delay(500);
 338:./Src/main.c  ****         Power_Set(0);
 339:./Src/main.c  ****       }
 340:./Src/main.c  ****       //In Carica?
 341:./Src/main.c  ****       /*if(IS_Charge()==0){
 342:./Src/main.c  ****         WAIT_CHARGE_FINISH();
 343:./Src/main.c  ****       }*/
 344:./Src/main.c  **** 
 345:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);   //819mS
 346:./Src/main.c  **** 
 347:./Src/main.c  ****       counterTempTT = HAL_GetTick() - counterTemp;
 348:./Src/main.c  ****     }
 349:./Src/main.c  ****   } else {
 350:./Src/main.c  ****     ADC_L_init();
 351:./Src/main.c  ****     ADC_R_init();
 352:./Src/main.c  ****     MotorL_init();
 353:./Src/main.c  ****     MotorR_init();
 354:./Src/main.c  **** 
 355:./Src/main.c  ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 356:./Src/main.c  **** 
 357:./Src/main.c  ****     Telemetry_init();
 358:./Src/main.c  **** 
 359:./Src/main.c  ****     EE_ReadVariable(VirtAddVarTab[0], &saveValue);
 360:./Src/main.c  **** 
 361:./Src/main.c  ****     //PID_init(0,900); //pwm limit
 362:./Src/main.c  ****     //PID_set_L_costant(0.05,0.01,0.0);
 363:./Src/main.c  ****     //PID_set_R_costant(2.0,0.5,0.0);
 364:./Src/main.c  **** 
 365:./Src/main.c  ****     applcation_init();
 366:./Src/main.c  ****     Battery_TASK();
 367:./Src/main.c  **** 
 368:./Src/main.c  ****     MX_IWDG_Init();
 369:./Src/main.c  **** 
 370:./Src/main.c  ****     Led_Set(1);
 371:./Src/main.c  ****     Buzzer_TwoBeep();
 372:./Src/main.c  ****     HAL_Delay(250);
 373:./Src/main.c  **** 
ARM GAS  /tmp/ccEIq7ZR.s 			page 8


 374:./Src/main.c  ****     MotorR_start();
 375:./Src/main.c  ****     MotorL_start();
 376:./Src/main.c  ****     //MotorR_pwm(80);
 377:./Src/main.c  ****     //MotorL_pwm(-200);
 378:./Src/main.c  **** 
 379:./Src/main.c  ****     LCD_ClearDisplay(&lcd);
 380:./Src/main.c  ****     HAL_Delay(5);
 381:./Src/main.c  ****     LCD_SetLocation(&lcd, 0, 1);
 382:./Src/main.c  ****   	LCD_WriteString(&lcd, "Bat:");
 383:./Src/main.c  ****     LCD_SetLocation(&lcd, 8, 1);
 384:./Src/main.c  ****     LCD_WriteString(&lcd, "V");
 385:./Src/main.c  **** 
 386:./Src/main.c  ****     LCD_SetLocation(&lcd, 15, 1);
 387:./Src/main.c  ****     LCD_WriteString(&lcd, "A");
 388:./Src/main.c  **** 
 389:./Src/main.c  ****     LCD_SetLocation(&lcd, 0, 0);
 390:./Src/main.c  ****   	LCD_WriteString(&lcd, "Controlled by UART");
 391:./Src/main.c  **** 
 392:./Src/main.c  **** 
 393:./Src/main.c  ****     uint32_t sinValue = 0;
 394:./Src/main.c  ****     int lastSpeedL = 0, lastSpeedR = 0;
 395:./Src/main.c  ****     while(1){
 396:./Src/main.c  ****       sinValue++;
 397:./Src/main.c  ****       if(IS_Button()) {
 398:./Src/main.c  ****         while(IS_Button()) {
 399:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 400:./Src/main.c  ****         }
 401:./Src/main.c  ****         Buzzer_OneLongBeep();
 402:./Src/main.c  ****         HAL_Delay(350);
 403:./Src/main.c  ****         Power_Set(0);
 404:./Src/main.c  ****       }
 405:./Src/main.c  **** 
 406:./Src/main.c  ****       if ((sinValue) % (200) == 0) {
 407:./Src/main.c  ****         int speedL = -CLAMP(getMotorR(), -1000, 1000);
 408:./Src/main.c  ****         int speedR = -CLAMP(getMotorL(), -1000, 1000);
 409:./Src/main.c  ****         if (speedL != lastSpeedL || speedR != lastSpeedR) {
 410:./Src/main.c  ****           MotorL_pwm(speedL);
 411:./Src/main.c  ****           MotorR_pwm(speedR);
 412:./Src/main.c  ****           lastSpeedL = speedL;
 413:./Src/main.c  ****           lastSpeedR = speedR;
 414:./Src/main.c  ****         }
 415:./Src/main.c  **** 
 416:./Src/main.c  ****         char str[100];
 417:./Src/main.c  ****         memset(&str[0], 0, sizeof(str));
 418:./Src/main.c  ****         sprintf(str, "%i;%i\n\r", speedL, speedR);
 419:./Src/main.c  ****         Console_Log(str);
 420:./Src/main.c  ****       }
 421:./Src/main.c  **** 
 422:./Src/main.c  ****       Battery_TASK();
 423:./Src/main.c  **** 
 424:./Src/main.c  ****       if(ABS(getMotorCurrentR() * 0.02) > 20.0 || ABS(getMotorCurrentL() * 0.02) > 20.0){
 425:./Src/main.c  ****         MotorL_pwm(0);
 426:./Src/main.c  ****         MotorR_pwm(0);
 427:./Src/main.c  ****         Buzzer_OneLongBeep();
 428:./Src/main.c  ****         LCD_ClearDisplay(&lcd);
 429:./Src/main.c  ****         HAL_Delay(5);
 430:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 0);
ARM GAS  /tmp/ccEIq7ZR.s 			page 9


 431:./Src/main.c  ****         LCD_WriteString(&lcd, "Emergency Off!");
 432:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 1);
 433:./Src/main.c  ****         LCD_WriteString(&lcd, "Overcurrent.");
 434:./Src/main.c  ****         HAL_Delay(500);
 435:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 436:./Src/main.c  ****         HAL_Delay(500);
 437:./Src/main.c  ****         Power_Set(0);
 438:./Src/main.c  ****       }
 439:./Src/main.c  **** 
 440:./Src/main.c  ****       if(GET_BatteryAverage() < 31.0){
 441:./Src/main.c  ****         MotorL_pwm(0);
 442:./Src/main.c  ****         MotorR_pwm(0);
 443:./Src/main.c  ****         Buzzer_OneLongBeep();
 444:./Src/main.c  ****         LCD_ClearDisplay(&lcd);
 445:./Src/main.c  ****         HAL_Delay(5);
 446:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 0);
 447:./Src/main.c  ****         LCD_WriteString(&lcd, "Emergency Off!");
 448:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 1);
 449:./Src/main.c  ****         LCD_WriteString(&lcd, "Battery low.");
 450:./Src/main.c  ****         HAL_Delay(500);
 451:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 452:./Src/main.c  ****         HAL_Delay(500);
 453:./Src/main.c  ****         Power_Set(0);
 454:./Src/main.c  ****       }
 455:./Src/main.c  **** 
 456:./Src/main.c  **** 
 457:./Src/main.c  ****       HAL_IWDG_Refresh(&hiwdg);   //819mS
 458:./Src/main.c  **** 
 459:./Src/main.c  ****       counterTempTT = HAL_GetTick() - counterTemp;
 460:./Src/main.c  ****     }
 461:./Src/main.c  ****   }
 462:./Src/main.c  **** }
 463:./Src/main.c  **** 
 464:./Src/main.c  **** void saveConfig() {
  28              		.loc 1 464 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 465:./Src/main.c  ****   EE_WriteVariable(VirtAddVarTab[0], saveValue);
  37              		.loc 1 465 0
  38 0002 034B     		ldr	r3, .L3
  39 0004 1988     		ldrh	r1, [r3]
  40 0006 034B     		ldr	r3, .L3+4
  41 0008 1888     		ldrh	r0, [r3]
  42 000a FFF7FEFF 		bl	EE_WriteVariable
  43              	.LVL0:
  44 000e 08BD     		pop	{r3, pc}
  45              	.L4:
  46              		.align	2
  47              	.L3:
  48 0010 00000000 		.word	.LANCHOR0
  49 0014 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccEIq7ZR.s 			page 10


  50              		.cfi_endproc
  51              	.LFE65:
  53              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  54              		.align	2
  55              		.global	HAL_ADC_ConvCpltCallback
  56              		.thumb
  57              		.thumb_func
  59              	HAL_ADC_ConvCpltCallback:
  60              	.LFB68:
 466:./Src/main.c  **** }
 467:./Src/main.c  **** 
 468:./Src/main.c  **** /** System Clock Configuration
 469:./Src/main.c  **** */
 470:./Src/main.c  **** void SystemClock_Config(void)
 471:./Src/main.c  **** {
 472:./Src/main.c  **** 
 473:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 474:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 475:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 476:./Src/main.c  **** 
 477:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 478:./Src/main.c  ****     */
 479:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 480:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 481:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 482:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 483:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 484:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 485:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 486:./Src/main.c  ****   {
 487:./Src/main.c  ****     Error_Handler();
 488:./Src/main.c  ****   }
 489:./Src/main.c  **** 
 490:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 491:./Src/main.c  ****     */
 492:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 493:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 494:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 495:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 496:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 497:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 498:./Src/main.c  **** 
 499:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 500:./Src/main.c  ****   {
 501:./Src/main.c  ****     Error_Handler();
 502:./Src/main.c  ****   }
 503:./Src/main.c  **** 
 504:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 505:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 506:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 507:./Src/main.c  ****   {
 508:./Src/main.c  ****     Error_Handler();
 509:./Src/main.c  ****   }
 510:./Src/main.c  **** 
 511:./Src/main.c  ****     /**Configure the Systick interrupt time
 512:./Src/main.c  ****     */
 513:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
ARM GAS  /tmp/ccEIq7ZR.s 			page 11


 514:./Src/main.c  **** 
 515:./Src/main.c  ****     /**Configure the Systick
 516:./Src/main.c  ****     */
 517:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 518:./Src/main.c  **** 
 519:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 520:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 521:./Src/main.c  **** }
 522:./Src/main.c  **** 
 523:./Src/main.c  **** /* IWDG init function */
 524:./Src/main.c  **** static void MX_IWDG_Init(void)
 525:./Src/main.c  **** {
 526:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 527:./Src/main.c  ****   hiwdg.Instance = IWDG;
 528:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 529:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 530:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 531:./Src/main.c  ****   {
 532:./Src/main.c  ****     Error_Handler();
 533:./Src/main.c  ****   }
 534:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 535:./Src/main.c  **** }
 536:./Src/main.c  **** 
 537:./Src/main.c  **** 
 538:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
  61              		.loc 1 538 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              	.LVL1:
  66 0000 10B5     		push	{r4, lr}
  67              	.LCFI1:
  68              		.cfi_def_cfa_offset 8
  69              		.cfi_offset 4, -8
  70              		.cfi_offset 14, -4
  71 0002 0446     		mov	r4, r0
 539:./Src/main.c  ****   if(hadc->Instance == ADC1){
  72              		.loc 1 539 0
  73 0004 0268     		ldr	r2, [r0]
  74 0006 064B     		ldr	r3, .L9
  75 0008 9A42     		cmp	r2, r3
  76 000a 01D1     		bne	.L6
 540:./Src/main.c  ****     ADC_R_callback();
  77              		.loc 1 540 0
  78 000c FFF7FEFF 		bl	ADC_R_callback
  79              	.LVL2:
  80              	.L6:
 541:./Src/main.c  ****   }
 542:./Src/main.c  ****   if(hadc->Instance == ADC3){
  81              		.loc 1 542 0
  82 0010 2268     		ldr	r2, [r4]
  83 0012 044B     		ldr	r3, .L9+4
  84 0014 9A42     		cmp	r2, r3
  85 0016 01D1     		bne	.L5
 543:./Src/main.c  ****     ADC_L_callback();
  86              		.loc 1 543 0
  87 0018 FFF7FEFF 		bl	ADC_L_callback
ARM GAS  /tmp/ccEIq7ZR.s 			page 12


  88              	.LVL3:
  89              	.L5:
  90 001c 10BD     		pop	{r4, pc}
  91              	.LVL4:
  92              	.L10:
  93 001e 00BF     		.align	2
  94              	.L9:
  95 0020 00240140 		.word	1073816576
  96 0024 003C0140 		.word	1073822720
  97              		.cfi_endproc
  98              	.LFE68:
 100              		.section	.text.Error_Handler,"ax",%progbits
 101              		.align	2
 102              		.global	Error_Handler
 103              		.thumb
 104              		.thumb_func
 106              	Error_Handler:
 107              	.LFB69:
 544:./Src/main.c  ****   }
 545:./Src/main.c  **** }
 546:./Src/main.c  **** 
 547:./Src/main.c  **** 
 548:./Src/main.c  **** /**
 549:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 550:./Src/main.c  ****   * @param  None
 551:./Src/main.c  ****   * @retval None
 552:./Src/main.c  ****   */
 553:./Src/main.c  **** void Error_Handler(void)
 554:./Src/main.c  **** {
 108              		.loc 1 554 0
 109              		.cfi_startproc
 110              		@ Volatile: function does not return.
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113 0000 08B5     		push	{r3, lr}
 114              	.LCFI2:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 3, -8
 117              		.cfi_offset 14, -4
 555:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 556:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 557:./Src/main.c  ****   MotorR_stop();
 118              		.loc 1 557 0
 119 0002 FFF7FEFF 		bl	MotorR_stop
 120              	.LVL5:
 558:./Src/main.c  ****   MotorL_stop();
 121              		.loc 1 558 0
 122 0006 FFF7FEFF 		bl	MotorL_stop
 123              	.LVL6:
 124              	.L12:
 125 000a FEE7     		b	.L12
 126              		.cfi_endproc
 127              	.LFE69:
 129              		.section	.text.MX_IWDG_Init,"ax",%progbits
 130              		.align	2
 131              		.thumb
 132              		.thumb_func
ARM GAS  /tmp/ccEIq7ZR.s 			page 13


 134              	MX_IWDG_Init:
 135              	.LFB67:
 525:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 136              		.loc 1 525 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 8
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 00B5     		push	{lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 4
 143              		.cfi_offset 14, -4
 144 0002 83B0     		sub	sp, sp, #12
 145              	.LCFI4:
 146              		.cfi_def_cfa_offset 16
 147              	.LBB2:
 526:./Src/main.c  ****   hiwdg.Instance = IWDG;
 148              		.loc 1 526 0
 149 0004 0E4B     		ldr	r3, .L17
 150 0006 DA69     		ldr	r2, [r3, #28]
 151 0008 42F40062 		orr	r2, r2, #2048
 152 000c DA61     		str	r2, [r3, #28]
 153 000e DB69     		ldr	r3, [r3, #28]
 154 0010 03F40063 		and	r3, r3, #2048
 155 0014 0193     		str	r3, [sp, #4]
 156 0016 019B     		ldr	r3, [sp, #4]
 157              	.LBE2:
 527:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 158              		.loc 1 527 0
 159 0018 0A48     		ldr	r0, .L17+4
 160 001a 0B4B     		ldr	r3, .L17+8
 161 001c 0360     		str	r3, [r0]
 528:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 162              		.loc 1 528 0
 163 001e 0123     		movs	r3, #1
 164 0020 4360     		str	r3, [r0, #4]
 529:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 165              		.loc 1 529 0
 166 0022 40F6FF73 		movw	r3, #4095
 167 0026 8360     		str	r3, [r0, #8]
 530:./Src/main.c  ****   {
 168              		.loc 1 530 0
 169 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 170              	.LVL7:
 171 002c 08B1     		cbz	r0, .L15
 532:./Src/main.c  ****   }
 172              		.loc 1 532 0
 173 002e FFF7FEFF 		bl	Error_Handler
 174              	.LVL8:
 175              	.L15:
 534:./Src/main.c  **** }
 176              		.loc 1 534 0
 177 0032 0448     		ldr	r0, .L17+4
 178 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 179              	.LVL9:
 535:./Src/main.c  **** 
 180              		.loc 1 535 0
 181 0038 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccEIq7ZR.s 			page 14


 182              	.LCFI5:
 183              		.cfi_def_cfa_offset 4
 184              		@ sp needed
 185 003a 5DF804FB 		ldr	pc, [sp], #4
 186              	.L18:
 187 003e 00BF     		.align	2
 188              	.L17:
 189 0040 00100240 		.word	1073876992
 190 0044 00000000 		.word	hiwdg
 191 0048 00300040 		.word	1073754112
 192              		.cfi_endproc
 193              	.LFE67:
 195              		.section	.text.SystemClock_Config,"ax",%progbits
 196              		.align	2
 197              		.global	SystemClock_Config
 198              		.thumb
 199              		.thumb_func
 201              	SystemClock_Config:
 202              	.LFB66:
 471:./Src/main.c  **** 
 203              		.loc 1 471 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 88
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 00B5     		push	{lr}
 208              	.LCFI6:
 209              		.cfi_def_cfa_offset 4
 210              		.cfi_offset 14, -4
 211 0002 97B0     		sub	sp, sp, #92
 212              	.LCFI7:
 213              		.cfi_def_cfa_offset 96
 479:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 214              		.loc 1 479 0
 215 0004 0223     		movs	r3, #2
 216 0006 0C93     		str	r3, [sp, #48]
 480:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 217              		.loc 1 480 0
 218 0008 0122     		movs	r2, #1
 219 000a 1092     		str	r2, [sp, #64]
 481:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 220              		.loc 1 481 0
 221 000c 1022     		movs	r2, #16
 222 000e 1192     		str	r2, [sp, #68]
 482:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 223              		.loc 1 482 0
 224 0010 1393     		str	r3, [sp, #76]
 483:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 225              		.loc 1 483 0
 226 0012 0023     		movs	r3, #0
 227 0014 1493     		str	r3, [sp, #80]
 484:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 228              		.loc 1 484 0
 229 0016 4FF46013 		mov	r3, #3670016
 230 001a 1593     		str	r3, [sp, #84]
 485:./Src/main.c  ****   {
 231              		.loc 1 485 0
 232 001c 0CA8     		add	r0, sp, #48
ARM GAS  /tmp/ccEIq7ZR.s 			page 15


 233 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 234              	.LVL10:
 235 0022 08B1     		cbz	r0, .L20
 487:./Src/main.c  ****   }
 236              		.loc 1 487 0
 237 0024 FFF7FEFF 		bl	Error_Handler
 238              	.LVL11:
 239              	.L20:
 492:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 240              		.loc 1 492 0
 241 0028 0F23     		movs	r3, #15
 242 002a 0793     		str	r3, [sp, #28]
 494:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 243              		.loc 1 494 0
 244 002c 0221     		movs	r1, #2
 245 002e 0891     		str	r1, [sp, #32]
 495:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 246              		.loc 1 495 0
 247 0030 0023     		movs	r3, #0
 248 0032 0993     		str	r3, [sp, #36]
 496:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 249              		.loc 1 496 0
 250 0034 4FF48062 		mov	r2, #1024
 251 0038 0A92     		str	r2, [sp, #40]
 497:./Src/main.c  **** 
 252              		.loc 1 497 0
 253 003a 0B93     		str	r3, [sp, #44]
 499:./Src/main.c  ****   {
 254              		.loc 1 499 0
 255 003c 07A8     		add	r0, sp, #28
 256 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 257              	.LVL12:
 258 0042 08B1     		cbz	r0, .L21
 501:./Src/main.c  ****   }
 259              		.loc 1 501 0
 260 0044 FFF7FEFF 		bl	Error_Handler
 261              	.LVL13:
 262              	.L21:
 504:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 263              		.loc 1 504 0
 264 0048 0223     		movs	r3, #2
 265 004a 0193     		str	r3, [sp, #4]
 505:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 266              		.loc 1 505 0
 267 004c 4FF44043 		mov	r3, #49152
 268 0050 0393     		str	r3, [sp, #12]
 506:./Src/main.c  ****   {
 269              		.loc 1 506 0
 270 0052 01A8     		add	r0, sp, #4
 271 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 272              	.LVL14:
 273 0058 08B1     		cbz	r0, .L22
 508:./Src/main.c  ****   }
 274              		.loc 1 508 0
 275 005a FFF7FEFF 		bl	Error_Handler
 276              	.LVL15:
 277              	.L22:
ARM GAS  /tmp/ccEIq7ZR.s 			page 16


 513:./Src/main.c  **** 
 278              		.loc 1 513 0
 279 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 280              	.LVL16:
 281 0062 094B     		ldr	r3, .L24
 282 0064 A3FB0030 		umull	r3, r0, r3, r0
 283 0068 8009     		lsrs	r0, r0, #6
 284 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
 285              	.LVL17:
 517:./Src/main.c  **** 
 286              		.loc 1 517 0
 287 006e 0420     		movs	r0, #4
 288 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 289              	.LVL18:
 520:./Src/main.c  **** }
 290              		.loc 1 520 0
 291 0074 0022     		movs	r2, #0
 292 0076 1146     		mov	r1, r2
 293 0078 4FF0FF30 		mov	r0, #-1
 294 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 295              	.LVL19:
 521:./Src/main.c  **** 
 296              		.loc 1 521 0
 297 0080 17B0     		add	sp, sp, #92
 298              	.LCFI8:
 299              		.cfi_def_cfa_offset 4
 300              		@ sp needed
 301 0082 5DF804FB 		ldr	pc, [sp], #4
 302              	.L25:
 303 0086 00BF     		.align	2
 304              	.L24:
 305 0088 D34D6210 		.word	274877907
 306              		.cfi_endproc
 307              	.LFE66:
 309              		.global	__aeabi_i2d
 310              		.global	__aeabi_dmul
 311              		.global	__aeabi_dcmplt
 312              		.global	__aeabi_dcmpgt
 313              		.global	__aeabi_fcmplt
 314              		.section	.text.main,"ax",%progbits
 315              		.align	2
 316              		.global	main
 317              		.thumb
 318              		.thumb_func
 320              	main:
 321              	.LFB64:
 105:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 322              		.loc 1 105 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 112
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 327              	.LCFI9:
 328              		.cfi_def_cfa_offset 24
 329              		.cfi_offset 4, -24
 330              		.cfi_offset 5, -20
 331              		.cfi_offset 6, -16
ARM GAS  /tmp/ccEIq7ZR.s 			page 17


 332              		.cfi_offset 7, -12
 333              		.cfi_offset 8, -8
 334              		.cfi_offset 14, -4
 335 0004 9EB0     		sub	sp, sp, #120
 336              	.LCFI10:
 337              		.cfi_def_cfa_offset 144
 107:./Src/main.c  **** 
 338              		.loc 1 107 0
 339 0006 FFF7FEFF 		bl	HAL_Init
 340              	.LVL20:
 110:./Src/main.c  **** 
 341              		.loc 1 110 0
 342 000a FFF7FEFF 		bl	SystemClock_Config
 343              	.LVL21:
 112:./Src/main.c  **** 
 344              		.loc 1 112 0
 345 000e FFF7FEFF 		bl	Button_init
 346              	.LVL22:
 114:./Src/main.c  **** 
 347              		.loc 1 114 0
 348 0012 0120     		movs	r0, #1
 349 0014 FFF7FEFF 		bl	Power_Set
 350              	.LVL23:
 118:./Src/main.c  **** 
 351              		.loc 1 118 0
 352 0018 FFF7FEFF 		bl	MX_I2C2_Init
 353              	.LVL24:
 121:./Src/main.c  **** 
 354              		.loc 1 121 0
 355 001c FFF7FEFF 		bl	HAL_FLASH_Unlock
 356              	.LVL25:
 124:./Src/main.c  **** 
 357              		.loc 1 124 0
 358 0020 FFF7FEFF 		bl	EE_Init
 359              	.LVL26:
 127:./Src/main.c  **** 	lcd.pcf8574.PCF_I2C_TIMEOUT = 1000;
 360              		.loc 1 127 0
 361 0024 AA4E     		ldr	r6, .L58+8
 362 0026 2723     		movs	r3, #39
 363 0028 86F84030 		strb	r3, [r6, #64]
 128:./Src/main.c  **** 	lcd.pcf8574.i2c = hi2c2;
 364              		.loc 1 128 0
 365 002c 4FF47A73 		mov	r3, #1000
 366 0030 7364     		str	r3, [r6, #68]
 129:./Src/main.c  **** 	lcd.NUMBER_OF_LINES = NUMBER_OF_LINES_2;
 367              		.loc 1 129 0
 368 0032 A84F     		ldr	r7, .L58+12
 369 0034 06F14804 		add	r4, r6, #72
 370 0038 3D46     		mov	r5, r7
 371 003a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 372 003c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 373 003e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 374 0040 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 375 0042 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 376 0044 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 377 0046 95E80700 		ldmia	r5, {r0, r1, r2}
 378 004a 84E80700 		stmia	r4, {r0, r1, r2}
ARM GAS  /tmp/ccEIq7ZR.s 			page 18


 130:./Src/main.c  **** 	lcd.type = TYPE0;
 379              		.loc 1 130 0
 380 004e 0125     		movs	r5, #1
 381 0050 3570     		strb	r5, [r6]
 131:./Src/main.c  **** 
 382              		.loc 1 131 0
 383 0052 0024     		movs	r4, #0
 384 0054 86F83C40 		strb	r4, [r6, #60]
 133:./Src/main.c  **** 		// error occured
 385              		.loc 1 133 0
 386 0058 3046     		mov	r0, r6
 387 005a FFF7FEFF 		bl	LCD_Init
 388              	.LVL27:
 139:./Src/main.c  ****   LCD_SetLocation(&lcd, 0, 0);
 389              		.loc 1 139 0
 390 005e 3046     		mov	r0, r6
 391 0060 FFF7FEFF 		bl	LCD_ClearDisplay
 392              	.LVL28:
 140:./Src/main.c  **** 	LCD_WriteString(&lcd, "TranspOtter V1.3");
 393              		.loc 1 140 0
 394 0064 2246     		mov	r2, r4
 395 0066 2146     		mov	r1, r4
 396 0068 3046     		mov	r0, r6
 397 006a FFF7FEFF 		bl	LCD_SetLocation
 398              	.LVL29:
 141:./Src/main.c  **** 
 399              		.loc 1 141 0
 400 006e 9A49     		ldr	r1, .L58+16
 401 0070 3046     		mov	r0, r6
 402 0072 FFF7FEFF 		bl	LCD_WriteString
 403              	.LVL30:
 144:./Src/main.c  ****     HAL_I2C_Master_Receive(&hi2c2, (42), &message, 6, HAL_MAX_DELAY);
 404              		.loc 1 144 0
 405 0076 994B     		ldr	r3, .L58+20
 406 0078 93E80300 		ldmia	r3, {r0, r1}
 407 007c 1C90     		str	r0, [sp, #112]
 408 007e ADF87410 		strh	r1, [sp, #116]	@ movhi
 145:./Src/main.c  ****   #endif
 409              		.loc 1 145 0
 410 0082 4FF0FF33 		mov	r3, #-1
 411 0086 0093     		str	r3, [sp]
 412 0088 0623     		movs	r3, #6
 413 008a 1CAA     		add	r2, sp, #112
 414 008c 2A21     		movs	r1, #42
 415 008e 3846     		mov	r0, r7
 416 0090 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 417              	.LVL31:
 148:./Src/main.c  **** 	LCD_WriteString(&lcd, "Initializing...");
 418              		.loc 1 148 0
 419 0094 2A46     		mov	r2, r5
 420 0096 2146     		mov	r1, r4
 421 0098 3046     		mov	r0, r6
 422 009a FFF7FEFF 		bl	LCD_SetLocation
 423              	.LVL32:
 149:./Src/main.c  ****   //LCD_WriteString(&lcd, message);
 424              		.loc 1 149 0
 425 009e 9049     		ldr	r1, .L58+24
ARM GAS  /tmp/ccEIq7ZR.s 			page 19


 426 00a0 3046     		mov	r0, r6
 427 00a2 FFF7FEFF 		bl	LCD_WriteString
 428              	.LVL33:
 152:./Src/main.c  ****   Led_init();
 429              		.loc 1 152 0
 430 00a6 FFF7FEFF 		bl	Buzzer_init
 431              	.LVL34:
 153:./Src/main.c  ****   IS_Charge_init();
 432              		.loc 1 153 0
 433 00aa FFF7FEFF 		bl	Led_init
 434              	.LVL35:
 154:./Src/main.c  **** 
 435              		.loc 1 154 0
 436 00ae FFF7FEFF 		bl	IS_Charge_init
 437              	.LVL36:
 157:./Src/main.c  ****   int buttonTimeout = 0;
 438              		.loc 1 157 0
 439 00b2 40F22620 		movw	r0, #550
 440 00b6 FFF7FEFF 		bl	HAL_Delay
 441              	.LVL37:
 442              	.LBB3:
 159:./Src/main.c  ****     Led_Set(0);
 443              		.loc 1 159 0
 444 00ba 02E0     		b	.L27
 445              	.L28:
 160:./Src/main.c  ****   }
 446              		.loc 1 160 0
 447 00bc 0020     		movs	r0, #0
 448 00be FFF7FEFF 		bl	Led_Set
 449              	.LVL38:
 450              	.L27:
 159:./Src/main.c  ****     Led_Set(0);
 451              		.loc 1 159 0
 452 00c2 FFF7FEFF 		bl	IS_Button
 453              	.LVL39:
 454 00c6 0028     		cmp	r0, #0
 455 00c8 F8D1     		bne	.L28
 456              	.LBE3:
 457              	.LBB4:
 350:./Src/main.c  ****     ADC_R_init();
 458              		.loc 1 350 0
 459 00ca FFF7FEFF 		bl	ADC_L_init
 460              	.LVL40:
 351:./Src/main.c  ****     MotorL_init();
 461              		.loc 1 351 0
 462 00ce FFF7FEFF 		bl	ADC_R_init
 463              	.LVL41:
 352:./Src/main.c  ****     MotorR_init();
 464              		.loc 1 352 0
 465 00d2 FFF7FEFF 		bl	MotorL_init
 466              	.LVL42:
 353:./Src/main.c  **** 
 467              		.loc 1 353 0
 468 00d6 FFF7FEFF 		bl	MotorR_init
 469              	.LVL43:
 355:./Src/main.c  **** 
 470              		.loc 1 355 0
ARM GAS  /tmp/ccEIq7ZR.s 			page 20


 471 00da 0C21     		movs	r1, #12
 472 00dc 8148     		ldr	r0, .L58+28
 473 00de FFF7FEFF 		bl	HAL_GPIO_DeInit
 474              	.LVL44:
 357:./Src/main.c  **** 
 475              		.loc 1 357 0
 476 00e2 FFF7FEFF 		bl	Telemetry_init
 477              	.LVL45:
 359:./Src/main.c  **** 
 478              		.loc 1 359 0
 479 00e6 8049     		ldr	r1, .L58+32
 480 00e8 804B     		ldr	r3, .L58+36
 481 00ea 1888     		ldrh	r0, [r3]
 482 00ec FFF7FEFF 		bl	EE_ReadVariable
 483              	.LVL46:
 365:./Src/main.c  ****     Battery_TASK();
 484              		.loc 1 365 0
 485 00f0 FFF7FEFF 		bl	applcation_init
 486              	.LVL47:
 366:./Src/main.c  **** 
 487              		.loc 1 366 0
 488 00f4 FFF7FEFF 		bl	Battery_TASK
 489              	.LVL48:
 368:./Src/main.c  **** 
 490              		.loc 1 368 0
 491 00f8 FFF7FEFF 		bl	MX_IWDG_Init
 492              	.LVL49:
 370:./Src/main.c  ****     Buzzer_TwoBeep();
 493              		.loc 1 370 0
 494 00fc 0120     		movs	r0, #1
 495 00fe FFF7FEFF 		bl	Led_Set
 496              	.LVL50:
 371:./Src/main.c  ****     HAL_Delay(250);
 497              		.loc 1 371 0
 498 0102 FFF7FEFF 		bl	Buzzer_TwoBeep
 499              	.LVL51:
 372:./Src/main.c  **** 
 500              		.loc 1 372 0
 501 0106 FA20     		movs	r0, #250
 502 0108 FFF7FEFF 		bl	HAL_Delay
 503              	.LVL52:
 374:./Src/main.c  ****     MotorL_start();
 504              		.loc 1 374 0
 505 010c FFF7FEFF 		bl	MotorR_start
 506              	.LVL53:
 375:./Src/main.c  ****     //MotorR_pwm(80);
 507              		.loc 1 375 0
 508 0110 FFF7FEFF 		bl	MotorL_start
 509              	.LVL54:
 379:./Src/main.c  ****     HAL_Delay(5);
 510              		.loc 1 379 0
 511 0114 6E4C     		ldr	r4, .L58+8
 512 0116 2046     		mov	r0, r4
 513 0118 FFF7FEFF 		bl	LCD_ClearDisplay
 514              	.LVL55:
 380:./Src/main.c  ****     LCD_SetLocation(&lcd, 0, 1);
 515              		.loc 1 380 0
ARM GAS  /tmp/ccEIq7ZR.s 			page 21


 516 011c 0520     		movs	r0, #5
 517 011e FFF7FEFF 		bl	HAL_Delay
 518              	.LVL56:
 381:./Src/main.c  ****   	LCD_WriteString(&lcd, "Bat:");
 519              		.loc 1 381 0
 520 0122 0122     		movs	r2, #1
 521 0124 0021     		movs	r1, #0
 522 0126 2046     		mov	r0, r4
 523 0128 FFF7FEFF 		bl	LCD_SetLocation
 524              	.LVL57:
 382:./Src/main.c  ****     LCD_SetLocation(&lcd, 8, 1);
 525              		.loc 1 382 0
 526 012c 7049     		ldr	r1, .L58+40
 527 012e 2046     		mov	r0, r4
 528 0130 FFF7FEFF 		bl	LCD_WriteString
 529              	.LVL58:
 383:./Src/main.c  ****     LCD_WriteString(&lcd, "V");
 530              		.loc 1 383 0
 531 0134 0122     		movs	r2, #1
 532 0136 0821     		movs	r1, #8
 533 0138 2046     		mov	r0, r4
 534 013a FFF7FEFF 		bl	LCD_SetLocation
 535              	.LVL59:
 384:./Src/main.c  **** 
 536              		.loc 1 384 0
 537 013e 6D49     		ldr	r1, .L58+44
 538 0140 2046     		mov	r0, r4
 539 0142 FFF7FEFF 		bl	LCD_WriteString
 540              	.LVL60:
 386:./Src/main.c  ****     LCD_WriteString(&lcd, "A");
 541              		.loc 1 386 0
 542 0146 0122     		movs	r2, #1
 543 0148 0F21     		movs	r1, #15
 544 014a 2046     		mov	r0, r4
 545 014c FFF7FEFF 		bl	LCD_SetLocation
 546              	.LVL61:
 387:./Src/main.c  **** 
 547              		.loc 1 387 0
 548 0150 6949     		ldr	r1, .L58+48
 549 0152 2046     		mov	r0, r4
 550 0154 FFF7FEFF 		bl	LCD_WriteString
 551              	.LVL62:
 389:./Src/main.c  ****   	LCD_WriteString(&lcd, "Controlled by UART");
 552              		.loc 1 389 0
 553 0158 0022     		movs	r2, #0
 554 015a 1146     		mov	r1, r2
 555 015c 2046     		mov	r0, r4
 556 015e FFF7FEFF 		bl	LCD_SetLocation
 557              	.LVL63:
 390:./Src/main.c  **** 
 558              		.loc 1 390 0
 559 0162 6649     		ldr	r1, .L58+52
 560 0164 2046     		mov	r0, r4
 561 0166 FFF7FEFF 		bl	LCD_WriteString
 562              	.LVL64:
 394:./Src/main.c  ****     while(1){
 563              		.loc 1 394 0
ARM GAS  /tmp/ccEIq7ZR.s 			page 22


 564 016a 0027     		movs	r7, #0
 565 016c 3E46     		mov	r6, r7
 393:./Src/main.c  ****     int lastSpeedL = 0, lastSpeedR = 0;
 566              		.loc 1 393 0
 567 016e 3D46     		mov	r5, r7
 568              	.LVL65:
 569              	.L47:
 396:./Src/main.c  ****       if(IS_Button()) {
 570              		.loc 1 396 0
 571 0170 0135     		adds	r5, r5, #1
 572              	.LVL66:
 573              	.LBB5:
 397:./Src/main.c  ****         while(IS_Button()) {
 574              		.loc 1 397 0
 575 0172 FFF7FEFF 		bl	IS_Button
 576              	.LVL67:
 577 0176 18B9     		cbnz	r0, .L29
 578 0178 0FE0     		b	.L30
 579              	.L31:
 399:./Src/main.c  ****         }
 580              		.loc 1 399 0
 581 017a 6148     		ldr	r0, .L58+56
 582 017c FFF7FEFF 		bl	HAL_IWDG_Refresh
 583              	.LVL68:
 584              	.L29:
 398:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 585              		.loc 1 398 0
 586 0180 FFF7FEFF 		bl	IS_Button
 587              	.LVL69:
 588 0184 0028     		cmp	r0, #0
 589 0186 F8D1     		bne	.L31
 401:./Src/main.c  ****         HAL_Delay(350);
 590              		.loc 1 401 0
 591 0188 FFF7FEFF 		bl	Buzzer_OneLongBeep
 592              	.LVL70:
 402:./Src/main.c  ****         Power_Set(0);
 593              		.loc 1 402 0
 594 018c 4FF4AF70 		mov	r0, #350
 595 0190 FFF7FEFF 		bl	HAL_Delay
 596              	.LVL71:
 403:./Src/main.c  ****       }
 597              		.loc 1 403 0
 598 0194 0020     		movs	r0, #0
 599 0196 FFF7FEFF 		bl	Power_Set
 600              	.LVL72:
 601              	.L30:
 602              	.LBE5:
 406:./Src/main.c  ****         int speedL = -CLAMP(getMotorR(), -1000, 1000);
 603              		.loc 1 406 0
 604 019a 5A4B     		ldr	r3, .L58+60
 605 019c A3FB0523 		umull	r2, r3, r3, r5
 606 01a0 9B09     		lsrs	r3, r3, #6
 607 01a2 C822     		movs	r2, #200
 608 01a4 02FB1353 		mls	r3, r2, r3, r5
 609 01a8 002B     		cmp	r3, #0
 610 01aa 40D1     		bne	.L32
 611              	.LBB6:
ARM GAS  /tmp/ccEIq7ZR.s 			page 23


 407:./Src/main.c  ****         int speedR = -CLAMP(getMotorL(), -1000, 1000);
 612              		.loc 1 407 0
 613 01ac FFF7FEFF 		bl	getMotorR
 614              	.LVL73:
 615 01b0 B0F57A7F 		cmp	r0, #1000
 616 01b4 08DC     		bgt	.L48
 407:./Src/main.c  ****         int speedR = -CLAMP(getMotorL(), -1000, 1000);
 617              		.loc 1 407 0 is_stmt 0 discriminator 1
 618 01b6 FFF7FEFF 		bl	getMotorR
 619              	.LVL74:
 620 01ba 10F57A7F 		cmn	r0, #1000
 621 01be 05DB     		blt	.L49
 407:./Src/main.c  ****         int speedR = -CLAMP(getMotorL(), -1000, 1000);
 622              		.loc 1 407 0 discriminator 3
 623 01c0 FFF7FEFF 		bl	getMotorR
 624              	.LVL75:
 625 01c4 4442     		negs	r4, r0
 626 01c6 03E0     		b	.L33
 627              	.L48:
 407:./Src/main.c  ****         int speedR = -CLAMP(getMotorL(), -1000, 1000);
 628              		.loc 1 407 0
 629 01c8 4F4C     		ldr	r4, .L58+64
 630 01ca 01E0     		b	.L33
 631              	.L49:
 632 01cc 4FF47A74 		mov	r4, #1000
 633              	.L33:
 634              	.LVL76:
 408:./Src/main.c  ****         if (speedL != lastSpeedL || speedR != lastSpeedR) {
 635              		.loc 1 408 0 is_stmt 1 discriminator 8
 636 01d0 FFF7FEFF 		bl	getMotorL
 637              	.LVL77:
 638 01d4 B0F57A7F 		cmp	r0, #1000
 639 01d8 09DC     		bgt	.L50
 408:./Src/main.c  ****         if (speedL != lastSpeedL || speedR != lastSpeedR) {
 640              		.loc 1 408 0 is_stmt 0 discriminator 1
 641 01da FFF7FEFF 		bl	getMotorL
 642              	.LVL78:
 643 01de 10F57A7F 		cmn	r0, #1000
 644 01e2 07DB     		blt	.L51
 408:./Src/main.c  ****         if (speedL != lastSpeedL || speedR != lastSpeedR) {
 645              		.loc 1 408 0 discriminator 3
 646 01e4 FFF7FEFF 		bl	getMotorL
 647              	.LVL79:
 648 01e8 C0F10008 		rsb	r8, r0, #0
 649 01ec 04E0     		b	.L34
 650              	.L50:
 408:./Src/main.c  ****         if (speedL != lastSpeedL || speedR != lastSpeedR) {
 651              		.loc 1 408 0
 652 01ee DFF81881 		ldr	r8, .L58+64
 653 01f2 01E0     		b	.L34
 654              	.L51:
 655 01f4 4FF47A78 		mov	r8, #1000
 656              	.L34:
 657              	.LVL80:
 409:./Src/main.c  ****           MotorL_pwm(speedL);
 658              		.loc 1 409 0 is_stmt 1 discriminator 8
 659 01f8 A642     		cmp	r6, r4
ARM GAS  /tmp/ccEIq7ZR.s 			page 24


 660 01fa 01D1     		bne	.L35
 409:./Src/main.c  ****           MotorL_pwm(speedL);
 661              		.loc 1 409 0 is_stmt 0 discriminator 1
 662 01fc 4745     		cmp	r7, r8
 663 01fe 08D0     		beq	.L36
 664              	.L35:
 410:./Src/main.c  ****           MotorR_pwm(speedR);
 665              		.loc 1 410 0 is_stmt 1
 666 0200 20B2     		sxth	r0, r4
 667 0202 FFF7FEFF 		bl	MotorL_pwm
 668              	.LVL81:
 411:./Src/main.c  ****           lastSpeedL = speedL;
 669              		.loc 1 411 0
 670 0206 0FFA88F0 		sxth	r0, r8
 671 020a FFF7FEFF 		bl	MotorR_pwm
 672              	.LVL82:
 413:./Src/main.c  ****         }
 673              		.loc 1 413 0
 674 020e 4746     		mov	r7, r8
 412:./Src/main.c  ****           lastSpeedR = speedR;
 675              		.loc 1 412 0
 676 0210 2646     		mov	r6, r4
 677              	.LVL83:
 678              	.L36:
 417:./Src/main.c  ****         sprintf(str, "%i;%i\n\r", speedL, speedR);
 679              		.loc 1 417 0
 680 0212 6422     		movs	r2, #100
 681 0214 0021     		movs	r1, #0
 682 0216 03A8     		add	r0, sp, #12
 683 0218 FFF7FEFF 		bl	memset
 684              	.LVL84:
 418:./Src/main.c  ****         Console_Log(str);
 685              		.loc 1 418 0
 686 021c 4346     		mov	r3, r8
 687 021e 2246     		mov	r2, r4
 688 0220 3A49     		ldr	r1, .L58+68
 689 0222 03A8     		add	r0, sp, #12
 690 0224 FFF7FEFF 		bl	sprintf
 691              	.LVL85:
 419:./Src/main.c  ****       }
 692              		.loc 1 419 0
 693 0228 03A8     		add	r0, sp, #12
 694 022a FFF7FEFF 		bl	Console_Log
 695              	.LVL86:
 696              	.L32:
 697              	.LBE6:
 422:./Src/main.c  **** 
 698              		.loc 1 422 0
 699 022e FFF7FEFF 		bl	Battery_TASK
 700              	.LVL87:
 701              	.LBB7:
 424:./Src/main.c  ****         MotorL_pwm(0);
 702              		.loc 1 424 0
 703 0232 FFF7FEFF 		bl	getMotorCurrentR
 704              	.LVL88:
 705 0236 FFF7FEFF 		bl	__aeabi_i2d
 706              	.LVL89:
ARM GAS  /tmp/ccEIq7ZR.s 			page 25


 707 023a 23A3     		adr	r3, .L58
 708 023c D3E90023 		ldrd	r2, [r3]
 709 0240 FFF7FEFF 		bl	__aeabi_dmul
 710              	.LVL90:
 711 0244 0022     		movs	r2, #0
 712 0246 0023     		movs	r3, #0
 713 0248 FFF7FEFF 		bl	__aeabi_dcmplt
 714              	.LVL91:
 715 024c 78B1     		cbz	r0, .L55
 424:./Src/main.c  ****         MotorL_pwm(0);
 716              		.loc 1 424 0 is_stmt 0 discriminator 1
 717 024e FFF7FEFF 		bl	getMotorCurrentR
 718              	.LVL92:
 719 0252 FFF7FEFF 		bl	__aeabi_i2d
 720              	.LVL93:
 721 0256 1CA3     		adr	r3, .L58
 722 0258 D3E90023 		ldrd	r2, [r3]
 723 025c FFF7FEFF 		bl	__aeabi_dmul
 724              	.LVL94:
 725 0260 0022     		movs	r2, #0
 726 0262 2B4B     		ldr	r3, .L58+72
 727 0264 FFF7FEFF 		bl	__aeabi_dcmplt
 728              	.LVL95:
 729 0268 0028     		cmp	r0, #0
 730 026a 63D1     		bne	.L39
 731 026c 0EE0     		b	.L40
 732              	.L55:
 424:./Src/main.c  ****         MotorL_pwm(0);
 733              		.loc 1 424 0 discriminator 2
 734 026e FFF7FEFF 		bl	getMotorCurrentR
 735              	.LVL96:
 736 0272 FFF7FEFF 		bl	__aeabi_i2d
 737              	.LVL97:
 738 0276 14A3     		adr	r3, .L58
 739 0278 D3E90023 		ldrd	r2, [r3]
 740 027c FFF7FEFF 		bl	__aeabi_dmul
 741              	.LVL98:
 742 0280 0022     		movs	r2, #0
 743 0282 244B     		ldr	r3, .L58+76
 744 0284 FFF7FEFF 		bl	__aeabi_dcmpgt
 745              	.LVL99:
 746 0288 0028     		cmp	r0, #0
 747 028a 53D1     		bne	.L39
 748              	.L40:
 424:./Src/main.c  ****         MotorL_pwm(0);
 749              		.loc 1 424 0 discriminator 3
 750 028c FFF7FEFF 		bl	getMotorCurrentL
 751              	.LVL100:
 752 0290 FFF7FEFF 		bl	__aeabi_i2d
 753              	.LVL101:
 754 0294 0CA3     		adr	r3, .L58
 755 0296 D3E90023 		ldrd	r2, [r3]
 756 029a FFF7FEFF 		bl	__aeabi_dmul
 757              	.LVL102:
 758 029e 0022     		movs	r2, #0
 759 02a0 0023     		movs	r3, #0
 760 02a2 FFF7FEFF 		bl	__aeabi_dcmplt
ARM GAS  /tmp/ccEIq7ZR.s 			page 26


 761              	.LVL103:
 762 02a6 B8B3     		cbz	r0, .L56
 424:./Src/main.c  ****         MotorL_pwm(0);
 763              		.loc 1 424 0 discriminator 4
 764 02a8 FFF7FEFF 		bl	getMotorCurrentL
 765              	.LVL104:
 766 02ac FFF7FEFF 		bl	__aeabi_i2d
 767              	.LVL105:
 768 02b0 05A3     		adr	r3, .L58
 769 02b2 D3E90023 		ldrd	r2, [r3]
 770 02b6 FFF7FEFF 		bl	__aeabi_dmul
 771              	.LVL106:
 772 02ba 0022     		movs	r2, #0
 773 02bc 144B     		ldr	r3, .L58+72
 774 02be FFF7FEFF 		bl	__aeabi_dcmplt
 775              	.LVL107:
 776 02c2 B8BB     		cbnz	r0, .L39
 777 02c4 65E0     		b	.L43
 778              	.L59:
 779 02c6 00BF     		.align	3
 780              	.L58:
 781 02c8 7B14AE47 		.word	1202590843
 782 02cc E17A943F 		.word	1066695393
 783 02d0 00000000 		.word	lcd
 784 02d4 00000000 		.word	hi2c2
 785 02d8 00000000 		.word	.LC0
 786 02dc 80000000 		.word	.LC1
 787 02e0 14000000 		.word	.LC2
 788 02e4 00080140 		.word	1073809408
 789 02e8 00000000 		.word	.LANCHOR0
 790 02ec 00000000 		.word	.LANCHOR1
 791 02f0 24000000 		.word	.LC3
 792 02f4 2C000000 		.word	.LC4
 793 02f8 30000000 		.word	.LC5
 794 02fc 34000000 		.word	.LC6
 795 0300 00000000 		.word	hiwdg
 796 0304 1F85EB51 		.word	1374389535
 797 0308 18FCFFFF 		.word	-1000
 798 030c 48000000 		.word	.LC7
 799 0310 000034C0 		.word	-1070333952
 800 0314 00003440 		.word	1077149696
 801              	.L56:
 424:./Src/main.c  ****         MotorL_pwm(0);
 802              		.loc 1 424 0 discriminator 5
 803 0318 FFF7FEFF 		bl	getMotorCurrentL
 804              	.LVL108:
 805 031c FFF7FEFF 		bl	__aeabi_i2d
 806              	.LVL109:
 807 0320 3DA3     		adr	r3, .L60
 808 0322 D3E90023 		ldrd	r2, [r3]
 809 0326 FFF7FEFF 		bl	__aeabi_dmul
 810              	.LVL110:
 811 032a 0022     		movs	r2, #0
 812 032c 3C4B     		ldr	r3, .L60+8
 813 032e FFF7FEFF 		bl	__aeabi_dcmpgt
 814              	.LVL111:
 815 0332 70B3     		cbz	r0, .L43
ARM GAS  /tmp/ccEIq7ZR.s 			page 27


 816              	.L39:
 425:./Src/main.c  ****         MotorR_pwm(0);
 817              		.loc 1 425 0 is_stmt 1
 818 0334 0020     		movs	r0, #0
 819 0336 FFF7FEFF 		bl	MotorL_pwm
 820              	.LVL112:
 426:./Src/main.c  ****         Buzzer_OneLongBeep();
 821              		.loc 1 426 0
 822 033a 0020     		movs	r0, #0
 823 033c FFF7FEFF 		bl	MotorR_pwm
 824              	.LVL113:
 427:./Src/main.c  ****         LCD_ClearDisplay(&lcd);
 825              		.loc 1 427 0
 826 0340 FFF7FEFF 		bl	Buzzer_OneLongBeep
 827              	.LVL114:
 428:./Src/main.c  ****         HAL_Delay(5);
 828              		.loc 1 428 0
 829 0344 374C     		ldr	r4, .L60+12
 830 0346 2046     		mov	r0, r4
 831 0348 FFF7FEFF 		bl	LCD_ClearDisplay
 832              	.LVL115:
 429:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 0);
 833              		.loc 1 429 0
 834 034c 0520     		movs	r0, #5
 835 034e FFF7FEFF 		bl	HAL_Delay
 836              	.LVL116:
 430:./Src/main.c  ****         LCD_WriteString(&lcd, "Emergency Off!");
 837              		.loc 1 430 0
 838 0352 0022     		movs	r2, #0
 839 0354 1146     		mov	r1, r2
 840 0356 2046     		mov	r0, r4
 841 0358 FFF7FEFF 		bl	LCD_SetLocation
 842              	.LVL117:
 431:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 1);
 843              		.loc 1 431 0
 844 035c 3249     		ldr	r1, .L60+16
 845 035e 2046     		mov	r0, r4
 846 0360 FFF7FEFF 		bl	LCD_WriteString
 847              	.LVL118:
 432:./Src/main.c  ****         LCD_WriteString(&lcd, "Overcurrent.");
 848              		.loc 1 432 0
 849 0364 0122     		movs	r2, #1
 850 0366 0021     		movs	r1, #0
 851 0368 2046     		mov	r0, r4
 852 036a FFF7FEFF 		bl	LCD_SetLocation
 853              	.LVL119:
 433:./Src/main.c  ****         HAL_Delay(500);
 854              		.loc 1 433 0
 855 036e 2F49     		ldr	r1, .L60+20
 856 0370 2046     		mov	r0, r4
 857 0372 FFF7FEFF 		bl	LCD_WriteString
 858              	.LVL120:
 434:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 859              		.loc 1 434 0
 860 0376 4FF4FA70 		mov	r0, #500
 861 037a FFF7FEFF 		bl	HAL_Delay
 862              	.LVL121:
ARM GAS  /tmp/ccEIq7ZR.s 			page 28


 435:./Src/main.c  ****         HAL_Delay(500);
 863              		.loc 1 435 0
 864 037e 2C48     		ldr	r0, .L60+24
 865 0380 FFF7FEFF 		bl	HAL_IWDG_Refresh
 866              	.LVL122:
 436:./Src/main.c  ****         Power_Set(0);
 867              		.loc 1 436 0
 868 0384 4FF4FA70 		mov	r0, #500
 869 0388 FFF7FEFF 		bl	HAL_Delay
 870              	.LVL123:
 437:./Src/main.c  ****       }
 871              		.loc 1 437 0
 872 038c 0020     		movs	r0, #0
 873 038e FFF7FEFF 		bl	Power_Set
 874              	.LVL124:
 875              	.L43:
 876              	.LBE7:
 440:./Src/main.c  ****         MotorL_pwm(0);
 877              		.loc 1 440 0
 878 0392 FFF7FEFF 		bl	GET_BatteryAverage
 879              	.LVL125:
 880 0396 2749     		ldr	r1, .L60+28
 881 0398 FFF7FEFF 		bl	__aeabi_fcmplt
 882              	.LVL126:
 883 039c 70B3     		cbz	r0, .L45
 441:./Src/main.c  ****         MotorR_pwm(0);
 884              		.loc 1 441 0
 885 039e 0020     		movs	r0, #0
 886 03a0 FFF7FEFF 		bl	MotorL_pwm
 887              	.LVL127:
 442:./Src/main.c  ****         Buzzer_OneLongBeep();
 888              		.loc 1 442 0
 889 03a4 0020     		movs	r0, #0
 890 03a6 FFF7FEFF 		bl	MotorR_pwm
 891              	.LVL128:
 443:./Src/main.c  ****         LCD_ClearDisplay(&lcd);
 892              		.loc 1 443 0
 893 03aa FFF7FEFF 		bl	Buzzer_OneLongBeep
 894              	.LVL129:
 444:./Src/main.c  ****         HAL_Delay(5);
 895              		.loc 1 444 0
 896 03ae 1D4C     		ldr	r4, .L60+12
 897 03b0 2046     		mov	r0, r4
 898 03b2 FFF7FEFF 		bl	LCD_ClearDisplay
 899              	.LVL130:
 445:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 0);
 900              		.loc 1 445 0
 901 03b6 0520     		movs	r0, #5
 902 03b8 FFF7FEFF 		bl	HAL_Delay
 903              	.LVL131:
 446:./Src/main.c  ****         LCD_WriteString(&lcd, "Emergency Off!");
 904              		.loc 1 446 0
 905 03bc 0022     		movs	r2, #0
 906 03be 1146     		mov	r1, r2
 907 03c0 2046     		mov	r0, r4
 908 03c2 FFF7FEFF 		bl	LCD_SetLocation
 909              	.LVL132:
ARM GAS  /tmp/ccEIq7ZR.s 			page 29


 447:./Src/main.c  ****         LCD_SetLocation(&lcd, 0, 1);
 910              		.loc 1 447 0
 911 03c6 1849     		ldr	r1, .L60+16
 912 03c8 2046     		mov	r0, r4
 913 03ca FFF7FEFF 		bl	LCD_WriteString
 914              	.LVL133:
 448:./Src/main.c  ****         LCD_WriteString(&lcd, "Battery low.");
 915              		.loc 1 448 0
 916 03ce 0122     		movs	r2, #1
 917 03d0 0021     		movs	r1, #0
 918 03d2 2046     		mov	r0, r4
 919 03d4 FFF7FEFF 		bl	LCD_SetLocation
 920              	.LVL134:
 449:./Src/main.c  ****         HAL_Delay(500);
 921              		.loc 1 449 0
 922 03d8 1749     		ldr	r1, .L60+32
 923 03da 2046     		mov	r0, r4
 924 03dc FFF7FEFF 		bl	LCD_WriteString
 925              	.LVL135:
 450:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 926              		.loc 1 450 0
 927 03e0 4FF4FA70 		mov	r0, #500
 928 03e4 FFF7FEFF 		bl	HAL_Delay
 929              	.LVL136:
 451:./Src/main.c  ****         HAL_Delay(500);
 930              		.loc 1 451 0
 931 03e8 1148     		ldr	r0, .L60+24
 932 03ea FFF7FEFF 		bl	HAL_IWDG_Refresh
 933              	.LVL137:
 452:./Src/main.c  ****         Power_Set(0);
 934              		.loc 1 452 0
 935 03ee 4FF4FA70 		mov	r0, #500
 936 03f2 FFF7FEFF 		bl	HAL_Delay
 937              	.LVL138:
 453:./Src/main.c  ****       }
 938              		.loc 1 453 0
 939 03f6 0020     		movs	r0, #0
 940 03f8 FFF7FEFF 		bl	Power_Set
 941              	.LVL139:
 942              	.L45:
 457:./Src/main.c  **** 
 943              		.loc 1 457 0
 944 03fc 0C48     		ldr	r0, .L60+24
 945 03fe FFF7FEFF 		bl	HAL_IWDG_Refresh
 946              	.LVL140:
 459:./Src/main.c  ****     }
 947              		.loc 1 459 0
 948 0402 FFF7FEFF 		bl	HAL_GetTick
 949              	.LVL141:
 950 0406 0D4B     		ldr	r3, .L60+36
 951 0408 1B68     		ldr	r3, [r3]
 952 040a C01A     		subs	r0, r0, r3
 953 040c 0C4B     		ldr	r3, .L60+40
 954 040e 1860     		str	r0, [r3]
 460:./Src/main.c  ****   }
 955              		.loc 1 460 0
 956 0410 AEE6     		b	.L47
ARM GAS  /tmp/ccEIq7ZR.s 			page 30


 957              	.L61:
 958 0412 00BFAFF3 		.align	3
 958      0080
 959              	.L60:
 960 0418 7B14AE47 		.word	1202590843
 961 041c E17A943F 		.word	1066695393
 962 0420 00003440 		.word	1077149696
 963 0424 00000000 		.word	lcd
 964 0428 50000000 		.word	.LC8
 965 042c 60000000 		.word	.LC9
 966 0430 00000000 		.word	hiwdg
 967 0434 0000F841 		.word	1106771968
 968 0438 70000000 		.word	.LC10
 969 043c 00000000 		.word	counterTemp
 970 0440 00000000 		.word	counterTempTT
 971              	.LBE4:
 972              		.cfi_endproc
 973              	.LFE64:
 975              		.global	saveValue
 976              		.comm	lcd,140,4
 977              		.comm	counterTempTT,4,4
 978              		.comm	counterTemp,4,4
 979              		.global	speed
 980              		.comm	hiwdg,16,4
 981              		.global	VarValue
 982              		.global	VarDataTab
 983              		.global	VirtAddVarTab
 984              		.section	.bss.saveValue,"aw",%nobits
 985              		.align	1
 986              		.set	.LANCHOR0,. + 0
 989              	saveValue:
 990 0000 0000     		.space	2
 991              		.section	.bss.VarValue,"aw",%nobits
 992              		.align	1
 995              	VarValue:
 996 0000 0000     		.space	2
 997              		.section	.rodata.str1.4,"aMS",%progbits,1
 998              		.align	2
 999              	.LC0:
 1000 0000 5472616E 		.ascii	"TranspOtter V1.3\000"
 1000      73704F74 
 1000      74657220 
 1000      56312E33 
 1000      00
 1001 0011 000000   		.space	3
 1002              	.LC2:
 1003 0014 496E6974 		.ascii	"Initializing...\000"
 1003      69616C69 
 1003      7A696E67 
 1003      2E2E2E00 
 1004              	.LC3:
 1005 0024 4261743A 		.ascii	"Bat:\000"
 1005      00
 1006 0029 000000   		.space	3
 1007              	.LC4:
 1008 002c 5600     		.ascii	"V\000"
 1009 002e 0000     		.space	2
ARM GAS  /tmp/ccEIq7ZR.s 			page 31


 1010              	.LC5:
 1011 0030 4100     		.ascii	"A\000"
 1012 0032 0000     		.space	2
 1013              	.LC6:
 1014 0034 436F6E74 		.ascii	"Controlled by UART\000"
 1014      726F6C6C 
 1014      65642062 
 1014      79205541 
 1014      525400
 1015 0047 00       		.space	1
 1016              	.LC7:
 1017 0048 25693B25 		.ascii	"%i;%i\012\015\000"
 1017      690A0D00 
 1018              	.LC8:
 1019 0050 456D6572 		.ascii	"Emergency Off!\000"
 1019      67656E63 
 1019      79204F66 
 1019      662100
 1020 005f 00       		.space	1
 1021              	.LC9:
 1022 0060 4F766572 		.ascii	"Overcurrent.\000"
 1022      63757272 
 1022      656E742E 
 1022      00
 1023 006d 000000   		.space	3
 1024              	.LC10:
 1025 0070 42617474 		.ascii	"Battery low.\000"
 1025      65727920 
 1025      6C6F772E 
 1025      00
 1026 007d 000000   		.space	3
 1027              	.LC1:
 1028 0080 20202020 		.ascii	"     \000"
 1028      2000
 1029              		.section	.data.VirtAddVarTab,"aw",%progbits
 1030              		.align	2
 1031              		.set	.LANCHOR1,. + 0
 1034              	VirtAddVarTab:
 1035 0000 3713     		.short	4919
 1036 0002 00000000 		.space	4
 1037              		.section	.bss.VarDataTab,"aw",%nobits
 1038              		.align	2
 1041              	VarDataTab:
 1042 0000 00000000 		.space	6
 1042      0000
 1043              		.section	.bss.speed,"aw",%nobits
 1044              		.align	1
 1047              	speed:
 1048 0000 0000     		.space	2
 1049              		.text
 1050              	.Letext0:
 1051              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1052              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1053              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1054              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1055              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1056              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
ARM GAS  /tmp/ccEIq7ZR.s 			page 32


 1057              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1058              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1059              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1060              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 1061              		.file 12 "./Inc/pcf8574.h"
 1062              		.file 13 "./Inc/hd44780.h"
 1063              		.file 14 "./Drivers/CMSIS/Include/core_cm3.h"
 1064              		.file 15 "./Inc/eeprom.h"
 1065              		.file 16 "./Inc/ADC_R.h"
 1066              		.file 17 "./Inc/ADC_L.h"
 1067              		.file 18 "./Inc/motor_R.h"
 1068              		.file 19 "./Inc/motor_L.h"
 1069              		.file 20 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1070              		.file 21 "./Inc/varie.h"
 1071              		.file 22 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1072              		.file 23 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/stdio.h"
 1073              		.file 24 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1074              		.file 25 "./Inc/telemetry.h"
 1075              		.file 26 "./Inc/application.h"
 1076              		.file 27 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_flash.h"
 1077              		.file 28 "<built-in>"
ARM GAS  /tmp/ccEIq7ZR.s 			page 33


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccEIq7ZR.s:20     .text.saveConfig:00000000 $t
     /tmp/ccEIq7ZR.s:25     .text.saveConfig:00000000 saveConfig
     /tmp/ccEIq7ZR.s:48     .text.saveConfig:00000010 $d
     /tmp/ccEIq7ZR.s:54     .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccEIq7ZR.s:59     .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccEIq7ZR.s:95     .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/ccEIq7ZR.s:101    .text.Error_Handler:00000000 $t
     /tmp/ccEIq7ZR.s:106    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccEIq7ZR.s:130    .text.MX_IWDG_Init:00000000 $t
     /tmp/ccEIq7ZR.s:134    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/ccEIq7ZR.s:189    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/ccEIq7ZR.s:196    .text.SystemClock_Config:00000000 $t
     /tmp/ccEIq7ZR.s:201    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccEIq7ZR.s:305    .text.SystemClock_Config:00000088 $d
     /tmp/ccEIq7ZR.s:315    .text.main:00000000 $t
     /tmp/ccEIq7ZR.s:320    .text.main:00000000 main
     /tmp/ccEIq7ZR.s:781    .text.main:000002c8 $d
                            *COM*:0000008c lcd
     /tmp/ccEIq7ZR.s:803    .text.main:00000318 $t
     /tmp/ccEIq7ZR.s:960    .text.main:00000418 $d
                            *COM*:00000004 counterTemp
                            *COM*:00000004 counterTempTT
     /tmp/ccEIq7ZR.s:989    .bss.saveValue:00000000 saveValue
     /tmp/ccEIq7ZR.s:1047   .bss.speed:00000000 speed
     /tmp/ccEIq7ZR.s:995    .bss.VarValue:00000000 VarValue
     /tmp/ccEIq7ZR.s:1041   .bss.VarDataTab:00000000 VarDataTab
     /tmp/ccEIq7ZR.s:1034   .data.VirtAddVarTab:00000000 VirtAddVarTab
     /tmp/ccEIq7ZR.s:985    .bss.saveValue:00000000 $d
     /tmp/ccEIq7ZR.s:992    .bss.VarValue:00000000 $d
     /tmp/ccEIq7ZR.s:998    .rodata.str1.4:00000000 $d
     /tmp/ccEIq7ZR.s:1030   .data.VirtAddVarTab:00000000 $d
     /tmp/ccEIq7ZR.s:1038   .bss.VarDataTab:00000000 $d
     /tmp/ccEIq7ZR.s:1044   .bss.speed:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
EE_WriteVariable
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
__aeabi_dmul
__aeabi_dcmplt
__aeabi_dcmpgt
ARM GAS  /tmp/ccEIq7ZR.s 			page 34


__aeabi_fcmplt
HAL_Init
Button_init
Power_Set
MX_I2C2_Init
HAL_FLASH_Unlock
EE_Init
LCD_Init
LCD_ClearDisplay
LCD_SetLocation
LCD_WriteString
HAL_I2C_Master_Receive
Buzzer_init
Led_init
IS_Charge_init
HAL_Delay
Led_Set
IS_Button
ADC_L_init
ADC_R_init
MotorL_init
MotorR_init
HAL_GPIO_DeInit
Telemetry_init
EE_ReadVariable
applcation_init
Battery_TASK
Buzzer_TwoBeep
MotorR_start
MotorL_start
HAL_IWDG_Refresh
Buzzer_OneLongBeep
getMotorR
getMotorL
MotorL_pwm
MotorR_pwm
memset
sprintf
Console_Log
getMotorCurrentR
getMotorCurrentL
hi2c2
GET_BatteryAverage
HAL_GetTick
