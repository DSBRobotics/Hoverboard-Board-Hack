ARM GAS  /tmp/ccgnx77V.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
  20              		.align	2
  21              		.global	HAL_ADC_ConvCpltCallback
  22              		.thumb
  23              		.thumb_func
  25              	HAL_ADC_ConvCpltCallback:
  26              	.LFB67:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/ccgnx77V.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "i2c.h"
  46:./Src/main.c  **** #include "motor_L.h"
  47:./Src/main.c  **** #include "motor_R.h"
  48:./Src/main.c  **** #include "varie.h"
  49:./Src/main.c  **** #include "ADC_L.h"
  50:./Src/main.c  **** #include "ADC_R.h"
  51:./Src/main.c  **** #include "delay.h"
  52:./Src/main.c  **** #include "pid.h"
  53:./Src/main.c  **** #include "application.h"
  54:./Src/main.c  **** #include "telemetry.h"
  55:./Src/main.c  **** #include <math.h>
  56:./Src/main.c  **** 
  57:./Src/main.c  **** #define PI 3.14159265
  58:./Src/main.c  **** 
  59:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  60:./Src/main.c  **** 
  61:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  62:./Src/main.c  **** void SystemClock_Config(void);
  63:./Src/main.c  **** void Error_Handler(void);
  64:./Src/main.c  **** //extern struct PID_dati pid_R_;
  65:./Src/main.c  **** static void MX_IWDG_Init(void);
  66:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  67:./Src/main.c  **** 
  68:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  69:./Src/main.c  **** 
  70:./Src/main.c  **** //TEMP
  71:./Src/main.c  **** /*
  72:./Src/main.c  **** extern volatile __IO struct MOTOR_Rdati motorR;
  73:./Src/main.c  **** volatile __IO uint8_t temp8,temp8case,temp_MOTOR_R_START;
  74:./Src/main.c  **** volatile __IO int32_t temp_SET_SPPED;
  75:./Src/main.c  **** volatile __IO uint8_t bufferTX[100],ai2cBuffer[10];
  76:./Src/main.c  **** int32_t speed;
  77:./Src/main.c  **** */
  78:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
  79:./Src/main.c  **** 
  80:./Src/main.c  **** int main(void)
  81:./Src/main.c  **** {
  82:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  83:./Src/main.c  ****   HAL_Init();
  84:./Src/main.c  **** 
  85:./Src/main.c  ****   /* Configure the system clock */
  86:./Src/main.c  ****   SystemClock_Config();
  87:./Src/main.c  **** 
  88:./Src/main.c  ****   MX_IWDG_Init();
ARM GAS  /tmp/ccgnx77V.s 			page 3


  89:./Src/main.c  **** 
  90:./Src/main.c  ****   _init_us();
  91:./Src/main.c  **** 
  92:./Src/main.c  ****   //MX_I2C2_Init();
  93:./Src/main.c  ****   //Telemetry_init();
  94:./Src/main.c  **** 
  95:./Src/main.c  ****  /*
  96:./Src/main.c  ****   while(1){
  97:./Src/main.c  **** 
  98:./Src/main.c  ****       Telemetry_TASK();
  99:./Src/main.c  ****       if(telemetry.dataREADY_JOYSTICK){
 100:./Src/main.c  ****           telemetry.dataREADY_JOYSTICK = 0;
 101:./Src/main.c  ****       }
 102:./Src/main.c  **** 
 103:./Src/main.c  ****   }
 104:./Src/main.c  ****   */
 105:./Src/main.c  **** 
 106:./Src/main.c  ****   Buzzer_init();
 107:./Src/main.c  ****   Led_init();
 108:./Src/main.c  ****   IS_Charge_init();
 109:./Src/main.c  **** 
 110:./Src/main.c  ****   ADC_L_init();
 111:./Src/main.c  ****   ADC_R_init();
 112:./Src/main.c  ****   MotorL_init();
 113:./Src/main.c  ****   MotorR_init();
 114:./Src/main.c  **** 
 115:./Src/main.c  ****   //PID_init(0,900); //pwm limit
 116:./Src/main.c  ****   //PID_set_L_costant(0.05,0.01,0.0);
 117:./Src/main.c  ****   //PID_set_R_costant(2.0,0.5,0.0);
 118:./Src/main.c  **** 
 119:./Src/main.c  **** //DebugPin_init();
 120:./Src/main.c  **** 
 121:./Src/main.c  ****   Led_Set(1);
 122:./Src/main.c  ****   Buzzer_OneBeep();
 123:./Src/main.c  ****   HAL_Delay(350);
 124:./Src/main.c  ****   Led_Set(0);
 125:./Src/main.c  **** 
 126:./Src/main.c  ****   applcation_init();
 127:./Src/main.c  ****   MotorR_start();
 128:./Src/main.c  ****   //MotorR_pwm(200);
 129:./Src/main.c  **** 
 130:./Src/main.c  ****   MotorL_start();
 131:./Src/main.c  ****   //MotorL_pwm(1000);
 132:./Src/main.c  **** 
 133:./Src/main.c  ****   uint32_t sinValue = 45 * 50;
 134:./Src/main.c  ****   uint8_t state = 0;
 135:./Src/main.c  ****   while(1){
 136:./Src/main.c  ****     sinValue++;
 137:./Src/main.c  ****     MotorL_pwm((int)(500*sin((sinValue / 50.0)*(PI / 180.0))));
 138:./Src/main.c  ****     MotorR_pwm(-(int)(500*cos((sinValue / 50.0)*(PI / 180.0))));
 139:./Src/main.c  ****     counterTemp = HAL_GetTick();
 140:./Src/main.c  ****     if ((sinValue) % (180 * 50) == 0) {
 141:./Src/main.c  ****       state = !state;
 142:./Src/main.c  ****       Led_Set(state);
 143:./Src/main.c  ****       Buzzer_OneBeep();
 144:./Src/main.c  ****     }
 145:./Src/main.c  **** 
ARM GAS  /tmp/ccgnx77V.s 			page 4


 146:./Src/main.c  ****     //Battery_TASK();
 147:./Src/main.c  ****     //Current_Motor_TASK();
 148:./Src/main.c  ****     //sWiiNunchuck_TASK();
 149:./Src/main.c  ****     //applcation_TASK();
 150:./Src/main.c  ****     //Telemetry_TASK();s
 151:./Src/main.c  **** 
 152:./Src/main.c  ****     //Batteria Scarica?
 153:./Src/main.c  ****     /*if(GET_BatteryAverage() < 31.0){
 154:./Src/main.c  ****       TASK_BATTERY_LOW_VOLTAGE();
 155:./Src/main.c  ****     }*/
 156:./Src/main.c  ****     //In Carica?
 157:./Src/main.c  ****     /*if(IS_Charge()==0){
 158:./Src/main.c  ****       WAIT_CHARGE_FINISH();
 159:./Src/main.c  ****     }*/
 160:./Src/main.c  **** 
 161:./Src/main.c  ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 162:./Src/main.c  **** 
 163:./Src/main.c  ****     counterTempTT = HAL_GetTick() - counterTemp;
 164:./Src/main.c  **** 
 165:./Src/main.c  **** 
 166:./Src/main.c  **** 
 167:./Src/main.c  ****   }
 168:./Src/main.c  **** 
 169:./Src/main.c  **** }
 170:./Src/main.c  **** 
 171:./Src/main.c  **** /** System Clock Configuration
 172:./Src/main.c  **** */
 173:./Src/main.c  **** void SystemClock_Config(void)
 174:./Src/main.c  **** {
 175:./Src/main.c  **** 
 176:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 177:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 178:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 179:./Src/main.c  **** 
 180:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 181:./Src/main.c  ****     */
 182:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 183:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 184:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 185:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 186:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 187:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 188:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 189:./Src/main.c  ****   {
 190:./Src/main.c  ****     Error_Handler();
 191:./Src/main.c  ****   }
 192:./Src/main.c  **** 
 193:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 194:./Src/main.c  ****     */
 195:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 196:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 197:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 198:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 199:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 200:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 201:./Src/main.c  **** 
 202:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
ARM GAS  /tmp/ccgnx77V.s 			page 5


 203:./Src/main.c  ****   {
 204:./Src/main.c  ****     Error_Handler();
 205:./Src/main.c  ****   }
 206:./Src/main.c  **** 
 207:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 208:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 209:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 210:./Src/main.c  ****   {
 211:./Src/main.c  ****     Error_Handler();
 212:./Src/main.c  ****   }
 213:./Src/main.c  **** 
 214:./Src/main.c  ****     /**Configure the Systick interrupt time
 215:./Src/main.c  ****     */
 216:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 217:./Src/main.c  **** 
 218:./Src/main.c  ****     /**Configure the Systick
 219:./Src/main.c  ****     */
 220:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 221:./Src/main.c  **** 
 222:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 223:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 224:./Src/main.c  **** }
 225:./Src/main.c  **** 
 226:./Src/main.c  **** /* IWDG init function */
 227:./Src/main.c  **** static void MX_IWDG_Init(void)
 228:./Src/main.c  **** {
 229:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 230:./Src/main.c  ****   hiwdg.Instance = IWDG;
 231:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 232:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 233:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 234:./Src/main.c  ****   {
 235:./Src/main.c  ****     Error_Handler();
 236:./Src/main.c  ****   }
 237:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 238:./Src/main.c  **** }
 239:./Src/main.c  **** 
 240:./Src/main.c  **** 
 241:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
  28              		.loc 1 241 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38 0002 0446     		mov	r4, r0
 242:./Src/main.c  ****   if(hadc->Instance == ADC1){
  39              		.loc 1 242 0
  40 0004 0268     		ldr	r2, [r0]
  41 0006 064B     		ldr	r3, .L5
  42 0008 9A42     		cmp	r2, r3
  43 000a 01D1     		bne	.L2
 243:./Src/main.c  ****     ADC_R_callback();
ARM GAS  /tmp/ccgnx77V.s 			page 6


  44              		.loc 1 243 0
  45 000c FFF7FEFF 		bl	ADC_R_callback
  46              	.LVL1:
  47              	.L2:
 244:./Src/main.c  ****   }
 245:./Src/main.c  ****   if(hadc->Instance == ADC3){
  48              		.loc 1 245 0
  49 0010 2268     		ldr	r2, [r4]
  50 0012 044B     		ldr	r3, .L5+4
  51 0014 9A42     		cmp	r2, r3
  52 0016 01D1     		bne	.L1
 246:./Src/main.c  ****     ADC_L_callback();
  53              		.loc 1 246 0
  54 0018 FFF7FEFF 		bl	ADC_L_callback
  55              	.LVL2:
  56              	.L1:
  57 001c 10BD     		pop	{r4, pc}
  58              	.LVL3:
  59              	.L6:
  60 001e 00BF     		.align	2
  61              	.L5:
  62 0020 00240140 		.word	1073816576
  63 0024 003C0140 		.word	1073822720
  64              		.cfi_endproc
  65              	.LFE67:
  67              		.section	.text.Error_Handler,"ax",%progbits
  68              		.align	2
  69              		.global	Error_Handler
  70              		.thumb
  71              		.thumb_func
  73              	Error_Handler:
  74              	.LFB68:
 247:./Src/main.c  ****   }
 248:./Src/main.c  **** }
 249:./Src/main.c  **** 
 250:./Src/main.c  **** 
 251:./Src/main.c  **** /**
 252:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 253:./Src/main.c  ****   * @param  None
 254:./Src/main.c  ****   * @retval None
 255:./Src/main.c  ****   */
 256:./Src/main.c  **** void Error_Handler(void)
 257:./Src/main.c  **** {
  75              		.loc 1 257 0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80 0000 08B5     		push	{r3, lr}
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 3, -8
  84              		.cfi_offset 14, -4
 258:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 259:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 260:./Src/main.c  ****   MotorR_stop();
  85              		.loc 1 260 0
ARM GAS  /tmp/ccgnx77V.s 			page 7


  86 0002 FFF7FEFF 		bl	MotorR_stop
  87              	.LVL4:
 261:./Src/main.c  ****   MotorL_stop();
  88              		.loc 1 261 0
  89 0006 FFF7FEFF 		bl	MotorL_stop
  90              	.LVL5:
  91              	.L8:
  92 000a FEE7     		b	.L8
  93              		.cfi_endproc
  94              	.LFE68:
  96              		.section	.text.MX_IWDG_Init,"ax",%progbits
  97              		.align	2
  98              		.thumb
  99              		.thumb_func
 101              	MX_IWDG_Init:
 102              	.LFB66:
 228:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 103              		.loc 1 228 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 8
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107 0000 00B5     		push	{lr}
 108              	.LCFI2:
 109              		.cfi_def_cfa_offset 4
 110              		.cfi_offset 14, -4
 111 0002 83B0     		sub	sp, sp, #12
 112              	.LCFI3:
 113              		.cfi_def_cfa_offset 16
 114              	.LBB2:
 229:./Src/main.c  ****   hiwdg.Instance = IWDG;
 115              		.loc 1 229 0
 116 0004 0E4B     		ldr	r3, .L13
 117 0006 DA69     		ldr	r2, [r3, #28]
 118 0008 42F40062 		orr	r2, r2, #2048
 119 000c DA61     		str	r2, [r3, #28]
 120 000e DB69     		ldr	r3, [r3, #28]
 121 0010 03F40063 		and	r3, r3, #2048
 122 0014 0193     		str	r3, [sp, #4]
 123 0016 019B     		ldr	r3, [sp, #4]
 124              	.LBE2:
 230:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 125              		.loc 1 230 0
 126 0018 0A48     		ldr	r0, .L13+4
 127 001a 0B4B     		ldr	r3, .L13+8
 128 001c 0360     		str	r3, [r0]
 231:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 129              		.loc 1 231 0
 130 001e 0123     		movs	r3, #1
 131 0020 4360     		str	r3, [r0, #4]
 232:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 132              		.loc 1 232 0
 133 0022 40F6FF73 		movw	r3, #4095
 134 0026 8360     		str	r3, [r0, #8]
 233:./Src/main.c  ****   {
 135              		.loc 1 233 0
 136 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 137              	.LVL6:
ARM GAS  /tmp/ccgnx77V.s 			page 8


 138 002c 08B1     		cbz	r0, .L11
 235:./Src/main.c  ****   }
 139              		.loc 1 235 0
 140 002e FFF7FEFF 		bl	Error_Handler
 141              	.LVL7:
 142              	.L11:
 237:./Src/main.c  **** }
 143              		.loc 1 237 0
 144 0032 0448     		ldr	r0, .L13+4
 145 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 146              	.LVL8:
 238:./Src/main.c  **** 
 147              		.loc 1 238 0
 148 0038 03B0     		add	sp, sp, #12
 149              	.LCFI4:
 150              		.cfi_def_cfa_offset 4
 151              		@ sp needed
 152 003a 5DF804FB 		ldr	pc, [sp], #4
 153              	.L14:
 154 003e 00BF     		.align	2
 155              	.L13:
 156 0040 00100240 		.word	1073876992
 157 0044 00000000 		.word	hiwdg
 158 0048 00300040 		.word	1073754112
 159              		.cfi_endproc
 160              	.LFE66:
 162              		.section	.text.SystemClock_Config,"ax",%progbits
 163              		.align	2
 164              		.global	SystemClock_Config
 165              		.thumb
 166              		.thumb_func
 168              	SystemClock_Config:
 169              	.LFB65:
 174:./Src/main.c  **** 
 170              		.loc 1 174 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 88
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174 0000 00B5     		push	{lr}
 175              	.LCFI5:
 176              		.cfi_def_cfa_offset 4
 177              		.cfi_offset 14, -4
 178 0002 97B0     		sub	sp, sp, #92
 179              	.LCFI6:
 180              		.cfi_def_cfa_offset 96
 182:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 181              		.loc 1 182 0
 182 0004 0223     		movs	r3, #2
 183 0006 0C93     		str	r3, [sp, #48]
 183:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 184              		.loc 1 183 0
 185 0008 0122     		movs	r2, #1
 186 000a 1092     		str	r2, [sp, #64]
 184:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 187              		.loc 1 184 0
 188 000c 1022     		movs	r2, #16
 189 000e 1192     		str	r2, [sp, #68]
ARM GAS  /tmp/ccgnx77V.s 			page 9


 185:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 190              		.loc 1 185 0
 191 0010 1393     		str	r3, [sp, #76]
 186:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 192              		.loc 1 186 0
 193 0012 0023     		movs	r3, #0
 194 0014 1493     		str	r3, [sp, #80]
 187:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 195              		.loc 1 187 0
 196 0016 4FF46013 		mov	r3, #3670016
 197 001a 1593     		str	r3, [sp, #84]
 188:./Src/main.c  ****   {
 198              		.loc 1 188 0
 199 001c 0CA8     		add	r0, sp, #48
 200 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 201              	.LVL9:
 202 0022 08B1     		cbz	r0, .L16
 190:./Src/main.c  ****   }
 203              		.loc 1 190 0
 204 0024 FFF7FEFF 		bl	Error_Handler
 205              	.LVL10:
 206              	.L16:
 195:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 207              		.loc 1 195 0
 208 0028 0F23     		movs	r3, #15
 209 002a 0793     		str	r3, [sp, #28]
 197:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 210              		.loc 1 197 0
 211 002c 0221     		movs	r1, #2
 212 002e 0891     		str	r1, [sp, #32]
 198:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 213              		.loc 1 198 0
 214 0030 0023     		movs	r3, #0
 215 0032 0993     		str	r3, [sp, #36]
 199:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 216              		.loc 1 199 0
 217 0034 4FF48062 		mov	r2, #1024
 218 0038 0A92     		str	r2, [sp, #40]
 200:./Src/main.c  **** 
 219              		.loc 1 200 0
 220 003a 0B93     		str	r3, [sp, #44]
 202:./Src/main.c  ****   {
 221              		.loc 1 202 0
 222 003c 07A8     		add	r0, sp, #28
 223 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 224              	.LVL11:
 225 0042 08B1     		cbz	r0, .L17
 204:./Src/main.c  ****   }
 226              		.loc 1 204 0
 227 0044 FFF7FEFF 		bl	Error_Handler
 228              	.LVL12:
 229              	.L17:
 207:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 230              		.loc 1 207 0
 231 0048 0223     		movs	r3, #2
 232 004a 0193     		str	r3, [sp, #4]
 208:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
ARM GAS  /tmp/ccgnx77V.s 			page 10


 233              		.loc 1 208 0
 234 004c 4FF44043 		mov	r3, #49152
 235 0050 0393     		str	r3, [sp, #12]
 209:./Src/main.c  ****   {
 236              		.loc 1 209 0
 237 0052 01A8     		add	r0, sp, #4
 238 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 239              	.LVL13:
 240 0058 08B1     		cbz	r0, .L18
 211:./Src/main.c  ****   }
 241              		.loc 1 211 0
 242 005a FFF7FEFF 		bl	Error_Handler
 243              	.LVL14:
 244              	.L18:
 216:./Src/main.c  **** 
 245              		.loc 1 216 0
 246 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 247              	.LVL15:
 248 0062 094B     		ldr	r3, .L20
 249 0064 A3FB0030 		umull	r3, r0, r3, r0
 250 0068 8009     		lsrs	r0, r0, #6
 251 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
 252              	.LVL16:
 220:./Src/main.c  **** 
 253              		.loc 1 220 0
 254 006e 0420     		movs	r0, #4
 255 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 256              	.LVL17:
 223:./Src/main.c  **** }
 257              		.loc 1 223 0
 258 0074 0022     		movs	r2, #0
 259 0076 1146     		mov	r1, r2
 260 0078 4FF0FF30 		mov	r0, #-1
 261 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262              	.LVL18:
 224:./Src/main.c  **** 
 263              		.loc 1 224 0
 264 0080 17B0     		add	sp, sp, #92
 265              	.LCFI7:
 266              		.cfi_def_cfa_offset 4
 267              		@ sp needed
 268 0082 5DF804FB 		ldr	pc, [sp], #4
 269              	.L21:
 270 0086 00BF     		.align	2
 271              	.L20:
 272 0088 D34D6210 		.word	274877907
 273              		.cfi_endproc
 274              	.LFE65:
 276              		.global	__aeabi_ui2d
 277              		.global	__aeabi_ddiv
 278              		.global	__aeabi_dmul
 279              		.global	__aeabi_d2iz
 280              		.section	.text.main,"ax",%progbits
 281              		.align	2
 282              		.global	main
 283              		.thumb
 284              		.thumb_func
ARM GAS  /tmp/ccgnx77V.s 			page 11


 286              	main:
 287              	.LFB64:
  81:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 288              		.loc 1 81 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 293              	.LCFI8:
 294              		.cfi_def_cfa_offset 24
 295              		.cfi_offset 3, -24
 296              		.cfi_offset 4, -20
 297              		.cfi_offset 5, -16
 298              		.cfi_offset 6, -12
 299              		.cfi_offset 7, -8
 300              		.cfi_offset 14, -4
  83:./Src/main.c  **** 
 301              		.loc 1 83 0
 302 0002 FFF7FEFF 		bl	HAL_Init
 303              	.LVL19:
  86:./Src/main.c  **** 
 304              		.loc 1 86 0
 305 0006 FFF7FEFF 		bl	SystemClock_Config
 306              	.LVL20:
  88:./Src/main.c  **** 
 307              		.loc 1 88 0
 308 000a FFF7FEFF 		bl	MX_IWDG_Init
 309              	.LVL21:
  90:./Src/main.c  **** 
 310              		.loc 1 90 0
 311 000e FFF7FEFF 		bl	_init_us
 312              	.LVL22:
 106:./Src/main.c  ****   Led_init();
 313              		.loc 1 106 0
 314 0012 FFF7FEFF 		bl	Buzzer_init
 315              	.LVL23:
 107:./Src/main.c  ****   IS_Charge_init();
 316              		.loc 1 107 0
 317 0016 FFF7FEFF 		bl	Led_init
 318              	.LVL24:
 108:./Src/main.c  **** 
 319              		.loc 1 108 0
 320 001a FFF7FEFF 		bl	IS_Charge_init
 321              	.LVL25:
 110:./Src/main.c  ****   ADC_R_init();
 322              		.loc 1 110 0
 323 001e FFF7FEFF 		bl	ADC_L_init
 324              	.LVL26:
 111:./Src/main.c  ****   MotorL_init();
 325              		.loc 1 111 0
 326 0022 FFF7FEFF 		bl	ADC_R_init
 327              	.LVL27:
 112:./Src/main.c  ****   MotorR_init();
 328              		.loc 1 112 0
 329 0026 FFF7FEFF 		bl	MotorL_init
 330              	.LVL28:
 113:./Src/main.c  **** 
ARM GAS  /tmp/ccgnx77V.s 			page 12


 331              		.loc 1 113 0
 332 002a FFF7FEFF 		bl	MotorR_init
 333              	.LVL29:
 121:./Src/main.c  ****   Buzzer_OneBeep();
 334              		.loc 1 121 0
 335 002e 0120     		movs	r0, #1
 336 0030 FFF7FEFF 		bl	Led_Set
 337              	.LVL30:
 122:./Src/main.c  ****   HAL_Delay(350);
 338              		.loc 1 122 0
 339 0034 FFF7FEFF 		bl	Buzzer_OneBeep
 340              	.LVL31:
 123:./Src/main.c  ****   Led_Set(0);
 341              		.loc 1 123 0
 342 0038 4FF4AF70 		mov	r0, #350
 343 003c FFF7FEFF 		bl	HAL_Delay
 344              	.LVL32:
 124:./Src/main.c  **** 
 345              		.loc 1 124 0
 346 0040 0020     		movs	r0, #0
 347 0042 FFF7FEFF 		bl	Led_Set
 348              	.LVL33:
 126:./Src/main.c  ****   MotorR_start();
 349              		.loc 1 126 0
 350 0046 FFF7FEFF 		bl	applcation_init
 351              	.LVL34:
 127:./Src/main.c  ****   //MotorR_pwm(200);
 352              		.loc 1 127 0
 353 004a FFF7FEFF 		bl	MotorR_start
 354              	.LVL35:
 130:./Src/main.c  ****   //MotorL_pwm(1000);
 355              		.loc 1 130 0
 356 004e FFF7FEFF 		bl	MotorL_start
 357              	.LVL36:
 134:./Src/main.c  ****   while(1){
 358              		.loc 1 134 0
 359 0052 0025     		movs	r5, #0
 133:./Src/main.c  ****   uint8_t state = 0;
 360              		.loc 1 133 0
 361 0054 40F6CA04 		movw	r4, #2250
 362              	.LVL37:
 363              	.L24:
 136:./Src/main.c  ****     MotorL_pwm((int)(500*sin((sinValue / 50.0)*(PI / 180.0))));
 364              		.loc 1 136 0
 365 0058 0134     		adds	r4, r4, #1
 366              	.LVL38:
 137:./Src/main.c  ****     MotorR_pwm(-(int)(500*cos((sinValue / 50.0)*(PI / 180.0))));
 367              		.loc 1 137 0
 368 005a 2046     		mov	r0, r4
 369 005c FFF7FEFF 		bl	__aeabi_ui2d
 370              	.LVL39:
 371 0060 0022     		movs	r2, #0
 372 0062 234B     		ldr	r3, .L26+8
 373 0064 FFF7FEFF 		bl	__aeabi_ddiv
 374              	.LVL40:
 375 0068 1FA3     		adr	r3, .L26
 376 006a D3E90023 		ldrd	r2, [r3]
ARM GAS  /tmp/ccgnx77V.s 			page 13


 377 006e FFF7FEFF 		bl	__aeabi_dmul
 378              	.LVL41:
 379 0072 0646     		mov	r6, r0
 380 0074 0F46     		mov	r7, r1
 381 0076 FFF7FEFF 		bl	sin
 382              	.LVL42:
 383 007a 0022     		movs	r2, #0
 384 007c 1D4B     		ldr	r3, .L26+12
 385 007e FFF7FEFF 		bl	__aeabi_dmul
 386              	.LVL43:
 387 0082 FFF7FEFF 		bl	__aeabi_d2iz
 388              	.LVL44:
 389 0086 00B2     		sxth	r0, r0
 390 0088 FFF7FEFF 		bl	MotorL_pwm
 391              	.LVL45:
 138:./Src/main.c  ****     counterTemp = HAL_GetTick();
 392              		.loc 1 138 0
 393 008c 3046     		mov	r0, r6
 394 008e 3946     		mov	r1, r7
 395 0090 FFF7FEFF 		bl	cos
 396              	.LVL46:
 397 0094 0022     		movs	r2, #0
 398 0096 174B     		ldr	r3, .L26+12
 399 0098 FFF7FEFF 		bl	__aeabi_dmul
 400              	.LVL47:
 401 009c FFF7FEFF 		bl	__aeabi_d2iz
 402              	.LVL48:
 403 00a0 4042     		negs	r0, r0
 404 00a2 00B2     		sxth	r0, r0
 405 00a4 FFF7FEFF 		bl	MotorR_pwm
 406              	.LVL49:
 139:./Src/main.c  ****     if ((sinValue) % (180 * 50) == 0) {
 407              		.loc 1 139 0
 408 00a8 FFF7FEFF 		bl	HAL_GetTick
 409              	.LVL50:
 410 00ac 124B     		ldr	r3, .L26+16
 411 00ae 1860     		str	r0, [r3]
 140:./Src/main.c  ****       state = !state;
 412              		.loc 1 140 0
 413 00b0 124B     		ldr	r3, .L26+20
 414 00b2 A3FB0423 		umull	r2, r3, r3, r4
 415 00b6 5B0B     		lsrs	r3, r3, #13
 416 00b8 42F22832 		movw	r2, #9000
 417 00bc 02FB1343 		mls	r3, r2, r3, r4
 418 00c0 33B9     		cbnz	r3, .L23
 141:./Src/main.c  ****       Led_Set(state);
 419              		.loc 1 141 0
 420 00c2 85F00105 		eor	r5, r5, #1
 421              	.LVL51:
 142:./Src/main.c  ****       Buzzer_OneBeep();
 422              		.loc 1 142 0
 423 00c6 2846     		mov	r0, r5
 424 00c8 FFF7FEFF 		bl	Led_Set
 425              	.LVL52:
 143:./Src/main.c  ****     }
 426              		.loc 1 143 0
 427 00cc FFF7FEFF 		bl	Buzzer_OneBeep
ARM GAS  /tmp/ccgnx77V.s 			page 14


 428              	.LVL53:
 429              	.L23:
 161:./Src/main.c  **** 
 430              		.loc 1 161 0
 431 00d0 0B48     		ldr	r0, .L26+24
 432 00d2 FFF7FEFF 		bl	HAL_IWDG_Refresh
 433              	.LVL54:
 163:./Src/main.c  **** 
 434              		.loc 1 163 0
 435 00d6 FFF7FEFF 		bl	HAL_GetTick
 436              	.LVL55:
 437 00da 074B     		ldr	r3, .L26+16
 438 00dc 1B68     		ldr	r3, [r3]
 439 00de C01A     		subs	r0, r0, r3
 440 00e0 084B     		ldr	r3, .L26+28
 441 00e2 1860     		str	r0, [r3]
 167:./Src/main.c  **** 
 442              		.loc 1 167 0
 443 00e4 B8E7     		b	.L24
 444              	.L27:
 445 00e6 00BF     		.align	3
 446              	.L26:
 447 00e8 12E7FAA1 		.word	-1577392366
 448 00ec 46DF913F 		.word	1066524486
 449 00f0 00004940 		.word	1078525952
 450 00f4 00407F40 		.word	1082081280
 451 00f8 00000000 		.word	counterTemp
 452 00fc D55204E9 		.word	-385592619
 453 0100 00000000 		.word	hiwdg
 454 0104 00000000 		.word	counterTempTT
 455              		.cfi_endproc
 456              	.LFE64:
 458              		.comm	counterTempTT,4,4
 459              		.comm	counterTemp,4,4
 460              		.comm	hiwdg,16,4
 461              		.text
 462              	.Letext0:
 463              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 464              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 465              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 466              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 467              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 468              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 469              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 470              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 471              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 472              		.file 11 "./Drivers/CMSIS/Include/core_cm3.h"
 473              		.file 12 "./Inc/ADC_R.h"
 474              		.file 13 "./Inc/ADC_L.h"
 475              		.file 14 "./Inc/motor_R.h"
 476              		.file 15 "./Inc/motor_L.h"
 477              		.file 16 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 478              		.file 17 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 479              		.file 18 "./Inc/delay.h"
 480              		.file 19 "./Inc/varie.h"
 481              		.file 20 "./Inc/application.h"
 482              		.file 21 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/math.h"
ARM GAS  /tmp/ccgnx77V.s 			page 15


ARM GAS  /tmp/ccgnx77V.s 			page 16


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccgnx77V.s:20     .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccgnx77V.s:25     .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccgnx77V.s:62     .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/ccgnx77V.s:68     .text.Error_Handler:00000000 $t
     /tmp/ccgnx77V.s:73     .text.Error_Handler:00000000 Error_Handler
     /tmp/ccgnx77V.s:97     .text.MX_IWDG_Init:00000000 $t
     /tmp/ccgnx77V.s:101    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/ccgnx77V.s:156    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/ccgnx77V.s:163    .text.SystemClock_Config:00000000 $t
     /tmp/ccgnx77V.s:168    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccgnx77V.s:272    .text.SystemClock_Config:00000088 $d
     /tmp/ccgnx77V.s:281    .text.main:00000000 $t
     /tmp/ccgnx77V.s:286    .text.main:00000000 main
     /tmp/ccgnx77V.s:447    .text.main:000000e8 $d
                            *COM*:00000004 counterTemp
                            *COM*:00000004 counterTempTT
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_ui2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2iz
HAL_Init
_init_us
Buzzer_init
Led_init
IS_Charge_init
ADC_L_init
ADC_R_init
MotorL_init
MotorR_init
Led_Set
Buzzer_OneBeep
HAL_Delay
applcation_init
MotorR_start
MotorL_start
sin
MotorL_pwm
cos
ARM GAS  /tmp/ccgnx77V.s 			page 17


MotorR_pwm
HAL_GetTick
HAL_IWDG_Refresh
