ARM GAS  /tmp/ccMuAS3h.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PPM_ISR_Callback,"ax",%progbits
  20              		.align	2
  21              		.global	PPM_ISR_Callback
  22              		.thumb
  23              		.thumb_func
  25              	PPM_ISR_Callback:
  26              	.LFB64:
  27              		.file 1 "./Src/main.c"
   1:./Src/main.c  **** /*                              ------ hacking hoverboard -------
   2:./Src/main.c  **** MOTOR LEFT
   3:./Src/main.c  ****             HALL_A = PB5
   4:./Src/main.c  ****             HALL_B = PB6
   5:./Src/main.c  ****             HALL_C = PB7
   6:./Src/main.c  ****             A-MOSFET_+ = PC6    [Attivo alto]
   7:./Src/main.c  ****             A-MOSFET_- = PA7    [Attivo basso]
   8:./Src/main.c  ****             B-MOSFET_+ = PC7    [Attivo alto]
   9:./Src/main.c  ****             B-MOSFET_- = PB0    [Attivo basso]
  10:./Src/main.c  ****             C-MOSFET_+ = PC8    [Attivo alto]
  11:./Src/main.c  ****             C-MOSFET_- = PB1    [Attivo basso]
  12:./Src/main.c  ****             CURRENT_SENSE_shunt = PC0 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  13:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PA0    [Analog]  -- {NOT USE}
  14:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC3    [Analog]  -- {NOT USE}
  15:./Src/main.c  **** 
  16:./Src/main.c  **** MOTOR RIGHT
  17:./Src/main.c  ****             HALL_A = PC10
  18:./Src/main.c  ****             HALL_B = PC11
  19:./Src/main.c  ****             HALL_C = PC12
  20:./Src/main.c  ****             A-MOSFET_+ = PA8    [Attivo alto]
  21:./Src/main.c  ****             A-MOSFET_- = PB13   [Attivo basso]
  22:./Src/main.c  ****             B-MOSFET_+ = PA9    [Attivo alto]
  23:./Src/main.c  ****             B-MOSFET_- = PB14   [Attivo basso]
  24:./Src/main.c  ****             C-MOSFET_+ = PA10   [Attivo alto]
  25:./Src/main.c  ****             C-MOSFET_- = PB15   [Attivo basso]
  26:./Src/main.c  ****             CURRENT_SENSE_shunt = PC1 [Analog, a vuoto 1.5747V, Rshunt=0.0036525/Guadagno_OPAMP = 1
  27:./Src/main.c  ****             A-VOLTAGE_PHASE_A_BACK_EMF = PC4    [Analog]  -- {NOT USE}
  28:./Src/main.c  ****             B-VOLTAGE_PHASE_A_BACK_EMF = PC5    [Analog]  -- {NOT USE}
  29:./Src/main.c  **** 
  30:./Src/main.c  **** VARIE
  31:./Src/main.c  ****             LED = PB2
ARM GAS  /tmp/ccMuAS3h.s 			page 2


  32:./Src/main.c  ****             BUZZER = PA4
  33:./Src/main.c  ****             FRONT_LEFT[connettore 4 poli] = +15V ; PA2 ; PA3 ; MASSA    -- {NOT USE}
  34:./Src/main.c  ****             FRONT_RIGHT[connettore 4 poli] = +15V ; PB10 ; PB11 ; MASSA -- {USE x JOYSTICK}
  35:./Src/main.c  ****             SWITCH = PA1                                                -- {NOT USE}
  36:./Src/main.c  ****             VBATT_MEASURE = PC2         [Analog, rapporto 956.5 ohm/29910 ohm]
  37:./Src/main.c  ****             IS_BATTERY_IN_CHARGE = PA12 [input, need pullup]
  38:./Src/main.c  ****             AUTO-RITENUTA-SWITCH = PA5 [output, mantiene attivo il tip127 che funge da interruttore
  39:./Src/main.c  ****             NOT-IDENTIFITY = PB12
  40:./Src/main.c  ****             NOT-IDENTIFITY = PA6
  41:./Src/main.c  **** 
  42:./Src/main.c  **** */
  43:./Src/main.c  **** #include "main.h"
  44:./Src/main.c  **** #include "stm32f1xx_hal.h"
  45:./Src/main.c  **** #include "motor_L.h"
  46:./Src/main.c  **** #include "motor_R.h"
  47:./Src/main.c  **** #include "varie.h"
  48:./Src/main.c  **** #include "ADC_L.h"
  49:./Src/main.c  **** #include "ADC_R.h"
  50:./Src/main.c  **** #include "delay.h"
  51:./Src/main.c  **** #include "pid.h"
  52:./Src/main.c  **** #include "application.h"
  53:./Src/main.c  **** #include "telemetry.h"
  54:./Src/main.c  **** #include <math.h>
  55:./Src/main.c  **** 
  56:./Src/main.c  **** // copied from STMBL
  57:./Src/main.c  **** #define NO 0
  58:./Src/main.c  **** #define YES 1
  59:./Src/main.c  **** #define ABS(a) (((a) < 0.0) ? -(a) : (a))
  60:./Src/main.c  **** #define LIMIT(x, lowhigh) (((x) > (lowhigh)) ? (lowhigh) : (((x) < (-lowhigh)) ? (-lowhigh) : (x)))
  61:./Src/main.c  **** #define SAT(x, lowhigh) (((x) > (lowhigh)) ? (1.0) : (((x) < (-lowhigh)) ? (-1.0) : (0.0)))
  62:./Src/main.c  **** #define SAT2(x, low, high) (((x) > (high)) ? (1.0) : (((x) < (low)) ? (-1.0) : (0.0)))
  63:./Src/main.c  **** #define STEP(from, to, step) (((from) < (to)) ? (MIN((from) + (step), (to))) : (MAX((from) - (step)
  64:./Src/main.c  **** #define DEG(a) ((a)*M_PI / 180.0)
  65:./Src/main.c  **** #define RAD(a) ((a)*180.0 / M_PI)
  66:./Src/main.c  **** #define SIGN(a) (((a) < 0.0) ? (-1.0) : (((a) > 0.0) ? (1.0) : (0.0)))
  67:./Src/main.c  **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  68:./Src/main.c  **** #define SCALE(value, high, max) MIN(MAX(((max) - (value)) / ((max) - (high)), 0.0), 1.0)
  69:./Src/main.c  **** #define MIN(a, b) (((a) < (b)) ? (a) : (b))
  70:./Src/main.c  **** #define MAX(a, b) (((a) > (b)) ? (a) : (b))
  71:./Src/main.c  **** #define MIN3(a, b, c) MIN(a, MIN(b, c))
  72:./Src/main.c  **** #define MAX3(a, b, c) MAX(a, MAX(b, c))
  73:./Src/main.c  **** 
  74:./Src/main.c  **** #define PI 3.14159265
  75:./Src/main.c  **** 
  76:./Src/main.c  **** /* Private variables ---------------------------------------------------------*/
  77:./Src/main.c  **** 
  78:./Src/main.c  **** /* Private function prototypes -----------------------------------------------*/
  79:./Src/main.c  **** void SystemClock_Config(void);
  80:./Src/main.c  **** void Error_Handler(void);
  81:./Src/main.c  **** //extern struct PID_dati pid_R_;
  82:./Src/main.c  **** static void MX_IWDG_Init(void);
  83:./Src/main.c  **** IWDG_HandleTypeDef hiwdg;
  84:./Src/main.c  **** 
  85:./Src/main.c  **** volatile __IO int16_t speed = 0;
  86:./Src/main.c  **** extern struct TELEMETRY_dati telemetry;
  87:./Src/main.c  **** extern struct MOTOR_Ldati motorL;
  88:./Src/main.c  **** extern struct MOTOR_Rdati motorR;
ARM GAS  /tmp/ccMuAS3h.s 			page 3


  89:./Src/main.c  **** //extern struct COMMAND_data commandsequence;
  90:./Src/main.c  **** 
  91:./Src/main.c  **** //TEMP
  92:./Src/main.c  **** /*
  93:./Src/main.c  **** extern volatile __IO struct MOTOR_Rdati motorR;
  94:./Src/main.c  **** volatile __IO uint8_t temp8,temp8case,temp_MOTOR_R_START;
  95:./Src/main.c  **** volatile __IO int32_t temp_SET_SPPED;
  96:./Src/main.c  **** volatile __IO uint8_t bufferTX[100],ai2cBuffer[10];
  97:./Src/main.c  **** int32_t speed;
  98:./Src/main.c  **** */
  99:./Src/main.c  **** volatile __IO uint32_t counterTemp,counterTempTT;
 100:./Src/main.c  **** 
 101:./Src/main.c  **** TIM_HandleTypeDef htim2;
 102:./Src/main.c  **** 
 103:./Src/main.c  **** uint16_t captured_value[8] = {0};
 104:./Src/main.c  **** uint16_t rc_data[5] = {0};
 105:./Src/main.c  **** uint8_t pointer = 0;
 106:./Src/main.c  **** uint8_t data_ready = 0;
 107:./Src/main.c  **** /* USER CODE END PV */
 108:./Src/main.c  **** uint8_t rx_count = 0;
 109:./Src/main.c  **** uint32_t timeout = 0;
 110:./Src/main.c  **** 
 111:./Src/main.c  **** void PPM_ISR_Callback() {
  28              		.loc 1 111 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
 112:./Src/main.c  ****   // Dummy loop with 16 bit count wrap around
 113:./Src/main.c  ****   uint16_t rc_delay = TIM2->CNT;
  37              		.loc 1 113 0
  38 0002 4FF08043 		mov	r3, #1073741824
  39 0006 5C6A     		ldr	r4, [r3, #36]
  40 0008 A4B2     		uxth	r4, r4
  41              	.LVL0:
 114:./Src/main.c  ****   _stop_timer();
  42              		.loc 1 114 0
  43 000a FFF7FEFF 		bl	_stop_timer
  44              	.LVL1:
 115:./Src/main.c  **** 
 116:./Src/main.c  ****   if (rc_delay > 3000) {
  45              		.loc 1 116 0
  46 000e 40F6B833 		movw	r3, #3000
  47 0012 9C42     		cmp	r4, r3
  48 0014 03D9     		bls	.L2
 117:./Src/main.c  ****     rx_count = 0;
  49              		.loc 1 117 0
  50 0016 0022     		movs	r2, #0
  51 0018 104B     		ldr	r3, .L8
  52 001a 1A70     		strb	r2, [r3]
  53 001c 1AE0     		b	.L3
  54              	.L2:
 118:./Src/main.c  ****   }
ARM GAS  /tmp/ccMuAS3h.s 			page 4


 119:./Src/main.c  ****   else if (rx_count < 6){
  55              		.loc 1 119 0
  56 001e 0F4B     		ldr	r3, .L8
  57 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  58 0022 052B     		cmp	r3, #5
  59 0024 16D8     		bhi	.L3
 120:./Src/main.c  ****     timeout = 0;
  60              		.loc 1 120 0
  61 0026 0021     		movs	r1, #0
  62 0028 0D4A     		ldr	r2, .L8+4
  63 002a 1160     		str	r1, [r2]
 121:./Src/main.c  ****     captured_value[rx_count] = CLAMP(rc_delay, 1000, 2000) - 1000;
  64              		.loc 1 121 0
  65 002c B4F5FA6F 		cmp	r4, #2000
  66 0030 06D8     		bhi	.L5
  67              		.loc 1 121 0 is_stmt 0 discriminator 1
  68 0032 B4F57A7F 		cmp	r4, #1000
  69 0036 06D3     		bcc	.L6
  70              		.loc 1 121 0 discriminator 3
  71 0038 A4F57A74 		sub	r4, r4, #1000
  72              	.LVL2:
  73 003c A4B2     		uxth	r4, r4
  74              	.LVL3:
  75 003e 03E0     		b	.L4
  76              	.LVL4:
  77              	.L5:
  78              		.loc 1 121 0
  79 0040 4FF47A74 		mov	r4, #1000
  80              	.LVL5:
  81 0044 00E0     		b	.L4
  82              	.LVL6:
  83              	.L6:
  84 0046 0024     		movs	r4, #0
  85              	.LVL7:
  86              	.L4:
  87              		.loc 1 121 0 discriminator 8
  88 0048 064A     		ldr	r2, .L8+8
  89 004a 22F81340 		strh	r4, [r2, r3, lsl #1]	@ movhi
 122:./Src/main.c  ****     rx_count++;
  90              		.loc 1 122 0 is_stmt 1 discriminator 8
  91 004e 0133     		adds	r3, r3, #1
  92 0050 024A     		ldr	r2, .L8
  93 0052 1370     		strb	r3, [r2]
  94              	.L3:
 123:./Src/main.c  ****   }
 124:./Src/main.c  ****   _init_us();
  95              		.loc 1 124 0
  96 0054 FFF7FEFF 		bl	_init_us
  97              	.LVL8:
  98 0058 10BD     		pop	{r4, pc}
  99              	.L9:
 100 005a 00BF     		.align	2
 101              	.L8:
 102 005c 00000000 		.word	.LANCHOR0
 103 0060 00000000 		.word	.LANCHOR1
 104 0064 00000000 		.word	.LANCHOR2
 105              		.cfi_endproc
ARM GAS  /tmp/ccMuAS3h.s 			page 5


 106              	.LFE64:
 108              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 109              		.align	2
 110              		.global	HAL_ADC_ConvCpltCallback
 111              		.thumb
 112              		.thumb_func
 114              	HAL_ADC_ConvCpltCallback:
 115              	.LFB68:
 125:./Src/main.c  **** }
 126:./Src/main.c  **** 
 127:./Src/main.c  **** int main(void)
 128:./Src/main.c  **** {
 129:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 130:./Src/main.c  ****   HAL_Init();
 131:./Src/main.c  **** 
 132:./Src/main.c  ****   /* Configure the system clock */
 133:./Src/main.c  ****   SystemClock_Config();
 134:./Src/main.c  **** 
 135:./Src/main.c  ****   Button_init();
 136:./Src/main.c  **** 
 137:./Src/main.c  ****   Power_Set(1);
 138:./Src/main.c  **** 
 139:./Src/main.c  **** 
 140:./Src/main.c  ****   Telemetry_init();
 141:./Src/main.c  **** 
 142:./Src/main.c  ****   Buzzer_init();
 143:./Src/main.c  ****   Led_init();
 144:./Src/main.c  ****   IS_Charge_init();
 145:./Src/main.c  **** 
 146:./Src/main.c  ****   ADC_L_init();
 147:./Src/main.c  ****   ADC_R_init();
 148:./Src/main.c  ****   MotorL_init();
 149:./Src/main.c  ****   MotorR_init();
 150:./Src/main.c  **** 
 151:./Src/main.c  **** //  Timer_init();
 152:./Src/main.c  ****   //Timer_init();
 153:./Src/main.c  ****   //MX_TIM2_Init();
 154:./Src/main.c  **** 
 155:./Src/main.c  **** 
 156:./Src/main.c  ****   //PID_init(0,900); //pwm limit
 157:./Src/main.c  ****   //PID_set_L_costant(0.05,0.01,0.0);
 158:./Src/main.c  ****   //PID_set_R_costant(2.0,0.5,0.0);
 159:./Src/main.c  **** 
 160:./Src/main.c  **** //DebugPin_init();
 161:./Src/main.c  ****   //HAL_Delay(350);
 162:./Src/main.c  ****   while(IS_Button()) {
 163:./Src/main.c  ****     Led_Set(0);
 164:./Src/main.c  ****   }
 165:./Src/main.c  **** 
 166:./Src/main.c  ****   applcation_init();
 167:./Src/main.c  ****   Battery_TASK();
 168:./Src/main.c  **** 
 169:./Src/main.c  ****   MX_IWDG_Init();
 170:./Src/main.c  **** 
 171:./Src/main.c  ****   Led_Set(1);
 172:./Src/main.c  ****   Buzzer_TwoBeep();
 173:./Src/main.c  ****   HAL_Delay(350);
ARM GAS  /tmp/ccMuAS3h.s 			page 6


 174:./Src/main.c  **** 
 175:./Src/main.c  ****   MotorR_start();
 176:./Src/main.c  ****   MotorL_start();
 177:./Src/main.c  ****   //MotorR_pwm(80);
 178:./Src/main.c  ****   //MotorL_pwm(-200);
 179:./Src/main.c  **** 
 180:./Src/main.c  ****   Timer_init();
 181:./Src/main.c  **** 
 182:./Src/main.c  ****   //MotorR_pwm(200);
 183:./Src/main.c  ****   //MotorL_pwm(-150);
 184:./Src/main.c  **** 
 185:./Src/main.c  ****   //MotorR_pwm(-50);
 186:./Src/main.c  ****   //MotorL_pwm(50);
 187:./Src/main.c  ****   int16_t speedR = 0;
 188:./Src/main.c  ****   int16_t speedL = 0;
 189:./Src/main.c  **** 
 190:./Src/main.c  ****   uint32_t sinValue = 45 * 50;
 191:./Src/main.c  ****   uint8_t state = 0;
 192:./Src/main.c  ****   int lastSpeedL = 0, lastSpeedR = 0;
 193:./Src/main.c  ****   while(1){
 194:./Src/main.c  ****     sinValue++;
 195:./Src/main.c  ****     if ((sinValue) % (200) == 0) {
 196:./Src/main.c  ****       state = !state;
 197:./Src/main.c  ****       //Led_Set(state);
 198:./Src/main.c  ****       //Console_Log("otter!\n\r");
 199:./Src/main.c  ****       char str[200];
 200:./Src/main.c  ****       memset(&str[0], 0, sizeof(str));
 201:./Src/main.c  ****       sprintf(str, "%i;%i;%i;%i;%i;%i\n\r", captured_value[0], captured_value[1], captured_value[2]
 202:./Src/main.c  ****       int readR = -(CLAMP((((captured_value[1]-500)-(captured_value[0]-500))*(captured_value[2]/500
 203:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 204:./Src/main.c  **** 
 205:./Src/main.c  ****       int16_t tempL = speedL;
 206:./Src/main.c  ****       speedL -=  tempL / 2.0;
 207:./Src/main.c  ****       speedL += readL / 2.0;
 208:./Src/main.c  **** 
 209:./Src/main.c  ****       int16_t tempR = speedR;
 210:./Src/main.c  ****       speedR -=  tempR / 2.0;
 211:./Src/main.c  ****       speedR += readR / 2.0;
 212:./Src/main.c  **** 
 213:./Src/main.c  **** 
 214:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 215:./Src/main.c  ****         MotorR_pwm(speedR);
 216:./Src/main.c  ****         MotorL_pwm(speedL);
 217:./Src/main.c  ****       }
 218:./Src/main.c  ****       lastSpeedL = speedL;
 219:./Src/main.c  ****       lastSpeedR = speedR;
 220:./Src/main.c  ****       //MotorR_pwm(-250);
 221:./Src/main.c  ****       //MotorL_pwm(250);
 222:./Src/main.c  ****       Console_Log(str);
 223:./Src/main.c  ****     }
 224:./Src/main.c  ****     timeout++;
 225:./Src/main.c  **** 
 226:./Src/main.c  ****     if (timeout > 1000) {
 227:./Src/main.c  ****       MotorR_pwm(0);
 228:./Src/main.c  ****       MotorL_pwm(0);
 229:./Src/main.c  ****     }
 230:./Src/main.c  **** 
ARM GAS  /tmp/ccMuAS3h.s 			page 7


 231:./Src/main.c  ****     counterTemp = HAL_GetTick();
 232:./Src/main.c  **** 
 233:./Src/main.c  ****     if(IS_Button()) {
 234:./Src/main.c  ****       while(IS_Button()) {
 235:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 236:./Src/main.c  ****       }
 237:./Src/main.c  ****       Buzzer_OneLongBeep();
 238:./Src/main.c  ****       HAL_Delay(350);
 239:./Src/main.c  ****       Power_Set(0);
 240:./Src/main.c  ****     }
 241:./Src/main.c  ****     /*if ((sinValue) % (500) == 0) {
 242:./Src/main.c  ****       uint16_t distance = CLAMP(ADC_PA3() - 175, 0, 4095);
 243:./Src/main.c  ****       int16_t steering = ADC_PA2() - 2048;
 244:./Src/main.c  ****       int speedL = -CLAMP((distance - 1000) +  (steering / 10.0), -800, 800);
 245:./Src/main.c  ****       int speedR = -CLAMP((distance - 1000) -  (steering / 10.0), -800, 800);
 246:./Src/main.c  ****       if ((speedL < lastSpeedL + 50 && speedL > lastSpeedL - 50) && (speedR < lastSpeedR + 50 && sp
 247:./Src/main.c  ****         if (distance > 850) {
 248:./Src/main.c  ****           MotorL_pwm(speedL);
 249:./Src/main.c  ****           MotorR_pwm(speedR);
 250:./Src/main.c  ****         } else {
 251:./Src/main.c  ****           MotorL_pwm(0);
 252:./Src/main.c  ****           MotorR_pwm(0);
 253:./Src/main.c  ****         }
 254:./Src/main.c  ****       }
 255:./Src/main.c  ****       if (distance > 3000) { // Error, robot too far away!
 256:./Src/main.c  ****         MotorL_pwm(0);
 257:./Src/main.c  ****         MotorR_pwm(0);
 258:./Src/main.c  ****         while(1) {
 259:./Src/main.c  ****           Power_Set(0);
 260:./Src/main.c  ****           HAL_IWDG_Refresh(&hiwdg);
 261:./Src/main.c  ****         }
 262:./Src/main.c  ****       }
 263:./Src/main.c  **** 
 264:./Src/main.c  ****       char str[100];
 265:./Src/main.c  ****       memset(&str[0], 0, sizeof(str));
 266:./Src/main.c  ****       sprintf(str, "%i;%i\n\r", getMotorCurrentR(), getMotorCurrentL());
 267:./Src/main.c  ****       Console_Log(str);
 268:./Src/main.c  **** 
 269:./Src/main.c  **** 
 270:./Src/main.c  ****       lastSpeedL = speedL;
 271:./Src/main.c  ****       lastSpeedR = speedR;
 272:./Src/main.c  **** >>>>>>> GameTrak
 273:./Src/main.c  ****     }*/
 274:./Src/main.c  **** 
 275:./Src/main.c  **** 
 276:./Src/main.c  **** 
 277:./Src/main.c  ****     Battery_TASK();
 278:./Src/main.c  ****     //Current_Motor_TASK();
 279:./Src/main.c  ****     //sWiiNunchuck_TASK();
 280:./Src/main.c  ****     //applcation_TASK();
 281:./Src/main.c  ****     //Telemetry_TASK();
 282:./Src/main.c  **** 
 283:./Src/main.c  ****     //Batteria Scarica?
 284:./Src/main.c  ****     if(GET_BatteryAverage() < 31.0 || ABS(getMotorCurrentR() * 0.02) > 45.0 || ABS(getMotorCurrentL
 285:./Src/main.c  ****       MotorL_pwm(0);
 286:./Src/main.c  ****       MotorR_pwm(0);
 287:./Src/main.c  ****       Buzzer_OneLongBeep();
ARM GAS  /tmp/ccMuAS3h.s 			page 8


 288:./Src/main.c  ****       HAL_Delay(350);
 289:./Src/main.c  ****       Power_Set(0);
 290:./Src/main.c  ****     }
 291:./Src/main.c  ****     //In Carica?
 292:./Src/main.c  ****     /*if(IS_Charge()==0){
 293:./Src/main.c  ****       WAIT_CHARGE_FINISH();
 294:./Src/main.c  ****     }*/
 295:./Src/main.c  **** 
 296:./Src/main.c  ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 297:./Src/main.c  **** 
 298:./Src/main.c  ****     //counterTempTT = HAL_GetTick() - counterTemp;
 299:./Src/main.c  **** 
 300:./Src/main.c  **** 
 301:./Src/main.c  **** 
 302:./Src/main.c  ****   }
 303:./Src/main.c  **** 
 304:./Src/main.c  **** }
 305:./Src/main.c  **** 
 306:./Src/main.c  **** /** System Clock Configuration
 307:./Src/main.c  **** */
 308:./Src/main.c  **** void SystemClock_Config(void)
 309:./Src/main.c  **** {
 310:./Src/main.c  **** 
 311:./Src/main.c  ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 312:./Src/main.c  ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 313:./Src/main.c  ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 314:./Src/main.c  **** 
 315:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 316:./Src/main.c  ****     */
 317:./Src/main.c  ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 318:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 319:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 320:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 321:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 322:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 323:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 324:./Src/main.c  ****   {
 325:./Src/main.c  ****     Error_Handler();
 326:./Src/main.c  ****   }
 327:./Src/main.c  **** 
 328:./Src/main.c  ****     /**Initializes the CPU, AHB and APB busses clocks
 329:./Src/main.c  ****     */
 330:./Src/main.c  ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 331:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 332:./Src/main.c  ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 333:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 334:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 335:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 336:./Src/main.c  **** 
 337:./Src/main.c  ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 338:./Src/main.c  ****   {
 339:./Src/main.c  ****     Error_Handler();
 340:./Src/main.c  ****   }
 341:./Src/main.c  **** 
 342:./Src/main.c  ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 343:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 344:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
ARM GAS  /tmp/ccMuAS3h.s 			page 9


 345:./Src/main.c  ****   {
 346:./Src/main.c  ****     Error_Handler();
 347:./Src/main.c  ****   }
 348:./Src/main.c  **** 
 349:./Src/main.c  ****     /**Configure the Systick interrupt time
 350:./Src/main.c  ****     */
 351:./Src/main.c  ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 352:./Src/main.c  **** 
 353:./Src/main.c  ****     /**Configure the Systick
 354:./Src/main.c  ****     */
 355:./Src/main.c  ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 356:./Src/main.c  **** 
 357:./Src/main.c  ****   /* SysTick_IRQn interrupt configuration */
 358:./Src/main.c  ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 359:./Src/main.c  **** }
 360:./Src/main.c  **** 
 361:./Src/main.c  **** /* IWDG init function */
 362:./Src/main.c  **** static void MX_IWDG_Init(void)
 363:./Src/main.c  **** {
 364:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 365:./Src/main.c  ****   hiwdg.Instance = IWDG;
 366:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 367:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 368:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 369:./Src/main.c  ****   {
 370:./Src/main.c  ****     Error_Handler();
 371:./Src/main.c  ****   }
 372:./Src/main.c  ****   HAL_IWDG_Start(&hiwdg);
 373:./Src/main.c  **** }
 374:./Src/main.c  **** 
 375:./Src/main.c  **** 
 376:./Src/main.c  **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 116              		.loc 1 376 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              	.LVL9:
 121 0000 10B5     		push	{r4, lr}
 122              	.LCFI1:
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 4, -8
 125              		.cfi_offset 14, -4
 126 0002 0446     		mov	r4, r0
 377:./Src/main.c  ****   if(hadc->Instance == ADC1){
 127              		.loc 1 377 0
 128 0004 0268     		ldr	r2, [r0]
 129 0006 064B     		ldr	r3, .L14
 130 0008 9A42     		cmp	r2, r3
 131 000a 01D1     		bne	.L11
 378:./Src/main.c  ****     ADC_R_callback();
 132              		.loc 1 378 0
 133 000c FFF7FEFF 		bl	ADC_R_callback
 134              	.LVL10:
 135              	.L11:
 379:./Src/main.c  ****   }
 380:./Src/main.c  ****   if(hadc->Instance == ADC3){
 136              		.loc 1 380 0
ARM GAS  /tmp/ccMuAS3h.s 			page 10


 137 0010 2268     		ldr	r2, [r4]
 138 0012 044B     		ldr	r3, .L14+4
 139 0014 9A42     		cmp	r2, r3
 140 0016 01D1     		bne	.L10
 381:./Src/main.c  ****     ADC_L_callback();
 141              		.loc 1 381 0
 142 0018 FFF7FEFF 		bl	ADC_L_callback
 143              	.LVL11:
 144              	.L10:
 145 001c 10BD     		pop	{r4, pc}
 146              	.LVL12:
 147              	.L15:
 148 001e 00BF     		.align	2
 149              	.L14:
 150 0020 00240140 		.word	1073816576
 151 0024 003C0140 		.word	1073822720
 152              		.cfi_endproc
 153              	.LFE68:
 155              		.section	.text.Error_Handler,"ax",%progbits
 156              		.align	2
 157              		.global	Error_Handler
 158              		.thumb
 159              		.thumb_func
 161              	Error_Handler:
 162              	.LFB69:
 382:./Src/main.c  ****   }
 383:./Src/main.c  **** }
 384:./Src/main.c  **** 
 385:./Src/main.c  **** 
 386:./Src/main.c  **** /**
 387:./Src/main.c  ****   * @brief  This function is executed in case of error occurrence.
 388:./Src/main.c  ****   * @param  None
 389:./Src/main.c  ****   * @retval None
 390:./Src/main.c  ****   */
 391:./Src/main.c  **** void Error_Handler(void)
 392:./Src/main.c  **** {
 163              		.loc 1 392 0
 164              		.cfi_startproc
 165              		@ Volatile: function does not return.
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168 0000 08B5     		push	{r3, lr}
 169              	.LCFI2:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 3, -8
 172              		.cfi_offset 14, -4
 393:./Src/main.c  ****   /* USER CODE BEGIN Error_Handler */
 394:./Src/main.c  ****   /* User can add his own implementation to report the HAL error return state */
 395:./Src/main.c  ****   MotorR_stop();
 173              		.loc 1 395 0
 174 0002 FFF7FEFF 		bl	MotorR_stop
 175              	.LVL13:
 396:./Src/main.c  ****   MotorL_stop();
 176              		.loc 1 396 0
 177 0006 FFF7FEFF 		bl	MotorL_stop
 178              	.LVL14:
 179              	.L17:
ARM GAS  /tmp/ccMuAS3h.s 			page 11


 180 000a FEE7     		b	.L17
 181              		.cfi_endproc
 182              	.LFE69:
 184              		.section	.text.MX_IWDG_Init,"ax",%progbits
 185              		.align	2
 186              		.thumb
 187              		.thumb_func
 189              	MX_IWDG_Init:
 190              	.LFB67:
 363:./Src/main.c  ****   __HAL_RCC_WWDG_CLK_ENABLE();
 191              		.loc 1 363 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 8
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195 0000 00B5     		push	{lr}
 196              	.LCFI3:
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 14, -4
 199 0002 83B0     		sub	sp, sp, #12
 200              	.LCFI4:
 201              		.cfi_def_cfa_offset 16
 202              	.LBB2:
 364:./Src/main.c  ****   hiwdg.Instance = IWDG;
 203              		.loc 1 364 0
 204 0004 0E4B     		ldr	r3, .L22
 205 0006 DA69     		ldr	r2, [r3, #28]
 206 0008 42F40062 		orr	r2, r2, #2048
 207 000c DA61     		str	r2, [r3, #28]
 208 000e DB69     		ldr	r3, [r3, #28]
 209 0010 03F40063 		and	r3, r3, #2048
 210 0014 0193     		str	r3, [sp, #4]
 211 0016 019B     		ldr	r3, [sp, #4]
 212              	.LBE2:
 365:./Src/main.c  ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 213              		.loc 1 365 0
 214 0018 0A48     		ldr	r0, .L22+4
 215 001a 0B4B     		ldr	r3, .L22+8
 216 001c 0360     		str	r3, [r0]
 366:./Src/main.c  ****   hiwdg.Init.Reload = 4095;
 217              		.loc 1 366 0
 218 001e 0123     		movs	r3, #1
 219 0020 4360     		str	r3, [r0, #4]
 367:./Src/main.c  ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 220              		.loc 1 367 0
 221 0022 40F6FF73 		movw	r3, #4095
 222 0026 8360     		str	r3, [r0, #8]
 368:./Src/main.c  ****   {
 223              		.loc 1 368 0
 224 0028 FFF7FEFF 		bl	HAL_IWDG_Init
 225              	.LVL15:
 226 002c 08B1     		cbz	r0, .L20
 370:./Src/main.c  ****   }
 227              		.loc 1 370 0
 228 002e FFF7FEFF 		bl	Error_Handler
 229              	.LVL16:
 230              	.L20:
 372:./Src/main.c  **** }
ARM GAS  /tmp/ccMuAS3h.s 			page 12


 231              		.loc 1 372 0
 232 0032 0448     		ldr	r0, .L22+4
 233 0034 FFF7FEFF 		bl	HAL_IWDG_Start
 234              	.LVL17:
 373:./Src/main.c  **** 
 235              		.loc 1 373 0
 236 0038 03B0     		add	sp, sp, #12
 237              	.LCFI5:
 238              		.cfi_def_cfa_offset 4
 239              		@ sp needed
 240 003a 5DF804FB 		ldr	pc, [sp], #4
 241              	.L23:
 242 003e 00BF     		.align	2
 243              	.L22:
 244 0040 00100240 		.word	1073876992
 245 0044 00000000 		.word	hiwdg
 246 0048 00300040 		.word	1073754112
 247              		.cfi_endproc
 248              	.LFE67:
 250              		.section	.text.SystemClock_Config,"ax",%progbits
 251              		.align	2
 252              		.global	SystemClock_Config
 253              		.thumb
 254              		.thumb_func
 256              	SystemClock_Config:
 257              	.LFB66:
 309:./Src/main.c  **** 
 258              		.loc 1 309 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 88
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262 0000 00B5     		push	{lr}
 263              	.LCFI6:
 264              		.cfi_def_cfa_offset 4
 265              		.cfi_offset 14, -4
 266 0002 97B0     		sub	sp, sp, #92
 267              	.LCFI7:
 268              		.cfi_def_cfa_offset 96
 317:./Src/main.c  ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 269              		.loc 1 317 0
 270 0004 0223     		movs	r3, #2
 271 0006 0C93     		str	r3, [sp, #48]
 318:./Src/main.c  ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 272              		.loc 1 318 0
 273 0008 0122     		movs	r2, #1
 274 000a 1092     		str	r2, [sp, #64]
 319:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 275              		.loc 1 319 0
 276 000c 1022     		movs	r2, #16
 277 000e 1192     		str	r2, [sp, #68]
 320:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 278              		.loc 1 320 0
 279 0010 1393     		str	r3, [sp, #76]
 321:./Src/main.c  ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 280              		.loc 1 321 0
 281 0012 0023     		movs	r3, #0
 282 0014 1493     		str	r3, [sp, #80]
ARM GAS  /tmp/ccMuAS3h.s 			page 13


 322:./Src/main.c  ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 283              		.loc 1 322 0
 284 0016 4FF46013 		mov	r3, #3670016
 285 001a 1593     		str	r3, [sp, #84]
 323:./Src/main.c  ****   {
 286              		.loc 1 323 0
 287 001c 0CA8     		add	r0, sp, #48
 288 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 289              	.LVL18:
 290 0022 08B1     		cbz	r0, .L25
 325:./Src/main.c  ****   }
 291              		.loc 1 325 0
 292 0024 FFF7FEFF 		bl	Error_Handler
 293              	.LVL19:
 294              	.L25:
 330:./Src/main.c  ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 295              		.loc 1 330 0
 296 0028 0F23     		movs	r3, #15
 297 002a 0793     		str	r3, [sp, #28]
 332:./Src/main.c  ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 298              		.loc 1 332 0
 299 002c 0221     		movs	r1, #2
 300 002e 0891     		str	r1, [sp, #32]
 333:./Src/main.c  ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 301              		.loc 1 333 0
 302 0030 0023     		movs	r3, #0
 303 0032 0993     		str	r3, [sp, #36]
 334:./Src/main.c  ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 304              		.loc 1 334 0
 305 0034 4FF48062 		mov	r2, #1024
 306 0038 0A92     		str	r2, [sp, #40]
 335:./Src/main.c  **** 
 307              		.loc 1 335 0
 308 003a 0B93     		str	r3, [sp, #44]
 337:./Src/main.c  ****   {
 309              		.loc 1 337 0
 310 003c 07A8     		add	r0, sp, #28
 311 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 312              	.LVL20:
 313 0042 08B1     		cbz	r0, .L26
 339:./Src/main.c  ****   }
 314              		.loc 1 339 0
 315 0044 FFF7FEFF 		bl	Error_Handler
 316              	.LVL21:
 317              	.L26:
 342:./Src/main.c  ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 318              		.loc 1 342 0
 319 0048 0223     		movs	r3, #2
 320 004a 0193     		str	r3, [sp, #4]
 343:./Src/main.c  ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 321              		.loc 1 343 0
 322 004c 4FF44043 		mov	r3, #49152
 323 0050 0393     		str	r3, [sp, #12]
 344:./Src/main.c  ****   {
 324              		.loc 1 344 0
 325 0052 01A8     		add	r0, sp, #4
 326 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
ARM GAS  /tmp/ccMuAS3h.s 			page 14


 327              	.LVL22:
 328 0058 08B1     		cbz	r0, .L27
 346:./Src/main.c  ****   }
 329              		.loc 1 346 0
 330 005a FFF7FEFF 		bl	Error_Handler
 331              	.LVL23:
 332              	.L27:
 351:./Src/main.c  **** 
 333              		.loc 1 351 0
 334 005e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 335              	.LVL24:
 336 0062 094B     		ldr	r3, .L29
 337 0064 A3FB0030 		umull	r3, r0, r3, r0
 338 0068 8009     		lsrs	r0, r0, #6
 339 006a FFF7FEFF 		bl	HAL_SYSTICK_Config
 340              	.LVL25:
 355:./Src/main.c  **** 
 341              		.loc 1 355 0
 342 006e 0420     		movs	r0, #4
 343 0070 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 344              	.LVL26:
 358:./Src/main.c  **** }
 345              		.loc 1 358 0
 346 0074 0022     		movs	r2, #0
 347 0076 1146     		mov	r1, r2
 348 0078 4FF0FF30 		mov	r0, #-1
 349 007c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 350              	.LVL27:
 359:./Src/main.c  **** 
 351              		.loc 1 359 0
 352 0080 17B0     		add	sp, sp, #92
 353              	.LCFI8:
 354              		.cfi_def_cfa_offset 4
 355              		@ sp needed
 356 0082 5DF804FB 		ldr	pc, [sp], #4
 357              	.L30:
 358 0086 00BF     		.align	2
 359              	.L29:
 360 0088 D34D6210 		.word	274877907
 361              		.cfi_endproc
 362              	.LFE66:
 364              		.global	__aeabi_i2d
 365              		.global	__aeabi_ddiv
 366              		.global	__aeabi_dmul
 367              		.global	__aeabi_dcmpgt
 368              		.global	__aeabi_dcmplt
 369              		.global	__aeabi_d2iz
 370              		.global	__aeabi_dsub
 371              		.global	__aeabi_dadd
 372              		.global	__aeabi_fcmplt
 373              		.section	.text.main,"ax",%progbits
 374              		.align	2
 375              		.global	main
 376              		.thumb
 377              		.thumb_func
 379              	main:
 380              	.LFB65:
ARM GAS  /tmp/ccMuAS3h.s 			page 15


 128:./Src/main.c  ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 381              		.loc 1 128 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 216
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 386              	.LCFI9:
 387              		.cfi_def_cfa_offset 36
 388              		.cfi_offset 4, -36
 389              		.cfi_offset 5, -32
 390              		.cfi_offset 6, -28
 391              		.cfi_offset 7, -24
 392              		.cfi_offset 8, -20
 393              		.cfi_offset 9, -16
 394              		.cfi_offset 10, -12
 395              		.cfi_offset 11, -8
 396              		.cfi_offset 14, -4
 397 0004 BBB0     		sub	sp, sp, #236
 398              	.LCFI10:
 399              		.cfi_def_cfa_offset 272
 130:./Src/main.c  **** 
 400              		.loc 1 130 0
 401 0006 FFF7FEFF 		bl	HAL_Init
 402              	.LVL28:
 133:./Src/main.c  **** 
 403              		.loc 1 133 0
 404 000a FFF7FEFF 		bl	SystemClock_Config
 405              	.LVL29:
 135:./Src/main.c  **** 
 406              		.loc 1 135 0
 407 000e FFF7FEFF 		bl	Button_init
 408              	.LVL30:
 137:./Src/main.c  **** 
 409              		.loc 1 137 0
 410 0012 0120     		movs	r0, #1
 411 0014 FFF7FEFF 		bl	Power_Set
 412              	.LVL31:
 140:./Src/main.c  **** 
 413              		.loc 1 140 0
 414 0018 FFF7FEFF 		bl	Telemetry_init
 415              	.LVL32:
 142:./Src/main.c  ****   Led_init();
 416              		.loc 1 142 0
 417 001c FFF7FEFF 		bl	Buzzer_init
 418              	.LVL33:
 143:./Src/main.c  ****   IS_Charge_init();
 419              		.loc 1 143 0
 420 0020 FFF7FEFF 		bl	Led_init
 421              	.LVL34:
 144:./Src/main.c  **** 
 422              		.loc 1 144 0
 423 0024 FFF7FEFF 		bl	IS_Charge_init
 424              	.LVL35:
 146:./Src/main.c  ****   ADC_R_init();
 425              		.loc 1 146 0
 426 0028 FFF7FEFF 		bl	ADC_L_init
 427              	.LVL36:
ARM GAS  /tmp/ccMuAS3h.s 			page 16


 147:./Src/main.c  ****   MotorL_init();
 428              		.loc 1 147 0
 429 002c FFF7FEFF 		bl	ADC_R_init
 430              	.LVL37:
 148:./Src/main.c  ****   MotorR_init();
 431              		.loc 1 148 0
 432 0030 FFF7FEFF 		bl	MotorL_init
 433              	.LVL38:
 149:./Src/main.c  **** 
 434              		.loc 1 149 0
 435 0034 FFF7FEFF 		bl	MotorR_init
 436              	.LVL39:
 437              	.LBB3:
 162:./Src/main.c  ****     Led_Set(0);
 438              		.loc 1 162 0
 439 0038 02E0     		b	.L32
 440              	.L33:
 163:./Src/main.c  ****   }
 441              		.loc 1 163 0
 442 003a 0020     		movs	r0, #0
 443 003c FFF7FEFF 		bl	Led_Set
 444              	.LVL40:
 445              	.L32:
 162:./Src/main.c  ****     Led_Set(0);
 446              		.loc 1 162 0
 447 0040 FFF7FEFF 		bl	IS_Button
 448              	.LVL41:
 449 0044 0028     		cmp	r0, #0
 450 0046 F8D1     		bne	.L33
 451              	.LBE3:
 166:./Src/main.c  ****   Battery_TASK();
 452              		.loc 1 166 0
 453 0048 FFF7FEFF 		bl	applcation_init
 454              	.LVL42:
 167:./Src/main.c  **** 
 455              		.loc 1 167 0
 456 004c FFF7FEFF 		bl	Battery_TASK
 457              	.LVL43:
 169:./Src/main.c  **** 
 458              		.loc 1 169 0
 459 0050 FFF7FEFF 		bl	MX_IWDG_Init
 460              	.LVL44:
 171:./Src/main.c  ****   Buzzer_TwoBeep();
 461              		.loc 1 171 0
 462 0054 0120     		movs	r0, #1
 463 0056 FFF7FEFF 		bl	Led_Set
 464              	.LVL45:
 172:./Src/main.c  ****   HAL_Delay(350);
 465              		.loc 1 172 0
 466 005a FFF7FEFF 		bl	Buzzer_TwoBeep
 467              	.LVL46:
 173:./Src/main.c  **** 
 468              		.loc 1 173 0
 469 005e 4FF4AF70 		mov	r0, #350
 470 0062 FFF7FEFF 		bl	HAL_Delay
 471              	.LVL47:
 175:./Src/main.c  ****   MotorL_start();
ARM GAS  /tmp/ccMuAS3h.s 			page 17


 472              		.loc 1 175 0
 473 0066 FFF7FEFF 		bl	MotorR_start
 474              	.LVL48:
 176:./Src/main.c  ****   //MotorR_pwm(80);
 475              		.loc 1 176 0
 476 006a FFF7FEFF 		bl	MotorL_start
 477              	.LVL49:
 180:./Src/main.c  **** 
 478              		.loc 1 180 0
 479 006e FFF7FEFF 		bl	Timer_init
 480              	.LVL50:
 192:./Src/main.c  ****   while(1){
 481              		.loc 1 192 0
 482 0072 0023     		movs	r3, #0
 483 0074 0793     		str	r3, [sp, #28]
 484 0076 9946     		mov	r9, r3
 190:./Src/main.c  ****   uint8_t state = 0;
 485              		.loc 1 190 0
 486 0078 40F6CA04 		movw	r4, #2250
 188:./Src/main.c  **** 
 487              		.loc 1 188 0
 488 007c 9B46     		mov	fp, r3
 187:./Src/main.c  ****   int16_t speedL = 0;
 489              		.loc 1 187 0
 490 007e 9A46     		mov	r10, r3
 491              	.LVL51:
 492              	.L50:
 194:./Src/main.c  ****     if ((sinValue) % (200) == 0) {
 493              		.loc 1 194 0
 494 0080 0134     		adds	r4, r4, #1
 495              	.LVL52:
 195:./Src/main.c  ****       state = !state;
 496              		.loc 1 195 0
 497 0082 C74B     		ldr	r3, .L61+16
 498 0084 A3FB0423 		umull	r2, r3, r3, r4
 499 0088 9B09     		lsrs	r3, r3, #6
 500 008a C822     		movs	r2, #200
 501 008c 02FB1343 		mls	r3, r2, r3, r4
 502 0090 002B     		cmp	r3, #0
 503 0092 40F0E580 		bne	.L34
 504              	.LBB4:
 200:./Src/main.c  ****       sprintf(str, "%i;%i;%i;%i;%i;%i\n\r", captured_value[0], captured_value[1], captured_value[2]
 505              		.loc 1 200 0
 506 0096 0021     		movs	r1, #0
 507 0098 08A8     		add	r0, sp, #32
 508 009a FFF7FEFF 		bl	memset
 509              	.LVL53:
 201:./Src/main.c  ****       int readR = -(CLAMP((((captured_value[1]-500)-(captured_value[0]-500))*(captured_value[2]/500
 510              		.loc 1 201 0
 511 009e DFF83083 		ldr	r8, .L61+64
 512 00a2 B8F80020 		ldrh	r2, [r8]
 513 00a6 B8F80230 		ldrh	r3, [r8, #2]
 514 00aa B8F80410 		ldrh	r1, [r8, #4]
 515 00ae B8F80600 		ldrh	r0, [r8, #6]
 516 00b2 B8F80850 		ldrh	r5, [r8, #8]
 517 00b6 B8F80A60 		ldrh	r6, [r8, #10]
 518 00ba 0396     		str	r6, [sp, #12]
ARM GAS  /tmp/ccMuAS3h.s 			page 18


 519 00bc 0295     		str	r5, [sp, #8]
 520 00be 0190     		str	r0, [sp, #4]
 521 00c0 0091     		str	r1, [sp]
 522 00c2 B849     		ldr	r1, .L61+20
 523 00c4 08A8     		add	r0, sp, #32
 524 00c6 FFF7FEFF 		bl	sprintf
 525              	.LVL54:
 202:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 526              		.loc 1 202 0
 527 00ca B8F80270 		ldrh	r7, [r8, #2]
 528 00ce A7F5FA77 		sub	r7, r7, #500
 529 00d2 B8F80060 		ldrh	r6, [r8]
 530 00d6 A6F5FA76 		sub	r6, r6, #500
 531 00da BD1B     		subs	r5, r7, r6
 532 00dc B8F80400 		ldrh	r0, [r8, #4]
 533 00e0 FFF7FEFF 		bl	__aeabi_i2d
 534              	.LVL55:
 535 00e4 0022     		movs	r2, #0
 536 00e6 B04B     		ldr	r3, .L61+24
 537 00e8 FFF7FEFF 		bl	__aeabi_ddiv
 538              	.LVL56:
 539 00ec CDE90401 		strd	r0, [sp, #16]
 540 00f0 2846     		mov	r0, r5
 541 00f2 FFF7FEFF 		bl	__aeabi_i2d
 542              	.LVL57:
 543 00f6 DDE90423 		ldrd	r2, [sp, #16]
 544 00fa FFF7FEFF 		bl	__aeabi_dmul
 545              	.LVL58:
 546 00fe 8046     		mov	r8, r0
 547 0100 0D46     		mov	r5, r1
 548 0102 0022     		movs	r2, #0
 549 0104 A94B     		ldr	r3, .L61+28
 550 0106 4046     		mov	r0, r8
 551 0108 2946     		mov	r1, r5
 552 010a FFF7FEFF 		bl	__aeabi_dcmpgt
 553              	.LVL59:
 554 010e 70B9     		cbnz	r0, .L51
 202:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 555              		.loc 1 202 0 is_stmt 0 discriminator 2
 556 0110 9FA3     		adr	r3, .L61
 557 0112 D3E90023 		ldrd	r2, [r3]
 558 0116 4046     		mov	r0, r8
 559 0118 2946     		mov	r1, r5
 560 011a FFF7FEFF 		bl	__aeabi_dcmplt
 561              	.LVL60:
 562 011e 40B9     		cbnz	r0, .L52
 202:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 563              		.loc 1 202 0 discriminator 5
 564 0120 4046     		mov	r0, r8
 565 0122 05F10041 		add	r1, r5, #-2147483648
 566 0126 FFF7FEFF 		bl	__aeabi_d2iz
 567              	.LVL61:
 568 012a 0546     		mov	r5, r0
 569 012c 03E0     		b	.L35
 570              	.L51:
 202:./Src/main.c  ****       int readL = -(CLAMP((((captured_value[1]-500)+(captured_value[0]-500))*(captured_value[2]/500
 571              		.loc 1 202 0
ARM GAS  /tmp/ccMuAS3h.s 			page 19


 572 012e A04D     		ldr	r5, .L61+32
 573 0130 01E0     		b	.L35
 574              	.L52:
 575 0132 4FF47A75 		mov	r5, #1000
 576              	.L35:
 577              	.LVL62:
 203:./Src/main.c  **** 
 578              		.loc 1 203 0 is_stmt 1 discriminator 8
 579 0136 B819     		adds	r0, r7, r6
 580 0138 FFF7FEFF 		bl	__aeabi_i2d
 581              	.LVL63:
 582 013c DDE90423 		ldrd	r2, [sp, #16]
 583 0140 FFF7FEFF 		bl	__aeabi_dmul
 584              	.LVL64:
 585 0144 0746     		mov	r7, r0
 586 0146 0E46     		mov	r6, r1
 587 0148 0022     		movs	r2, #0
 588 014a 984B     		ldr	r3, .L61+28
 589 014c 3846     		mov	r0, r7
 590 014e 3146     		mov	r1, r6
 591 0150 FFF7FEFF 		bl	__aeabi_dcmpgt
 592              	.LVL65:
 593 0154 70B9     		cbnz	r0, .L53
 203:./Src/main.c  **** 
 594              		.loc 1 203 0 is_stmt 0 discriminator 2
 595 0156 8EA3     		adr	r3, .L61
 596 0158 D3E90023 		ldrd	r2, [r3]
 597 015c 3846     		mov	r0, r7
 598 015e 3146     		mov	r1, r6
 599 0160 FFF7FEFF 		bl	__aeabi_dcmplt
 600              	.LVL66:
 601 0164 48B9     		cbnz	r0, .L54
 203:./Src/main.c  **** 
 602              		.loc 1 203 0 discriminator 5
 603 0166 3846     		mov	r0, r7
 604 0168 06F10041 		add	r1, r6, #-2147483648
 605 016c FFF7FEFF 		bl	__aeabi_d2iz
 606              	.LVL67:
 607 0170 8046     		mov	r8, r0
 608 0172 04E0     		b	.L36
 609              	.L53:
 203:./Src/main.c  **** 
 610              		.loc 1 203 0
 611 0174 DFF83882 		ldr	r8, .L61+32
 612 0178 01E0     		b	.L36
 613              	.L54:
 614 017a 4FF47A78 		mov	r8, #1000
 615              	.L36:
 616              	.LVL68:
 206:./Src/main.c  ****       speedL += readL / 2.0;
 617              		.loc 1 206 0 is_stmt 1 discriminator 8
 618 017e 5846     		mov	r0, fp
 619 0180 FFF7FEFF 		bl	__aeabi_i2d
 620              	.LVL69:
 621 0184 0646     		mov	r6, r0
 622 0186 0F46     		mov	r7, r1
 623 0188 0022     		movs	r2, #0
ARM GAS  /tmp/ccMuAS3h.s 			page 20


 624 018a 8A4B     		ldr	r3, .L61+36
 625 018c FFF7FEFF 		bl	__aeabi_dmul
 626              	.LVL70:
 627 0190 0246     		mov	r2, r0
 628 0192 0B46     		mov	r3, r1
 629 0194 3046     		mov	r0, r6
 630 0196 3946     		mov	r1, r7
 631 0198 FFF7FEFF 		bl	__aeabi_dsub
 632              	.LVL71:
 633 019c FFF7FEFF 		bl	__aeabi_d2iz
 634              	.LVL72:
 635 01a0 0FFA80FB 		sxth	fp, r0
 636              	.LVL73:
 207:./Src/main.c  **** 
 637              		.loc 1 207 0 discriminator 8
 638 01a4 4046     		mov	r0, r8
 639 01a6 FFF7FEFF 		bl	__aeabi_i2d
 640              	.LVL74:
 641 01aa 0022     		movs	r2, #0
 642 01ac 814B     		ldr	r3, .L61+36
 643 01ae FFF7FEFF 		bl	__aeabi_dmul
 644              	.LVL75:
 645 01b2 0646     		mov	r6, r0
 646 01b4 0F46     		mov	r7, r1
 647 01b6 5846     		mov	r0, fp
 648 01b8 FFF7FEFF 		bl	__aeabi_i2d
 649              	.LVL76:
 650 01bc 3246     		mov	r2, r6
 651 01be 3B46     		mov	r3, r7
 652 01c0 FFF7FEFF 		bl	__aeabi_dadd
 653              	.LVL77:
 654 01c4 FFF7FEFF 		bl	__aeabi_d2iz
 655              	.LVL78:
 656 01c8 0FFA80FB 		sxth	fp, r0
 657              	.LVL79:
 210:./Src/main.c  ****       speedR += readR / 2.0;
 658              		.loc 1 210 0 discriminator 8
 659 01cc 5046     		mov	r0, r10
 660 01ce FFF7FEFF 		bl	__aeabi_i2d
 661              	.LVL80:
 662 01d2 0646     		mov	r6, r0
 663 01d4 0F46     		mov	r7, r1
 664 01d6 0022     		movs	r2, #0
 665 01d8 764B     		ldr	r3, .L61+36
 666 01da FFF7FEFF 		bl	__aeabi_dmul
 667              	.LVL81:
 668 01de 0246     		mov	r2, r0
 669 01e0 0B46     		mov	r3, r1
 670 01e2 3046     		mov	r0, r6
 671 01e4 3946     		mov	r1, r7
 672 01e6 FFF7FEFF 		bl	__aeabi_dsub
 673              	.LVL82:
 674 01ea FFF7FEFF 		bl	__aeabi_d2iz
 675              	.LVL83:
 676 01ee 0FFA80F8 		sxth	r8, r0
 677              	.LVL84:
 211:./Src/main.c  **** 
ARM GAS  /tmp/ccMuAS3h.s 			page 21


 678              		.loc 1 211 0 discriminator 8
 679 01f2 2846     		mov	r0, r5
 680 01f4 FFF7FEFF 		bl	__aeabi_i2d
 681              	.LVL85:
 682 01f8 0022     		movs	r2, #0
 683 01fa 6E4B     		ldr	r3, .L61+36
 684 01fc FFF7FEFF 		bl	__aeabi_dmul
 685              	.LVL86:
 686 0200 0646     		mov	r6, r0
 687 0202 0F46     		mov	r7, r1
 688 0204 4046     		mov	r0, r8
 689 0206 FFF7FEFF 		bl	__aeabi_i2d
 690              	.LVL87:
 691 020a 3246     		mov	r2, r6
 692 020c 3B46     		mov	r3, r7
 693 020e FFF7FEFF 		bl	__aeabi_dadd
 694              	.LVL88:
 695 0212 FFF7FEFF 		bl	__aeabi_d2iz
 696              	.LVL89:
 697 0216 0FFA80FA 		sxth	r10, r0
 698              	.LVL90:
 214:./Src/main.c  ****         MotorR_pwm(speedR);
 699              		.loc 1 214 0 discriminator 8
 700 021a 5D46     		mov	r5, fp
 701              	.LVL91:
 702 021c 09F13203 		add	r3, r9, #50
 703 0220 9B45     		cmp	fp, r3
 704 0222 17DA     		bge	.L37
 214:./Src/main.c  ****         MotorR_pwm(speedR);
 705              		.loc 1 214 0 is_stmt 0 discriminator 1
 706 0224 A9F13209 		sub	r9, r9, #50
 707              	.LVL92:
 708 0228 CB45     		cmp	fp, r9
 709 022a 13DD     		ble	.L37
 214:./Src/main.c  ****         MotorR_pwm(speedR);
 710              		.loc 1 214 0 discriminator 2
 711 022c 079A     		ldr	r2, [sp, #28]
 712 022e 1346     		mov	r3, r2
 713 0230 3233     		adds	r3, r3, #50
 714 0232 9A45     		cmp	r10, r3
 715 0234 0EDA     		bge	.L37
 214:./Src/main.c  ****         MotorR_pwm(speedR);
 716              		.loc 1 214 0 discriminator 3
 717 0236 A2F13203 		sub	r3, r2, #50
 718 023a 9A45     		cmp	r10, r3
 719 023c 0ADD     		ble	.L37
 214:./Src/main.c  ****         MotorR_pwm(speedR);
 720              		.loc 1 214 0 discriminator 4
 721 023e 5E4B     		ldr	r3, .L61+40
 722 0240 1B68     		ldr	r3, [r3]
 723 0242 B3F57A7F 		cmp	r3, #1000
 724 0246 05D2     		bcs	.L37
 215:./Src/main.c  ****         MotorL_pwm(speedL);
 725              		.loc 1 215 0 is_stmt 1
 726 0248 5046     		mov	r0, r10
 727 024a FFF7FEFF 		bl	MotorR_pwm
 728              	.LVL93:
ARM GAS  /tmp/ccMuAS3h.s 			page 22


 216:./Src/main.c  ****       }
 729              		.loc 1 216 0
 730 024e 5846     		mov	r0, fp
 731 0250 FFF7FEFF 		bl	MotorL_pwm
 732              	.LVL94:
 733              	.L37:
 219:./Src/main.c  ****       //MotorR_pwm(-250);
 734              		.loc 1 219 0
 735 0254 CDF81CA0 		str	r10, [sp, #28]
 736              	.LVL95:
 222:./Src/main.c  ****     }
 737              		.loc 1 222 0
 738 0258 08A8     		add	r0, sp, #32
 739 025a FFF7FEFF 		bl	Console_Log
 740              	.LVL96:
 218:./Src/main.c  ****       lastSpeedR = speedR;
 741              		.loc 1 218 0
 742 025e A946     		mov	r9, r5
 743              	.LVL97:
 744              	.L34:
 745              	.LBE4:
 224:./Src/main.c  **** 
 746              		.loc 1 224 0
 747 0260 554A     		ldr	r2, .L61+40
 748 0262 1368     		ldr	r3, [r2]
 749 0264 0133     		adds	r3, r3, #1
 750 0266 1360     		str	r3, [r2]
 226:./Src/main.c  ****       MotorR_pwm(0);
 751              		.loc 1 226 0
 752 0268 B3F57A7F 		cmp	r3, #1000
 753 026c 05D9     		bls	.L38
 227:./Src/main.c  ****       MotorL_pwm(0);
 754              		.loc 1 227 0
 755 026e 0020     		movs	r0, #0
 756 0270 FFF7FEFF 		bl	MotorR_pwm
 757              	.LVL98:
 228:./Src/main.c  ****     }
 758              		.loc 1 228 0
 759 0274 0020     		movs	r0, #0
 760 0276 FFF7FEFF 		bl	MotorL_pwm
 761              	.LVL99:
 762              	.L38:
 231:./Src/main.c  **** 
 763              		.loc 1 231 0
 764 027a FFF7FEFF 		bl	HAL_GetTick
 765              	.LVL100:
 766 027e 4F4B     		ldr	r3, .L61+44
 767 0280 1860     		str	r0, [r3]
 768              	.LBB5:
 233:./Src/main.c  ****       while(IS_Button()) {
 769              		.loc 1 233 0
 770 0282 FFF7FEFF 		bl	IS_Button
 771              	.LVL101:
 772 0286 18B9     		cbnz	r0, .L39
 773 0288 0FE0     		b	.L40
 774              	.L41:
 235:./Src/main.c  ****       }
ARM GAS  /tmp/ccMuAS3h.s 			page 23


 775              		.loc 1 235 0
 776 028a 4D48     		ldr	r0, .L61+48
 777 028c FFF7FEFF 		bl	HAL_IWDG_Refresh
 778              	.LVL102:
 779              	.L39:
 234:./Src/main.c  ****         HAL_IWDG_Refresh(&hiwdg);
 780              		.loc 1 234 0
 781 0290 FFF7FEFF 		bl	IS_Button
 782              	.LVL103:
 783 0294 0028     		cmp	r0, #0
 784 0296 F8D1     		bne	.L41
 237:./Src/main.c  ****       HAL_Delay(350);
 785              		.loc 1 237 0
 786 0298 FFF7FEFF 		bl	Buzzer_OneLongBeep
 787              	.LVL104:
 238:./Src/main.c  ****       Power_Set(0);
 788              		.loc 1 238 0
 789 029c 4FF4AF70 		mov	r0, #350
 790 02a0 FFF7FEFF 		bl	HAL_Delay
 791              	.LVL105:
 239:./Src/main.c  ****     }
 792              		.loc 1 239 0
 793 02a4 0020     		movs	r0, #0
 794 02a6 FFF7FEFF 		bl	Power_Set
 795              	.LVL106:
 796              	.L40:
 797              	.LBE5:
 277:./Src/main.c  ****     //Current_Motor_TASK();
 798              		.loc 1 277 0
 799 02aa FFF7FEFF 		bl	Battery_TASK
 800              	.LVL107:
 801              	.LBB6:
 284:./Src/main.c  ****       MotorL_pwm(0);
 802              		.loc 1 284 0
 803 02ae FFF7FEFF 		bl	GET_BatteryAverage
 804              	.LVL108:
 805 02b2 4449     		ldr	r1, .L61+52
 806 02b4 FFF7FEFF 		bl	__aeabi_fcmplt
 807              	.LVL109:
 808 02b8 0028     		cmp	r0, #0
 809 02ba 56D1     		bne	.L42
 284:./Src/main.c  ****       MotorL_pwm(0);
 810              		.loc 1 284 0 is_stmt 0 discriminator 1
 811 02bc FFF7FEFF 		bl	getMotorCurrentR
 812              	.LVL110:
 813 02c0 FFF7FEFF 		bl	__aeabi_i2d
 814              	.LVL111:
 815 02c4 34A3     		adr	r3, .L61+8
 816 02c6 D3E90023 		ldrd	r2, [r3]
 817 02ca FFF7FEFF 		bl	__aeabi_dmul
 818              	.LVL112:
 819 02ce 0022     		movs	r2, #0
 820 02d0 0023     		movs	r3, #0
 821 02d2 FFF7FEFF 		bl	__aeabi_dcmplt
 822              	.LVL113:
 823 02d6 78B1     		cbz	r0, .L57
 284:./Src/main.c  ****       MotorL_pwm(0);
ARM GAS  /tmp/ccMuAS3h.s 			page 24


 824              		.loc 1 284 0 discriminator 2
 825 02d8 FFF7FEFF 		bl	getMotorCurrentR
 826              	.LVL114:
 827 02dc FFF7FEFF 		bl	__aeabi_i2d
 828              	.LVL115:
 829 02e0 2DA3     		adr	r3, .L61+8
 830 02e2 D3E90023 		ldrd	r2, [r3]
 831 02e6 FFF7FEFF 		bl	__aeabi_dmul
 832              	.LVL116:
 833 02ea 0022     		movs	r2, #0
 834 02ec 364B     		ldr	r3, .L61+56
 835 02ee FFF7FEFF 		bl	__aeabi_dcmplt
 836              	.LVL117:
 837 02f2 0028     		cmp	r0, #0
 838 02f4 39D1     		bne	.L42
 839 02f6 0DE0     		b	.L45
 840              	.L57:
 284:./Src/main.c  ****       MotorL_pwm(0);
 841              		.loc 1 284 0 discriminator 3
 842 02f8 FFF7FEFF 		bl	getMotorCurrentR
 843              	.LVL118:
 844 02fc FFF7FEFF 		bl	__aeabi_i2d
 845              	.LVL119:
 846 0300 25A3     		adr	r3, .L61+8
 847 0302 D3E90023 		ldrd	r2, [r3]
 848 0306 FFF7FEFF 		bl	__aeabi_dmul
 849              	.LVL120:
 850 030a 0022     		movs	r2, #0
 851 030c 2F4B     		ldr	r3, .L61+60
 852 030e FFF7FEFF 		bl	__aeabi_dcmpgt
 853              	.LVL121:
 854 0312 50BB     		cbnz	r0, .L42
 855              	.L45:
 284:./Src/main.c  ****       MotorL_pwm(0);
 856              		.loc 1 284 0 discriminator 4
 857 0314 FFF7FEFF 		bl	getMotorCurrentL
 858              	.LVL122:
 859 0318 FFF7FEFF 		bl	__aeabi_i2d
 860              	.LVL123:
 861 031c 1EA3     		adr	r3, .L61+8
 862 031e D3E90023 		ldrd	r2, [r3]
 863 0322 FFF7FEFF 		bl	__aeabi_dmul
 864              	.LVL124:
 865 0326 0022     		movs	r2, #0
 866 0328 0023     		movs	r3, #0
 867 032a FFF7FEFF 		bl	__aeabi_dcmplt
 868              	.LVL125:
 869 032e 70B1     		cbz	r0, .L58
 284:./Src/main.c  ****       MotorL_pwm(0);
 870              		.loc 1 284 0 discriminator 5
 871 0330 FFF7FEFF 		bl	getMotorCurrentL
 872              	.LVL126:
 873 0334 FFF7FEFF 		bl	__aeabi_i2d
 874              	.LVL127:
 875 0338 17A3     		adr	r3, .L61+8
 876 033a D3E90023 		ldrd	r2, [r3]
 877 033e FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccMuAS3h.s 			page 25


 878              	.LVL128:
 879 0342 0022     		movs	r2, #0
 880 0344 204B     		ldr	r3, .L61+56
 881 0346 FFF7FEFF 		bl	__aeabi_dcmplt
 882              	.LVL129:
 883 034a 70B9     		cbnz	r0, .L42
 884 034c 1CE0     		b	.L48
 885              	.L58:
 284:./Src/main.c  ****       MotorL_pwm(0);
 886              		.loc 1 284 0 discriminator 6
 887 034e FFF7FEFF 		bl	getMotorCurrentL
 888              	.LVL130:
 889 0352 FFF7FEFF 		bl	__aeabi_i2d
 890              	.LVL131:
 891 0356 10A3     		adr	r3, .L61+8
 892 0358 D3E90023 		ldrd	r2, [r3]
 893 035c FFF7FEFF 		bl	__aeabi_dmul
 894              	.LVL132:
 895 0360 0022     		movs	r2, #0
 896 0362 1A4B     		ldr	r3, .L61+60
 897 0364 FFF7FEFF 		bl	__aeabi_dcmpgt
 898              	.LVL133:
 899 0368 70B1     		cbz	r0, .L48
 900              	.L42:
 285:./Src/main.c  ****       MotorR_pwm(0);
 901              		.loc 1 285 0 is_stmt 1
 902 036a 0020     		movs	r0, #0
 903 036c FFF7FEFF 		bl	MotorL_pwm
 904              	.LVL134:
 286:./Src/main.c  ****       Buzzer_OneLongBeep();
 905              		.loc 1 286 0
 906 0370 0020     		movs	r0, #0
 907 0372 FFF7FEFF 		bl	MotorR_pwm
 908              	.LVL135:
 287:./Src/main.c  ****       HAL_Delay(350);
 909              		.loc 1 287 0
 910 0376 FFF7FEFF 		bl	Buzzer_OneLongBeep
 911              	.LVL136:
 288:./Src/main.c  ****       Power_Set(0);
 912              		.loc 1 288 0
 913 037a 4FF4AF70 		mov	r0, #350
 914 037e FFF7FEFF 		bl	HAL_Delay
 915              	.LVL137:
 289:./Src/main.c  ****     }
 916              		.loc 1 289 0
 917 0382 0020     		movs	r0, #0
 918 0384 FFF7FEFF 		bl	Power_Set
 919              	.LVL138:
 920              	.L48:
 921              	.LBE6:
 296:./Src/main.c  **** 
 922              		.loc 1 296 0
 923 0388 0D48     		ldr	r0, .L61+48
 924 038a FFF7FEFF 		bl	HAL_IWDG_Refresh
 925              	.LVL139:
 302:./Src/main.c  **** 
 926              		.loc 1 302 0
ARM GAS  /tmp/ccMuAS3h.s 			page 26


 927 038e 77E6     		b	.L50
 928              	.L62:
 929              		.align	3
 930              	.L61:
 931 0390 00000000 		.word	0
 932 0394 00408FC0 		.word	-1064353792
 933 0398 7B14AE47 		.word	1202590843
 934 039c E17A943F 		.word	1066695393
 935 03a0 1F85EB51 		.word	1374389535
 936 03a4 00000000 		.word	.LC0
 937 03a8 00407F40 		.word	1082081280
 938 03ac 00408F40 		.word	1083129856
 939 03b0 18FCFFFF 		.word	-1000
 940 03b4 0000E03F 		.word	1071644672
 941 03b8 00000000 		.word	.LANCHOR1
 942 03bc 00000000 		.word	counterTemp
 943 03c0 00000000 		.word	hiwdg
 944 03c4 0000F841 		.word	1106771968
 945 03c8 008046C0 		.word	-1069121536
 946 03cc 00804640 		.word	1078362112
 947 03d0 00000000 		.word	.LANCHOR2
 948              		.cfi_endproc
 949              	.LFE65:
 951              		.global	timeout
 952              		.global	rx_count
 953              		.global	data_ready
 954              		.global	pointer
 955              		.global	rc_data
 956              		.global	captured_value
 957              		.comm	htim2,60,4
 958              		.comm	counterTempTT,4,4
 959              		.comm	counterTemp,4,4
 960              		.global	speed
 961              		.comm	hiwdg,16,4
 962              		.section	.bss.pointer,"aw",%nobits
 965              	pointer:
 966 0000 00       		.space	1
 967              		.section	.bss.rc_data,"aw",%nobits
 968              		.align	2
 971              	rc_data:
 972 0000 00000000 		.space	10
 972      00000000 
 972      0000
 973              		.section	.bss.captured_value,"aw",%nobits
 974              		.align	2
 975              		.set	.LANCHOR2,. + 0
 978              	captured_value:
 979 0000 00000000 		.space	16
 979      00000000 
 979      00000000 
 979      00000000 
 980              		.section	.bss.rx_count,"aw",%nobits
 981              		.set	.LANCHOR0,. + 0
 984              	rx_count:
 985 0000 00       		.space	1
 986              		.section	.rodata.str1.4,"aMS",%progbits,1
 987              		.align	2
ARM GAS  /tmp/ccMuAS3h.s 			page 27


 988              	.LC0:
 989 0000 25693B25 		.ascii	"%i;%i;%i;%i;%i;%i\012\015\000"
 989      693B2569 
 989      3B25693B 
 989      25693B25 
 989      690A0D00 
 990              		.section	.bss.timeout,"aw",%nobits
 991              		.align	2
 992              		.set	.LANCHOR1,. + 0
 995              	timeout:
 996 0000 00000000 		.space	4
 997              		.section	.bss.speed,"aw",%nobits
 998              		.align	1
 1001              	speed:
 1002 0000 0000     		.space	2
 1003              		.section	.bss.data_ready,"aw",%nobits
 1006              	data_ready:
 1007 0000 00       		.space	1
 1008              		.text
 1009              	.Letext0:
 1010              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1011              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1012              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1013              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1014              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1015              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1016              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1017              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1018              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 1019              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1020              		.file 12 "./Drivers/CMSIS/Include/core_cm3.h"
 1021              		.file 13 "./Inc/delay.h"
 1022              		.file 14 "./Inc/ADC_R.h"
 1023              		.file 15 "./Inc/ADC_L.h"
 1024              		.file 16 "./Inc/motor_R.h"
 1025              		.file 17 "./Inc/motor_L.h"
 1026              		.file 18 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1027              		.file 19 "./Inc/varie.h"
 1028              		.file 20 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/stdio.h"
 1029              		.file 21 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1030              		.file 22 "./Inc/application.h"
 1031              		.file 23 "./Inc/telemetry.h"
 1032              		.file 24 "<built-in>"
ARM GAS  /tmp/ccMuAS3h.s 			page 28


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccMuAS3h.s:20     .text.PPM_ISR_Callback:00000000 $t
     /tmp/ccMuAS3h.s:25     .text.PPM_ISR_Callback:00000000 PPM_ISR_Callback
     /tmp/ccMuAS3h.s:102    .text.PPM_ISR_Callback:0000005c $d
     /tmp/ccMuAS3h.s:109    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccMuAS3h.s:114    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccMuAS3h.s:150    .text.HAL_ADC_ConvCpltCallback:00000020 $d
     /tmp/ccMuAS3h.s:156    .text.Error_Handler:00000000 $t
     /tmp/ccMuAS3h.s:161    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccMuAS3h.s:185    .text.MX_IWDG_Init:00000000 $t
     /tmp/ccMuAS3h.s:189    .text.MX_IWDG_Init:00000000 MX_IWDG_Init
     /tmp/ccMuAS3h.s:244    .text.MX_IWDG_Init:00000040 $d
                            *COM*:00000010 hiwdg
     /tmp/ccMuAS3h.s:251    .text.SystemClock_Config:00000000 $t
     /tmp/ccMuAS3h.s:256    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccMuAS3h.s:360    .text.SystemClock_Config:00000088 $d
     /tmp/ccMuAS3h.s:374    .text.main:00000000 $t
     /tmp/ccMuAS3h.s:379    .text.main:00000000 main
     /tmp/ccMuAS3h.s:931    .text.main:00000390 $d
                            *COM*:00000004 counterTemp
     /tmp/ccMuAS3h.s:995    .bss.timeout:00000000 timeout
     /tmp/ccMuAS3h.s:984    .bss.rx_count:00000000 rx_count
     /tmp/ccMuAS3h.s:1006   .bss.data_ready:00000000 data_ready
     /tmp/ccMuAS3h.s:965    .bss.pointer:00000000 pointer
     /tmp/ccMuAS3h.s:971    .bss.rc_data:00000000 rc_data
     /tmp/ccMuAS3h.s:978    .bss.captured_value:00000000 captured_value
                            *COM*:0000003c htim2
                            *COM*:00000004 counterTempTT
     /tmp/ccMuAS3h.s:1001   .bss.speed:00000000 speed
     /tmp/ccMuAS3h.s:966    .bss.pointer:00000000 $d
     /tmp/ccMuAS3h.s:968    .bss.rc_data:00000000 $d
     /tmp/ccMuAS3h.s:974    .bss.captured_value:00000000 $d
     /tmp/ccMuAS3h.s:985    .bss.rx_count:00000000 $d
     /tmp/ccMuAS3h.s:987    .rodata.str1.4:00000000 $d
     /tmp/ccMuAS3h.s:991    .bss.timeout:00000000 $d
     /tmp/ccMuAS3h.s:998    .bss.speed:00000000 $d
     /tmp/ccMuAS3h.s:1007   .bss.data_ready:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_stop_timer
_init_us
ADC_R_callback
ADC_L_callback
MotorR_stop
MotorL_stop
HAL_IWDG_Init
HAL_IWDG_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
__aeabi_i2d
ARM GAS  /tmp/ccMuAS3h.s 			page 29


__aeabi_ddiv
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_d2iz
__aeabi_dsub
__aeabi_dadd
__aeabi_fcmplt
HAL_Init
Button_init
Power_Set
Telemetry_init
Buzzer_init
Led_init
IS_Charge_init
ADC_L_init
ADC_R_init
MotorL_init
MotorR_init
Led_Set
IS_Button
applcation_init
Battery_TASK
Buzzer_TwoBeep
HAL_Delay
MotorR_start
MotorL_start
Timer_init
memset
sprintf
MotorR_pwm
MotorL_pwm
Console_Log
HAL_GetTick
HAL_IWDG_Refresh
Buzzer_OneLongBeep
GET_BatteryAverage
getMotorCurrentR
getMotorCurrentL
