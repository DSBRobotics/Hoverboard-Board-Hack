<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 1
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 1
>>>>>>> GameTrak


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_hal.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_MspInit,"ax",%progbits
  20              		.align	2
  21              		.weak	HAL_MspInit
  22              		.thumb
  23              		.thumb_func
  25              	HAL_MspInit:
  26              	.LFB66:
  27              		.file 1 "./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c"
   1:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
   2:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ******************************************************************************
   3:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @file    stm32f1xx_hal.c
   4:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @author  MCD Application Team
   5:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @version V1.0.4
   6:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @date    29-April-2016
   7:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief   HAL module driver.
   8:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *          This is the common part of the HAL initialization
   9:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
  10:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   @verbatim
  11:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ==============================================================================
  12:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                      ##### How to use this driver #####
  13:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ==============================================================================
  14:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     [..]
  15:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  16:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL. 
  17:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     [..]
  18:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     The HAL contains two APIs' categories: 
  19:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****          (+) Common HAL APIs
  20:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****          (+) Services HAL APIs
  21:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  22:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   @endverbatim
  23:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ******************************************************************************
  24:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @attention
  25:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
  26:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  27:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
  28:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  29:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * are permitted provided that the following conditions are met:
  30:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  31:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      this list of conditions and the following disclaimer.
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 2
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 2
>>>>>>> GameTrak


  32:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  33:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
  34:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      and/or other materials provided with the distribution.
  35:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  36:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  37:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      without specific prior written permission.
  38:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
  39:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  40:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  41:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  42:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  43:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  44:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  45:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  46:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  47:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  48:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  49:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *
  50:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   ******************************************************************************
  51:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  52:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  53:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  54:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #include "stm32f1xx_hal.h"
  55:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  56:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @addtogroup STM32F1xx_HAL_Driver
  57:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
  58:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  59:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  60:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL HAL
  61:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief HAL module driver.
  62:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
  63:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  64:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  65:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #ifdef HAL_MODULE_ENABLED
  66:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  67:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  68:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private define ------------------------------------------------------------*/
  69:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  70:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Private_Constants HAL Private Constants
  71:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
  72:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  73:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  74:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
  75:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  * @brief STM32F1xx HAL Driver version number
  76:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    */
  77:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_MAIN   (0x01) /*!< [31:24] main version */
  78:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_SUB1   (0x00) /*!< [23:16] sub1 version */
  79:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_SUB2   (0x04) /*!< [15:8]  sub2 version */
  80:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION_RC     (0x00) /*!< [7:0]  release candidate */
  81:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define __STM32F1xx_HAL_VERSION         ((__STM32F1xx_HAL_VERSION_MAIN << 24)\
  82:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                                         |(__STM32F1xx_HAL_VERSION_SUB1 << 16)\
  83:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                                         |(__STM32F1xx_HAL_VERSION_SUB2 << 8 )\
  84:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                                         |(__STM32F1xx_HAL_VERSION_RC))
  85:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  86:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #define IDCODE_DEVID_MASK    ((uint32_t)0x00000FFF)
  87:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  88:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 3
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 3
>>>>>>> GameTrak


  89:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @}
  90:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  91:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  92:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private macro -------------------------------------------------------------*/
  93:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private variables ---------------------------------------------------------*/
  94:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  95:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Private_Variables HAL Private Variables
  96:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
  97:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
  98:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  99:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** static __IO uint32_t uwTick;
 100:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 101:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 102:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @}
 103:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 104:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 105:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
 106:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /* Exported functions ---------------------------------------------------------*/
 107:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 108:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Exported_Functions HAL Exported Functions
 109:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
 110:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 111:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 112:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions 
 113:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  *  @brief    Initialization and de-initialization functions
 114:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  *
 115:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** @verbatim
 116:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  ===============================================================================
 117:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****               ##### Initialization and de-initialization functions #####
 118:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  ===============================================================================
 119:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    [..]  This section provides functions allowing to:
 120:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Initializes the Flash interface, the NVIC allocation and initial clock 
 121:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****           configuration. It initializes the source of time base also when timeout 
 122:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****           is needed and the backup domain when enabled.
 123:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) de-Initializes common part of the HAL.
 124:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Configure The time base source to have 1ms time base with a dedicated 
 125:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****           Tick interrupt priority. 
 126:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****         (++) Systick timer is used by default as source of time base, but user 
 127:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              can eventually implement his proper time base source (a general purpose 
 128:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              timer for example or other time source), keeping in mind that Time base 
 129:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
 130:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              handled in milliseconds basis.
 131:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically 
 132:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time 
 133:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig(). 
 134:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular 
 135:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a 
 136:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority 
 137:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller 
 138:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****             ISR process will be blocked. 
 139:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****        (++) functions affecting time base configurations are declared as __Weak  
 140:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 141:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  
 142:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** @endverbatim
 143:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
 144:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 145:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 4
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 4
>>>>>>> GameTrak


 146:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 147:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function configures the Flash prefetch, 
 148:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        Configures time base source, NVIC and Low level hardware
 149:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is called at the beginning of program after reset and before 
 150:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       the clock configuration
 151:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note The time base configuration is based on MSI clock when exiting from Reset.
 152:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Once done, time base tick start incrementing.
 153:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        In the default implementation,Systick is used as source of time base.
 154:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       The tick variable is incremented each 1ms in its ISR.
 155:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval HAL status
 156:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 157:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 159:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Configure Flash prefetch */
 160:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #if (PREFETCH_ENABLE != 0)
 161:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #if defined(STM32F101x6) || defined(STM32F101xB) || defined(STM32F101xE) || defined(STM32F101xG) ||
 162:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     defined(STM32F102x6) || defined(STM32F102xB) || \
 163:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) ||
 164:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     defined(STM32F105xC) || defined(STM32F107xC)
 165:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 166:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Prefetch buffer is not available on value line devices */
 167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 168:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #endif
 169:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #endif /* PREFETCH_ENABLE */
 170:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 171:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Set Interrupt Group Priority */
 172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 173:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 174:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
 175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
 176:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 177:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Init the low level hardware */
 178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_MspInit();
 179:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 180:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Return function status */
 181:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return HAL_OK;
 182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 183:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 184:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 185:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function de-Initializes common part of the HAL and stops the source
 186:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        of time base.
 187:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is optional.
 188:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval HAL status
 189:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 190:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 192:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Reset of all peripherals */
 193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
 194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
 195:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
 197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
 198:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 199:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #if defined(STM32F105xC) || defined(STM32F107xC)
 200:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_AHB_FORCE_RESET();
 201:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_AHB_RELEASE_RESET();
 202:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #endif
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 5
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 5
>>>>>>> GameTrak


 203:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   
 204:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* De-Init the low level hardware */
 205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_MspDeInit();
 206:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     
 207:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Return function status */
 208:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return HAL_OK;
 209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 210:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 211:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 212:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Initializes the MSP.
 213:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 214:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 215:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_MspInit(void)
 216:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
  28              		.loc 1 216 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE66:
  37 0002 00BF     		.section	.text.HAL_MspDeInit,"ax",%progbits
  38              		.align	2
  39              		.weak	HAL_MspDeInit
  40              		.thumb
  41              		.thumb_func
  43              	HAL_MspDeInit:
  44              	.LFB67:
 217:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 218:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 219:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    */
 220:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 221:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 222:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 223:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  DeInitializes the MSP.
 224:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 225:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 226:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_MspDeInit(void)
 227:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
  45              		.loc 1 227 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50 0000 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE67:
  54 0002 00BF     		.section	.text.HAL_DeInit,"ax",%progbits
  55              		.align	2
  56              		.global	HAL_DeInit
  57              		.thumb
  58              		.thumb_func
  60              	HAL_DeInit:
  61              	.LFB65:
 191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Reset of all peripherals */
  62              		.loc 1 191 0
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 6
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 6
>>>>>>> GameTrak


  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
 191:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Reset of all peripherals */
  66              		.loc 1 191 0
  67 0000 10B5     		push	{r4, lr}
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 4, -8
  71              		.cfi_offset 14, -4
 193:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  72              		.loc 1 193 0
  73 0002 064B     		ldr	r3, .L5
  74 0004 4FF0FF32 		mov	r2, #-1
  75 0008 DA60     		str	r2, [r3, #12]
 194:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  76              		.loc 1 194 0
  77 000a 0024     		movs	r4, #0
  78 000c 1C61     		str	r4, [r3, #16]
 196:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
  79              		.loc 1 196 0
  80 000e DA60     		str	r2, [r3, #12]
 197:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  81              		.loc 1 197 0
  82 0010 DC60     		str	r4, [r3, #12]
 205:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     
  83              		.loc 1 205 0
  84 0012 FFF7FEFF 		bl	HAL_MspDeInit
  85              	.LVL0:
 209:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
  86              		.loc 1 209 0
  87 0016 2046     		mov	r0, r4
  88 0018 10BD     		pop	{r4, pc}
  89              	.L6:
  90 001a 00BF     		.align	2
  91              	.L5:
  92 001c 00100240 		.word	1073876992
  93              		.cfi_endproc
  94              	.LFE65:
  96              		.section	.text.HAL_InitTick,"ax",%progbits
  97              		.align	2
  98              		.weak	HAL_InitTick
  99              		.thumb
 100              		.thumb_func
 102              	HAL_InitTick:
 103              	.LFB68:
 228:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 229:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 230:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    */
 231:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 232:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 233:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 234:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function configures the source of the time base. 
 235:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated 
 236:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        Tick interrupt priority.
 237:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 238:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig(). 
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 7
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 7
>>>>>>> GameTrak


 239:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base. 
 240:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       It is used to generate interrupts at regular time intervals. 
 241:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
 242:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       The the SysTick interrupt must have higher priority (numerically lower) 
 243:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 244:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       The function is declared as __Weak  to be overwritten  in case of other
 245:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementation  in user file.
 246:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @param TickPriority: Tick interrupt priority.
 247:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval HAL status
 248:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 249:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 250:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 104              		.loc 1 250 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL1:
 109 0000 10B5     		push	{r4, lr}
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 4, -8
 113              		.cfi_offset 14, -4
 114 0002 0446     		mov	r4, r0
 251:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
 252:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 115              		.loc 1 252 0
 116 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 117              	.LVL2:
 118 0008 064B     		ldr	r3, .L9
 119 000a A3FB0030 		umull	r3, r0, r3, r0
 120 000e 8009     		lsrs	r0, r0, #6
 121 0010 FFF7FEFF 		bl	HAL_SYSTICK_Config
 122              	.LVL3:
 253:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 254:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /*Configure the SysTick IRQ priority */
 255:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 123              		.loc 1 255 0
 124 0014 0022     		movs	r2, #0
 125 0016 2146     		mov	r1, r4
 126 0018 4FF0FF30 		mov	r0, #-1
 127 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 128              	.LVL4:
 256:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 257:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    /* Return function status */
 258:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return HAL_OK;
 259:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 129              		.loc 1 259 0
 130 0020 0020     		movs	r0, #0
 131 0022 10BD     		pop	{r4, pc}
 132              	.LVL5:
 133              	.L10:
 134              		.align	2
 135              	.L9:
 136 0024 D34D6210 		.word	274877907
 137              		.cfi_endproc
 138              	.LFE68:
 140              		.section	.text.HAL_Init,"ax",%progbits
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 8
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 8
>>>>>>> GameTrak


 141              		.align	2
 142              		.global	HAL_Init
 143              		.thumb
 144              		.thumb_func
 146              	HAL_Init:
 147              	.LFB64:
 158:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Configure Flash prefetch */
 148              		.loc 1 158 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152 0000 08B5     		push	{r3, lr}
 153              	.LCFI2:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 3, -8
 156              		.cfi_offset 14, -4
 167:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** #endif
 157              		.loc 1 167 0
 158 0002 074A     		ldr	r2, .L13
 159 0004 1368     		ldr	r3, [r2]
 160 0006 43F01003 		orr	r3, r3, #16
 161 000a 1360     		str	r3, [r2]
 172:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 162              		.loc 1 172 0
 163 000c 0320     		movs	r0, #3
 164 000e FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 165              	.LVL6:
 175:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 166              		.loc 1 175 0
 167 0012 0020     		movs	r0, #0
 168 0014 FFF7FEFF 		bl	HAL_InitTick
 169              	.LVL7:
 178:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 170              		.loc 1 178 0
 171 0018 FFF7FEFF 		bl	HAL_MspInit
 172              	.LVL8:
 182:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 173              		.loc 1 182 0
 174 001c 0020     		movs	r0, #0
 175 001e 08BD     		pop	{r3, pc}
 176              	.L14:
 177              		.align	2
 178              	.L13:
 179 0020 00200240 		.word	1073881088
 180              		.cfi_endproc
 181              	.LFE64:
 183              		.section	.text.HAL_IncTick,"ax",%progbits
 184              		.align	2
 185              		.weak	HAL_IncTick
 186              		.thumb
 187              		.thumb_func
 189              	HAL_IncTick:
 190              	.LFB69:
 260:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 261:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 262:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @}
 263:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 9
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 9
>>>>>>> GameTrak


 264:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 265:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions 
 266:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  *  @brief    HAL Control functions
 267:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  *
 268:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** @verbatim
 269:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  ===============================================================================
 270:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****                       ##### HAL Control functions #####
 271:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  ===============================================================================
 272:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****     [..]  This section provides functions allowing to:
 273:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Provide a tick value in millisecond
 274:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Provide a blocking delay in millisecond
 275:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Suspend the time base source interrupt
 276:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Resume the time base source interrupt
 277:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Get the HAL API driver version
 278:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Get the device identifier
 279:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Get the device revision identifier
 280:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Enable/Disable Debug module during Sleep mode
 281:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 282:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 283:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****       
 284:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** @endverbatim
 285:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @{
 286:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 287:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 288:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 289:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 290:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        used as application time base.
 291:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 292:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       in Systick ISR.
 293:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other 
 294:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *      implementations in user file.
 295:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 296:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 297:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_IncTick(void)
 298:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 191              		.loc 1 298 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 299:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   uwTick++;
 196              		.loc 1 299 0
 197 0000 024A     		ldr	r2, .L16
 198 0002 1368     		ldr	r3, [r2]
 199 0004 0133     		adds	r3, r3, #1
 200 0006 1360     		str	r3, [r2]
 201 0008 7047     		bx	lr
 202              	.L17:
 203 000a 00BF     		.align	2
 204              	.L16:
 205 000c 00000000 		.word	.LANCHOR0
 206              		.cfi_endproc
 207              	.LFE69:
 209              		.section	.text.HAL_GetTick,"ax",%progbits
 210              		.align	2
 211              		.weak	HAL_GetTick
 212              		.thumb
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 10
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 10
>>>>>>> GameTrak


 213              		.thumb_func
 215              	HAL_GetTick:
 216              	.LFB70:
 300:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 301:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 302:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 303:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief Provides a tick value in millisecond.
 304:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note   This function is declared as __weak  to be overwritten  in case of other 
 305:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementations in user file.
 306:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval tick value
 307:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 308:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 309:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 217              		.loc 1 309 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 310:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return uwTick;
 222              		.loc 1 310 0
 223 0000 014B     		ldr	r3, .L19
 224 0002 1868     		ldr	r0, [r3]
 311:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 225              		.loc 1 311 0
 226 0004 7047     		bx	lr
 227              	.L20:
 228 0006 00BF     		.align	2
 229              	.L19:
 230 0008 00000000 		.word	.LANCHOR0
 231              		.cfi_endproc
 232              	.LFE70:
 234              		.section	.text.HAL_Delay,"ax",%progbits
 235              		.align	2
 236              		.weak	HAL_Delay
 237              		.thumb
 238              		.thumb_func
 240              	HAL_Delay:
 241              	.LFB71:
 312:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 313:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 314:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief This function provides accurate delay (in milliseconds) based 
 315:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *        on variable incremented.
 316:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 317:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 318:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is incremented.
 319:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note ThiS function is declared as __weak to be overwritten in case of other
 320:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementations in user file.
 321:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @param Delay: specifies the delay time length, in milliseconds.
 322:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 323:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 324:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_Delay(__IO uint32_t Delay)
 325:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 242              		.loc 1 325 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 8
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              	.LVL9:
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 11
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 11
>>>>>>> GameTrak


 247 0000 10B5     		push	{r4, lr}
 248              	.LCFI3:
 249              		.cfi_def_cfa_offset 8
 250              		.cfi_offset 4, -8
 251              		.cfi_offset 14, -4
 252 0002 82B0     		sub	sp, sp, #8
 253              	.LCFI4:
 254              		.cfi_def_cfa_offset 16
 255 0004 0190     		str	r0, [sp, #4]
 256              	.LVL10:
 326:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   uint32_t tickstart = 0;
 327:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   tickstart = HAL_GetTick();
 257              		.loc 1 327 0
 258 0006 FFF7FEFF 		bl	HAL_GetTick
 259              	.LVL11:
 260 000a 0446     		mov	r4, r0
 261              	.LVL12:
 262              	.L22:
 328:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   while((HAL_GetTick() - tickstart) < Delay)
 263              		.loc 1 328 0 discriminator 1
 264 000c FFF7FEFF 		bl	HAL_GetTick
 265              	.LVL13:
 266 0010 001B     		subs	r0, r0, r4
 267 0012 019B     		ldr	r3, [sp, #4]
 268 0014 9842     		cmp	r0, r3
 269 0016 F9D3     		bcc	.L22
 329:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   {
 330:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   }
 331:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 270              		.loc 1 331 0
 271 0018 02B0     		add	sp, sp, #8
 272              	.LCFI5:
 273              		.cfi_def_cfa_offset 8
 274              		@ sp needed
 275 001a 10BD     		pop	{r4, pc}
 276              		.cfi_endproc
 277              	.LFE71:
 279              		.section	.text.HAL_SuspendTick,"ax",%progbits
 280              		.align	2
 281              		.weak	HAL_SuspendTick
 282              		.thumb
 283              		.thumb_func
 285              	HAL_SuspendTick:
 286              	.LFB72:
 332:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 333:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 334:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief Suspend Tick increment.
 335:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 336:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 337:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is called, the the SysTick interrupt will be disabled and so Tick increment 
 338:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is suspended.
 339:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 340:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementations in user file.
 341:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 342:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 343:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_SuspendTick(void)
 344:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 12
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 12
>>>>>>> GameTrak


 287              		.loc 1 344 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 345:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Disable SysTick Interrupt */
 346:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 292              		.loc 1 346 0
 293 0000 024A     		ldr	r2, .L25
 294 0002 1368     		ldr	r3, [r2]
 295 0004 23F00203 		bic	r3, r3, #2
 296 0008 1360     		str	r3, [r2]
 297 000a 7047     		bx	lr
 298              	.L26:
 299              		.align	2
 300              	.L25:
 301 000c 10E000E0 		.word	-536813552
 302              		.cfi_endproc
 303              	.LFE72:
 305              		.section	.text.HAL_ResumeTick,"ax",%progbits
 306              		.align	2
 307              		.weak	HAL_ResumeTick
 308              		.thumb
 309              		.thumb_func
 311              	HAL_ResumeTick:
 312              	.LFB73:
 347:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 348:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 349:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 350:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief Resume Tick increment.
 351:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 352:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 353:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is called, the the SysTick interrupt will be enabled and so Tick increment 
 354:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       is resumed.
 355:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @note This function is declared as __weak  to be overwritten  in case of other
 356:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       implementations in user file.
 357:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 358:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 359:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** __weak void HAL_ResumeTick(void)
 360:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 313              		.loc 1 360 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              		@ link register save eliminated.
 361:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   /* Enable SysTick Interrupt */
 362:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 318              		.loc 1 362 0
 319 0000 024A     		ldr	r2, .L28
 320 0002 1368     		ldr	r3, [r2]
 321 0004 43F00203 		orr	r3, r3, #2
 322 0008 1360     		str	r3, [r2]
 323 000a 7047     		bx	lr
 324              	.L29:
 325              		.align	2
 326              	.L28:
 327 000c 10E000E0 		.word	-536813552
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 13
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 13
>>>>>>> GameTrak


 328              		.cfi_endproc
 329              	.LFE73:
 331              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 332              		.align	2
 333              		.global	HAL_GetHalVersion
 334              		.thumb
 335              		.thumb_func
 337              	HAL_GetHalVersion:
 338              	.LFB74:
 363:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 364:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 365:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 366:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  This method returns the HAL revision
 367:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval version: 0xXYZR (8bits for each decimal, R for RC)
 368:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 369:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 370:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 339              		.loc 1 370 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 371:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****  return __STM32F1xx_HAL_VERSION;
 372:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 344              		.loc 1 372 0
 345 0000 0048     		ldr	r0, .L31
 346 0002 7047     		bx	lr
 347              	.L32:
 348              		.align	2
 349              	.L31:
 350 0004 00040001 		.word	16778240
 351              		.cfi_endproc
 352              	.LFE74:
 354              		.section	.text.HAL_GetREVID,"ax",%progbits
 355              		.align	2
 356              		.global	HAL_GetREVID
 357              		.thumb
 358              		.thumb_func
 360              	HAL_GetREVID:
 361              	.LFB75:
 373:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 374:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 375:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief Returns the device revision identifier.
 376:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 377:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 378:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 379:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 380:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 381:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 382:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 383:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval Device revision identifier
 384:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 385:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** uint32_t HAL_GetREVID(void)
 386:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 362              		.loc 1 386 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 14
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 14
>>>>>>> GameTrak


 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		@ link register save eliminated.
 387:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   return((DBGMCU->IDCODE) >> POSITION_VAL(DBGMCU_IDCODE_REV_ID));
 367              		.loc 1 387 0
 368 0000 044B     		ldr	r3, .L34
 369 0002 1868     		ldr	r0, [r3]
 370              	.LVL14:
 371              	.LBB4:
 372              	.LBB5:
 373              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 15
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 15
>>>>>>> GameTrak


  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 16
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 16
>>>>>>> GameTrak


 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 17
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 17
>>>>>>> GameTrak


 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 18
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 18
>>>>>>> GameTrak


 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 19
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 19
>>>>>>> GameTrak


 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 20
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 20
>>>>>>> GameTrak


 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 21
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 21
>>>>>>> GameTrak


 390:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:./Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:./Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:./Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:./Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:./Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 22
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 22
>>>>>>> GameTrak


 447:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:./Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 23
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 23
>>>>>>> GameTrak


 504:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:./Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:./Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 374              		.loc 2 531 0
 375 0004 044B     		ldr	r3, .L34+4
 376              		.syntax unified
 377              	@ 531 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 378 0006 93FAA3F3 		rbit r3, r3
 379              	@ 0 "" 2
 380              	.LVL15:
 381              		.thumb
 382              		.syntax unified
 383              	.LBE5:
 384              	.LBE4:
 385              		.loc 1 387 0
 386 000a B3FA83F3 		clz	r3, r3
 388:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 387              		.loc 1 388 0
 388 000e D840     		lsrs	r0, r0, r3
 389 0010 7047     		bx	lr
 390              	.L35:
 391 0012 00BF     		.align	2
 392              	.L34:
 393 0014 002004E0 		.word	-536600576
 394 0018 0000FFFF 		.word	-65536
 395              		.cfi_endproc
 396              	.LFE75:
 398              		.section	.text.HAL_GetDEVID,"ax",%progbits
 399              		.align	2
 400              		.global	HAL_GetDEVID
 401              		.thumb
 402              		.thumb_func
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 24
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 24
>>>>>>> GameTrak


 404              	HAL_GetDEVID:
 405              	.LFB76:
 389:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 390:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 391:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Returns the device identifier.
 392:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 393:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 394:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 395:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 396:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 397:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 398:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 399:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval Device identifier
 400:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 401:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** uint32_t HAL_GetDEVID(void)
 402:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 406              		.loc 1 402 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 403:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 411              		.loc 1 403 0
 412 0000 024B     		ldr	r3, .L37
 413 0002 1868     		ldr	r0, [r3]
 404:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 414              		.loc 1 404 0
 415 0004 C0F30B00 		ubfx	r0, r0, #0, #12
 416 0008 7047     		bx	lr
 417              	.L38:
 418 000a 00BF     		.align	2
 419              	.L37:
 420 000c 002004E0 		.word	-536600576
 421              		.cfi_endproc
 422              	.LFE76:
 424              		.section	.text.HAL_DBGMCU_EnableDBGSleepMode,"ax",%progbits
 425              		.align	2
 426              		.global	HAL_DBGMCU_EnableDBGSleepMode
 427              		.thumb
 428              		.thumb_func
 430              	HAL_DBGMCU_EnableDBGSleepMode:
 431              	.LFB77:
 405:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 406:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 407:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Enable the Debug Module during SLEEP mode
 408:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 409:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 410:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_EnableDBGSleepMode(void)
 411:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 432              		.loc 1 411 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              		@ link register save eliminated.
 412:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 437              		.loc 1 412 0
 438 0000 024A     		ldr	r2, .L40
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 25
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 25
>>>>>>> GameTrak


 439 0002 5368     		ldr	r3, [r2, #4]
 440 0004 43F00103 		orr	r3, r3, #1
 441 0008 5360     		str	r3, [r2, #4]
 442 000a 7047     		bx	lr
 443              	.L41:
 444              		.align	2
 445              	.L40:
 446 000c 002004E0 		.word	-536600576
 447              		.cfi_endproc
 448              	.LFE77:
 450              		.section	.text.HAL_DBGMCU_DisableDBGSleepMode,"ax",%progbits
 451              		.align	2
 452              		.global	HAL_DBGMCU_DisableDBGSleepMode
 453              		.thumb
 454              		.thumb_func
 456              	HAL_DBGMCU_DisableDBGSleepMode:
 457              	.LFB78:
 413:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 414:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 415:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 416:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Disable the Debug Module during SLEEP mode
 417:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 418:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 419:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 420:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 421:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 422:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 423:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 424:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 425:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 426:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_DisableDBGSleepMode(void)
 427:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 458              		.loc 1 427 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 428:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 463              		.loc 1 428 0
 464 0000 024A     		ldr	r2, .L43
 465 0002 5368     		ldr	r3, [r2, #4]
 466 0004 23F00103 		bic	r3, r3, #1
 467 0008 5360     		str	r3, [r2, #4]
 468 000a 7047     		bx	lr
 469              	.L44:
 470              		.align	2
 471              	.L43:
 472 000c 002004E0 		.word	-536600576
 473              		.cfi_endproc
 474              	.LFE78:
 476              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
 477              		.align	2
 478              		.global	HAL_DBGMCU_EnableDBGStopMode
 479              		.thumb
 480              		.thumb_func
 482              	HAL_DBGMCU_EnableDBGStopMode:
 483              	.LFB79:
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 26
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 26
>>>>>>> GameTrak


 429:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 430:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 431:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 432:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Enable the Debug Module during STOP mode
 433:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 434:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 435:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 436:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 437:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 438:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 439:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 440:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On all STM32F1 devices:
 441:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       If the system tick timer interrupt is enabled during the Stop mode 
 442:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup
 443:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       the system from Stop mode.
 444:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Workaround: To debug the Stop mode, disable the system tick timer 
 445:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       interrupt.
 446:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 447:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On all STM32F1 devices:
 448:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       If the system tick timer interrupt is enabled during the Stop mode  
 449:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug (DBG_STOP bit set in the DBGMCU_CR register ), it will wakeup
 450:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       the system from Stop mode.
 451:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Workaround: To debug the Stop mode, disable the system tick timer
 452:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       interrupt.
 453:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 454:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 455:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 456:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_EnableDBGStopMode(void)
 457:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 484              		.loc 1 457 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              		@ link register save eliminated.
 458:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 489              		.loc 1 458 0
 490 0000 024A     		ldr	r2, .L46
 491 0002 5368     		ldr	r3, [r2, #4]
 492 0004 43F00203 		orr	r3, r3, #2
 493 0008 5360     		str	r3, [r2, #4]
 494 000a 7047     		bx	lr
 495              	.L47:
 496              		.align	2
 497              	.L46:
 498 000c 002004E0 		.word	-536600576
 499              		.cfi_endproc
 500              	.LFE79:
 502              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 503              		.align	2
 504              		.global	HAL_DBGMCU_DisableDBGStopMode
 505              		.thumb
 506              		.thumb_func
 508              	HAL_DBGMCU_DisableDBGStopMode:
 509              	.LFB80:
 459:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 460:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 461:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 27
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 27
>>>>>>> GameTrak


 462:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Disable the Debug Module during STOP mode
 463:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 464:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 465:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 466:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 467:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 468:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 469:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 470:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 471:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 472:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_DisableDBGStopMode(void)
 473:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 510              		.loc 1 473 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              		@ link register save eliminated.
 474:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 515              		.loc 1 474 0
 516 0000 024A     		ldr	r2, .L49
 517 0002 5368     		ldr	r3, [r2, #4]
 518 0004 23F00203 		bic	r3, r3, #2
 519 0008 5360     		str	r3, [r2, #4]
 520 000a 7047     		bx	lr
 521              	.L50:
 522              		.align	2
 523              	.L49:
 524 000c 002004E0 		.word	-536600576
 525              		.cfi_endproc
 526              	.LFE80:
 528              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 529              		.align	2
 530              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 531              		.thumb
 532              		.thumb_func
 534              	HAL_DBGMCU_EnableDBGStandbyMode:
 535              	.LFB81:
 475:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 476:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 477:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 478:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Enable the Debug Module during STANDBY mode
 479:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 480:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 481:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 482:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 483:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 484:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 485:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 486:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 487:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 488:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_EnableDBGStandbyMode(void)
 489:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 536              		.loc 1 489 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              		@ link register save eliminated.
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 28
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 28
>>>>>>> GameTrak


 490:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 541              		.loc 1 490 0
 542 0000 024A     		ldr	r2, .L52
 543 0002 5368     		ldr	r3, [r2, #4]
 544 0004 43F00403 		orr	r3, r3, #4
 545 0008 5360     		str	r3, [r2, #4]
 546 000a 7047     		bx	lr
 547              	.L53:
 548              		.align	2
 549              	.L52:
 550 000c 002004E0 		.word	-536600576
 551              		.cfi_endproc
 552              	.LFE81:
 554              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 555              		.align	2
 556              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 557              		.thumb
 558              		.thumb_func
 560              	HAL_DBGMCU_DisableDBGStandbyMode:
 561              	.LFB82:
 491:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** }
 492:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** 
 493:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** /**
 494:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @brief  Disable the Debug Module during STANDBY mode
 495:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * Note: On devices STM32F10xx8 and STM32F10xxB,
 496:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xC/D/E and STM32F103xC/D/E,
 497:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F101xF/G and STM32F103xF/G
 498:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *                  STM32F10xx4 and STM32F10xx6
 499:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Debug registers DBGMCU_IDCODE and DBGMCU_CR are accessible only in 
 500:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       debug mode (not accessible by the user software in normal mode).
 501:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   *       Refer to errata sheet of these devices for more details.
 502:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   * @retval None
 503:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   */
 504:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** void HAL_DBGMCU_DisableDBGStandbyMode(void)
 505:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c **** {
 562              		.loc 1 505 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 506:./Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 567              		.loc 1 506 0
 568 0000 024A     		ldr	r2, .L55
 569 0002 5368     		ldr	r3, [r2, #4]
 570 0004 23F00403 		bic	r3, r3, #4
 571 0008 5360     		str	r3, [r2, #4]
 572 000a 7047     		bx	lr
 573              	.L56:
 574              		.align	2
 575              	.L55:
 576 000c 002004E0 		.word	-536600576
 577              		.cfi_endproc
 578              	.LFE82:
 580              		.section	.bss.uwTick,"aw",%nobits
 581              		.align	2
 582              		.set	.LANCHOR0,. + 0
 585              	uwTick:
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 29
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 29
>>>>>>> GameTrak


 586 0000 00000000 		.space	4
 587              		.text
 588              	.Letext0:
 589              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 590              		.file 4 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 591              		.file 5 "./Drivers/CMSIS/Include/core_cm3.h"
 592              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 593              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 594              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 595              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
<<<<<<< HEAD
ARM GAS  /tmp/ccWfhOL3.s 			page 30
=======
ARM GAS  /tmp/ccIx4NMI.s 			page 30
>>>>>>> GameTrak


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_hal.c
<<<<<<< HEAD
     /tmp/ccWfhOL3.s:20     .text.HAL_MspInit:00000000 $t
     /tmp/ccWfhOL3.s:25     .text.HAL_MspInit:00000000 HAL_MspInit
     /tmp/ccWfhOL3.s:38     .text.HAL_MspDeInit:00000000 $t
     /tmp/ccWfhOL3.s:43     .text.HAL_MspDeInit:00000000 HAL_MspDeInit
     /tmp/ccWfhOL3.s:55     .text.HAL_DeInit:00000000 $t
     /tmp/ccWfhOL3.s:60     .text.HAL_DeInit:00000000 HAL_DeInit
     /tmp/ccWfhOL3.s:92     .text.HAL_DeInit:0000001c $d
     /tmp/ccWfhOL3.s:97     .text.HAL_InitTick:00000000 $t
     /tmp/ccWfhOL3.s:102    .text.HAL_InitTick:00000000 HAL_InitTick
     /tmp/ccWfhOL3.s:136    .text.HAL_InitTick:00000024 $d
     /tmp/ccWfhOL3.s:141    .text.HAL_Init:00000000 $t
     /tmp/ccWfhOL3.s:146    .text.HAL_Init:00000000 HAL_Init
     /tmp/ccWfhOL3.s:179    .text.HAL_Init:00000020 $d
     /tmp/ccWfhOL3.s:184    .text.HAL_IncTick:00000000 $t
     /tmp/ccWfhOL3.s:189    .text.HAL_IncTick:00000000 HAL_IncTick
     /tmp/ccWfhOL3.s:205    .text.HAL_IncTick:0000000c $d
     /tmp/ccWfhOL3.s:210    .text.HAL_GetTick:00000000 $t
     /tmp/ccWfhOL3.s:215    .text.HAL_GetTick:00000000 HAL_GetTick
     /tmp/ccWfhOL3.s:230    .text.HAL_GetTick:00000008 $d
     /tmp/ccWfhOL3.s:235    .text.HAL_Delay:00000000 $t
     /tmp/ccWfhOL3.s:240    .text.HAL_Delay:00000000 HAL_Delay
     /tmp/ccWfhOL3.s:280    .text.HAL_SuspendTick:00000000 $t
     /tmp/ccWfhOL3.s:285    .text.HAL_SuspendTick:00000000 HAL_SuspendTick
     /tmp/ccWfhOL3.s:301    .text.HAL_SuspendTick:0000000c $d
     /tmp/ccWfhOL3.s:306    .text.HAL_ResumeTick:00000000 $t
     /tmp/ccWfhOL3.s:311    .text.HAL_ResumeTick:00000000 HAL_ResumeTick
     /tmp/ccWfhOL3.s:327    .text.HAL_ResumeTick:0000000c $d
     /tmp/ccWfhOL3.s:332    .text.HAL_GetHalVersion:00000000 $t
     /tmp/ccWfhOL3.s:337    .text.HAL_GetHalVersion:00000000 HAL_GetHalVersion
     /tmp/ccWfhOL3.s:350    .text.HAL_GetHalVersion:00000004 $d
     /tmp/ccWfhOL3.s:355    .text.HAL_GetREVID:00000000 $t
     /tmp/ccWfhOL3.s:360    .text.HAL_GetREVID:00000000 HAL_GetREVID
     /tmp/ccWfhOL3.s:393    .text.HAL_GetREVID:00000014 $d
     /tmp/ccWfhOL3.s:399    .text.HAL_GetDEVID:00000000 $t
     /tmp/ccWfhOL3.s:404    .text.HAL_GetDEVID:00000000 HAL_GetDEVID
     /tmp/ccWfhOL3.s:420    .text.HAL_GetDEVID:0000000c $d
     /tmp/ccWfhOL3.s:425    .text.HAL_DBGMCU_EnableDBGSleepMode:00000000 $t
     /tmp/ccWfhOL3.s:430    .text.HAL_DBGMCU_EnableDBGSleepMode:00000000 HAL_DBGMCU_EnableDBGSleepMode
     /tmp/ccWfhOL3.s:446    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000c $d
     /tmp/ccWfhOL3.s:451    .text.HAL_DBGMCU_DisableDBGSleepMode:00000000 $t
     /tmp/ccWfhOL3.s:456    .text.HAL_DBGMCU_DisableDBGSleepMode:00000000 HAL_DBGMCU_DisableDBGSleepMode
     /tmp/ccWfhOL3.s:472    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000c $d
     /tmp/ccWfhOL3.s:477    .text.HAL_DBGMCU_EnableDBGStopMode:00000000 $t
     /tmp/ccWfhOL3.s:482    .text.HAL_DBGMCU_EnableDBGStopMode:00000000 HAL_DBGMCU_EnableDBGStopMode
     /tmp/ccWfhOL3.s:498    .text.HAL_DBGMCU_EnableDBGStopMode:0000000c $d
     /tmp/ccWfhOL3.s:503    .text.HAL_DBGMCU_DisableDBGStopMode:00000000 $t
     /tmp/ccWfhOL3.s:508    .text.HAL_DBGMCU_DisableDBGStopMode:00000000 HAL_DBGMCU_DisableDBGStopMode
     /tmp/ccWfhOL3.s:524    .text.HAL_DBGMCU_DisableDBGStopMode:0000000c $d
     /tmp/ccWfhOL3.s:529    .text.HAL_DBGMCU_EnableDBGStandbyMode:00000000 $t
     /tmp/ccWfhOL3.s:534    .text.HAL_DBGMCU_EnableDBGStandbyMode:00000000 HAL_DBGMCU_EnableDBGStandbyMode
     /tmp/ccWfhOL3.s:550    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000c $d
     /tmp/ccWfhOL3.s:555    .text.HAL_DBGMCU_DisableDBGStandbyMode:00000000 $t
     /tmp/ccWfhOL3.s:560    .text.HAL_DBGMCU_DisableDBGStandbyMode:00000000 HAL_DBGMCU_DisableDBGStandbyMode
     /tmp/ccWfhOL3.s:576    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000c $d
     /tmp/ccWfhOL3.s:581    .bss.uwTick:00000000 $d
ARM GAS  /tmp/ccWfhOL3.s 			page 31


     /tmp/ccWfhOL3.s:585    .bss.uwTick:00000000 uwTick
=======
     /tmp/ccIx4NMI.s:20     .text.HAL_MspInit:00000000 $t
     /tmp/ccIx4NMI.s:25     .text.HAL_MspInit:00000000 HAL_MspInit
     /tmp/ccIx4NMI.s:38     .text.HAL_MspDeInit:00000000 $t
     /tmp/ccIx4NMI.s:43     .text.HAL_MspDeInit:00000000 HAL_MspDeInit
     /tmp/ccIx4NMI.s:55     .text.HAL_DeInit:00000000 $t
     /tmp/ccIx4NMI.s:60     .text.HAL_DeInit:00000000 HAL_DeInit
     /tmp/ccIx4NMI.s:92     .text.HAL_DeInit:0000001c $d
     /tmp/ccIx4NMI.s:97     .text.HAL_InitTick:00000000 $t
     /tmp/ccIx4NMI.s:102    .text.HAL_InitTick:00000000 HAL_InitTick
     /tmp/ccIx4NMI.s:136    .text.HAL_InitTick:00000024 $d
     /tmp/ccIx4NMI.s:141    .text.HAL_Init:00000000 $t
     /tmp/ccIx4NMI.s:146    .text.HAL_Init:00000000 HAL_Init
     /tmp/ccIx4NMI.s:179    .text.HAL_Init:00000020 $d
     /tmp/ccIx4NMI.s:184    .text.HAL_IncTick:00000000 $t
     /tmp/ccIx4NMI.s:189    .text.HAL_IncTick:00000000 HAL_IncTick
     /tmp/ccIx4NMI.s:205    .text.HAL_IncTick:0000000c $d
     /tmp/ccIx4NMI.s:210    .text.HAL_GetTick:00000000 $t
     /tmp/ccIx4NMI.s:215    .text.HAL_GetTick:00000000 HAL_GetTick
     /tmp/ccIx4NMI.s:230    .text.HAL_GetTick:00000008 $d
     /tmp/ccIx4NMI.s:235    .text.HAL_Delay:00000000 $t
     /tmp/ccIx4NMI.s:240    .text.HAL_Delay:00000000 HAL_Delay
     /tmp/ccIx4NMI.s:280    .text.HAL_SuspendTick:00000000 $t
     /tmp/ccIx4NMI.s:285    .text.HAL_SuspendTick:00000000 HAL_SuspendTick
     /tmp/ccIx4NMI.s:301    .text.HAL_SuspendTick:0000000c $d
     /tmp/ccIx4NMI.s:306    .text.HAL_ResumeTick:00000000 $t
     /tmp/ccIx4NMI.s:311    .text.HAL_ResumeTick:00000000 HAL_ResumeTick
     /tmp/ccIx4NMI.s:327    .text.HAL_ResumeTick:0000000c $d
     /tmp/ccIx4NMI.s:332    .text.HAL_GetHalVersion:00000000 $t
     /tmp/ccIx4NMI.s:337    .text.HAL_GetHalVersion:00000000 HAL_GetHalVersion
     /tmp/ccIx4NMI.s:350    .text.HAL_GetHalVersion:00000004 $d
     /tmp/ccIx4NMI.s:355    .text.HAL_GetREVID:00000000 $t
     /tmp/ccIx4NMI.s:360    .text.HAL_GetREVID:00000000 HAL_GetREVID
     /tmp/ccIx4NMI.s:393    .text.HAL_GetREVID:00000014 $d
     /tmp/ccIx4NMI.s:399    .text.HAL_GetDEVID:00000000 $t
     /tmp/ccIx4NMI.s:404    .text.HAL_GetDEVID:00000000 HAL_GetDEVID
     /tmp/ccIx4NMI.s:420    .text.HAL_GetDEVID:0000000c $d
     /tmp/ccIx4NMI.s:425    .text.HAL_DBGMCU_EnableDBGSleepMode:00000000 $t
     /tmp/ccIx4NMI.s:430    .text.HAL_DBGMCU_EnableDBGSleepMode:00000000 HAL_DBGMCU_EnableDBGSleepMode
     /tmp/ccIx4NMI.s:446    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000c $d
     /tmp/ccIx4NMI.s:451    .text.HAL_DBGMCU_DisableDBGSleepMode:00000000 $t
     /tmp/ccIx4NMI.s:456    .text.HAL_DBGMCU_DisableDBGSleepMode:00000000 HAL_DBGMCU_DisableDBGSleepMode
     /tmp/ccIx4NMI.s:472    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000c $d
     /tmp/ccIx4NMI.s:477    .text.HAL_DBGMCU_EnableDBGStopMode:00000000 $t
     /tmp/ccIx4NMI.s:482    .text.HAL_DBGMCU_EnableDBGStopMode:00000000 HAL_DBGMCU_EnableDBGStopMode
     /tmp/ccIx4NMI.s:498    .text.HAL_DBGMCU_EnableDBGStopMode:0000000c $d
     /tmp/ccIx4NMI.s:503    .text.HAL_DBGMCU_DisableDBGStopMode:00000000 $t
     /tmp/ccIx4NMI.s:508    .text.HAL_DBGMCU_DisableDBGStopMode:00000000 HAL_DBGMCU_DisableDBGStopMode
     /tmp/ccIx4NMI.s:524    .text.HAL_DBGMCU_DisableDBGStopMode:0000000c $d
     /tmp/ccIx4NMI.s:529    .text.HAL_DBGMCU_EnableDBGStandbyMode:00000000 $t
     /tmp/ccIx4NMI.s:534    .text.HAL_DBGMCU_EnableDBGStandbyMode:00000000 HAL_DBGMCU_EnableDBGStandbyMode
     /tmp/ccIx4NMI.s:550    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000c $d
     /tmp/ccIx4NMI.s:555    .text.HAL_DBGMCU_DisableDBGStandbyMode:00000000 $t
     /tmp/ccIx4NMI.s:560    .text.HAL_DBGMCU_DisableDBGStandbyMode:00000000 HAL_DBGMCU_DisableDBGStandbyMode
     /tmp/ccIx4NMI.s:576    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000c $d
     /tmp/ccIx4NMI.s:581    .bss.uwTick:00000000 $d
ARM GAS  /tmp/ccIx4NMI.s 			page 31


     /tmp/ccIx4NMI.s:585    .bss.uwTick:00000000 uwTick
>>>>>>> GameTrak
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
HAL_NVIC_SetPriorityGrouping
