ARM GAS  /tmp/ccqooRvP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"application.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.GET_BatteryAverage,"ax",%progbits
  20              		.align	2
  21              		.global	GET_BatteryAverage
  22              		.thumb
  23              		.thumb_func
  25              	GET_BatteryAverage:
  26              	.LFB64:
  27              		.file 1 "./Src/application.c"
   1:./Src/application.c **** #include "application.h"
   2:./Src/application.c **** #include "motor_L.h"
   3:./Src/application.c **** #include "motor_R.h"
   4:./Src/application.c **** #include "i2c.h"
   5:./Src/application.c **** #include "ADC_L.h"
   6:./Src/application.c **** #include "ADC_R.h"
   7:./Src/application.c **** #include "varie.h"
   8:./Src/application.c **** #include "telemetry.h"
   9:./Src/application.c **** #include <stdlib.h>
  10:./Src/application.c **** 
  11:./Src/application.c **** extern IWDG_HandleTypeDef hiwdg;
  12:./Src/application.c **** 
  13:./Src/application.c **** volatile __IO struct APPLICATION_dati app;
  14:./Src/application.c **** volatile __IO struct BATTERY_dati battery_dati;
  15:./Src/application.c **** extern volatile __IO struct WII_JOYdati wii_JOYdati;
  16:./Src/application.c **** extern struct TELEMETRY_dati telemetry;
  17:./Src/application.c **** 
  18:./Src/application.c **** float GET_BatteryAverage(void){
  28              		.loc 1 18 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  19:./Src/application.c ****   return battery_dati.VBatt;
  33              		.loc 1 19 0
  34 0000 014B     		ldr	r3, .L2
  35 0002 1868     		ldr	r0, [r3]	@ float
  20:./Src/application.c **** }
  36              		.loc 1 20 0
  37 0004 7047     		bx	lr
  38              	.L3:
ARM GAS  /tmp/ccqooRvP.s 			page 2


  39 0006 00BF     		.align	2
  40              	.L2:
  41 0008 00000000 		.word	battery_dati
  42              		.cfi_endproc
  43              	.LFE64:
  45              		.section	.text.TASK_BATTERY_LOW_VOLTAGE,"ax",%progbits
  46              		.align	2
  47              		.global	TASK_BATTERY_LOW_VOLTAGE
  48              		.thumb
  49              		.thumb_func
  51              	TASK_BATTERY_LOW_VOLTAGE:
  52              	.LFB65:
  21:./Src/application.c **** void TASK_BATTERY_LOW_VOLTAGE(void){
  53              		.loc 1 21 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57 0000 08B5     		push	{r3, lr}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 8
  60              		.cfi_offset 3, -8
  61              		.cfi_offset 14, -4
  22:./Src/application.c ****   if((HAL_GetTick() - battery_dati.time_lowvoltage) > 600000){          //Ogni 10 min BEEP
  62              		.loc 1 22 0
  63 0002 FFF7FEFF 		bl	HAL_GetTick
  64              	.LVL0:
  65 0006 064B     		ldr	r3, .L7
  66 0008 1B69     		ldr	r3, [r3, #16]
  67 000a C01A     		subs	r0, r0, r3
  68 000c 054B     		ldr	r3, .L7+4
  69 000e 9842     		cmp	r0, r3
  70 0010 05D9     		bls	.L4
  23:./Src/application.c ****     battery_dati.time_lowvoltage = HAL_GetTick();
  71              		.loc 1 23 0
  72 0012 FFF7FEFF 		bl	HAL_GetTick
  73              	.LVL1:
  74 0016 024B     		ldr	r3, .L7
  75 0018 1861     		str	r0, [r3, #16]
  24:./Src/application.c **** 
  25:./Src/application.c ****     Buzzer_OneLongBeep();
  76              		.loc 1 25 0
  77 001a FFF7FEFF 		bl	Buzzer_OneLongBeep
  78              	.LVL2:
  79              	.L4:
  80 001e 08BD     		pop	{r3, pc}
  81              	.L8:
  82              		.align	2
  83              	.L7:
  84 0020 00000000 		.word	battery_dati
  85 0024 C0270900 		.word	600000
  86              		.cfi_endproc
  87              	.LFE65:
  89              		.section	.text.applcation_init,"ax",%progbits
  90              		.align	2
  91              		.global	applcation_init
  92              		.thumb
  93              		.thumb_func
ARM GAS  /tmp/ccqooRvP.s 			page 3


  95              	applcation_init:
  96              	.LFB67:
  26:./Src/application.c ****   }
  27:./Src/application.c **** }
  28:./Src/application.c **** void WAIT_CHARGE_FINISH(void){
  29:./Src/application.c ****   uint32_t timerBatteryC;
  30:./Src/application.c **** 
  31:./Src/application.c ****   Led_Set(1);
  32:./Src/application.c ****   MotorR_stop();
  33:./Src/application.c ****   MotorL_stop();
  34:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
  35:./Src/application.c ****   Buzzer_OneLongBeep();
  36:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
  37:./Src/application.c ****   Buzzer_OneLongBeep();
  38:./Src/application.c ****   timerBatteryC = HAL_GetTick();
  39:./Src/application.c **** 
  40:./Src/application.c ****   while(IS_Charge()==0){
  41:./Src/application.c ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
  42:./Src/application.c ****     HAL_Delay(250);
  43:./Src/application.c ****     Battery_TASK();
  44:./Src/application.c ****     if(GET_BatteryAverage() < 41.250){
  45:./Src/application.c ****       timerBatteryC = HAL_GetTick();
  46:./Src/application.c ****     }
  47:./Src/application.c ****     if((HAL_GetTick() - timerBatteryC) > 20000){ //600000       x 20Sec, batteria sopra i 42Volt, a
  48:./Src/application.c ****       Buzzer_OneLongBeep();
  49:./Src/application.c ****       HAL_IWDG_Refresh(&hiwdg);   //819mS
  50:./Src/application.c ****     }
  51:./Src/application.c ****   }
  52:./Src/application.c ****   Led_Set(0);
  53:./Src/application.c ****   applcation_init();
  54:./Src/application.c **** }
  55:./Src/application.c **** 
  56:./Src/application.c **** void applcation_init(void){
  97              		.loc 1 56 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101 0000 70B5     		push	{r4, r5, r6, lr}
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 16
 104              		.cfi_offset 4, -16
 105              		.cfi_offset 5, -12
 106              		.cfi_offset 6, -8
 107              		.cfi_offset 14, -4
  57:./Src/application.c ****   app.stato = app_init;
 108              		.loc 1 57 0
 109 0002 0A4C     		ldr	r4, .L11
 110 0004 0026     		movs	r6, #0
 111 0006 2670     		strb	r6, [r4]
  58:./Src/application.c ****   MotorR_stop();
 112              		.loc 1 58 0
 113 0008 FFF7FEFF 		bl	MotorR_stop
 114              	.LVL3:
  59:./Src/application.c ****   MotorL_stop();
 115              		.loc 1 59 0
 116 000c FFF7FEFF 		bl	MotorL_stop
 117              	.LVL4:
ARM GAS  /tmp/ccqooRvP.s 			page 4


  60:./Src/application.c ****   battery_dati.time_batt = HAL_GetTick();
 118              		.loc 1 60 0
 119 0010 FFF7FEFF 		bl	HAL_GetTick
 120              	.LVL5:
 121 0014 064D     		ldr	r5, .L11+4
 122 0016 6860     		str	r0, [r5, #4]
  61:./Src/application.c ****   battery_dati.time_lowvoltage = HAL_GetTick();
 123              		.loc 1 61 0
 124 0018 FFF7FEFF 		bl	HAL_GetTick
 125              	.LVL6:
 126 001c 2861     		str	r0, [r5, #16]
  62:./Src/application.c ****   battery_dati.somma_batt = 0;
 127              		.loc 1 62 0
 128 001e AE60     		str	r6, [r5, #8]
  63:./Src/application.c ****   battery_dati.counter_media = 0;
 129              		.loc 1 63 0
 130 0020 2E73     		strb	r6, [r5, #12]
  64:./Src/application.c ****   app.cruise_soft_run_nohand = 0.0;
 131              		.loc 1 64 0
 132 0022 0023     		movs	r3, #0
 133 0024 A361     		str	r3, [r4, #24]	@ float
  65:./Src/application.c **** 
  66:./Src/application.c ****   app.faccY=0.0;
 134              		.loc 1 66 0
 135 0026 6362     		str	r3, [r4, #36]	@ float
  67:./Src/application.c ****   app.faccX=0.0;
 136              		.loc 1 67 0
 137 0028 A362     		str	r3, [r4, #40]	@ float
 138 002a 70BD     		pop	{r4, r5, r6, pc}
 139              	.L12:
 140              		.align	2
 141              	.L11:
 142 002c 00000000 		.word	app
 143 0030 00000000 		.word	battery_dati
 144              		.cfi_endproc
 145              	.LFE67:
 147              		.global	__aeabi_ui2f
 148              		.global	__aeabi_fsub
 149              		.global	__aeabi_fcmpge
 150              		.global	__aeabi_fcmpgt
 151              		.global	__aeabi_fcmplt
 152              		.section	.text.normalize_y,"ax",%progbits
 153              		.align	2
 154              		.global	normalize_y
 155              		.thumb
 156              		.thumb_func
 158              	normalize_y:
 159              	.LFB69:
  68:./Src/application.c **** }
  69:./Src/application.c **** 
  70:./Src/application.c **** void applcation_TASK(void){
  71:./Src/application.c ****   uint8_t letture,temp8;
  72:./Src/application.c ****   float tempf1,tempf2;
  73:./Src/application.c **** 
  74:./Src/application.c ****   switch(app.stato){
  75:./Src/application.c ****     case app_init:
  76:./Src/application.c ****       MotorR_stop();
ARM GAS  /tmp/ccqooRvP.s 			page 5


  77:./Src/application.c ****       MotorL_stop();
  78:./Src/application.c ****       //Aspetta Center joystick e calcola la media
  79:./Src/application.c ****       app.center_media_X = 0.0;
  80:./Src/application.c ****       app.center_media_Y = 0.0;
  81:./Src/application.c ****       letture = 0;
  82:./Src/application.c ****       wii_JOYdati.done = 0;
  83:./Src/application.c ****       do{
  84:./Src/application.c ****         HAL_IWDG_Refresh(&hiwdg);   //819mS
  85:./Src/application.c **** 
  86:./Src/application.c ****         while(wii_JOYdati.done==0){WiiNunchuck_TASK();}
  87:./Src/application.c ****         wii_JOYdati.done = 0;
  88:./Src/application.c ****         if((wii_JOYdati.ay < 129) && (wii_JOYdati.ay > 124)){
  89:./Src/application.c ****           letture++;
  90:./Src/application.c ****           temp8 = wii_JOYdati.ay;
  91:./Src/application.c ****           app.center_media_Y = app.center_media_Y + ((float)temp8);
  92:./Src/application.c ****         }else{
  93:./Src/application.c ****           letture = 0;
  94:./Src/application.c ****           app.center_media_Y = 0.0;
  95:./Src/application.c ****         }
  96:./Src/application.c ****       }while(letture < 50);
  97:./Src/application.c ****       app.center_media_Y = app.center_media_Y / 50.0;
  98:./Src/application.c ****       letture = 0;
  99:./Src/application.c ****       wii_JOYdati.done = 0;
 100:./Src/application.c ****       do{
 101:./Src/application.c ****         HAL_IWDG_Refresh(&hiwdg);   //819mS
 102:./Src/application.c **** 
 103:./Src/application.c ****         while(wii_JOYdati.done==0){WiiNunchuck_TASK();}
 104:./Src/application.c ****         wii_JOYdati.done = 0;
 105:./Src/application.c ****         if((wii_JOYdati.ax < 129) && (wii_JOYdati.ax > 124)){
 106:./Src/application.c ****           letture++;
 107:./Src/application.c ****           temp8 = wii_JOYdati.ax;
 108:./Src/application.c ****           app.center_media_X = app.center_media_X + ((float)temp8);
 109:./Src/application.c ****         }else{
 110:./Src/application.c ****           letture = 0;
 111:./Src/application.c ****           app.center_media_X = 0.0;
 112:./Src/application.c ****         }
 113:./Src/application.c ****       }while(letture < 50);
 114:./Src/application.c ****       app.center_media_X = app.center_media_X / 50.0;
 115:./Src/application.c **** 
 116:./Src/application.c ****       accelleration_XY_Reset();
 117:./Src/application.c **** 
 118:./Src/application.c ****       app.tsoft_run = HAL_GetTick();
 119:./Src/application.c ****       app.stato = app_soft_run;
 120:./Src/application.c ****       MotorR_start();
 121:./Src/application.c ****       MotorL_start();
 122:./Src/application.c **** 
 123:./Src/application.c ****       Buzzer_OneShortBeep();
 124:./Src/application.c **** 
 125:./Src/application.c ****     break;
 126:./Src/application.c **** 
 127:./Src/application.c ****     case app_soft_run:
 128:./Src/application.c ****      //INDOOR LIMIT 30; -30
 129:./Src/application.c ****       app.ayn = normalize_y(wii_JOYdati.ay);
 130:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 131:./Src/application.c **** 
 132:./Src/application.c ****       //scala x soft run
 133:./Src/application.c ****       tempf1 = app.ayn;
ARM GAS  /tmp/ccqooRvP.s 			page 6


 134:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 135:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 136:./Src/application.c ****       tempf1 = app.axn;
 137:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 138:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 139:./Src/application.c **** 
 140:./Src/application.c ****       app.ayn = accellerationY(app.ayn);
 141:./Src/application.c ****       app.axn = accellerationX(app.axn);
 142:./Src/application.c **** 
 143:./Src/application.c ****       tempf1 = app.ayn;
 144:./Src/application.c ****       tempf2 = app.axn;
 145:./Src/application.c **** 
 146:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt, 0);
 147:./Src/application.c **** 
 148:./Src/application.c ****       //soft_run_nohand
 149:./Src/application.c ****       temp8 = wii_JOYdati.ay;
 150:./Src/application.c ****       if((wii_JOYdati.bz == 0)&&((((float)temp8 - app.center_media_Y) > 4.0))&&(telemetry.dataREADY
 151:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 152:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 153:./Src/application.c ****             app.stato = app_soft_run_nohand;
 154:./Src/application.c ****             app.tcruise_decrement = HAL_GetTick();
 155:./Src/application.c ****             Buzzer_OneShortBeep();
 156:./Src/application.c ****         }
 157:./Src/application.c ****       }else{
 158:./Src/application.c ****         app.tsoft_run = HAL_GetTick();
 159:./Src/application.c ****       }
 160:./Src/application.c ****       //Android APP ?
 161:./Src/application.c ****       if(telemetry.dataREADY_JOYSTICK){
 162:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 163:./Src/application.c ****         if(telemetry.dataLast_Command == 'R'){
 164:./Src/application.c ****           app.stato = app_soft_ANDROIDAPP;
 165:./Src/application.c ****           app.tAndroidAPP = HAL_GetTick();
 166:./Src/application.c ****           accelleration_XY_Reset();
 167:./Src/application.c ****         }
 168:./Src/application.c ****         telemetry.dataLast_Command = 0;
 169:./Src/application.c ****       }
 170:./Src/application.c ****       //Hard RUN joystick press 'c' switch
 171:./Src/application.c ****       if((wii_JOYdati.bc == 0)&&(wii_JOYdati.bz == 1)&&(telemetry.dataREADY_JOYSTICK==0)){
 172:./Src/application.c ****           app.stato = app_hard_run;
 173:./Src/application.c ****           //accelleration_XY_Reset();     //??????
 174:./Src/application.c ****       }
 175:./Src/application.c ****     break;
 176:./Src/application.c **** 
 177:./Src/application.c ****     case app_hard_run:
 178:./Src/application.c ****      //OUTDOOR LIMIT FULL
 179:./Src/application.c ****       app.ayn = normalize_y(wii_JOYdati.ay);
 180:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 181:./Src/application.c **** 
 182:./Src/application.c ****       //scala x soft run
 183:./Src/application.c ****       tempf1 = app.ayn * 0.90;
 184:./Src/application.c ****       app.ayn = tempf1;
 185:./Src/application.c ****       tempf2 = app.axn * 0.90;
 186:./Src/application.c ****       //tempf2 = battery_dati.VBatt;
 187:./Src/application.c ****       app.axn = tempf2;
 188:./Src/application.c **** 
 189:./Src/application.c ****       app.ayn = accellerationYHARD(app.ayn);
 190:./Src/application.c ****       app.axn = accellerationXHARD(app.axn);
ARM GAS  /tmp/ccqooRvP.s 			page 7


 191:./Src/application.c **** 
 192:./Src/application.c ****       tempf1 = app.ayn;
 193:./Src/application.c ****       tempf2 = app.axn;
 194:./Src/application.c ****       if(tempf1 < 0){
 195:./Src/application.c ****         tempf1 = 0;
 196:./Src/application.c ****       }
 197:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt, 1);
 198:./Src/application.c **** 
 199:./Src/application.c ****       //Soft RUN joystick press 'c' switch
 200:./Src/application.c ****       if(wii_JOYdati.bc == 1){
 201:./Src/application.c ****           //MotorR_stop();
 202:./Src/application.c ****           //MotorL_stop();
 203:./Src/application.c ****           //accelleration_XY_Reset();     //??????
 204:./Src/application.c ****           app.stato = app_soft_run;
 205:./Src/application.c ****       }
 206:./Src/application.c ****     break;
 207:./Src/application.c **** 
 208:./Src/application.c ****     case app_soft_run_nohand:
 209:./Src/application.c ****       app.ayn = normalize_y(wii_JOYdati.ay);
 210:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 211:./Src/application.c **** 
 212:./Src/application.c ****       //scala x soft run
 213:./Src/application.c ****       tempf1 = app.ayn;
 214:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 215:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 216:./Src/application.c ****       tempf1 = app.axn;
 217:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 218:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 219:./Src/application.c **** 
 220:./Src/application.c ****       app.ayn = accellerationY(app.ayn);
 221:./Src/application.c ****       app.axn = accellerationX(app.axn);
 222:./Src/application.c **** 
 223:./Src/application.c ****       //Attiva cruise control
 224:./Src/application.c ****       if(app.ayn > 5.0){
 225:./Src/application.c ****         tempf1 = app.cruise_soft_run_nohand;
 226:./Src/application.c ****         if((app.ayn - 5.0) > tempf1){
 227:./Src/application.c ****           app.cruise_soft_run_nohand = app.ayn - 5.0;
 228:./Src/application.c ****         }
 229:./Src/application.c ****       }
 230:./Src/application.c ****        //Decrementa Cruise
 231:./Src/application.c ****       if((app.ayn < -5.0)&&(app.ayn > -23.0)){
 232:./Src/application.c ****         //con time step
 233:./Src/application.c ****         if((HAL_GetTick() - app.tcruise_decrement)>250){
 234:./Src/application.c ****           tempf1 = app.ayn / 10.0;
 235:./Src/application.c ****           app.cruise_soft_run_nohand = app.cruise_soft_run_nohand + tempf1;                //STEP D
 236:./Src/application.c ****           if(app.cruise_soft_run_nohand < 0.0){
 237:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 238:./Src/application.c ****           }
 239:./Src/application.c ****           app.tcruise_decrement = HAL_GetTick();
 240:./Src/application.c ****         }
 241:./Src/application.c ****       }
 242:./Src/application.c ****       //Stop Cruise
 243:./Src/application.c ****       if(app.ayn <= -23.0){
 244:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 245:./Src/application.c ****         MotorR_stop();
 246:./Src/application.c ****         MotorL_stop();
 247:./Src/application.c ****         accelleration_XY_Reset();
ARM GAS  /tmp/ccqooRvP.s 			page 8


 248:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 249:./Src/application.c ****         app.stato = app_init;
 250:./Src/application.c ****         break;
 251:./Src/application.c ****       }
 252:./Src/application.c ****       tempf1 = app.cruise_soft_run_nohand;
 253:./Src/application.c ****       tempf2 = app.axn;
 254:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 255:./Src/application.c ****     break;
 256:./Src/application.c **** 
 257:./Src/application.c ****     case app_soft_ANDROIDAPP:
 258:./Src/application.c ****      //ANDROID APP
 259:./Src/application.c ****       if(telemetry.dataREADY_JOYSTICK){
 260:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 261:./Src/application.c ****         app.tAndroidAPP = HAL_GetTick();
 262:./Src/application.c ****         if(telemetry.dataLast_Command == 'F'){
 263:./Src/application.c ****           MotorR_stop();
 264:./Src/application.c ****           MotorL_stop();
 265:./Src/application.c ****           accelleration_XY_Reset();
 266:./Src/application.c ****           app.cruise_soft_run_nohand = 0.0;
 267:./Src/application.c ****           app.stato = app_init;
 268:./Src/application.c ****           telemetry.dataLast_Command = 0;
 269:./Src/application.c ****           break;
 270:./Src/application.c ****         }
 271:./Src/application.c ****       }
 272:./Src/application.c ****       if((HAL_GetTick() - app.tAndroidAPP)>500){    //Se non ricevi risposta dalla APP esci dalla m
 273:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 274:./Src/application.c ****         MotorR_stop();
 275:./Src/application.c ****         MotorL_stop();
 276:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 277:./Src/application.c ****         app.stato = app_init;
 278:./Src/application.c ****         break;
 279:./Src/application.c ****       }
 280:./Src/application.c **** 
 281:./Src/application.c **** 
 282:./Src/application.c ****       app.ayn = (float)telemetry.joyy;
 283:./Src/application.c ****       app.axn = (float)telemetry.joyx;
 284:./Src/application.c ****       if(app.ayn > 300.0){
 285:./Src/application.c ****         app.ayn = 300.0;
 286:./Src/application.c ****       }
 287:./Src/application.c ****       if(app.axn > 300.0){
 288:./Src/application.c ****         app.axn = 300.0;
 289:./Src/application.c ****       }
 290:./Src/application.c ****       if(app.ayn < 0.0){
 291:./Src/application.c ****         app.ayn = 0.0;
 292:./Src/application.c ****       }
 293:./Src/application.c ****       if(app.axn < 0){
 294:./Src/application.c ****         app.axn = 0.0;
 295:./Src/application.c ****       }
 296:./Src/application.c **** 
 297:./Src/application.c ****       app.ayn = app.ayn - 75.0;
 298:./Src/application.c ****       app.axn = app.axn - 75.0;
 299:./Src/application.c **** 
 300:./Src/application.c ****       //scala x soft run
 301:./Src/application.c ****       tempf1 = app.ayn;
 302:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 303:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 304:./Src/application.c ****       tempf1 = app.axn;
ARM GAS  /tmp/ccqooRvP.s 			page 9


 305:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 306:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 307:./Src/application.c **** 
 308:./Src/application.c ****       app.ayn = accellerationY(app.ayn);
 309:./Src/application.c ****       app.axn = accellerationX(app.axn);
 310:./Src/application.c ****       tempf1 = app.ayn;
 311:./Src/application.c ****       tempf2 = app.axn;
 312:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 313:./Src/application.c ****     break;
 314:./Src/application.c **** 
 315:./Src/application.c ****     default:
 316:./Src/application.c ****         MotorR_stop();
 317:./Src/application.c ****         MotorL_stop();
 318:./Src/application.c ****         app.stato = app_init;
 319:./Src/application.c ****     break;
 320:./Src/application.c **** 
 321:./Src/application.c ****   }
 322:./Src/application.c **** 
 323:./Src/application.c **** }
 324:./Src/application.c **** 
 325:./Src/application.c **** 
 326:./Src/application.c **** 
 327:./Src/application.c **** 
 328:./Src/application.c **** 
 329:./Src/application.c **** 
 330:./Src/application.c **** 
 331:./Src/application.c **** 
 332:./Src/application.c **** 
 333:./Src/application.c **** 
 334:./Src/application.c **** 
 335:./Src/application.c **** 
 336:./Src/application.c **** 
 337:./Src/application.c **** 
 338:./Src/application.c **** 
 339:./Src/application.c **** 
 340:./Src/application.c **** 
 341:./Src/application.c **** 
 342:./Src/application.c **** float normalize_y(uint8_t y){
 160              		.loc 1 342 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              	.LVL7:
 165 0000 10B5     		push	{r4, lr}
 166              	.LCFI2:
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 4, -8
 169              		.cfi_offset 14, -4
 170              	.LVL8:
 343:./Src/application.c ****   float ayn;
 344:./Src/application.c ****       ayn = 0.0;
 345:./Src/application.c ****       ayn = (float)((float)y - app.center_media_Y);
 171              		.loc 1 345 0
 172 0002 FFF7FEFF 		bl	__aeabi_ui2f
 173              	.LVL9:
 174 0006 0D4B     		ldr	r3, .L22
 175 0008 196A     		ldr	r1, [r3, #32]	@ float
ARM GAS  /tmp/ccqooRvP.s 			page 10


 176 000a FFF7FEFF 		bl	__aeabi_fsub
 177              	.LVL10:
 178 000e 0446     		mov	r4, r0
 179              	.LVL11:
 346:./Src/application.c ****       //Limit
 347:./Src/application.c ****       if(ayn >= 0.0){
 180              		.loc 1 347 0
 181 0010 0021     		movs	r1, #0
 182 0012 FFF7FEFF 		bl	__aeabi_fcmpge
 183              	.LVL12:
 184 0016 28B1     		cbz	r0, .L20
 348:./Src/application.c ****         //0 ~ 100
 349:./Src/application.c ****         if(ayn > 100.0){
 185              		.loc 1 349 0
 186 0018 0949     		ldr	r1, .L22+4
 187 001a 2046     		mov	r0, r4
 188 001c FFF7FEFF 		bl	__aeabi_fcmpgt
 189              	.LVL13:
 190 0020 30B9     		cbnz	r0, .L17
 191 0022 08E0     		b	.L16
 192              	.L20:
 350:./Src/application.c ****           ayn = 100.0;
 351:./Src/application.c ****         }
 352:./Src/application.c ****       }else{
 353:./Src/application.c ****         //0 ~ -100
 354:./Src/application.c ****         if(ayn < -100.0){
 193              		.loc 1 354 0
 194 0024 0749     		ldr	r1, .L22+8
 195 0026 2046     		mov	r0, r4
 196 0028 FFF7FEFF 		bl	__aeabi_fcmplt
 197              	.LVL14:
 198 002c 10B9     		cbnz	r0, .L18
 199 002e 02E0     		b	.L16
 200              	.L17:
 350:./Src/application.c ****           ayn = 100.0;
 201              		.loc 1 350 0
 202 0030 034C     		ldr	r4, .L22+4
 203              	.LVL15:
 204 0032 00E0     		b	.L16
 205              	.LVL16:
 206              	.L18:
 355:./Src/application.c ****           ayn = -100.0;
 207              		.loc 1 355 0
 208 0034 034C     		ldr	r4, .L22+8
 209              	.LVL17:
 210              	.L16:
 356:./Src/application.c ****         }
 357:./Src/application.c ****       }
 358:./Src/application.c ****   return ayn;
 359:./Src/application.c **** }
 211              		.loc 1 359 0
 212 0036 2046     		mov	r0, r4
 213 0038 10BD     		pop	{r4, pc}
 214              	.LVL18:
 215              	.L23:
 216 003a 00BF     		.align	2
 217              	.L22:
ARM GAS  /tmp/ccqooRvP.s 			page 11


 218 003c 00000000 		.word	app
 219 0040 0000C842 		.word	1120403456
 220 0044 0000C8C2 		.word	-1027080192
 221              		.cfi_endproc
 222              	.LFE69:
 224              		.section	.text.normalize_x,"ax",%progbits
 225              		.align	2
 226              		.global	normalize_x
 227              		.thumb
 228              		.thumb_func
 230              	normalize_x:
 231              	.LFB70:
 360:./Src/application.c **** 
 361:./Src/application.c **** float normalize_x(uint8_t x){
 232              		.loc 1 361 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              	.LVL19:
 237 0000 10B5     		push	{r4, lr}
 238              	.LCFI3:
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 4, -8
 241              		.cfi_offset 14, -4
 242              	.LVL20:
 362:./Src/application.c ****   float axn;
 363:./Src/application.c ****       axn = 0.0;
 364:./Src/application.c ****       axn = (float)((float)x - app.center_media_X);
 243              		.loc 1 364 0
 244 0002 FFF7FEFF 		bl	__aeabi_ui2f
 245              	.LVL21:
 246 0006 0D4B     		ldr	r3, .L33
 247 0008 D969     		ldr	r1, [r3, #28]	@ float
 248 000a FFF7FEFF 		bl	__aeabi_fsub
 249              	.LVL22:
 250 000e 0446     		mov	r4, r0
 251              	.LVL23:
 365:./Src/application.c ****       //Limit
 366:./Src/application.c **** 
 367:./Src/application.c ****       if(axn >= 0.0){
 252              		.loc 1 367 0
 253 0010 0021     		movs	r1, #0
 254 0012 FFF7FEFF 		bl	__aeabi_fcmpge
 255              	.LVL24:
 256 0016 28B1     		cbz	r0, .L31
 368:./Src/application.c ****         //0 ~ 100
 369:./Src/application.c ****         if(axn > 100.0){
 257              		.loc 1 369 0
 258 0018 0949     		ldr	r1, .L33+4
 259 001a 2046     		mov	r0, r4
 260 001c FFF7FEFF 		bl	__aeabi_fcmpgt
 261              	.LVL25:
 262 0020 30B9     		cbnz	r0, .L28
 263 0022 08E0     		b	.L27
 264              	.L31:
 370:./Src/application.c ****           axn = 100.0;
 371:./Src/application.c ****         }
ARM GAS  /tmp/ccqooRvP.s 			page 12


 372:./Src/application.c ****       }else{
 373:./Src/application.c ****         //0 ~ -100
 374:./Src/application.c ****         if(axn < -100.0){
 265              		.loc 1 374 0
 266 0024 0749     		ldr	r1, .L33+8
 267 0026 2046     		mov	r0, r4
 268 0028 FFF7FEFF 		bl	__aeabi_fcmplt
 269              	.LVL26:
 270 002c 10B9     		cbnz	r0, .L29
 271 002e 02E0     		b	.L27
 272              	.L28:
 370:./Src/application.c ****           axn = 100.0;
 273              		.loc 1 370 0
 274 0030 034C     		ldr	r4, .L33+4
 275              	.LVL27:
 276 0032 00E0     		b	.L27
 277              	.LVL28:
 278              	.L29:
 375:./Src/application.c ****           axn = -100.0;
 279              		.loc 1 375 0
 280 0034 034C     		ldr	r4, .L33+8
 281              	.LVL29:
 282              	.L27:
 376:./Src/application.c ****         }
 377:./Src/application.c ****       }
 378:./Src/application.c ****   return axn;
 379:./Src/application.c **** }
 283              		.loc 1 379 0
 284 0036 2046     		mov	r0, r4
 285 0038 10BD     		pop	{r4, pc}
 286              	.LVL30:
 287              	.L34:
 288 003a 00BF     		.align	2
 289              	.L33:
 290 003c 00000000 		.word	app
 291 0040 0000C842 		.word	1120403456
 292 0044 0000C8C2 		.word	-1027080192
 293              		.cfi_endproc
 294              	.LFE70:
 296              		.section	.text.get_powerMax,"ax",%progbits
 297              		.align	2
 298              		.global	get_powerMax
 299              		.thumb
 300              		.thumb_func
 302              	get_powerMax:
 303              	.LFB73:
 380:./Src/application.c **** 
 381:./Src/application.c **** float scale_y(float y, float Vbatt){
 382:./Src/application.c ****   float ayn;
 383:./Src/application.c ****   ayn = 0.0;
 384:./Src/application.c ****       ayn = y * get_powerMax(Vbatt); //0.30000;
 385:./Src/application.c ****   return ayn;
 386:./Src/application.c **** }
 387:./Src/application.c **** 
 388:./Src/application.c **** float scale_x(float x, float Vbatt){
 389:./Src/application.c ****   float axn;
 390:./Src/application.c ****   axn = 0.0;
ARM GAS  /tmp/ccqooRvP.s 			page 13


 391:./Src/application.c ****       axn = x * get_powerMax(Vbatt); //0.30000;
 392:./Src/application.c ****   return axn;
 393:./Src/application.c **** }
 394:./Src/application.c ****                                   //Vbatt,      Power max
 395:./Src/application.c **** const float Battery_power[][10] = {{40.0,       60.0/100.0},    //30% max potenza
 396:./Src/application.c ****                                   {38.0,        60.0/100.0},
 397:./Src/application.c ****                                   {37.0,        61.0/100.0},
 398:./Src/application.c ****                                   {36.0,        62.0/100.0},
 399:./Src/application.c ****                                   {35.0,        65.0/100.0},
 400:./Src/application.c ****                                   {34.0,        65.0/100.0},
 401:./Src/application.c ****                                   {33.0,        67.0/100.0},
 402:./Src/application.c ****                                   {32.0,        67.0/100.0},
 403:./Src/application.c ****                                   {31.0,        67.0/100.0},
 404:./Src/application.c ****                                   {30.0,        67.0/100.0}};
 405:./Src/application.c **** float get_powerMax(float Vbattery){
 304              		.loc 1 405 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 0
 307              		@ frame_needed = 0, uses_anonymous_args = 0
 308              	.LVL31:
 309 0000 10B5     		push	{r4, lr}
 310              	.LCFI4:
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 4, -8
 313              		.cfi_offset 14, -4
 314 0002 0446     		mov	r4, r0
 406:./Src/application.c ****   if(Vbattery >= Battery_power[0][0]){
 315              		.loc 1 406 0
 316 0004 1549     		ldr	r1, .L47
 317 0006 FFF7FEFF 		bl	__aeabi_fcmpge
 318              	.LVL32:
 319 000a D0B9     		cbnz	r0, .L38
 407:./Src/application.c ****     return Battery_power[0][1];
 408:./Src/application.c ****   }else if(Vbattery >= Battery_power[1][0]){
 320              		.loc 1 408 0
 321 000c 1449     		ldr	r1, .L47+4
 322 000e 2046     		mov	r0, r4
 323 0010 FFF7FEFF 		bl	__aeabi_fcmpge
 324              	.LVL33:
 325 0014 B8B9     		cbnz	r0, .L39
 409:./Src/application.c ****     return Battery_power[1][1];
 410:./Src/application.c ****   }else if(Vbattery >= Battery_power[2][0]){
 326              		.loc 1 410 0
 327 0016 1349     		ldr	r1, .L47+8
 328 0018 2046     		mov	r0, r4
 329 001a FFF7FEFF 		bl	__aeabi_fcmpge
 330              	.LVL34:
 331 001e A0B9     		cbnz	r0, .L40
 411:./Src/application.c ****     return Battery_power[2][1];
 412:./Src/application.c ****   }else if(Vbattery >= Battery_power[3][0]){
 332              		.loc 1 412 0
 333 0020 1149     		ldr	r1, .L47+12
 334 0022 2046     		mov	r0, r4
 335 0024 FFF7FEFF 		bl	__aeabi_fcmpge
 336              	.LVL35:
 337 0028 88B9     		cbnz	r0, .L41
 413:./Src/application.c ****     return Battery_power[3][1];
ARM GAS  /tmp/ccqooRvP.s 			page 14


 414:./Src/application.c ****   }else if(Vbattery >= Battery_power[4][0]){
 338              		.loc 1 414 0
 339 002a 1049     		ldr	r1, .L47+16
 340 002c 2046     		mov	r0, r4
 341 002e FFF7FEFF 		bl	__aeabi_fcmpge
 342              	.LVL36:
 343 0032 70B9     		cbnz	r0, .L42
 415:./Src/application.c ****     return Battery_power[4][1];
 416:./Src/application.c ****   }else if(Vbattery >= Battery_power[5][0]){
 344              		.loc 1 416 0
 345 0034 0E49     		ldr	r1, .L47+20
 346 0036 2046     		mov	r0, r4
 347 0038 FFF7FEFF 		bl	__aeabi_fcmpge
 348              	.LVL37:
 349 003c 58B1     		cbz	r0, .L45
 417:./Src/application.c ****     return Battery_power[5][1];
 350              		.loc 1 417 0
 351 003e 0D48     		ldr	r0, .L47+24
 352 0040 10BD     		pop	{r4, pc}
 353              	.LVL38:
 354              	.L38:
 407:./Src/application.c ****   }else if(Vbattery >= Battery_power[1][0]){
 355              		.loc 1 407 0
 356 0042 0D48     		ldr	r0, .L47+28
 357 0044 10BD     		pop	{r4, pc}
 358              	.LVL39:
 359              	.L39:
 409:./Src/application.c ****   }else if(Vbattery >= Battery_power[2][0]){
 360              		.loc 1 409 0
 361 0046 0C48     		ldr	r0, .L47+28
 362 0048 10BD     		pop	{r4, pc}
 363              	.LVL40:
 364              	.L40:
 411:./Src/application.c ****   }else if(Vbattery >= Battery_power[3][0]){
 365              		.loc 1 411 0
 366 004a 0C48     		ldr	r0, .L47+32
 367 004c 10BD     		pop	{r4, pc}
 368              	.LVL41:
 369              	.L41:
 413:./Src/application.c ****   }else if(Vbattery >= Battery_power[4][0]){
 370              		.loc 1 413 0
 371 004e 0C48     		ldr	r0, .L47+36
 372 0050 10BD     		pop	{r4, pc}
 373              	.LVL42:
 374              	.L42:
 415:./Src/application.c ****   }else if(Vbattery >= Battery_power[5][0]){
 375              		.loc 1 415 0
 376 0052 0848     		ldr	r0, .L47+24
 377 0054 10BD     		pop	{r4, pc}
 378              	.LVL43:
 379              	.L45:
 418:./Src/application.c ****   }else if(Vbattery >= Battery_power[6][0]){
 419:./Src/application.c ****     return Battery_power[6][1];
 380              		.loc 1 419 0
 381 0056 0B48     		ldr	r0, .L47+40
 420:./Src/application.c ****   }else if(Vbattery >= Battery_power[7][0]){
 421:./Src/application.c ****     return Battery_power[7][1];
ARM GAS  /tmp/ccqooRvP.s 			page 15


 422:./Src/application.c ****   }else if(Vbattery >= Battery_power[8][0]){
 423:./Src/application.c ****     return Battery_power[8][1];
 424:./Src/application.c ****   }else if(Vbattery >= Battery_power[9][0]){
 425:./Src/application.c ****     return Battery_power[9][1];
 426:./Src/application.c ****   }else{
 427:./Src/application.c ****     return Battery_power[9][1];
 428:./Src/application.c ****   }
 429:./Src/application.c **** }
 382              		.loc 1 429 0
 383 0058 10BD     		pop	{r4, pc}
 384              	.LVL44:
 385              	.L48:
 386 005a 00BF     		.align	2
 387              	.L47:
 388 005c 00002042 		.word	1109393408
 389 0060 00001842 		.word	1108869120
 390 0064 00001442 		.word	1108606976
 391 0068 00001042 		.word	1108344832
 392 006c 00000C42 		.word	1108082688
 393 0070 00000842 		.word	1107820544
 394 0074 6666263F 		.word	1059481190
 395 0078 9A99193F 		.word	1058642330
 396 007c F6281C3F 		.word	1058810102
 397 0080 52B81E3F 		.word	1058977874
 398 0084 1F852B3F 		.word	1059816735
 399              		.cfi_endproc
 400              	.LFE73:
 402              		.global	__aeabi_fmul
 403              		.section	.text.scale_y,"ax",%progbits
 404              		.align	2
 405              		.global	scale_y
 406              		.thumb
 407              		.thumb_func
 409              	scale_y:
 410              	.LFB71:
 381:./Src/application.c ****   float ayn;
 411              		.loc 1 381 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              	.LVL45:
 416 0000 10B5     		push	{r4, lr}
 417              	.LCFI5:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 4, -8
 420              		.cfi_offset 14, -4
 421 0002 0446     		mov	r4, r0
 422              	.LVL46:
 384:./Src/application.c ****   return ayn;
 423              		.loc 1 384 0
 424 0004 0846     		mov	r0, r1
 425              	.LVL47:
 426 0006 FFF7FEFF 		bl	get_powerMax
 427              	.LVL48:
 428 000a 2146     		mov	r1, r4
 429 000c FFF7FEFF 		bl	__aeabi_fmul
 430              	.LVL49:
ARM GAS  /tmp/ccqooRvP.s 			page 16


 386:./Src/application.c **** 
 431              		.loc 1 386 0
 432 0010 10BD     		pop	{r4, pc}
 433              		.cfi_endproc
 434              	.LFE71:
 436 0012 00BF     		.section	.text.scale_x,"ax",%progbits
 437              		.align	2
 438              		.global	scale_x
 439              		.thumb
 440              		.thumb_func
 442              	scale_x:
 443              	.LFB72:
 388:./Src/application.c ****   float axn;
 444              		.loc 1 388 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              	.LVL50:
 449 0000 10B5     		push	{r4, lr}
 450              	.LCFI6:
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 4, -8
 453              		.cfi_offset 14, -4
 454 0002 0446     		mov	r4, r0
 455              	.LVL51:
 391:./Src/application.c ****   return axn;
 456              		.loc 1 391 0
 457 0004 0846     		mov	r0, r1
 458              	.LVL52:
 459 0006 FFF7FEFF 		bl	get_powerMax
 460              	.LVL53:
 461 000a 2146     		mov	r1, r4
 462 000c FFF7FEFF 		bl	__aeabi_fmul
 463              	.LVL54:
 393:./Src/application.c ****                                   //Vbatt,      Power max
 464              		.loc 1 393 0
 465 0010 10BD     		pop	{r4, pc}
 466              		.cfi_endproc
 467              	.LFE72:
 469 0012 00BF     		.section	.text.accelleration_XY_Reset,"ax",%progbits
 470              		.align	2
 471              		.global	accelleration_XY_Reset
 472              		.thumb
 473              		.thumb_func
 475              	accelleration_XY_Reset:
 476              	.LFB74:
 430:./Src/application.c **** 
 431:./Src/application.c **** void accelleration_XY_Reset(void){
 477              		.loc 1 431 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              		@ link register save eliminated.
 432:./Src/application.c ****   app.faccY = 0.0;
 482              		.loc 1 432 0
 483 0000 024B     		ldr	r3, .L54
 484 0002 0022     		movs	r2, #0
ARM GAS  /tmp/ccqooRvP.s 			page 17


 485 0004 5A62     		str	r2, [r3, #36]	@ float
 433:./Src/application.c ****   app.faccX = 0.0;
 486              		.loc 1 433 0
 487 0006 9A62     		str	r2, [r3, #40]	@ float
 488 0008 7047     		bx	lr
 489              	.L55:
 490 000a 00BF     		.align	2
 491              	.L54:
 492 000c 00000000 		.word	app
 493              		.cfi_endproc
 494              	.LFE74:
 496              		.global	__aeabi_f2d
 497              		.global	__aeabi_dadd
 498              		.global	__aeabi_d2f
 499              		.global	__aeabi_dsub
 500              		.section	.text.accellerationY,"ax",%progbits
 501              		.align	2
 502              		.global	accellerationY
 503              		.thumb
 504              		.thumb_func
 506              	accellerationY:
 507              	.LFB75:
 434:./Src/application.c **** }
 435:./Src/application.c **** 
 436:./Src/application.c **** float accellerationY(float value){
 508              		.loc 1 436 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 512              	.LVL55:
 513 0000 70B5     		push	{r4, r5, r6, lr}
 514              	.LCFI7:
 515              		.cfi_def_cfa_offset 16
 516              		.cfi_offset 4, -16
 517              		.cfi_offset 5, -12
 518              		.cfi_offset 6, -8
 519              		.cfi_offset 14, -4
 520 0002 0446     		mov	r4, r0
 437:./Src/application.c ****   /* value -> -1000 0 +1000 */
 438:./Src/application.c ****   float tval;
 439:./Src/application.c **** 
 440:./Src/application.c ****   tval = app.faccY;
 521              		.loc 1 440 0
 522 0004 1C4B     		ldr	r3, .L68+8
 523 0006 5D6A     		ldr	r5, [r3, #36]	@ float
 524              	.LVL56:
 441:./Src/application.c **** 
 442:./Src/application.c ****   //EXPEIMENT
 443:./Src/application.c ****   if(value > tval){
 525              		.loc 1 443 0
 526 0008 0146     		mov	r1, r0
 527 000a 2846     		mov	r0, r5
 528              	.LVL57:
 529 000c FFF7FEFF 		bl	__aeabi_fcmplt
 530              	.LVL58:
 531 0010 88B1     		cbz	r0, .L57
 444:./Src/application.c ****     app.faccY = app.faccY + ACCELLERATION_CONSTANT;
ARM GAS  /tmp/ccqooRvP.s 			page 18


 532              		.loc 1 444 0
 533 0012 194E     		ldr	r6, .L68+8
 534 0014 706A     		ldr	r0, [r6, #36]	@ float
 535 0016 FFF7FEFF 		bl	__aeabi_f2d
 536              	.LVL59:
 537 001a 15A3     		adr	r3, .L68
 538 001c D3E90023 		ldrd	r2, [r3]
 539 0020 FFF7FEFF 		bl	__aeabi_dadd
 540              	.LVL60:
 541 0024 FFF7FEFF 		bl	__aeabi_d2f
 542              	.LVL61:
 543 0028 7062     		str	r0, [r6, #36]	@ float
 445:./Src/application.c ****     //limit
 446:./Src/application.c ****     if(app.faccY > value){
 544              		.loc 1 446 0
 545 002a 716A     		ldr	r1, [r6, #36]	@ float
 546 002c 2046     		mov	r0, r4
 547 002e FFF7FEFF 		bl	__aeabi_fcmplt
 548              	.LVL62:
 549 0032 00B1     		cbz	r0, .L57
 447:./Src/application.c ****       app.faccY = (float)value;
 550              		.loc 1 447 0
 551 0034 7462     		str	r4, [r6, #36]	@ float
 552              	.L57:
 448:./Src/application.c ****     }
 449:./Src/application.c ****   }
 450:./Src/application.c ****   if(value < tval){
 553              		.loc 1 450 0
 554 0036 2146     		mov	r1, r4
 555 0038 2846     		mov	r0, r5
 556 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 557              	.LVL63:
 558 003e 88B1     		cbz	r0, .L60
 451:./Src/application.c ****     app.faccY = app.faccY - ACCELLERATION_CONSTANT;
 559              		.loc 1 451 0
 560 0040 0D4D     		ldr	r5, .L68+8
 561              	.LVL64:
 562 0042 686A     		ldr	r0, [r5, #36]	@ float
 563 0044 FFF7FEFF 		bl	__aeabi_f2d
 564              	.LVL65:
 565 0048 09A3     		adr	r3, .L68
 566 004a D3E90023 		ldrd	r2, [r3]
 567 004e FFF7FEFF 		bl	__aeabi_dsub
 568              	.LVL66:
 569 0052 FFF7FEFF 		bl	__aeabi_d2f
 570              	.LVL67:
 571 0056 6862     		str	r0, [r5, #36]	@ float
 452:./Src/application.c ****     //limit
 453:./Src/application.c ****     if(app.faccY < value){
 572              		.loc 1 453 0
 573 0058 696A     		ldr	r1, [r5, #36]	@ float
 574 005a 2046     		mov	r0, r4
 575 005c FFF7FEFF 		bl	__aeabi_fcmpgt
 576              	.LVL68:
 577 0060 00B1     		cbz	r0, .L60
 454:./Src/application.c ****       app.faccY = (float)value;
 578              		.loc 1 454 0
ARM GAS  /tmp/ccqooRvP.s 			page 19


 579 0062 6C62     		str	r4, [r5, #36]	@ float
 580              	.L60:
 455:./Src/application.c ****     }
 456:./Src/application.c ****   }
 457:./Src/application.c **** 
 458:./Src/application.c ****   /* //ORIGINAL
 459:./Src/application.c ****   if(value > 0.0){
 460:./Src/application.c ****     if(value > tval){
 461:./Src/application.c ****       //Accelleration
 462:./Src/application.c ****       if(tval < 0.0){
 463:./Src/application.c ****         app.faccY = 0.0;
 464:./Src/application.c ****       }else{
 465:./Src/application.c ****         app.faccY = app.faccY + ACCELLERATION_CONSTANT;
 466:./Src/application.c ****         //limit
 467:./Src/application.c ****         if(app.faccY > value){
 468:./Src/application.c ****           app.faccY = (float)value;
 469:./Src/application.c ****         }
 470:./Src/application.c ****       }
 471:./Src/application.c ****     }else if(value < tval){
 472:./Src/application.c ****         app.faccY = (float)value;
 473:./Src/application.c ****     }else{
 474:./Src/application.c ****         app.faccY = (float)value;
 475:./Src/application.c ****     }
 476:./Src/application.c ****   }else if(value < 0){
 477:./Src/application.c ****     if(value < tval){
 478:./Src/application.c ****       //Accelleration
 479:./Src/application.c ****       if(tval > 0){
 480:./Src/application.c ****         app.faccY = 0.0;
 481:./Src/application.c ****       }else{
 482:./Src/application.c ****         app.faccY = app.faccY - ACCELLERATION_CONSTANT;
 483:./Src/application.c ****         //limit
 484:./Src/application.c ****         if(app.faccY < value){
 485:./Src/application.c ****           app.faccY = (float)value;
 486:./Src/application.c ****         }
 487:./Src/application.c ****       }
 488:./Src/application.c ****     }else if(value > tval){
 489:./Src/application.c ****         app.faccY = (float)value;
 490:./Src/application.c ****     }else{
 491:./Src/application.c ****         app.faccY = (float)value;
 492:./Src/application.c ****     }
 493:./Src/application.c ****   }else{
 494:./Src/application.c ****     app.faccY = (float)value;
 495:./Src/application.c ****   }*/
 496:./Src/application.c **** 
 497:./Src/application.c ****   tval = app.faccY;
 581              		.loc 1 497 0
 582 0064 044B     		ldr	r3, .L68+8
 583 0066 586A     		ldr	r0, [r3, #36]	@ float
 584              	.LVL69:
 498:./Src/application.c **** 
 499:./Src/application.c ****   return tval;
 500:./Src/application.c **** }
 585              		.loc 1 500 0
 586 0068 70BD     		pop	{r4, r5, r6, pc}
 587              	.LVL70:
 588              	.L69:
 589 006a 00BFAFF3 		.align	3
ARM GAS  /tmp/ccqooRvP.s 			page 20


 589      0080
 590              	.L68:
 591 0070 33333333 		.word	858993459
 592 0074 3333E33F 		.word	1071854387
 593 0078 00000000 		.word	app
 594              		.cfi_endproc
 595              	.LFE75:
 597              		.section	.text.accellerationX,"ax",%progbits
 598              		.align	2
 599              		.global	accellerationX
 600              		.thumb
 601              		.thumb_func
 603              	accellerationX:
 604              	.LFB76:
 501:./Src/application.c **** 
 502:./Src/application.c **** float accellerationX(float value){
 605              		.loc 1 502 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              	.LVL71:
 610 0000 70B5     		push	{r4, r5, r6, lr}
 611              	.LCFI8:
 612              		.cfi_def_cfa_offset 16
 613              		.cfi_offset 4, -16
 614              		.cfi_offset 5, -12
 615              		.cfi_offset 6, -8
 616              		.cfi_offset 14, -4
 617 0002 0446     		mov	r4, r0
 503:./Src/application.c ****   /* value -> -1000 0 +1000 */
 504:./Src/application.c ****   float tval;
 505:./Src/application.c **** 
 506:./Src/application.c ****   tval = app.faccX;
 618              		.loc 1 506 0
 619 0004 1C4B     		ldr	r3, .L82+8
 620 0006 9D6A     		ldr	r5, [r3, #40]	@ float
 621              	.LVL72:
 507:./Src/application.c **** 
 508:./Src/application.c ****   //EXPERIMENT
 509:./Src/application.c ****   if(value > tval){
 622              		.loc 1 509 0
 623 0008 0146     		mov	r1, r0
 624 000a 2846     		mov	r0, r5
 625              	.LVL73:
 626 000c FFF7FEFF 		bl	__aeabi_fcmplt
 627              	.LVL74:
 628 0010 88B1     		cbz	r0, .L71
 510:./Src/application.c ****     app.faccX = app.faccX + ACCELLERATION_CONSTANT;
 629              		.loc 1 510 0
 630 0012 194E     		ldr	r6, .L82+8
 631 0014 B06A     		ldr	r0, [r6, #40]	@ float
 632 0016 FFF7FEFF 		bl	__aeabi_f2d
 633              	.LVL75:
 634 001a 15A3     		adr	r3, .L82
 635 001c D3E90023 		ldrd	r2, [r3]
 636 0020 FFF7FEFF 		bl	__aeabi_dadd
 637              	.LVL76:
ARM GAS  /tmp/ccqooRvP.s 			page 21


 638 0024 FFF7FEFF 		bl	__aeabi_d2f
 639              	.LVL77:
 640 0028 B062     		str	r0, [r6, #40]	@ float
 511:./Src/application.c ****     //limit
 512:./Src/application.c ****     if(app.faccX > value){
 641              		.loc 1 512 0
 642 002a B16A     		ldr	r1, [r6, #40]	@ float
 643 002c 2046     		mov	r0, r4
 644 002e FFF7FEFF 		bl	__aeabi_fcmplt
 645              	.LVL78:
 646 0032 00B1     		cbz	r0, .L71
 513:./Src/application.c ****       app.faccX = (float)value;
 647              		.loc 1 513 0
 648 0034 B462     		str	r4, [r6, #40]	@ float
 649              	.L71:
 514:./Src/application.c ****     }
 515:./Src/application.c ****   }
 516:./Src/application.c ****   if(value < tval){
 650              		.loc 1 516 0
 651 0036 2146     		mov	r1, r4
 652 0038 2846     		mov	r0, r5
 653 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 654              	.LVL79:
 655 003e 88B1     		cbz	r0, .L74
 517:./Src/application.c ****     app.faccX = app.faccX - ACCELLERATION_CONSTANT;
 656              		.loc 1 517 0
 657 0040 0D4D     		ldr	r5, .L82+8
 658              	.LVL80:
 659 0042 A86A     		ldr	r0, [r5, #40]	@ float
 660 0044 FFF7FEFF 		bl	__aeabi_f2d
 661              	.LVL81:
 662 0048 09A3     		adr	r3, .L82
 663 004a D3E90023 		ldrd	r2, [r3]
 664 004e FFF7FEFF 		bl	__aeabi_dsub
 665              	.LVL82:
 666 0052 FFF7FEFF 		bl	__aeabi_d2f
 667              	.LVL83:
 668 0056 A862     		str	r0, [r5, #40]	@ float
 518:./Src/application.c ****     //limit
 519:./Src/application.c ****     if(app.faccX < value){
 669              		.loc 1 519 0
 670 0058 A96A     		ldr	r1, [r5, #40]	@ float
 671 005a 2046     		mov	r0, r4
 672 005c FFF7FEFF 		bl	__aeabi_fcmpgt
 673              	.LVL84:
 674 0060 00B1     		cbz	r0, .L74
 520:./Src/application.c ****       app.faccX = (float)value;
 675              		.loc 1 520 0
 676 0062 AC62     		str	r4, [r5, #40]	@ float
 677              	.L74:
 521:./Src/application.c ****     }
 522:./Src/application.c ****   }
 523:./Src/application.c ****   /* ORIGINAL
 524:./Src/application.c ****   if(value > 0){
 525:./Src/application.c ****     if(value > tval){
 526:./Src/application.c ****       //Accelleration
 527:./Src/application.c ****       if(tval < 0.0){
ARM GAS  /tmp/ccqooRvP.s 			page 22


 528:./Src/application.c ****         app.faccX = 0.0;
 529:./Src/application.c ****       }else{
 530:./Src/application.c ****         app.faccX = app.faccX + ACCELLERATION_CONSTANT;
 531:./Src/application.c ****         //limit
 532:./Src/application.c ****         if(app.faccX > value){
 533:./Src/application.c ****           app.faccX = (float)value;
 534:./Src/application.c ****         }
 535:./Src/application.c ****       }
 536:./Src/application.c ****     }else if(value < tval){
 537:./Src/application.c ****         app.faccX = (float)value;
 538:./Src/application.c ****     }else{
 539:./Src/application.c ****         app.faccX = (float)value;
 540:./Src/application.c ****     }
 541:./Src/application.c ****   }else if(value < 0){
 542:./Src/application.c ****     if(value < tval){
 543:./Src/application.c ****       //Accelleration
 544:./Src/application.c ****       if(tval > 0.0){
 545:./Src/application.c ****         app.faccX = 0.0;
 546:./Src/application.c ****       }else{
 547:./Src/application.c ****         app.faccX = app.faccX - ACCELLERATION_CONSTANT;
 548:./Src/application.c ****         //limit
 549:./Src/application.c ****         if(app.faccX < value){
 550:./Src/application.c ****           app.faccX = (float)value;
 551:./Src/application.c ****         }
 552:./Src/application.c ****       }
 553:./Src/application.c ****     }else if(value > tval){
 554:./Src/application.c ****         app.faccX = (float)value;
 555:./Src/application.c ****     }else{
 556:./Src/application.c ****         app.faccX = (float)value;
 557:./Src/application.c ****     }
 558:./Src/application.c ****   }else{
 559:./Src/application.c ****     app.faccX = (float)value;
 560:./Src/application.c ****   }
 561:./Src/application.c **** */
 562:./Src/application.c ****   tval = app.faccX;
 678              		.loc 1 562 0
 679 0064 044B     		ldr	r3, .L82+8
 680 0066 986A     		ldr	r0, [r3, #40]	@ float
 681              	.LVL85:
 563:./Src/application.c **** 
 564:./Src/application.c ****   return tval;
 565:./Src/application.c **** }
 682              		.loc 1 565 0
 683 0068 70BD     		pop	{r4, r5, r6, pc}
 684              	.LVL86:
 685              	.L83:
 686 006a 00BFAFF3 		.align	3
 686      0080
 687              	.L82:
 688 0070 33333333 		.word	858993459
 689 0074 3333E33F 		.word	1071854387
 690 0078 00000000 		.word	app
 691              		.cfi_endproc
 692              	.LFE76:
 694              		.section	.text.accellerationYHARD,"ax",%progbits
 695              		.align	2
 696              		.global	accellerationYHARD
ARM GAS  /tmp/ccqooRvP.s 			page 23


 697              		.thumb
 698              		.thumb_func
 700              	accellerationYHARD:
 701              	.LFB77:
 566:./Src/application.c **** 
 567:./Src/application.c **** float accellerationYHARD(float value){
 702              		.loc 1 567 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              	.LVL87:
 707 0000 70B5     		push	{r4, r5, r6, lr}
 708              	.LCFI9:
 709              		.cfi_def_cfa_offset 16
 710              		.cfi_offset 4, -16
 711              		.cfi_offset 5, -12
 712              		.cfi_offset 6, -8
 713              		.cfi_offset 14, -4
 714 0002 0446     		mov	r4, r0
 568:./Src/application.c ****   /* value -> -1000 0 +1000 */
 569:./Src/application.c ****   float tval;
 570:./Src/application.c **** 
 571:./Src/application.c ****   tval = app.faccY;
 715              		.loc 1 571 0
 716 0004 1C4B     		ldr	r3, .L96+8
 717 0006 5D6A     		ldr	r5, [r3, #36]	@ float
 718              	.LVL88:
 572:./Src/application.c **** 
 573:./Src/application.c ****   //EXPEIMENT
 574:./Src/application.c ****   if(value > tval){
 719              		.loc 1 574 0
 720 0008 0146     		mov	r1, r0
 721 000a 2846     		mov	r0, r5
 722              	.LVL89:
 723 000c FFF7FEFF 		bl	__aeabi_fcmplt
 724              	.LVL90:
 725 0010 88B1     		cbz	r0, .L85
 575:./Src/application.c ****     app.faccY = app.faccY + ACCELLERATION_CONSTANT_HARD;
 726              		.loc 1 575 0
 727 0012 194E     		ldr	r6, .L96+8
 728 0014 706A     		ldr	r0, [r6, #36]	@ float
 729 0016 FFF7FEFF 		bl	__aeabi_f2d
 730              	.LVL91:
 731 001a 15A3     		adr	r3, .L96
 732 001c D3E90023 		ldrd	r2, [r3]
 733 0020 FFF7FEFF 		bl	__aeabi_dadd
 734              	.LVL92:
 735 0024 FFF7FEFF 		bl	__aeabi_d2f
 736              	.LVL93:
 737 0028 7062     		str	r0, [r6, #36]	@ float
 576:./Src/application.c ****     //limit
 577:./Src/application.c ****     if(app.faccY > value){
 738              		.loc 1 577 0
 739 002a 716A     		ldr	r1, [r6, #36]	@ float
 740 002c 2046     		mov	r0, r4
 741 002e FFF7FEFF 		bl	__aeabi_fcmplt
 742              	.LVL94:
ARM GAS  /tmp/ccqooRvP.s 			page 24


 743 0032 00B1     		cbz	r0, .L85
 578:./Src/application.c ****       app.faccY = (float)value;
 744              		.loc 1 578 0
 745 0034 7462     		str	r4, [r6, #36]	@ float
 746              	.L85:
 579:./Src/application.c ****     }
 580:./Src/application.c ****   }
 581:./Src/application.c ****   if(value < tval){
 747              		.loc 1 581 0
 748 0036 2146     		mov	r1, r4
 749 0038 2846     		mov	r0, r5
 750 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 751              	.LVL95:
 752 003e 88B1     		cbz	r0, .L88
 582:./Src/application.c ****     app.faccY = app.faccY - ACCELLERATION_CONSTANT_HARD;
 753              		.loc 1 582 0
 754 0040 0D4D     		ldr	r5, .L96+8
 755              	.LVL96:
 756 0042 686A     		ldr	r0, [r5, #36]	@ float
 757 0044 FFF7FEFF 		bl	__aeabi_f2d
 758              	.LVL97:
 759 0048 09A3     		adr	r3, .L96
 760 004a D3E90023 		ldrd	r2, [r3]
 761 004e FFF7FEFF 		bl	__aeabi_dsub
 762              	.LVL98:
 763 0052 FFF7FEFF 		bl	__aeabi_d2f
 764              	.LVL99:
 765 0056 6862     		str	r0, [r5, #36]	@ float
 583:./Src/application.c ****     //limit
 584:./Src/application.c ****     if(app.faccY < value){
 766              		.loc 1 584 0
 767 0058 696A     		ldr	r1, [r5, #36]	@ float
 768 005a 2046     		mov	r0, r4
 769 005c FFF7FEFF 		bl	__aeabi_fcmpgt
 770              	.LVL100:
 771 0060 00B1     		cbz	r0, .L88
 585:./Src/application.c ****       app.faccY = (float)value;
 772              		.loc 1 585 0
 773 0062 6C62     		str	r4, [r5, #36]	@ float
 774              	.L88:
 586:./Src/application.c ****     }
 587:./Src/application.c ****   }
 588:./Src/application.c ****   tval = app.faccY;
 775              		.loc 1 588 0
 776 0064 044B     		ldr	r3, .L96+8
 777 0066 586A     		ldr	r0, [r3, #36]	@ float
 778              	.LVL101:
 589:./Src/application.c ****   return tval;
 590:./Src/application.c **** }
 779              		.loc 1 590 0
 780 0068 70BD     		pop	{r4, r5, r6, pc}
 781              	.LVL102:
 782              	.L97:
 783 006a 00BFAFF3 		.align	3
 783      0080
 784              	.L96:
 785 0070 B81E85EB 		.word	-343597384
ARM GAS  /tmp/ccqooRvP.s 			page 25


 786 0074 51B89E3F 		.word	1067366481
 787 0078 00000000 		.word	app
 788              		.cfi_endproc
 789              	.LFE77:
 791              		.section	.text.accellerationXHARD,"ax",%progbits
 792              		.align	2
 793              		.global	accellerationXHARD
 794              		.thumb
 795              		.thumb_func
 797              	accellerationXHARD:
 798              	.LFB78:
 591:./Src/application.c **** float accellerationXHARD(float value){
 799              		.loc 1 591 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              	.LVL103:
 804 0000 70B5     		push	{r4, r5, r6, lr}
 805              	.LCFI10:
 806              		.cfi_def_cfa_offset 16
 807              		.cfi_offset 4, -16
 808              		.cfi_offset 5, -12
 809              		.cfi_offset 6, -8
 810              		.cfi_offset 14, -4
 811 0002 0446     		mov	r4, r0
 592:./Src/application.c ****   /* value -> -1000 0 +1000 */
 593:./Src/application.c ****   float tval;
 594:./Src/application.c **** 
 595:./Src/application.c ****   tval = app.faccX;
 812              		.loc 1 595 0
 813 0004 1C4B     		ldr	r3, .L110+8
 814 0006 9D6A     		ldr	r5, [r3, #40]	@ float
 815              	.LVL104:
 596:./Src/application.c **** 
 597:./Src/application.c ****   //EXPERIMENT
 598:./Src/application.c ****   if(value > tval){
 816              		.loc 1 598 0
 817 0008 0146     		mov	r1, r0
 818 000a 2846     		mov	r0, r5
 819              	.LVL105:
 820 000c FFF7FEFF 		bl	__aeabi_fcmplt
 821              	.LVL106:
 822 0010 88B1     		cbz	r0, .L99
 599:./Src/application.c ****     app.faccX = app.faccX + ACCELLERATION_CONSTANT_HARD;
 823              		.loc 1 599 0
 824 0012 194E     		ldr	r6, .L110+8
 825 0014 B06A     		ldr	r0, [r6, #40]	@ float
 826 0016 FFF7FEFF 		bl	__aeabi_f2d
 827              	.LVL107:
 828 001a 15A3     		adr	r3, .L110
 829 001c D3E90023 		ldrd	r2, [r3]
 830 0020 FFF7FEFF 		bl	__aeabi_dadd
 831              	.LVL108:
 832 0024 FFF7FEFF 		bl	__aeabi_d2f
 833              	.LVL109:
 834 0028 B062     		str	r0, [r6, #40]	@ float
 600:./Src/application.c ****     //limit
ARM GAS  /tmp/ccqooRvP.s 			page 26


 601:./Src/application.c ****     if(app.faccX > value){
 835              		.loc 1 601 0
 836 002a B16A     		ldr	r1, [r6, #40]	@ float
 837 002c 2046     		mov	r0, r4
 838 002e FFF7FEFF 		bl	__aeabi_fcmplt
 839              	.LVL110:
 840 0032 00B1     		cbz	r0, .L99
 602:./Src/application.c ****       app.faccX = (float)value;
 841              		.loc 1 602 0
 842 0034 B462     		str	r4, [r6, #40]	@ float
 843              	.L99:
 603:./Src/application.c ****     }
 604:./Src/application.c ****   }
 605:./Src/application.c ****   if(value < tval){
 844              		.loc 1 605 0
 845 0036 2146     		mov	r1, r4
 846 0038 2846     		mov	r0, r5
 847 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 848              	.LVL111:
 849 003e 88B1     		cbz	r0, .L102
 606:./Src/application.c ****     app.faccX = app.faccX - ACCELLERATION_CONSTANT_HARD;
 850              		.loc 1 606 0
 851 0040 0D4D     		ldr	r5, .L110+8
 852              	.LVL112:
 853 0042 A86A     		ldr	r0, [r5, #40]	@ float
 854 0044 FFF7FEFF 		bl	__aeabi_f2d
 855              	.LVL113:
 856 0048 09A3     		adr	r3, .L110
 857 004a D3E90023 		ldrd	r2, [r3]
 858 004e FFF7FEFF 		bl	__aeabi_dsub
 859              	.LVL114:
 860 0052 FFF7FEFF 		bl	__aeabi_d2f
 861              	.LVL115:
 862 0056 A862     		str	r0, [r5, #40]	@ float
 607:./Src/application.c ****     //limit
 608:./Src/application.c ****     if(app.faccX < value){
 863              		.loc 1 608 0
 864 0058 A96A     		ldr	r1, [r5, #40]	@ float
 865 005a 2046     		mov	r0, r4
 866 005c FFF7FEFF 		bl	__aeabi_fcmpgt
 867              	.LVL116:
 868 0060 00B1     		cbz	r0, .L102
 609:./Src/application.c ****       app.faccX = (float)value;
 869              		.loc 1 609 0
 870 0062 AC62     		str	r4, [r5, #40]	@ float
 871              	.L102:
 610:./Src/application.c ****     }
 611:./Src/application.c ****   }
 612:./Src/application.c ****   tval = app.faccX;
 872              		.loc 1 612 0
 873 0064 044B     		ldr	r3, .L110+8
 874 0066 986A     		ldr	r0, [r3, #40]	@ float
 875              	.LVL117:
 613:./Src/application.c **** 
 614:./Src/application.c ****   return tval;
 615:./Src/application.c **** }
 876              		.loc 1 615 0
ARM GAS  /tmp/ccqooRvP.s 			page 27


 877 0068 70BD     		pop	{r4, r5, r6, pc}
 878              	.LVL118:
 879              	.L111:
 880 006a 00BFAFF3 		.align	3
 880      0080
 881              	.L110:
 882 0070 B81E85EB 		.word	-343597384
 883 0074 51B89E3F 		.word	1067366481
 884 0078 00000000 		.word	app
 885              		.cfi_endproc
 886              	.LFE78:
 888              		.global	__aeabi_ui2d
 889              		.global	__aeabi_ddiv
 890              		.global	__aeabi_d2uiz
 891              		.global	__aeabi_i2d
 892              		.global	__aeabi_dmul
 893              		.section	.text.Battery_TASK,"ax",%progbits
 894              		.align	2
 895              		.global	Battery_TASK
 896              		.thumb
 897              		.thumb_func
 899              	Battery_TASK:
 900              	.LFB79:
 616:./Src/application.c **** 
 617:./Src/application.c **** 
 618:./Src/application.c **** 
 619:./Src/application.c **** // BATTERY TASK
 620:./Src/application.c **** /*
 621:./Src/application.c **** void Battery_TASK(void){
 622:./Src/application.c ****   if((HAL_GetTick() - battery_dati.time_batt)>200){
 623:./Src/application.c ****     battery_dati.time_batt = HAL_GetTick();
 624:./Src/application.c **** 
 625:./Src/application.c ****    battery_dati.somma_batt = battery_dati.somma_batt  + ADC_BATTERY();
 626:./Src/application.c ****    battery_dati.counter_media++;
 627:./Src/application.c ****    if(battery_dati.counter_media >= 30){
 628:./Src/application.c ****     battery_dati.counter_media = 0;
 629:./Src/application.c **** 
 630:./Src/application.c ****       //Batteria media valore
 631:./Src/application.c ****       battery_dati.VBatt = (float)battery_dati.somma_batt / 30.0;
 632:./Src/application.c ****       battery_dati.VBatt = battery_dati.VBatt * ADC_BATTERY_VOLT;
 633:./Src/application.c **** 
 634:./Src/application.c ****       battery_dati.somma_batt = 0;
 635:./Src/application.c ****    }
 636:./Src/application.c ****   }
 637:./Src/application.c **** }
 638:./Src/application.c **** */
 639:./Src/application.c **** 
 640:./Src/application.c **** //http://stackoverflow.com/questions/10990618/calculate-rolling-moving-average-in-c/10990656#109906
 641:./Src/application.c **** //ROLLING ACERAGE
 642:./Src/application.c **** void Battery_TASK(void){
 901              		.loc 1 642 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 906              	.LCFI11:
 907              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccqooRvP.s 			page 28


 908              		.cfi_offset 3, -24
 909              		.cfi_offset 4, -20
 910              		.cfi_offset 5, -16
 911              		.cfi_offset 6, -12
 912              		.cfi_offset 7, -8
 913              		.cfi_offset 14, -4
 643:./Src/application.c ****   uint32_t temp32;
 644:./Src/application.c ****   if((HAL_GetTick() - battery_dati.time_batt)>200){
 914              		.loc 1 644 0
 915 0002 FFF7FEFF 		bl	HAL_GetTick
 916              	.LVL119:
 917 0006 204B     		ldr	r3, .L115+8
 918 0008 5B68     		ldr	r3, [r3, #4]
 919 000a C01A     		subs	r0, r0, r3
 920 000c C828     		cmp	r0, #200
 921 000e 36D9     		bls	.L112
 645:./Src/application.c ****     battery_dati.time_batt = HAL_GetTick();
 922              		.loc 1 645 0
 923 0010 FFF7FEFF 		bl	HAL_GetTick
 924              	.LVL120:
 925 0014 1C4C     		ldr	r4, .L115+8
 926 0016 6060     		str	r0, [r4, #4]
 646:./Src/application.c **** 
 647:./Src/application.c ****     temp32 = battery_dati.somma_batt;
 927              		.loc 1 647 0
 928 0018 A068     		ldr	r0, [r4, #8]
 929              	.LVL121:
 648:./Src/application.c ****     battery_dati.somma_batt -=  temp32 / 30.0;
 930              		.loc 1 648 0
 931 001a A568     		ldr	r5, [r4, #8]
 932 001c FFF7FEFF 		bl	__aeabi_ui2d
 933              	.LVL122:
 934 0020 0022     		movs	r2, #0
 935 0022 1A4B     		ldr	r3, .L115+12
 936 0024 FFF7FEFF 		bl	__aeabi_ddiv
 937              	.LVL123:
 938 0028 0646     		mov	r6, r0
 939 002a 0F46     		mov	r7, r1
 940 002c 2846     		mov	r0, r5
 941 002e FFF7FEFF 		bl	__aeabi_ui2d
 942              	.LVL124:
 943 0032 3246     		mov	r2, r6
 944 0034 3B46     		mov	r3, r7
 945 0036 FFF7FEFF 		bl	__aeabi_dsub
 946              	.LVL125:
 947 003a FFF7FEFF 		bl	__aeabi_d2uiz
 948              	.LVL126:
 949 003e A060     		str	r0, [r4, #8]
 649:./Src/application.c ****     battery_dati.somma_batt += ADC_BATTERY() / 30.0;
 950              		.loc 1 649 0
 951 0040 FFF7FEFF 		bl	ADC_BATTERY
 952              	.LVL127:
 953 0044 FFF7FEFF 		bl	__aeabi_i2d
 954              	.LVL128:
 955 0048 0022     		movs	r2, #0
 956 004a 104B     		ldr	r3, .L115+12
 957 004c FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  /tmp/ccqooRvP.s 			page 29


 958              	.LVL129:
 959 0050 0646     		mov	r6, r0
 960 0052 0F46     		mov	r7, r1
 961 0054 A068     		ldr	r0, [r4, #8]
 962 0056 FFF7FEFF 		bl	__aeabi_ui2d
 963              	.LVL130:
 964 005a 3246     		mov	r2, r6
 965 005c 3B46     		mov	r3, r7
 966 005e FFF7FEFF 		bl	__aeabi_dadd
 967              	.LVL131:
 968 0062 FFF7FEFF 		bl	__aeabi_d2uiz
 969              	.LVL132:
 970 0066 A060     		str	r0, [r4, #8]
 650:./Src/application.c **** 
 651:./Src/application.c ****       //Batteria media valore
 652:./Src/application.c ****    battery_dati.VBatt = battery_dati.somma_batt * ADC_BATTERY_VOLT;
 971              		.loc 1 652 0
 972 0068 A068     		ldr	r0, [r4, #8]
 973 006a FFF7FEFF 		bl	__aeabi_ui2d
 974              	.LVL133:
 975 006e 04A3     		adr	r3, .L115
 976 0070 D3E90023 		ldrd	r2, [r3]
 977 0074 FFF7FEFF 		bl	__aeabi_dmul
 978              	.LVL134:
 979 0078 FFF7FEFF 		bl	__aeabi_d2f
 980              	.LVL135:
 981 007c 2060     		str	r0, [r4]	@ float
 982              	.L112:
 983 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 984              	.L116:
 985              		.align	3
 986              	.L115:
 987 0080 F5E4E827 		.word	669574389
 988 0084 181C9B3F 		.word	1067129880
 989 0088 00000000 		.word	battery_dati
 990 008c 00003E40 		.word	1077805056
 991              		.cfi_endproc
 992              	.LFE79:
 994              		.section	.text.WAIT_CHARGE_FINISH,"ax",%progbits
 995              		.align	2
 996              		.global	WAIT_CHARGE_FINISH
 997              		.thumb
 998              		.thumb_func
 1000              	WAIT_CHARGE_FINISH:
 1001              	.LFB66:
  28:./Src/application.c ****   uint32_t timerBatteryC;
 1002              		.loc 1 28 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006 0000 10B5     		push	{r4, lr}
 1007              	.LCFI12:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 4, -8
 1010              		.cfi_offset 14, -4
  31:./Src/application.c ****   MotorR_stop();
 1011              		.loc 1 31 0
ARM GAS  /tmp/ccqooRvP.s 			page 30


 1012 0002 0120     		movs	r0, #1
 1013 0004 FFF7FEFF 		bl	Led_Set
 1014              	.LVL136:
  32:./Src/application.c ****   MotorL_stop();
 1015              		.loc 1 32 0
 1016 0008 FFF7FEFF 		bl	MotorR_stop
 1017              	.LVL137:
  33:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
 1018              		.loc 1 33 0
 1019 000c FFF7FEFF 		bl	MotorL_stop
 1020              	.LVL138:
  34:./Src/application.c ****   Buzzer_OneLongBeep();
 1021              		.loc 1 34 0
 1022 0010 1A4C     		ldr	r4, .L125
 1023 0012 2046     		mov	r0, r4
 1024 0014 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1025              	.LVL139:
  35:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
 1026              		.loc 1 35 0
 1027 0018 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1028              	.LVL140:
  36:./Src/application.c ****   Buzzer_OneLongBeep();
 1029              		.loc 1 36 0
 1030 001c 2046     		mov	r0, r4
 1031 001e FFF7FEFF 		bl	HAL_IWDG_Refresh
 1032              	.LVL141:
  37:./Src/application.c ****   timerBatteryC = HAL_GetTick();
 1033              		.loc 1 37 0
 1034 0022 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1035              	.LVL142:
  38:./Src/application.c **** 
 1036              		.loc 1 38 0
 1037 0026 FFF7FEFF 		bl	HAL_GetTick
 1038              	.LVL143:
 1039 002a 0446     		mov	r4, r0
 1040              	.LVL144:
  40:./Src/application.c ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 1041              		.loc 1 40 0
 1042 002c 1CE0     		b	.L118
 1043              	.LVL145:
 1044              	.L122:
  41:./Src/application.c ****     HAL_Delay(250);
 1045              		.loc 1 41 0
 1046 002e 1348     		ldr	r0, .L125
 1047 0030 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1048              	.LVL146:
  42:./Src/application.c ****     Battery_TASK();
 1049              		.loc 1 42 0
 1050 0034 FA20     		movs	r0, #250
 1051 0036 FFF7FEFF 		bl	HAL_Delay
 1052              	.LVL147:
  43:./Src/application.c ****     if(GET_BatteryAverage() < 41.250){
 1053              		.loc 1 43 0
 1054 003a FFF7FEFF 		bl	Battery_TASK
 1055              	.LVL148:
  44:./Src/application.c ****       timerBatteryC = HAL_GetTick();
 1056              		.loc 1 44 0
ARM GAS  /tmp/ccqooRvP.s 			page 31


 1057 003e FFF7FEFF 		bl	GET_BatteryAverage
 1058              	.LVL149:
 1059 0042 0F49     		ldr	r1, .L125+4
 1060 0044 FFF7FEFF 		bl	__aeabi_fcmplt
 1061              	.LVL150:
 1062 0048 10B1     		cbz	r0, .L119
  45:./Src/application.c ****     }
 1063              		.loc 1 45 0
 1064 004a FFF7FEFF 		bl	HAL_GetTick
 1065              	.LVL151:
 1066 004e 0446     		mov	r4, r0
 1067              	.LVL152:
 1068              	.L119:
  47:./Src/application.c ****       Buzzer_OneLongBeep();
 1069              		.loc 1 47 0
 1070 0050 FFF7FEFF 		bl	HAL_GetTick
 1071              	.LVL153:
 1072 0054 001B     		subs	r0, r0, r4
 1073 0056 44F62063 		movw	r3, #20000
 1074 005a 9842     		cmp	r0, r3
 1075 005c 04D9     		bls	.L118
  48:./Src/application.c ****       HAL_IWDG_Refresh(&hiwdg);   //819mS
 1076              		.loc 1 48 0
 1077 005e FFF7FEFF 		bl	Buzzer_OneLongBeep
 1078              	.LVL154:
  49:./Src/application.c ****     }
 1079              		.loc 1 49 0
 1080 0062 0648     		ldr	r0, .L125
 1081 0064 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1082              	.LVL155:
 1083              	.L118:
  40:./Src/application.c ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 1084              		.loc 1 40 0
 1085 0068 FFF7FEFF 		bl	IS_Charge
 1086              	.LVL156:
 1087 006c 0028     		cmp	r0, #0
 1088 006e DED0     		beq	.L122
  52:./Src/application.c ****   applcation_init();
 1089              		.loc 1 52 0
 1090 0070 0020     		movs	r0, #0
 1091 0072 FFF7FEFF 		bl	Led_Set
 1092              	.LVL157:
  53:./Src/application.c **** }
 1093              		.loc 1 53 0
 1094 0076 FFF7FEFF 		bl	applcation_init
 1095              	.LVL158:
 1096 007a 10BD     		pop	{r4, pc}
 1097              	.LVL159:
 1098              	.L126:
 1099              		.align	2
 1100              	.L125:
 1101 007c 00000000 		.word	hiwdg
 1102 0080 00002542 		.word	1109721088
 1103              		.cfi_endproc
 1104              	.LFE66:
 1106              		.section	.text.Current_Motor_TASK,"ax",%progbits
 1107              		.align	2
ARM GAS  /tmp/ccqooRvP.s 			page 32


 1108              		.global	Current_Motor_TASK
 1109              		.thumb
 1110              		.thumb_func
 1112              	Current_Motor_TASK:
 1113              	.LFB80:
 653:./Src/application.c **** 
 654:./Src/application.c ****   }
 655:./Src/application.c **** }
 656:./Src/application.c **** 
 657:./Src/application.c **** 
 658:./Src/application.c **** 
 659:./Src/application.c **** 
 660:./Src/application.c **** // CURRENT MOTOR TASK
 661:./Src/application.c **** /*
 662:./Src/application.c **** void Current_Motor_TASK(void){
 663:./Src/application.c ****   if((HAL_GetTick() - app.Current_time_measure)>100){
 664:./Src/application.c ****     app.Current_time_measure = HAL_GetTick();
 665:./Src/application.c **** 
 666:./Src/application.c ****    app.somma_current_m_L = app.somma_current_m_L  + ADC_MOTOR_LEFT();
 667:./Src/application.c ****    app.somma_current_m_R = app.somma_current_m_R  + ADC_MOTOR_RIGHT();
 668:./Src/application.c **** 
 669:./Src/application.c ****    app.current_counter_media++;
 670:./Src/application.c ****    if(app.current_counter_media >= 10){
 671:./Src/application.c ****     app.current_counter_media = 0;
 672:./Src/application.c **** 
 673:./Src/application.c ****       //Current media valore
 674:./Src/application.c ****       app.Current_M_LEFT = (float)app.somma_current_m_L / 10.0;
 675:./Src/application.c ****       app.Current_M_RIGHT = (float)app.somma_current_m_R / 10.0;
 676:./Src/application.c **** 
 677:./Src/application.c ****       if(app.Current_M_RIGHT < ADC_MOTOR_R_CENTER){
 678:./Src/application.c ****         app.Current_M_RIGHT = 0.0;
 679:./Src/application.c ****       }else{
 680:./Src/application.c ****         app.Current_M_RIGHT = ((app.Current_M_RIGHT  - ADC_MOTOR_R_CENTER) * MOTOR_R_AMP_CONV_AMP);
 681:./Src/application.c ****       }
 682:./Src/application.c ****       if(app.Current_M_LEFT < ADC_MOTOR_L_CENTER){
 683:./Src/application.c ****         app.Current_M_LEFT = 0.0;
 684:./Src/application.c ****       }else{
 685:./Src/application.c ****         app.Current_M_LEFT = ((app.Current_M_LEFT  - ADC_MOTOR_L_CENTER) * MOTOR_L_AMP_CONV_AMP);
 686:./Src/application.c ****       }
 687:./Src/application.c **** 
 688:./Src/application.c ****       app.somma_current_m_L = 0;
 689:./Src/application.c ****       app.somma_current_m_R = 0;
 690:./Src/application.c ****    }
 691:./Src/application.c ****   }
 692:./Src/application.c **** }
 693:./Src/application.c **** */
 694:./Src/application.c **** //ROLLING ACERAGE
 695:./Src/application.c **** void Current_Motor_TASK(void){
 1114              		.loc 1 695 0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 0
 1117              		@ frame_needed = 0, uses_anonymous_args = 0
 1118 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1119              	.LCFI13:
 1120              		.cfi_def_cfa_offset 24
 1121              		.cfi_offset 3, -24
 1122              		.cfi_offset 4, -20
ARM GAS  /tmp/ccqooRvP.s 			page 33


 1123              		.cfi_offset 5, -16
 1124              		.cfi_offset 6, -12
 1125              		.cfi_offset 7, -8
 1126              		.cfi_offset 14, -4
 696:./Src/application.c ****   uint32_t temp32;
 697:./Src/application.c ****   app.somma_current_m_L = 5;
 1127              		.loc 1 697 0
 1128 0002 4F4C     		ldr	r4, .L139+16
 1129 0004 0523     		movs	r3, #5
 1130 0006 6363     		str	r3, [r4, #52]
 698:./Src/application.c ****   app.somma_current_m_R = 5;
 1131              		.loc 1 698 0
 1132 0008 A363     		str	r3, [r4, #56]
 699:./Src/application.c ****   if((HAL_GetTick() - app.Current_time_measure)>100){
 1133              		.loc 1 699 0
 1134 000a FFF7FEFF 		bl	HAL_GetTick
 1135              	.LVL160:
 1136 000e 236B     		ldr	r3, [r4, #48]
 1137 0010 C01A     		subs	r0, r0, r3
 1138 0012 6428     		cmp	r0, #100
 1139 0014 40F28B80 		bls	.L127
 700:./Src/application.c ****     app.Current_time_measure = HAL_GetTick();
 1140              		.loc 1 700 0
 1141 0018 FFF7FEFF 		bl	HAL_GetTick
 1142              	.LVL161:
 1143 001c 2063     		str	r0, [r4, #48]
 701:./Src/application.c **** 
 702:./Src/application.c ****     temp32 = app.somma_current_m_L;
 1144              		.loc 1 702 0
 1145 001e 606B     		ldr	r0, [r4, #52]
 1146              	.LVL162:
 703:./Src/application.c ****     app.somma_current_m_L -=  temp32 / 5.0;
 1147              		.loc 1 703 0
 1148 0020 656B     		ldr	r5, [r4, #52]
 1149 0022 FFF7FEFF 		bl	__aeabi_ui2d
 1150              	.LVL163:
 1151 0026 0022     		movs	r2, #0
 1152 0028 464B     		ldr	r3, .L139+20
 1153 002a FFF7FEFF 		bl	__aeabi_ddiv
 1154              	.LVL164:
 1155 002e 0646     		mov	r6, r0
 1156 0030 0F46     		mov	r7, r1
 1157 0032 2846     		mov	r0, r5
 1158 0034 FFF7FEFF 		bl	__aeabi_ui2d
 1159              	.LVL165:
 1160 0038 3246     		mov	r2, r6
 1161 003a 3B46     		mov	r3, r7
 1162 003c FFF7FEFF 		bl	__aeabi_dsub
 1163              	.LVL166:
 1164 0040 FFF7FEFF 		bl	__aeabi_d2uiz
 1165              	.LVL167:
 1166 0044 6063     		str	r0, [r4, #52]
 704:./Src/application.c ****     app.somma_current_m_L += ADC_MOTOR_LEFT() / 5.0;
 1167              		.loc 1 704 0
 1168 0046 FFF7FEFF 		bl	ADC_MOTOR_LEFT
 1169              	.LVL168:
 1170 004a FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  /tmp/ccqooRvP.s 			page 34


 1171              	.LVL169:
 1172 004e 0022     		movs	r2, #0
 1173 0050 3C4B     		ldr	r3, .L139+20
 1174 0052 FFF7FEFF 		bl	__aeabi_ddiv
 1175              	.LVL170:
 1176 0056 0646     		mov	r6, r0
 1177 0058 0F46     		mov	r7, r1
 1178 005a 606B     		ldr	r0, [r4, #52]
 1179 005c FFF7FEFF 		bl	__aeabi_ui2d
 1180              	.LVL171:
 1181 0060 3246     		mov	r2, r6
 1182 0062 3B46     		mov	r3, r7
 1183 0064 FFF7FEFF 		bl	__aeabi_dadd
 1184              	.LVL172:
 1185 0068 FFF7FEFF 		bl	__aeabi_d2uiz
 1186              	.LVL173:
 1187 006c 6063     		str	r0, [r4, #52]
 705:./Src/application.c **** 
 706:./Src/application.c ****     temp32 = app.somma_current_m_R;
 1188              		.loc 1 706 0
 1189 006e A06B     		ldr	r0, [r4, #56]
 1190              	.LVL174:
 707:./Src/application.c ****     app.somma_current_m_R -=  temp32 / 5.0;
 1191              		.loc 1 707 0
 1192 0070 A56B     		ldr	r5, [r4, #56]
 1193 0072 FFF7FEFF 		bl	__aeabi_ui2d
 1194              	.LVL175:
 1195 0076 0022     		movs	r2, #0
 1196 0078 324B     		ldr	r3, .L139+20
 1197 007a FFF7FEFF 		bl	__aeabi_ddiv
 1198              	.LVL176:
 1199 007e 0646     		mov	r6, r0
 1200 0080 0F46     		mov	r7, r1
 1201 0082 2846     		mov	r0, r5
 1202 0084 FFF7FEFF 		bl	__aeabi_ui2d
 1203              	.LVL177:
 1204 0088 3246     		mov	r2, r6
 1205 008a 3B46     		mov	r3, r7
 1206 008c FFF7FEFF 		bl	__aeabi_dsub
 1207              	.LVL178:
 1208 0090 FFF7FEFF 		bl	__aeabi_d2uiz
 1209              	.LVL179:
 1210 0094 A063     		str	r0, [r4, #56]
 708:./Src/application.c ****     app.somma_current_m_R += ADC_MOTOR_RIGHT() / 5.0;
 1211              		.loc 1 708 0
 1212 0096 FFF7FEFF 		bl	ADC_MOTOR_RIGHT
 1213              	.LVL180:
 1214 009a FFF7FEFF 		bl	__aeabi_i2d
 1215              	.LVL181:
 1216 009e 0022     		movs	r2, #0
 1217 00a0 284B     		ldr	r3, .L139+20
 1218 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 1219              	.LVL182:
 1220 00a6 0646     		mov	r6, r0
 1221 00a8 0F46     		mov	r7, r1
 1222 00aa A06B     		ldr	r0, [r4, #56]
 1223 00ac FFF7FEFF 		bl	__aeabi_ui2d
ARM GAS  /tmp/ccqooRvP.s 			page 35


 1224              	.LVL183:
 1225 00b0 3246     		mov	r2, r6
 1226 00b2 3B46     		mov	r3, r7
 1227 00b4 FFF7FEFF 		bl	__aeabi_dadd
 1228              	.LVL184:
 1229 00b8 FFF7FEFF 		bl	__aeabi_d2uiz
 1230              	.LVL185:
 1231 00bc A063     		str	r0, [r4, #56]
 709:./Src/application.c **** 
 710:./Src/application.c **** 
 711:./Src/application.c **** 
 712:./Src/application.c ****    //Current media valore
 713:./Src/application.c ****     app.Current_M_LEFT = (float)app.somma_current_m_L;
 1232              		.loc 1 713 0
 1233 00be 606B     		ldr	r0, [r4, #52]
 1234 00c0 FFF7FEFF 		bl	__aeabi_ui2f
 1235              	.LVL186:
 1236 00c4 2064     		str	r0, [r4, #64]	@ float
 714:./Src/application.c ****     app.Current_M_RIGHT = (float)app.somma_current_m_R;
 1237              		.loc 1 714 0
 1238 00c6 A06B     		ldr	r0, [r4, #56]
 1239 00c8 FFF7FEFF 		bl	__aeabi_ui2f
 1240              	.LVL187:
 1241 00cc 6064     		str	r0, [r4, #68]	@ float
 715:./Src/application.c **** 
 716:./Src/application.c ****     if(app.Current_M_RIGHT < ADC_MOTOR_R_CENTER){
 1242              		.loc 1 716 0
 1243 00ce 606C     		ldr	r0, [r4, #68]	@ float
 1244 00d0 1D49     		ldr	r1, .L139+24
 1245 00d2 FFF7FEFF 		bl	__aeabi_fcmplt
 1246              	.LVL188:
 1247 00d6 10B1     		cbz	r0, .L136
 717:./Src/application.c ****       app.Current_M_RIGHT = 0.0;
 1248              		.loc 1 717 0
 1249 00d8 0022     		movs	r2, #0
 1250 00da 6264     		str	r2, [r4, #68]	@ float
 1251 00dc 0EE0     		b	.L131
 1252              	.L136:
 718:./Src/application.c ****     }else{
 719:./Src/application.c ****       app.Current_M_RIGHT = ((app.Current_M_RIGHT  - ADC_MOTOR_R_CENTER) * MOTOR_R_AMP_CONV_AMP);
 1253              		.loc 1 719 0
 1254 00de 184C     		ldr	r4, .L139+16
 1255 00e0 606C     		ldr	r0, [r4, #68]	@ float
 1256 00e2 1949     		ldr	r1, .L139+24
 1257 00e4 FFF7FEFF 		bl	__aeabi_fsub
 1258              	.LVL189:
 1259 00e8 FFF7FEFF 		bl	__aeabi_f2d
 1260              	.LVL190:
 1261 00ec 10A3     		adr	r3, .L139
 1262 00ee D3E90023 		ldrd	r2, [r3]
 1263 00f2 FFF7FEFF 		bl	__aeabi_dmul
 1264              	.LVL191:
 1265 00f6 FFF7FEFF 		bl	__aeabi_d2f
 1266              	.LVL192:
 1267 00fa 6064     		str	r0, [r4, #68]	@ float
 1268              	.L131:
 720:./Src/application.c ****     }
ARM GAS  /tmp/ccqooRvP.s 			page 36


 721:./Src/application.c ****     if(app.Current_M_LEFT < ADC_MOTOR_L_CENTER){
 1269              		.loc 1 721 0
 1270 00fc 104B     		ldr	r3, .L139+16
 1271 00fe 186C     		ldr	r0, [r3, #64]	@ float
 1272 0100 1249     		ldr	r1, .L139+28
 1273 0102 FFF7FEFF 		bl	__aeabi_fcmplt
 1274              	.LVL193:
 1275 0106 18B1     		cbz	r0, .L137
 722:./Src/application.c ****       app.Current_M_LEFT = 0.0;
 1276              		.loc 1 722 0
 1277 0108 0022     		movs	r2, #0
 1278 010a 0D4B     		ldr	r3, .L139+16
 1279 010c 1A64     		str	r2, [r3, #64]	@ float
 1280 010e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1281              	.L137:
 723:./Src/application.c ****     }else{
 724:./Src/application.c ****       app.Current_M_LEFT = ((app.Current_M_LEFT  - ADC_MOTOR_L_CENTER) * MOTOR_L_AMP_CONV_AMP);
 1282              		.loc 1 724 0
 1283 0110 0B4C     		ldr	r4, .L139+16
 1284 0112 206C     		ldr	r0, [r4, #64]	@ float
 1285 0114 0D49     		ldr	r1, .L139+28
 1286 0116 FFF7FEFF 		bl	__aeabi_fsub
 1287              	.LVL194:
 1288 011a FFF7FEFF 		bl	__aeabi_f2d
 1289              	.LVL195:
 1290 011e 06A3     		adr	r3, .L139+8
 1291 0120 D3E90023 		ldrd	r2, [r3]
 1292 0124 FFF7FEFF 		bl	__aeabi_dmul
 1293              	.LVL196:
 1294 0128 FFF7FEFF 		bl	__aeabi_d2f
 1295              	.LVL197:
 1296 012c 2064     		str	r0, [r4, #64]	@ float
 1297              	.L127:
 1298 012e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1299              	.L140:
 1300              		.align	3
 1301              	.L139:
 1302 0130 D2131C3D 		.word	1025250258
 1303 0134 C1D1933F 		.word	1066652097
 1304 0138 B4FA5241 		.word	1095957172
 1305 013c AB2F953F 		.word	1066741675
 1306 0140 00000000 		.word	app
 1307 0144 00001440 		.word	1075052544
 1308 0148 0080EF44 		.word	1156546560
 1309 014c 00E0EB44 		.word	1156308992
 1310              		.cfi_endproc
 1311              	.LFE80:
 1313              		.global	__aeabi_f2iz
 1314              		.global	__aeabi_i2f
 1315              		.global	__aeabi_fadd
 1316              		.global	__aeabi_fdiv
 1317              		.global	__aeabi_d2iz
 1318              		.section	.text.go_motor,"ax",%progbits
 1319              		.align	2
 1320              		.global	go_motor
 1321              		.thumb
 1322              		.thumb_func
ARM GAS  /tmp/ccqooRvP.s 			page 37


 1324              	go_motor:
 1325              	.LFB81:
 725:./Src/application.c ****     }
 726:./Src/application.c **** 
 727:./Src/application.c **** 
 728:./Src/application.c ****   }
 729:./Src/application.c **** }
 730:./Src/application.c **** 
 731:./Src/application.c **** 
 732:./Src/application.c **** //  MOTOR
 733:./Src/application.c **** 
 734:./Src/application.c **** /*
 735:./Src/application.c **** void go_motor(float throttle, float steering, float Vbatt){
 736:./Src/application.c ****   float limitSup, limitInf ;
 737:./Src/application.c **** 
 738:./Src/application.c ****   limitSup = 1000.0 * get_powerMax(Vbatt);
 739:./Src/application.c ****   limitInf = limitSup * -1;
 740:./Src/application.c **** 
 741:./Src/application.c ****       if(throttle>0.0){
 742:./Src/application.c ****         if(throttle > 20){
 743:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering * 0.333));
 744:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering * 0.333));
 745:./Src/application.c ****         }else if((throttle > 15)){
 746:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering * 0.5));
 747:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering * 0.5));
 748:./Src/application.c ****         }else{
 749:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering));
 750:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering));
 751:./Src/application.c ****         }
 752:./Src/application.c ****       }else if(throttle<0.0){
 753:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering));
 754:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering));
 755:./Src/application.c ****       }else{
 756:./Src/application.c ****           app.motATS=(int8_t)steering;
 757:./Src/application.c ****           app.motBTS=(int8_t)((steering)*-1);
 758:./Src/application.c ****       }
 759:./Src/application.c **** 
 760:./Src/application.c ****     //printf("%d ; %d\r\n",motATS,motBTS);
 761:./Src/application.c **** 
 762:./Src/application.c ****       if(app.motATS >= 0){
 763:./Src/application.c ****         //0 ~ 100
 764:./Src/application.c ****         if(app.motATS > limitSup){
 765:./Src/application.c ****           app.motATS = (int16_t)limitSup;
 766:./Src/application.c ****         }
 767:./Src/application.c ****         MotorR_pwm(app.motATS);
 768:./Src/application.c ****       }else{
 769:./Src/application.c ****         //0 ~ -100
 770:./Src/application.c ****         if(app.motATS < limitInf){
 771:./Src/application.c ****           app.motATS = (int16_t)limitInf;
 772:./Src/application.c ****         }
 773:./Src/application.c ****         //app.motATS = app.motATS * -1;
 774:./Src/application.c ****         MotorR_pwm(app.motATS);
 775:./Src/application.c ****       }
 776:./Src/application.c **** 
 777:./Src/application.c ****       if(app.motBTS >= 0){
 778:./Src/application.c ****         //0 ~ 100
 779:./Src/application.c ****         if(app.motBTS > limitSup){
ARM GAS  /tmp/ccqooRvP.s 			page 38


 780:./Src/application.c ****           app.motBTS = (int16_t)limitSup;
 781:./Src/application.c ****         }
 782:./Src/application.c ****         MotorL_pwm(app.motBTS );
 783:./Src/application.c ****       }else{
 784:./Src/application.c ****         //0 ~ -100
 785:./Src/application.c ****         if(app.motBTS < limitInf){
 786:./Src/application.c ****           app.motBTS = (int16_t)limitInf;
 787:./Src/application.c ****         }
 788:./Src/application.c ****         //MOTOR_VALUE.motBTS = MOTOR_VALUE.motBTS * -1;
 789:./Src/application.c ****         MotorL_pwm(app.motBTS );
 790:./Src/application.c ****       }
 791:./Src/application.c **** }
 792:./Src/application.c **** */
 793:./Src/application.c **** 
 794:./Src/application.c **** // EXPERIMENT
 795:./Src/application.c **** // http://www.impulseadventure.com/elec/robot-differential-steering.html
 796:./Src/application.c **** void go_motor(float throttle, float steering, float Vbatt, uint8_t fullpower){
 1326              		.loc 1 796 0
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 8
 1329              		@ frame_needed = 0, uses_anonymous_args = 0
 1330              	.LVL198:
 1331 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1332              	.LCFI14:
 1333              		.cfi_def_cfa_offset 36
 1334              		.cfi_offset 4, -36
 1335              		.cfi_offset 5, -32
 1336              		.cfi_offset 6, -28
 1337              		.cfi_offset 7, -24
 1338              		.cfi_offset 8, -20
 1339              		.cfi_offset 9, -16
 1340              		.cfi_offset 10, -12
 1341              		.cfi_offset 11, -8
 1342              		.cfi_offset 14, -4
 1343 0004 83B0     		sub	sp, sp, #12
 1344              	.LCFI15:
 1345              		.cfi_def_cfa_offset 48
 1346 0006 0646     		mov	r6, r0
 1347 0008 0C46     		mov	r4, r1
 797:./Src/application.c ****   float limitSup, limitInf ;
 798:./Src/application.c **** 
 799:./Src/application.c ****   if(fullpower==0){
 1348              		.loc 1 799 0
 1349 000a 4BB9     		cbnz	r3, .L160
 800:./Src/application.c ****     limitSup = 1000.0 * get_powerMax(Vbatt);
 1350              		.loc 1 800 0
 1351 000c 1046     		mov	r0, r2
 1352              	.LVL199:
 1353 000e FFF7FEFF 		bl	get_powerMax
 1354              	.LVL200:
 1355 0012 8C49     		ldr	r1, .L171
 1356 0014 FFF7FEFF 		bl	__aeabi_fmul
 1357              	.LVL201:
 1358 0018 0546     		mov	r5, r0
 1359              	.LVL202:
 801:./Src/application.c ****     limitInf = limitSup * -1;
 1360              		.loc 1 801 0
ARM GAS  /tmp/ccqooRvP.s 			page 39


 1361 001a 00F1004A 		add	r10, r0, #-2147483648
 1362              	.LVL203:
 1363 001e 02E0     		b	.L142
 1364              	.LVL204:
 1365              	.L160:
 802:./Src/application.c ****   }else{
 803:./Src/application.c ****     limitSup = 1000.0;
 804:./Src/application.c ****     limitInf = limitSup * -1;
 1366              		.loc 1 804 0
 1367 0020 DFF834A2 		ldr	r10, .L171+20
 803:./Src/application.c ****     limitInf = limitSup * -1;
 1368              		.loc 1 803 0
 1369 0024 874D     		ldr	r5, .L171
 1370              	.LVL205:
 1371              	.L142:
 805:./Src/application.c ****   }
 806:./Src/application.c **** 
 807:./Src/application.c **** // INPUTS
 808:./Src/application.c **** int     nJoyX;              // Joystick X input                     (-128..+127)
 809:./Src/application.c **** int     nJoyY;              // Joystick Y input                     (-128..+127)
 810:./Src/application.c **** 
 811:./Src/application.c **** // OUTPUTS
 812:./Src/application.c **** int     nMotMixL;           // Motor (left)  mixed output           (-128..+127)
 813:./Src/application.c **** int     nMotMixR;           // Motor (right) mixed output           (-128..+127)
 814:./Src/application.c **** 
 815:./Src/application.c **** // CONFIG
 816:./Src/application.c **** // - fPivYLimt  : The threshold at which the pivot action starts
 817:./Src/application.c **** //                This threshold is measured in units on the Y-axis
 818:./Src/application.c **** //                away from the X-axis (Y=0). A greater value will assign
 819:./Src/application.c **** //                more of the joystick's range to pivot actions.
 820:./Src/application.c **** //                Allowable range: (0..+127)
 821:./Src/application.c **** float fPivYLimit = 85.0;
 822:./Src/application.c **** 
 823:./Src/application.c **** // TEMP VARIABLES
 824:./Src/application.c **** float   nMotPremixL;    // Motor (left)  premixed output        (-128..+127)
 825:./Src/application.c **** float   nMotPremixR;    // Motor (right) premixed output        (-128..+127)
 826:./Src/application.c **** int     nPivSpeed;      // Pivot Speed                          (-128..+127)
 827:./Src/application.c **** float   fPivScale;      // Balance scale b/w drive and pivot    (   0..1   )
 828:./Src/application.c **** 
 829:./Src/application.c **** 
 830:./Src/application.c **** nJoyY = (int)throttle;
 1372              		.loc 1 830 0
 1373 0026 3046     		mov	r0, r6
 1374 0028 FFF7FEFF 		bl	__aeabi_f2iz
 1375              	.LVL206:
 1376 002c 0646     		mov	r6, r0
 1377              	.LVL207:
 831:./Src/application.c **** nJoyX = (int)steering;
 1378              		.loc 1 831 0
 1379 002e 2046     		mov	r0, r4
 1380              	.LVL208:
 1381 0030 FFF7FEFF 		bl	__aeabi_f2iz
 1382              	.LVL209:
 1383 0034 0446     		mov	r4, r0
 1384              	.LVL210:
 832:./Src/application.c **** 
 833:./Src/application.c **** 
ARM GAS  /tmp/ccqooRvP.s 			page 40


 834:./Src/application.c **** 
 835:./Src/application.c **** // Calculate Drive Turn output due to Joystick X input
 836:./Src/application.c **** if (nJoyY >= 0) {
 1385              		.loc 1 836 0
 1386 0036 002E     		cmp	r6, #0
 1387 0038 15DB     		blt	.L143
 837:./Src/application.c ****   // Forward
 838:./Src/application.c ****   nMotPremixL = (nJoyX>=0)? limitSup : (limitSup + nJoyX);
 1388              		.loc 1 838 0
 1389 003a 0028     		cmp	r0, #0
 1390 003c 07DA     		bge	.L161
 1391              		.loc 1 838 0 is_stmt 0 discriminator 1
 1392 003e FFF7FEFF 		bl	__aeabi_i2f
 1393              	.LVL211:
 1394 0042 0146     		mov	r1, r0
 1395 0044 2846     		mov	r0, r5
 1396 0046 FFF7FEFF 		bl	__aeabi_fadd
 1397              	.LVL212:
 1398 004a 8146     		mov	r9, r0
 1399 004c 00E0     		b	.L144
 1400              	.LVL213:
 1401              	.L161:
 1402              		.loc 1 838 0
 1403 004e A946     		mov	r9, r5
 1404              	.LVL214:
 1405              	.L144:
 839:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? (limitSup - nJoyX) : limitSup;
 1406              		.loc 1 839 0 is_stmt 1 discriminator 4
 1407 0050 002C     		cmp	r4, #0
 1408 0052 1EDB     		blt	.L162
 1409              		.loc 1 839 0 is_stmt 0 discriminator 1
 1410 0054 2046     		mov	r0, r4
 1411 0056 FFF7FEFF 		bl	__aeabi_i2f
 1412              	.LVL215:
 1413 005a 0146     		mov	r1, r0
 1414 005c 2846     		mov	r0, r5
 1415 005e FFF7FEFF 		bl	__aeabi_fsub
 1416              	.LVL216:
 1417 0062 8046     		mov	r8, r0
 1418 0064 18E0     		b	.L145
 1419              	.LVL217:
 1420              	.L143:
 840:./Src/application.c **** } else {
 841:./Src/application.c ****   // Reverse
 842:./Src/application.c ****   nMotPremixL = (nJoyX>=0)? (limitSup - nJoyX) : limitSup;
 1421              		.loc 1 842 0 is_stmt 1
 1422 0066 0028     		cmp	r0, #0
 1423 0068 07DB     		blt	.L163
 1424              		.loc 1 842 0 is_stmt 0 discriminator 1
 1425 006a FFF7FEFF 		bl	__aeabi_i2f
 1426              	.LVL218:
 1427 006e 0146     		mov	r1, r0
 1428 0070 2846     		mov	r0, r5
 1429 0072 FFF7FEFF 		bl	__aeabi_fsub
 1430              	.LVL219:
 1431 0076 8146     		mov	r9, r0
 1432 0078 00E0     		b	.L146
ARM GAS  /tmp/ccqooRvP.s 			page 41


 1433              	.LVL220:
 1434              	.L163:
 1435              		.loc 1 842 0
 1436 007a A946     		mov	r9, r5
 1437              	.LVL221:
 1438              	.L146:
 843:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? limitSup : (limitSup + nJoyX);
 1439              		.loc 1 843 0 is_stmt 1 discriminator 4
 1440 007c 002C     		cmp	r4, #0
 1441 007e 0ADA     		bge	.L164
 1442              		.loc 1 843 0 is_stmt 0 discriminator 1
 1443 0080 2046     		mov	r0, r4
 1444 0082 FFF7FEFF 		bl	__aeabi_i2f
 1445              	.LVL222:
 1446 0086 0146     		mov	r1, r0
 1447 0088 2846     		mov	r0, r5
 1448 008a FFF7FEFF 		bl	__aeabi_fadd
 1449              	.LVL223:
 1450 008e 8046     		mov	r8, r0
 1451 0090 02E0     		b	.L145
 1452              	.L162:
 839:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? (limitSup - nJoyX) : limitSup;
 1453              		.loc 1 839 0 is_stmt 1
 1454 0092 A846     		mov	r8, r5
 1455 0094 00E0     		b	.L145
 1456              	.L164:
 1457              		.loc 1 843 0
 1458 0096 A846     		mov	r8, r5
 1459              	.L145:
 1460              	.LVL224:
 844:./Src/application.c **** }
 845:./Src/application.c **** 
 846:./Src/application.c **** // Scale Drive output due to Joystick Y input (throttle)
 847:./Src/application.c **** nMotPremixL = nMotPremixL * nJoyY/100.0;
 1461              		.loc 1 847 0
 1462 0098 3046     		mov	r0, r6
 1463 009a FFF7FEFF 		bl	__aeabi_i2f
 1464              	.LVL225:
 1465 009e 0746     		mov	r7, r0
 1466 00a0 0146     		mov	r1, r0
 1467 00a2 4846     		mov	r0, r9
 1468 00a4 FFF7FEFF 		bl	__aeabi_fmul
 1469              	.LVL226:
 1470 00a8 6749     		ldr	r1, .L171+4
 1471 00aa FFF7FEFF 		bl	__aeabi_fdiv
 1472              	.LVL227:
 1473 00ae 8346     		mov	fp, r0
 1474              	.LVL228:
 848:./Src/application.c **** nMotPremixR = nMotPremixR * nJoyY/100.0;
 1475              		.loc 1 848 0
 1476 00b0 3946     		mov	r1, r7
 1477 00b2 4046     		mov	r0, r8
 1478              	.LVL229:
 1479 00b4 FFF7FEFF 		bl	__aeabi_fmul
 1480              	.LVL230:
 1481 00b8 6349     		ldr	r1, .L171+4
 1482 00ba FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  /tmp/ccqooRvP.s 			page 42


 1483              	.LVL231:
 1484 00be 0746     		mov	r7, r0
 1485              	.LVL232:
 849:./Src/application.c **** 
 850:./Src/application.c **** // Now calculate pivot amount
 851:./Src/application.c **** // - Strength of pivot (nPivSpeed) based on Joystick X input
 852:./Src/application.c **** // - Blending of pivot vs drive (fPivScale) based on Joystick Y input
 853:./Src/application.c **** nPivSpeed = nJoyX*3; //************************************
 1486              		.loc 1 853 0
 1487 00c0 04EB4404 		add	r4, r4, r4, lsl #1
 1488              	.LVL233:
 854:./Src/application.c **** fPivScale = (abs(nJoyY)>fPivYLimit)? 0.0 : (1.0 - abs(nJoyY)/fPivYLimit);
 1489              		.loc 1 854 0
 1490 00c4 86EAE670 		eor	r0, r6, r6, asr #31
 1491              	.LVL234:
 1492 00c8 A0EBE670 		sub	r0, r0, r6, asr #31
 1493 00cc FFF7FEFF 		bl	__aeabi_i2f
 1494              	.LVL235:
 1495 00d0 0646     		mov	r6, r0
 1496              	.LVL236:
 1497 00d2 5E49     		ldr	r1, .L171+8
 1498 00d4 FFF7FEFF 		bl	__aeabi_fcmpgt
 1499              	.LVL237:
 1500 00d8 78B9     		cbnz	r0, .L165
 1501              		.loc 1 854 0 is_stmt 0 discriminator 2
 1502 00da 5C49     		ldr	r1, .L171+8
 1503 00dc 3046     		mov	r0, r6
 1504 00de FFF7FEFF 		bl	__aeabi_fdiv
 1505              	.LVL238:
 1506 00e2 FFF7FEFF 		bl	__aeabi_f2d
 1507              	.LVL239:
 1508 00e6 0246     		mov	r2, r0
 1509 00e8 0B46     		mov	r3, r1
 1510 00ea 0020     		movs	r0, #0
 1511 00ec 5849     		ldr	r1, .L171+12
 1512 00ee FFF7FEFF 		bl	__aeabi_dsub
 1513              	.LVL240:
 1514 00f2 FFF7FEFF 		bl	__aeabi_d2f
 1515              	.LVL241:
 1516 00f6 0646     		mov	r6, r0
 1517 00f8 00E0     		b	.L147
 1518              	.L165:
 1519              		.loc 1 854 0
 1520 00fa 0026     		movs	r6, #0
 1521              	.L147:
 1522              	.LVL242:
 855:./Src/application.c **** 
 856:./Src/application.c **** // Calculate final mix of Drive and Pivot
 857:./Src/application.c **** nMotMixL = (int)((1.0-fPivScale)*nMotPremixL + fPivScale*( nPivSpeed));
 1523              		.loc 1 857 0 is_stmt 1 discriminator 4
 1524 00fc 3046     		mov	r0, r6
 1525 00fe FFF7FEFF 		bl	__aeabi_f2d
 1526              	.LVL243:
 1527 0102 0246     		mov	r2, r0
 1528 0104 0B46     		mov	r3, r1
 1529 0106 0020     		movs	r0, #0
 1530 0108 5149     		ldr	r1, .L171+12
ARM GAS  /tmp/ccqooRvP.s 			page 43


 1531 010a FFF7FEFF 		bl	__aeabi_dsub
 1532              	.LVL244:
 1533 010e 8046     		mov	r8, r0
 1534 0110 8946     		mov	r9, r1
 1535 0112 5846     		mov	r0, fp
 1536 0114 FFF7FEFF 		bl	__aeabi_f2d
 1537              	.LVL245:
 1538 0118 4246     		mov	r2, r8
 1539 011a 4B46     		mov	r3, r9
 1540 011c FFF7FEFF 		bl	__aeabi_dmul
 1541              	.LVL246:
 1542 0120 CDE90001 		strd	r0, [sp]
 1543 0124 2046     		mov	r0, r4
 1544 0126 FFF7FEFF 		bl	__aeabi_i2f
 1545              	.LVL247:
 1546 012a 3146     		mov	r1, r6
 1547 012c FFF7FEFF 		bl	__aeabi_fmul
 1548              	.LVL248:
 1549 0130 FFF7FEFF 		bl	__aeabi_f2d
 1550              	.LVL249:
 1551 0134 DDE90023 		ldrd	r2, [sp]
 1552 0138 FFF7FEFF 		bl	__aeabi_dadd
 1553              	.LVL250:
 1554 013c FFF7FEFF 		bl	__aeabi_d2iz
 1555              	.LVL251:
 1556 0140 8346     		mov	fp, r0
 1557              	.LVL252:
 858:./Src/application.c **** nMotMixR = (int)((1.0-fPivScale)*nMotPremixR + fPivScale*(-nPivSpeed));
 1558              		.loc 1 858 0 discriminator 4
 1559 0142 3846     		mov	r0, r7
 1560              	.LVL253:
 1561 0144 FFF7FEFF 		bl	__aeabi_f2d
 1562              	.LVL254:
 1563 0148 4246     		mov	r2, r8
 1564 014a 4B46     		mov	r3, r9
 1565 014c FFF7FEFF 		bl	__aeabi_dmul
 1566              	.LVL255:
 1567 0150 8046     		mov	r8, r0
 1568 0152 8946     		mov	r9, r1
 1569 0154 6042     		negs	r0, r4
 1570 0156 FFF7FEFF 		bl	__aeabi_i2f
 1571              	.LVL256:
 1572 015a 3146     		mov	r1, r6
 1573 015c FFF7FEFF 		bl	__aeabi_fmul
 1574              	.LVL257:
 1575 0160 FFF7FEFF 		bl	__aeabi_f2d
 1576              	.LVL258:
 1577 0164 4246     		mov	r2, r8
 1578 0166 4B46     		mov	r3, r9
 1579 0168 FFF7FEFF 		bl	__aeabi_dadd
 1580              	.LVL259:
 1581 016c FFF7FEFF 		bl	__aeabi_d2iz
 1582              	.LVL260:
 859:./Src/application.c **** 
 860:./Src/application.c **** 
 861:./Src/application.c **** 
 862:./Src/application.c **** /*
ARM GAS  /tmp/ccqooRvP.s 			page 44


 863:./Src/application.c **** if((nMotMixL>0)&&(nMotMixR>0)){
 864:./Src/application.c ****   app.motATS = nMotMixL + FRICTION;
 865:./Src/application.c ****   app.motBTS = nMotMixR + FRICTION;
 866:./Src/application.c **** }else if ((nMotMixL<0)&&(nMotMixR<0)){
 867:./Src/application.c ****   app.motATS = nMotMixL - FRICTION;
 868:./Src/application.c ****   app.motBTS = nMotMixR - FRICTION;
 869:./Src/application.c **** }else{
 870:./Src/application.c ****   if((nMotMixL>0)&&(nMotMixR<0)){
 871:./Src/application.c ****     app.motATS = nMotMixL + FRICTION;
 872:./Src/application.c ****     app.motBTS = nMotMixR - FRICTION + FRICTION/2;
 873:./Src/application.c ****   }else if((nMotMixL<0)&&(nMotMixR>0)){
 874:./Src/application.c ****     app.motBTS = nMotMixR + FRICTION;
 875:./Src/application.c ****     app.motATS = nMotMixL - FRICTION  + FRICTION/2;
 876:./Src/application.c ****   }else{
 877:./Src/application.c ****     app.motATS = nMotMixL;
 878:./Src/application.c ****     app.motBTS = nMotMixR;
 879:./Src/application.c ****   }
 880:./Src/application.c **** }
 881:./Src/application.c **** */
 882:./Src/application.c **** 
 883:./Src/application.c **** app.motATS = nMotMixL;
 1583              		.loc 1 883 0 discriminator 4
 1584 0170 0FFA8BFB 		sxth	fp, fp
 1585              	.LVL261:
 1586 0174 374B     		ldr	r3, .L171+16
 1587 0176 A3F82CB0 		strh	fp, [r3, #44]	@ movhi
 884:./Src/application.c **** app.motBTS = nMotMixR;
 1588              		.loc 1 884 0 discriminator 4
 1589 017a 00B2     		sxth	r0, r0
 1590              	.LVL262:
 1591 017c D885     		strh	r0, [r3, #46]	@ movhi
 885:./Src/application.c **** 
 886:./Src/application.c ****       if(app.motATS >= 0){
 1592              		.loc 1 886 0 discriminator 4
 1593 017e 9B8D     		ldrh	r3, [r3, #44]
 1594 0180 13F4004F 		tst	r3, #32768
 1595 0184 15D1     		bne	.L148
 887:./Src/application.c ****         //0 ~ 100
 888:./Src/application.c ****         if(app.motATS > limitSup){
 1596              		.loc 1 888 0
 1597 0186 334B     		ldr	r3, .L171+16
 1598 0188 988D     		ldrh	r0, [r3, #44]
 1599 018a 00B2     		sxth	r0, r0
 1600 018c FFF7FEFF 		bl	__aeabi_i2f
 1601              	.LVL263:
 1602 0190 0146     		mov	r1, r0
 1603 0192 2846     		mov	r0, r5
 1604 0194 FFF7FEFF 		bl	__aeabi_fcmplt
 1605              	.LVL264:
 1606 0198 28B1     		cbz	r0, .L149
 889:./Src/application.c ****           app.motATS = (int16_t)limitSup;
 1607              		.loc 1 889 0
 1608 019a 2846     		mov	r0, r5
 1609 019c FFF7FEFF 		bl	__aeabi_f2iz
 1610              	.LVL265:
 1611 01a0 00B2     		sxth	r0, r0
 1612 01a2 2C4B     		ldr	r3, .L171+16
ARM GAS  /tmp/ccqooRvP.s 			page 45


 1613 01a4 9885     		strh	r0, [r3, #44]	@ movhi
 1614              	.L149:
 890:./Src/application.c ****         }
 891:./Src/application.c ****         MotorR_pwm(app.motATS);
 1615              		.loc 1 891 0
 1616 01a6 2B4B     		ldr	r3, .L171+16
 1617 01a8 988D     		ldrh	r0, [r3, #44]
 1618 01aa 00B2     		sxth	r0, r0
 1619 01ac FFF7FEFF 		bl	MotorR_pwm
 1620              	.LVL266:
 1621 01b0 14E0     		b	.L151
 1622              	.L148:
 892:./Src/application.c ****       }else{
 893:./Src/application.c ****         //0 ~ -100
 894:./Src/application.c ****         if(app.motATS < limitInf){
 1623              		.loc 1 894 0
 1624 01b2 284B     		ldr	r3, .L171+16
 1625 01b4 988D     		ldrh	r0, [r3, #44]
 1626 01b6 00B2     		sxth	r0, r0
 1627 01b8 FFF7FEFF 		bl	__aeabi_i2f
 1628              	.LVL267:
 1629 01bc 0146     		mov	r1, r0
 1630 01be 5046     		mov	r0, r10
 1631 01c0 FFF7FEFF 		bl	__aeabi_fcmpgt
 1632              	.LVL268:
 1633 01c4 28B1     		cbz	r0, .L152
 895:./Src/application.c ****           app.motATS = (int16_t)limitInf;
 1634              		.loc 1 895 0
 1635 01c6 5046     		mov	r0, r10
 1636 01c8 FFF7FEFF 		bl	__aeabi_f2iz
 1637              	.LVL269:
 1638 01cc 00B2     		sxth	r0, r0
 1639 01ce 214B     		ldr	r3, .L171+16
 1640 01d0 9885     		strh	r0, [r3, #44]	@ movhi
 1641              	.L152:
 896:./Src/application.c ****         }
 897:./Src/application.c ****         //app.motATS = app.motATS * -1;
 898:./Src/application.c ****         MotorR_pwm(app.motATS);
 1642              		.loc 1 898 0
 1643 01d2 204B     		ldr	r3, .L171+16
 1644 01d4 988D     		ldrh	r0, [r3, #44]
 1645 01d6 00B2     		sxth	r0, r0
 1646 01d8 FFF7FEFF 		bl	MotorR_pwm
 1647              	.LVL270:
 1648              	.L151:
 899:./Src/application.c ****       }
 900:./Src/application.c **** 
 901:./Src/application.c ****       if(app.motBTS >= 0){
 1649              		.loc 1 901 0
 1650 01dc 1D4B     		ldr	r3, .L171+16
 1651 01de DB8D     		ldrh	r3, [r3, #46]
 1652 01e0 13F4004F 		tst	r3, #32768
 1653 01e4 15D1     		bne	.L154
 902:./Src/application.c ****         //0 ~ 100
 903:./Src/application.c ****         if(app.motBTS > limitSup){
 1654              		.loc 1 903 0
 1655 01e6 1B4B     		ldr	r3, .L171+16
ARM GAS  /tmp/ccqooRvP.s 			page 46


 1656 01e8 D88D     		ldrh	r0, [r3, #46]
 1657 01ea 00B2     		sxth	r0, r0
 1658 01ec FFF7FEFF 		bl	__aeabi_i2f
 1659              	.LVL271:
 1660 01f0 0146     		mov	r1, r0
 1661 01f2 2846     		mov	r0, r5
 1662 01f4 FFF7FEFF 		bl	__aeabi_fcmplt
 1663              	.LVL272:
 1664 01f8 28B1     		cbz	r0, .L155
 904:./Src/application.c ****           app.motBTS = (int16_t)limitSup;
 1665              		.loc 1 904 0
 1666 01fa 2846     		mov	r0, r5
 1667 01fc FFF7FEFF 		bl	__aeabi_f2iz
 1668              	.LVL273:
 1669 0200 00B2     		sxth	r0, r0
 1670 0202 144B     		ldr	r3, .L171+16
 1671 0204 D885     		strh	r0, [r3, #46]	@ movhi
 1672              	.L155:
 905:./Src/application.c ****         }
 906:./Src/application.c ****         MotorL_pwm(app.motBTS );
 1673              		.loc 1 906 0
 1674 0206 134B     		ldr	r3, .L171+16
 1675 0208 D88D     		ldrh	r0, [r3, #46]
 1676 020a 00B2     		sxth	r0, r0
 1677 020c FFF7FEFF 		bl	MotorL_pwm
 1678              	.LVL274:
 1679 0210 14E0     		b	.L141
 1680              	.L154:
 907:./Src/application.c ****       }else{
 908:./Src/application.c ****         //0 ~ -100
 909:./Src/application.c ****         if(app.motBTS < limitInf){
 1681              		.loc 1 909 0
 1682 0212 104B     		ldr	r3, .L171+16
 1683 0214 D88D     		ldrh	r0, [r3, #46]
 1684 0216 00B2     		sxth	r0, r0
 1685 0218 FFF7FEFF 		bl	__aeabi_i2f
 1686              	.LVL275:
 1687 021c 0146     		mov	r1, r0
 1688 021e 5046     		mov	r0, r10
 1689 0220 FFF7FEFF 		bl	__aeabi_fcmpgt
 1690              	.LVL276:
 1691 0224 28B1     		cbz	r0, .L158
 910:./Src/application.c ****           app.motBTS = (int16_t)limitInf;
 1692              		.loc 1 910 0
 1693 0226 5046     		mov	r0, r10
 1694 0228 FFF7FEFF 		bl	__aeabi_f2iz
 1695              	.LVL277:
 1696 022c 00B2     		sxth	r0, r0
 1697 022e 094B     		ldr	r3, .L171+16
 1698 0230 D885     		strh	r0, [r3, #46]	@ movhi
 1699              	.L158:
 911:./Src/application.c ****         }
 912:./Src/application.c ****         //MOTOR_VALUE.motBTS = MOTOR_VALUE.motBTS * -1;
 913:./Src/application.c ****         MotorL_pwm(app.motBTS );
 1700              		.loc 1 913 0
 1701 0232 084B     		ldr	r3, .L171+16
 1702 0234 D88D     		ldrh	r0, [r3, #46]
ARM GAS  /tmp/ccqooRvP.s 			page 47


 1703 0236 00B2     		sxth	r0, r0
 1704 0238 FFF7FEFF 		bl	MotorL_pwm
 1705              	.LVL278:
 1706              	.L141:
 914:./Src/application.c ****       }
 915:./Src/application.c **** }
 1707              		.loc 1 915 0
 1708 023c 03B0     		add	sp, sp, #12
 1709              	.LCFI16:
 1710              		.cfi_def_cfa_offset 36
 1711              		@ sp needed
 1712 023e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1713              	.LVL279:
 1714              	.L172:
 1715 0242 00BF     		.align	2
 1716              	.L171:
 1717 0244 00007A44 		.word	1148846080
 1718 0248 0000C842 		.word	1120403456
 1719 024c 0000AA42 		.word	1118437376
 1720 0250 0000F03F 		.word	1072693248
 1721 0254 00000000 		.word	app
 1722 0258 00007AC4 		.word	-998637568
 1723              		.cfi_endproc
 1724              	.LFE81:
 1726              		.global	__aeabi_dcmpgt
 1727              		.global	__aeabi_fcmple
 1728              		.section	.text.applcation_TASK,"ax",%progbits
 1729              		.align	2
 1730              		.global	applcation_TASK
 1731              		.thumb
 1732              		.thumb_func
 1734              	applcation_TASK:
 1735              	.LFB68:
  70:./Src/application.c ****   uint8_t letture,temp8;
 1736              		.loc 1 70 0
 1737              		.cfi_startproc
 1738              		@ args = 0, pretend = 0, frame = 0
 1739              		@ frame_needed = 0, uses_anonymous_args = 0
 1740 0000 70B5     		push	{r4, r5, r6, lr}
 1741              	.LCFI17:
 1742              		.cfi_def_cfa_offset 16
 1743              		.cfi_offset 4, -16
 1744              		.cfi_offset 5, -12
 1745              		.cfi_offset 6, -8
 1746              		.cfi_offset 14, -4
  74:./Src/application.c ****     case app_init:
 1747              		.loc 1 74 0
 1748 0002 A54B     		ldr	r3, .L232+8
 1749 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1750 0006 DBB2     		uxtb	r3, r3
 1751 0008 042B     		cmp	r3, #4
 1752 000a 00F25F82 		bhi	.L174
 1753 000e DFE813F0 		tbh	[pc, r3, lsl #1]
 1754              	.L176:
 1755 0012 0500     		.2byte	(.L175-.L176)/2
 1756 0014 8300     		.2byte	(.L177-.L176)/2
 1757 0016 FD00     		.2byte	(.L178-.L176)/2
ARM GAS  /tmp/ccqooRvP.s 			page 48


 1758 0018 4F01     		.2byte	(.L179-.L176)/2
 1759 001a D401     		.2byte	(.L180-.L176)/2
 1760              		.p2align 1
 1761              	.L175:
  76:./Src/application.c ****       MotorL_stop();
 1762              		.loc 1 76 0
 1763 001c FFF7FEFF 		bl	MotorR_stop
 1764              	.LVL280:
  77:./Src/application.c ****       //Aspetta Center joystick e calcola la media
 1765              		.loc 1 77 0
 1766 0020 FFF7FEFF 		bl	MotorL_stop
 1767              	.LVL281:
  79:./Src/application.c ****       app.center_media_Y = 0.0;
 1768              		.loc 1 79 0
 1769 0024 9C4B     		ldr	r3, .L232+8
 1770 0026 0022     		movs	r2, #0
 1771 0028 DA61     		str	r2, [r3, #28]	@ float
  80:./Src/application.c ****       letture = 0;
 1772              		.loc 1 80 0
 1773 002a 1A62     		str	r2, [r3, #32]	@ float
 1774              	.LVL282:
  82:./Src/application.c ****       do{
 1775              		.loc 1 82 0
 1776 002c 0024     		movs	r4, #0
 1777 002e 9B4B     		ldr	r3, .L232+12
 1778 0030 1C71     		strb	r4, [r3, #4]
 1779              	.LVL283:
 1780              	.L185:
  84:./Src/application.c **** 
 1781              		.loc 1 84 0
 1782 0032 9B48     		ldr	r0, .L232+16
 1783 0034 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1784              	.LVL284:
  86:./Src/application.c ****         wii_JOYdati.done = 0;
 1785              		.loc 1 86 0
 1786 0038 01E0     		b	.L181
 1787              	.L182:
  86:./Src/application.c ****         wii_JOYdati.done = 0;
 1788              		.loc 1 86 0 is_stmt 0 discriminator 2
 1789 003a FFF7FEFF 		bl	WiiNunchuck_TASK
 1790              	.LVL285:
 1791              	.L181:
  86:./Src/application.c ****         wii_JOYdati.done = 0;
 1792              		.loc 1 86 0 discriminator 1
 1793 003e 974B     		ldr	r3, .L232+12
 1794 0040 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1795 0042 13F0FF0F 		tst	r3, #255
 1796 0046 F8D0     		beq	.L182
  87:./Src/application.c ****         if((wii_JOYdati.ay < 129) && (wii_JOYdati.ay > 124)){
 1797              		.loc 1 87 0 is_stmt 1
 1798 0048 944B     		ldr	r3, .L232+12
 1799 004a 0022     		movs	r2, #0
 1800 004c 1A71     		strb	r2, [r3, #4]
  88:./Src/application.c ****           letture++;
 1801              		.loc 1 88 0
 1802 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1803 0050 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccqooRvP.s 			page 49


 1804 0052 802B     		cmp	r3, #128
 1805 0054 12D8     		bhi	.L183
  88:./Src/application.c ****           letture++;
 1806              		.loc 1 88 0 is_stmt 0 discriminator 1
 1807 0056 914B     		ldr	r3, .L232+12
 1808 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1809 005a DBB2     		uxtb	r3, r3
 1810 005c 7C2B     		cmp	r3, #124
 1811 005e 0DD9     		bls	.L183
  89:./Src/application.c ****           temp8 = wii_JOYdati.ay;
 1812              		.loc 1 89 0 is_stmt 1
 1813 0060 0134     		adds	r4, r4, #1
 1814              	.LVL286:
 1815 0062 E4B2     		uxtb	r4, r4
 1816              	.LVL287:
  90:./Src/application.c ****           app.center_media_Y = app.center_media_Y + ((float)temp8);
 1817              		.loc 1 90 0
 1818 0064 8D4B     		ldr	r3, .L232+12
 1819 0066 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1820              	.LVL288:
  91:./Src/application.c ****         }else{
 1821              		.loc 1 91 0
 1822 0068 8B4D     		ldr	r5, .L232+8
 1823 006a 2E6A     		ldr	r6, [r5, #32]	@ float
 1824 006c FFF7FEFF 		bl	__aeabi_ui2f
 1825              	.LVL289:
 1826 0070 0146     		mov	r1, r0
 1827 0072 3046     		mov	r0, r6
 1828 0074 FFF7FEFF 		bl	__aeabi_fadd
 1829              	.LVL290:
 1830 0078 2862     		str	r0, [r5, #32]	@ float
 1831 007a 03E0     		b	.L184
 1832              	.L183:
 1833              	.LVL291:
  94:./Src/application.c ****         }
 1834              		.loc 1 94 0
 1835 007c 0022     		movs	r2, #0
 1836 007e 864B     		ldr	r3, .L232+8
 1837 0080 1A62     		str	r2, [r3, #32]	@ float
  93:./Src/application.c ****           app.center_media_Y = 0.0;
 1838              		.loc 1 93 0
 1839 0082 0024     		movs	r4, #0
 1840              	.LVL292:
 1841              	.L184:
  96:./Src/application.c ****       app.center_media_Y = app.center_media_Y / 50.0;
 1842              		.loc 1 96 0
 1843 0084 312C     		cmp	r4, #49
 1844 0086 D4D9     		bls	.L185
  97:./Src/application.c ****       letture = 0;
 1845              		.loc 1 97 0
 1846 0088 834C     		ldr	r4, .L232+8
 1847              	.LVL293:
 1848 008a 206A     		ldr	r0, [r4, #32]	@ float
 1849 008c 8549     		ldr	r1, .L232+20
 1850 008e FFF7FEFF 		bl	__aeabi_fdiv
 1851              	.LVL294:
 1852 0092 2062     		str	r0, [r4, #32]	@ float
ARM GAS  /tmp/ccqooRvP.s 			page 50


 1853              	.LVL295:
  99:./Src/application.c ****       do{
 1854              		.loc 1 99 0
 1855 0094 0024     		movs	r4, #0
 1856 0096 814B     		ldr	r3, .L232+12
 1857 0098 1C71     		strb	r4, [r3, #4]
 1858              	.LVL296:
 1859              	.L190:
 101:./Src/application.c **** 
 1860              		.loc 1 101 0
 1861 009a 8148     		ldr	r0, .L232+16
 1862 009c FFF7FEFF 		bl	HAL_IWDG_Refresh
 1863              	.LVL297:
 103:./Src/application.c ****         wii_JOYdati.done = 0;
 1864              		.loc 1 103 0
 1865 00a0 01E0     		b	.L186
 1866              	.L187:
 103:./Src/application.c ****         wii_JOYdati.done = 0;
 1867              		.loc 1 103 0 is_stmt 0 discriminator 2
 1868 00a2 FFF7FEFF 		bl	WiiNunchuck_TASK
 1869              	.LVL298:
 1870              	.L186:
 103:./Src/application.c ****         wii_JOYdati.done = 0;
 1871              		.loc 1 103 0 discriminator 1
 1872 00a6 7D4B     		ldr	r3, .L232+12
 1873 00a8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1874 00aa 13F0FF0F 		tst	r3, #255
 1875 00ae F8D0     		beq	.L187
 104:./Src/application.c ****         if((wii_JOYdati.ax < 129) && (wii_JOYdati.ax > 124)){
 1876              		.loc 1 104 0 is_stmt 1
 1877 00b0 7A4B     		ldr	r3, .L232+12
 1878 00b2 0022     		movs	r2, #0
 1879 00b4 1A71     		strb	r2, [r3, #4]
 105:./Src/application.c ****           letture++;
 1880              		.loc 1 105 0
 1881 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1882 00b8 DBB2     		uxtb	r3, r3
 1883 00ba 802B     		cmp	r3, #128
 1884 00bc 12D8     		bhi	.L188
 105:./Src/application.c ****           letture++;
 1885              		.loc 1 105 0 is_stmt 0 discriminator 1
 1886 00be 774B     		ldr	r3, .L232+12
 1887 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1888 00c2 DBB2     		uxtb	r3, r3
 1889 00c4 7C2B     		cmp	r3, #124
 1890 00c6 0DD9     		bls	.L188
 106:./Src/application.c ****           temp8 = wii_JOYdati.ax;
 1891              		.loc 1 106 0 is_stmt 1
 1892 00c8 0134     		adds	r4, r4, #1
 1893              	.LVL299:
 1894 00ca E4B2     		uxtb	r4, r4
 1895              	.LVL300:
 107:./Src/application.c ****           app.center_media_X = app.center_media_X + ((float)temp8);
 1896              		.loc 1 107 0
 1897 00cc 734B     		ldr	r3, .L232+12
 1898 00ce 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1899              	.LVL301:
ARM GAS  /tmp/ccqooRvP.s 			page 51


 108:./Src/application.c ****         }else{
 1900              		.loc 1 108 0
 1901 00d0 714D     		ldr	r5, .L232+8
 1902 00d2 EE69     		ldr	r6, [r5, #28]	@ float
 1903 00d4 FFF7FEFF 		bl	__aeabi_ui2f
 1904              	.LVL302:
 1905 00d8 0146     		mov	r1, r0
 1906 00da 3046     		mov	r0, r6
 1907 00dc FFF7FEFF 		bl	__aeabi_fadd
 1908              	.LVL303:
 1909 00e0 E861     		str	r0, [r5, #28]	@ float
 1910 00e2 03E0     		b	.L189
 1911              	.L188:
 1912              	.LVL304:
 111:./Src/application.c ****         }
 1913              		.loc 1 111 0
 1914 00e4 0022     		movs	r2, #0
 1915 00e6 6C4B     		ldr	r3, .L232+8
 1916 00e8 DA61     		str	r2, [r3, #28]	@ float
 110:./Src/application.c ****           app.center_media_X = 0.0;
 1917              		.loc 1 110 0
 1918 00ea 0024     		movs	r4, #0
 1919              	.LVL305:
 1920              	.L189:
 113:./Src/application.c ****       app.center_media_X = app.center_media_X / 50.0;
 1921              		.loc 1 113 0
 1922 00ec 312C     		cmp	r4, #49
 1923 00ee D4D9     		bls	.L190
 114:./Src/application.c **** 
 1924              		.loc 1 114 0
 1925 00f0 694C     		ldr	r4, .L232+8
 1926              	.LVL306:
 1927 00f2 E069     		ldr	r0, [r4, #28]	@ float
 1928 00f4 6B49     		ldr	r1, .L232+20
 1929 00f6 FFF7FEFF 		bl	__aeabi_fdiv
 1930              	.LVL307:
 1931 00fa E061     		str	r0, [r4, #28]	@ float
 116:./Src/application.c **** 
 1932              		.loc 1 116 0
 1933 00fc FFF7FEFF 		bl	accelleration_XY_Reset
 1934              	.LVL308:
 118:./Src/application.c ****       app.stato = app_soft_run;
 1935              		.loc 1 118 0
 1936 0100 FFF7FEFF 		bl	HAL_GetTick
 1937              	.LVL309:
 1938 0104 6060     		str	r0, [r4, #4]
 119:./Src/application.c ****       MotorR_start();
 1939              		.loc 1 119 0
 1940 0106 0123     		movs	r3, #1
 1941 0108 2370     		strb	r3, [r4]
 120:./Src/application.c ****       MotorL_start();
 1942              		.loc 1 120 0
 1943 010a FFF7FEFF 		bl	MotorR_start
 1944              	.LVL310:
 121:./Src/application.c **** 
 1945              		.loc 1 121 0
 1946 010e FFF7FEFF 		bl	MotorL_start
ARM GAS  /tmp/ccqooRvP.s 			page 52


 1947              	.LVL311:
 123:./Src/application.c **** 
 1948              		.loc 1 123 0
 1949 0112 FFF7FEFF 		bl	Buzzer_OneShortBeep
 1950              	.LVL312:
 125:./Src/application.c **** 
 1951              		.loc 1 125 0
 1952 0116 70BD     		pop	{r4, r5, r6, pc}
 1953              	.L177:
 129:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 1954              		.loc 1 129 0
 1955 0118 604D     		ldr	r5, .L232+12
 1956 011a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1957 011c FFF7FEFF 		bl	normalize_y
 1958              	.LVL313:
 1959 0120 5D4C     		ldr	r4, .L232+8
 1960 0122 A060     		str	r0, [r4, #8]	@ float
 130:./Src/application.c **** 
 1961              		.loc 1 130 0
 1962 0124 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1963 0126 FFF7FEFF 		bl	normalize_x
 1964              	.LVL314:
 1965 012a E060     		str	r0, [r4, #12]	@ float
 133:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 1966              		.loc 1 133 0
 1967 012c A068     		ldr	r0, [r4, #8]	@ float
 1968              	.LVL315:
 134:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 1969              		.loc 1 134 0
 1970 012e 5E4E     		ldr	r6, .L232+24
 1971 0130 3168     		ldr	r1, [r6]	@ float
 1972              	.LVL316:
 135:./Src/application.c ****       tempf1 = app.axn;
 1973              		.loc 1 135 0
 1974 0132 FFF7FEFF 		bl	scale_y
 1975              	.LVL317:
 1976 0136 A060     		str	r0, [r4, #8]	@ float
 136:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 1977              		.loc 1 136 0
 1978 0138 E068     		ldr	r0, [r4, #12]	@ float
 1979              	.LVL318:
 137:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 1980              		.loc 1 137 0
 1981 013a 3168     		ldr	r1, [r6]	@ float
 1982              	.LVL319:
 138:./Src/application.c **** 
 1983              		.loc 1 138 0
 1984 013c FFF7FEFF 		bl	scale_x
 1985              	.LVL320:
 1986 0140 E060     		str	r0, [r4, #12]	@ float
 140:./Src/application.c ****       app.axn = accellerationX(app.axn);
 1987              		.loc 1 140 0
 1988 0142 A068     		ldr	r0, [r4, #8]	@ float
 1989 0144 FFF7FEFF 		bl	accellerationY
 1990              	.LVL321:
 1991 0148 A060     		str	r0, [r4, #8]	@ float
 141:./Src/application.c **** 
ARM GAS  /tmp/ccqooRvP.s 			page 53


 1992              		.loc 1 141 0
 1993 014a E068     		ldr	r0, [r4, #12]	@ float
 1994 014c FFF7FEFF 		bl	accellerationX
 1995              	.LVL322:
 1996 0150 E060     		str	r0, [r4, #12]	@ float
 143:./Src/application.c ****       tempf2 = app.axn;
 1997              		.loc 1 143 0
 1998 0152 A068     		ldr	r0, [r4, #8]	@ float
 1999              	.LVL323:
 144:./Src/application.c **** 
 2000              		.loc 1 144 0
 2001 0154 E168     		ldr	r1, [r4, #12]	@ float
 2002              	.LVL324:
 146:./Src/application.c **** 
 2003              		.loc 1 146 0
 2004 0156 3268     		ldr	r2, [r6]	@ float
 2005 0158 0023     		movs	r3, #0
 2006 015a FFF7FEFF 		bl	go_motor
 2007              	.LVL325:
 149:./Src/application.c ****       if((wii_JOYdati.bz == 0)&&((((float)temp8 - app.center_media_Y) > 4.0))&&(telemetry.dataREADY
 2008              		.loc 1 149 0
 2009 015e 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 2010 0160 D8B2     		uxtb	r0, r3
 2011              	.LVL326:
 150:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 2012              		.loc 1 150 0
 2013 0162 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 2014 0164 13F0FF0F 		tst	r3, #255
 2015 0168 1FD1     		bne	.L192
 150:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 2016              		.loc 1 150 0 is_stmt 0 discriminator 1
 2017 016a FFF7FEFF 		bl	__aeabi_ui2f
 2018              	.LVL327:
 2019 016e 216A     		ldr	r1, [r4, #32]	@ float
 2020 0170 FFF7FEFF 		bl	__aeabi_fsub
 2021              	.LVL328:
 2022 0174 4FF08141 		mov	r1, #1082130432
 2023 0178 FFF7FEFF 		bl	__aeabi_fcmpgt
 2024              	.LVL329:
 2025 017c A8B1     		cbz	r0, .L192
 150:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 2026              		.loc 1 150 0 discriminator 2
 2027 017e 4B4B     		ldr	r3, .L232+28
 2028 0180 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2029 0182 13F0FF0F 		tst	r3, #255
 2030 0186 10D1     		bne	.L192
 151:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 2031              		.loc 1 151 0 is_stmt 1
 2032 0188 FFF7FEFF 		bl	HAL_GetTick
 2033              	.LVL330:
 2034 018c 6368     		ldr	r3, [r4, #4]
 2035 018e C01A     		subs	r0, r0, r3
 2036 0190 B0F57A7F 		cmp	r0, #1000
 2037 0194 0DD3     		bcc	.L194
 152:./Src/application.c ****             app.stato = app_soft_run_nohand;
 2038              		.loc 1 152 0
 2039 0196 0023     		movs	r3, #0
ARM GAS  /tmp/ccqooRvP.s 			page 54


 2040 0198 A361     		str	r3, [r4, #24]	@ float
 153:./Src/application.c ****             app.tcruise_decrement = HAL_GetTick();
 2041              		.loc 1 153 0
 2042 019a 0323     		movs	r3, #3
 2043 019c 2370     		strb	r3, [r4]
 154:./Src/application.c ****             Buzzer_OneShortBeep();
 2044              		.loc 1 154 0
 2045 019e FFF7FEFF 		bl	HAL_GetTick
 2046              	.LVL331:
 2047 01a2 2061     		str	r0, [r4, #16]
 155:./Src/application.c ****         }
 2048              		.loc 1 155 0
 2049 01a4 FFF7FEFF 		bl	Buzzer_OneShortBeep
 2050              	.LVL332:
 2051 01a8 03E0     		b	.L194
 2052              	.L192:
 158:./Src/application.c ****       }
 2053              		.loc 1 158 0
 2054 01aa FFF7FEFF 		bl	HAL_GetTick
 2055              	.LVL333:
 2056 01ae 3A4B     		ldr	r3, .L232+8
 2057 01b0 5860     		str	r0, [r3, #4]
 2058              	.L194:
 161:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 2059              		.loc 1 161 0
 2060 01b2 3E4B     		ldr	r3, .L232+28
 2061 01b4 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2062 01b6 13F0FF0F 		tst	r3, #255
 2063 01ba 11D0     		beq	.L195
 162:./Src/application.c ****         if(telemetry.dataLast_Command == 'R'){
 2064              		.loc 1 162 0
 2065 01bc 3B4B     		ldr	r3, .L232+28
 2066 01be 0022     		movs	r2, #0
 2067 01c0 5A75     		strb	r2, [r3, #21]
 163:./Src/application.c ****           app.stato = app_soft_ANDROIDAPP;
 2068              		.loc 1 163 0
 2069 01c2 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2070 01c4 DBB2     		uxtb	r3, r3
 2071 01c6 522B     		cmp	r3, #82
 2072 01c8 07D1     		bne	.L196
 164:./Src/application.c ****           app.tAndroidAPP = HAL_GetTick();
 2073              		.loc 1 164 0
 2074 01ca 334C     		ldr	r4, .L232+8
 2075 01cc 0423     		movs	r3, #4
 2076 01ce 2370     		strb	r3, [r4]
 165:./Src/application.c ****           accelleration_XY_Reset();
 2077              		.loc 1 165 0
 2078 01d0 FFF7FEFF 		bl	HAL_GetTick
 2079              	.LVL334:
 2080 01d4 6061     		str	r0, [r4, #20]
 166:./Src/application.c ****         }
 2081              		.loc 1 166 0
 2082 01d6 FFF7FEFF 		bl	accelleration_XY_Reset
 2083              	.LVL335:
 2084              	.L196:
 168:./Src/application.c ****       }
 2085              		.loc 1 168 0
ARM GAS  /tmp/ccqooRvP.s 			page 55


 2086 01da 0022     		movs	r2, #0
 2087 01dc 334B     		ldr	r3, .L232+28
 2088 01de 9A75     		strb	r2, [r3, #22]
 2089              	.L195:
 171:./Src/application.c ****           app.stato = app_hard_run;
 2090              		.loc 1 171 0
 2091 01e0 2E4B     		ldr	r3, .L232+12
 2092 01e2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2093 01e4 13F0FF0F 		tst	r3, #255
 2094 01e8 40F07781 		bne	.L173
 171:./Src/application.c ****           app.stato = app_hard_run;
 2095              		.loc 1 171 0 is_stmt 0 discriminator 1
 2096 01ec 2B4B     		ldr	r3, .L232+12
 2097 01ee DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2098 01f0 DBB2     		uxtb	r3, r3
 2099 01f2 012B     		cmp	r3, #1
 2100 01f4 40F07181 		bne	.L173
 171:./Src/application.c ****           app.stato = app_hard_run;
 2101              		.loc 1 171 0 discriminator 2
 2102 01f8 2C4B     		ldr	r3, .L232+28
 2103 01fa 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2104 01fc 13F0FF0F 		tst	r3, #255
 2105 0200 40F06B81 		bne	.L173
 172:./Src/application.c ****           //accelleration_XY_Reset();     //??????
 2106              		.loc 1 172 0 is_stmt 1
 2107 0204 0222     		movs	r2, #2
 2108 0206 244B     		ldr	r3, .L232+8
 2109 0208 1A70     		strb	r2, [r3]
 2110 020a 70BD     		pop	{r4, r5, r6, pc}
 2111              	.L178:
 179:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 2112              		.loc 1 179 0
 2113 020c 234D     		ldr	r5, .L232+12
 2114 020e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2115 0210 FFF7FEFF 		bl	normalize_y
 2116              	.LVL336:
 2117 0214 204C     		ldr	r4, .L232+8
 2118 0216 A060     		str	r0, [r4, #8]	@ float
 180:./Src/application.c **** 
 2119              		.loc 1 180 0
 2120 0218 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2121 021a FFF7FEFF 		bl	normalize_x
 2122              	.LVL337:
 2123 021e E060     		str	r0, [r4, #12]	@ float
 183:./Src/application.c ****       app.ayn = tempf1;
 2124              		.loc 1 183 0
 2125 0220 A068     		ldr	r0, [r4, #8]	@ float
 2126 0222 FFF7FEFF 		bl	__aeabi_f2d
 2127              	.LVL338:
 2128 0226 1AA3     		adr	r3, .L232
 2129 0228 D3E90023 		ldrd	r2, [r3]
 2130 022c FFF7FEFF 		bl	__aeabi_dmul
 2131              	.LVL339:
 2132 0230 FFF7FEFF 		bl	__aeabi_d2f
 2133              	.LVL340:
 184:./Src/application.c ****       tempf2 = app.axn * 0.90;
 2134              		.loc 1 184 0
ARM GAS  /tmp/ccqooRvP.s 			page 56


 2135 0234 A060     		str	r0, [r4, #8]	@ float
 185:./Src/application.c ****       //tempf2 = battery_dati.VBatt;
 2136              		.loc 1 185 0
 2137 0236 E068     		ldr	r0, [r4, #12]	@ float
 2138              	.LVL341:
 2139 0238 FFF7FEFF 		bl	__aeabi_f2d
 2140              	.LVL342:
 2141 023c 14A3     		adr	r3, .L232
 2142 023e D3E90023 		ldrd	r2, [r3]
 2143 0242 FFF7FEFF 		bl	__aeabi_dmul
 2144              	.LVL343:
 2145 0246 FFF7FEFF 		bl	__aeabi_d2f
 2146              	.LVL344:
 187:./Src/application.c **** 
 2147              		.loc 1 187 0
 2148 024a E060     		str	r0, [r4, #12]	@ float
 189:./Src/application.c ****       app.axn = accellerationXHARD(app.axn);
 2149              		.loc 1 189 0
 2150 024c A068     		ldr	r0, [r4, #8]	@ float
 2151              	.LVL345:
 2152 024e FFF7FEFF 		bl	accellerationYHARD
 2153              	.LVL346:
 2154 0252 A060     		str	r0, [r4, #8]	@ float
 190:./Src/application.c **** 
 2155              		.loc 1 190 0
 2156 0254 E068     		ldr	r0, [r4, #12]	@ float
 2157 0256 FFF7FEFF 		bl	accellerationXHARD
 2158              	.LVL347:
 2159 025a E060     		str	r0, [r4, #12]	@ float
 192:./Src/application.c ****       tempf2 = app.axn;
 2160              		.loc 1 192 0
 2161 025c A568     		ldr	r5, [r4, #8]	@ float
 2162              	.LVL348:
 193:./Src/application.c ****       if(tempf1 < 0){
 2163              		.loc 1 193 0
 2164 025e E468     		ldr	r4, [r4, #12]	@ float
 2165              	.LVL349:
 194:./Src/application.c ****         tempf1 = 0;
 2166              		.loc 1 194 0
 2167 0260 0021     		movs	r1, #0
 2168 0262 2846     		mov	r0, r5
 2169 0264 FFF7FEFF 		bl	__aeabi_fcmplt
 2170              	.LVL350:
 2171 0268 00B1     		cbz	r0, .L197
 195:./Src/application.c ****       }
 2172              		.loc 1 195 0
 2173 026a 0025     		movs	r5, #0
 2174              	.LVL351:
 2175              	.L197:
 197:./Src/application.c **** 
 2176              		.loc 1 197 0
 2177 026c 0E4B     		ldr	r3, .L232+24
 2178 026e 1A68     		ldr	r2, [r3]	@ float
 2179 0270 0123     		movs	r3, #1
 2180 0272 2146     		mov	r1, r4
 2181 0274 2846     		mov	r0, r5
 2182 0276 FFF7FEFF 		bl	go_motor
ARM GAS  /tmp/ccqooRvP.s 			page 57


 2183              	.LVL352:
 200:./Src/application.c ****           //MotorR_stop();
 2184              		.loc 1 200 0
 2185 027a 084B     		ldr	r3, .L232+12
 2186 027c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2187 027e DBB2     		uxtb	r3, r3
 2188 0280 012B     		cmp	r3, #1
 2189 0282 40F02A81 		bne	.L173
 204:./Src/application.c ****       }
 2190              		.loc 1 204 0
 2191 0286 0122     		movs	r2, #1
 2192 0288 034B     		ldr	r3, .L232+8
 2193 028a 1A70     		strb	r2, [r3]
 2194 028c 70BD     		pop	{r4, r5, r6, pc}
 2195              	.LVL353:
 2196              	.L233:
 2197 028e 00BF     		.align	3
 2198              	.L232:
 2199 0290 CDCCCCCC 		.word	-858993459
 2200 0294 CCCCEC3F 		.word	1072483532
 2201 0298 00000000 		.word	app
 2202 029c 00000000 		.word	wii_JOYdati
 2203 02a0 00000000 		.word	hiwdg
 2204 02a4 00004842 		.word	1112014848
 2205 02a8 00000000 		.word	battery_dati
 2206 02ac 00000000 		.word	telemetry
 2207              	.L179:
 209:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 2208              		.loc 1 209 0
 2209 02b0 8A4D     		ldr	r5, .L234
 2210 02b2 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2211 02b4 FFF7FEFF 		bl	normalize_y
 2212              	.LVL354:
 2213 02b8 894C     		ldr	r4, .L234+4
 2214 02ba A060     		str	r0, [r4, #8]	@ float
 210:./Src/application.c **** 
 2215              		.loc 1 210 0
 2216 02bc 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2217 02be FFF7FEFF 		bl	normalize_x
 2218              	.LVL355:
 2219 02c2 E060     		str	r0, [r4, #12]	@ float
 213:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2220              		.loc 1 213 0
 2221 02c4 A068     		ldr	r0, [r4, #8]	@ float
 2222              	.LVL356:
 214:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 2223              		.loc 1 214 0
 2224 02c6 874D     		ldr	r5, .L234+8
 2225 02c8 2968     		ldr	r1, [r5]	@ float
 2226              	.LVL357:
 215:./Src/application.c ****       tempf1 = app.axn;
 2227              		.loc 1 215 0
 2228 02ca FFF7FEFF 		bl	scale_y
 2229              	.LVL358:
 2230 02ce A060     		str	r0, [r4, #8]	@ float
 216:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2231              		.loc 1 216 0
ARM GAS  /tmp/ccqooRvP.s 			page 58


 2232 02d0 E068     		ldr	r0, [r4, #12]	@ float
 2233              	.LVL359:
 217:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 2234              		.loc 1 217 0
 2235 02d2 2968     		ldr	r1, [r5]	@ float
 2236              	.LVL360:
 218:./Src/application.c **** 
 2237              		.loc 1 218 0
 2238 02d4 FFF7FEFF 		bl	scale_x
 2239              	.LVL361:
 2240 02d8 E060     		str	r0, [r4, #12]	@ float
 220:./Src/application.c ****       app.axn = accellerationX(app.axn);
 2241              		.loc 1 220 0
 2242 02da A068     		ldr	r0, [r4, #8]	@ float
 2243 02dc FFF7FEFF 		bl	accellerationY
 2244              	.LVL362:
 2245 02e0 A060     		str	r0, [r4, #8]	@ float
 221:./Src/application.c **** 
 2246              		.loc 1 221 0
 2247 02e2 E068     		ldr	r0, [r4, #12]	@ float
 2248 02e4 FFF7FEFF 		bl	accellerationX
 2249              	.LVL363:
 2250 02e8 E060     		str	r0, [r4, #12]	@ float
 224:./Src/application.c ****         tempf1 = app.cruise_soft_run_nohand;
 2251              		.loc 1 224 0
 2252 02ea A068     		ldr	r0, [r4, #8]	@ float
 2253 02ec 7E49     		ldr	r1, .L234+12
 2254 02ee FFF7FEFF 		bl	__aeabi_fcmpgt
 2255              	.LVL364:
 2256 02f2 C8B1     		cbz	r0, .L198
 225:./Src/application.c ****         if((app.ayn - 5.0) > tempf1){
 2257              		.loc 1 225 0
 2258 02f4 A669     		ldr	r6, [r4, #24]	@ float
 2259              	.LVL365:
 226:./Src/application.c ****           app.cruise_soft_run_nohand = app.ayn - 5.0;
 2260              		.loc 1 226 0
 2261 02f6 A068     		ldr	r0, [r4, #8]	@ float
 2262 02f8 FFF7FEFF 		bl	__aeabi_f2d
 2263              	.LVL366:
 2264 02fc 0022     		movs	r2, #0
 2265 02fe 7B4B     		ldr	r3, .L234+16
 2266 0300 FFF7FEFF 		bl	__aeabi_dsub
 2267              	.LVL367:
 2268 0304 0446     		mov	r4, r0
 2269 0306 0D46     		mov	r5, r1
 2270 0308 3046     		mov	r0, r6
 2271 030a FFF7FEFF 		bl	__aeabi_f2d
 2272              	.LVL368:
 2273 030e 0246     		mov	r2, r0
 2274 0310 0B46     		mov	r3, r1
 2275 0312 2046     		mov	r0, r4
 2276 0314 2946     		mov	r1, r5
 2277 0316 FFF7FEFF 		bl	__aeabi_dcmpgt
 2278              	.LVL369:
 2279 031a 28B1     		cbz	r0, .L198
 227:./Src/application.c ****         }
 2280              		.loc 1 227 0
ARM GAS  /tmp/ccqooRvP.s 			page 59


 2281 031c 704C     		ldr	r4, .L234+4
 2282 031e A068     		ldr	r0, [r4, #8]	@ float
 2283 0320 7149     		ldr	r1, .L234+12
 2284 0322 FFF7FEFF 		bl	__aeabi_fsub
 2285              	.LVL370:
 2286 0326 A061     		str	r0, [r4, #24]	@ float
 2287              	.LVL371:
 2288              	.L198:
 231:./Src/application.c ****         //con time step
 2289              		.loc 1 231 0
 2290 0328 6D4B     		ldr	r3, .L234+4
 2291 032a 9868     		ldr	r0, [r3, #8]	@ float
 2292 032c 7049     		ldr	r1, .L234+20
 2293 032e FFF7FEFF 		bl	__aeabi_fcmplt
 2294              	.LVL372:
 2295 0332 00B3     		cbz	r0, .L201
 231:./Src/application.c ****         //con time step
 2296              		.loc 1 231 0 is_stmt 0 discriminator 1
 2297 0334 6A4B     		ldr	r3, .L234+4
 2298 0336 9868     		ldr	r0, [r3, #8]	@ float
 2299 0338 6E49     		ldr	r1, .L234+24
 2300 033a FFF7FEFF 		bl	__aeabi_fcmpgt
 2301              	.LVL373:
 2302 033e D0B1     		cbz	r0, .L201
 233:./Src/application.c ****           tempf1 = app.ayn / 10.0;
 2303              		.loc 1 233 0 is_stmt 1
 2304 0340 FFF7FEFF 		bl	HAL_GetTick
 2305              	.LVL374:
 2306 0344 664B     		ldr	r3, .L234+4
 2307 0346 1B69     		ldr	r3, [r3, #16]
 2308 0348 C01A     		subs	r0, r0, r3
 2309 034a FA28     		cmp	r0, #250
 2310 034c 13D9     		bls	.L201
 234:./Src/application.c ****           app.cruise_soft_run_nohand = app.cruise_soft_run_nohand + tempf1;                //STEP D
 2311              		.loc 1 234 0
 2312 034e 644C     		ldr	r4, .L234+4
 2313 0350 A068     		ldr	r0, [r4, #8]	@ float
 2314 0352 6949     		ldr	r1, .L234+28
 2315 0354 FFF7FEFF 		bl	__aeabi_fdiv
 2316              	.LVL375:
 235:./Src/application.c ****           if(app.cruise_soft_run_nohand < 0.0){
 2317              		.loc 1 235 0
 2318 0358 A169     		ldr	r1, [r4, #24]	@ float
 2319 035a FFF7FEFF 		bl	__aeabi_fadd
 2320              	.LVL376:
 2321 035e A061     		str	r0, [r4, #24]	@ float
 236:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 2322              		.loc 1 236 0
 2323 0360 A069     		ldr	r0, [r4, #24]	@ float
 2324 0362 0021     		movs	r1, #0
 2325 0364 FFF7FEFF 		bl	__aeabi_fcmplt
 2326              	.LVL377:
 2327 0368 08B1     		cbz	r0, .L204
 237:./Src/application.c ****           }
 2328              		.loc 1 237 0
 2329 036a 0022     		movs	r2, #0
 2330 036c A261     		str	r2, [r4, #24]	@ float
ARM GAS  /tmp/ccqooRvP.s 			page 60


 2331              	.L204:
 239:./Src/application.c ****         }
 2332              		.loc 1 239 0
 2333 036e FFF7FEFF 		bl	HAL_GetTick
 2334              	.LVL378:
 2335 0372 5B4B     		ldr	r3, .L234+4
 2336 0374 1861     		str	r0, [r3, #16]
 2337              	.L201:
 243:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 2338              		.loc 1 243 0
 2339 0376 5A4B     		ldr	r3, .L234+4
 2340 0378 9868     		ldr	r0, [r3, #8]	@ float
 2341 037a 5E49     		ldr	r1, .L234+24
 2342 037c FFF7FEFF 		bl	__aeabi_fcmple
 2343              	.LVL379:
 2344 0380 90B1     		cbz	r0, .L230
 244:./Src/application.c ****         MotorR_stop();
 2345              		.loc 1 244 0
 2346 0382 584B     		ldr	r3, .L234+8
 2347 0384 1A68     		ldr	r2, [r3]	@ float
 2348 0386 0024     		movs	r4, #0
 2349 0388 0023     		movs	r3, #0
 2350 038a 2146     		mov	r1, r4
 2351 038c 2046     		mov	r0, r4
 2352 038e FFF7FEFF 		bl	go_motor
 2353              	.LVL380:
 245:./Src/application.c ****         MotorL_stop();
 2354              		.loc 1 245 0
 2355 0392 FFF7FEFF 		bl	MotorR_stop
 2356              	.LVL381:
 246:./Src/application.c ****         accelleration_XY_Reset();
 2357              		.loc 1 246 0
 2358 0396 FFF7FEFF 		bl	MotorL_stop
 2359              	.LVL382:
 247:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 2360              		.loc 1 247 0
 2361 039a FFF7FEFF 		bl	accelleration_XY_Reset
 2362              	.LVL383:
 248:./Src/application.c ****         app.stato = app_init;
 2363              		.loc 1 248 0
 2364 039e 504B     		ldr	r3, .L234+4
 2365 03a0 9C61     		str	r4, [r3, #24]	@ float
 249:./Src/application.c ****         break;
 2366              		.loc 1 249 0
 2367 03a2 0022     		movs	r2, #0
 2368 03a4 1A70     		strb	r2, [r3]
 250:./Src/application.c ****       }
 2369              		.loc 1 250 0
 2370 03a6 70BD     		pop	{r4, r5, r6, pc}
 2371              	.L230:
 252:./Src/application.c ****       tempf2 = app.axn;
 2372              		.loc 1 252 0
 2373 03a8 4D4B     		ldr	r3, .L234+4
 2374 03aa 9869     		ldr	r0, [r3, #24]	@ float
 2375              	.LVL384:
 253:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 2376              		.loc 1 253 0
ARM GAS  /tmp/ccqooRvP.s 			page 61


 2377 03ac D968     		ldr	r1, [r3, #12]	@ float
 2378              	.LVL385:
 254:./Src/application.c ****     break;
 2379              		.loc 1 254 0
 2380 03ae 4D4B     		ldr	r3, .L234+8
 2381 03b0 1A68     		ldr	r2, [r3]	@ float
 2382 03b2 0023     		movs	r3, #0
 2383 03b4 FFF7FEFF 		bl	go_motor
 2384              	.LVL386:
 255:./Src/application.c **** 
 2385              		.loc 1 255 0
 2386 03b8 70BD     		pop	{r4, r5, r6, pc}
 2387              	.L180:
 259:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 2388              		.loc 1 259 0
 2389 03ba 504B     		ldr	r3, .L234+32
 2390 03bc 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2391 03be 13F0FF0F 		tst	r3, #255
 2392 03c2 17D0     		beq	.L208
 260:./Src/application.c ****         app.tAndroidAPP = HAL_GetTick();
 2393              		.loc 1 260 0
 2394 03c4 4D4C     		ldr	r4, .L234+32
 2395 03c6 0023     		movs	r3, #0
 2396 03c8 6375     		strb	r3, [r4, #21]
 261:./Src/application.c ****         if(telemetry.dataLast_Command == 'F'){
 2397              		.loc 1 261 0
 2398 03ca FFF7FEFF 		bl	HAL_GetTick
 2399              	.LVL387:
 2400 03ce 444B     		ldr	r3, .L234+4
 2401 03d0 5861     		str	r0, [r3, #20]
 262:./Src/application.c ****           MotorR_stop();
 2402              		.loc 1 262 0
 2403 03d2 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 2404 03d4 DBB2     		uxtb	r3, r3
 2405 03d6 462B     		cmp	r3, #70
 2406 03d8 0CD1     		bne	.L208
 263:./Src/application.c ****           MotorL_stop();
 2407              		.loc 1 263 0
 2408 03da FFF7FEFF 		bl	MotorR_stop
 2409              	.LVL388:
 264:./Src/application.c ****           accelleration_XY_Reset();
 2410              		.loc 1 264 0
 2411 03de FFF7FEFF 		bl	MotorL_stop
 2412              	.LVL389:
 265:./Src/application.c ****           app.cruise_soft_run_nohand = 0.0;
 2413              		.loc 1 265 0
 2414 03e2 FFF7FEFF 		bl	accelleration_XY_Reset
 2415              	.LVL390:
 266:./Src/application.c ****           app.stato = app_init;
 2416              		.loc 1 266 0
 2417 03e6 3E4A     		ldr	r2, .L234+4
 2418 03e8 0023     		movs	r3, #0
 2419 03ea 9361     		str	r3, [r2, #24]	@ float
 267:./Src/application.c ****           telemetry.dataLast_Command = 0;
 2420              		.loc 1 267 0
 2421 03ec 0023     		movs	r3, #0
 2422 03ee 1370     		strb	r3, [r2]
ARM GAS  /tmp/ccqooRvP.s 			page 62


 268:./Src/application.c ****           break;
 2423              		.loc 1 268 0
 2424 03f0 A375     		strb	r3, [r4, #22]
 269:./Src/application.c ****         }
 2425              		.loc 1 269 0
 2426 03f2 70BD     		pop	{r4, r5, r6, pc}
 2427              	.L208:
 272:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 2428              		.loc 1 272 0
 2429 03f4 FFF7FEFF 		bl	HAL_GetTick
 2430              	.LVL391:
 2431 03f8 394B     		ldr	r3, .L234+4
 2432 03fa 5B69     		ldr	r3, [r3, #20]
 2433 03fc C01A     		subs	r0, r0, r3
 2434 03fe B0F5FA7F 		cmp	r0, #500
 2435 0402 10D9     		bls	.L209
 273:./Src/application.c ****         MotorR_stop();
 2436              		.loc 1 273 0
 2437 0404 374B     		ldr	r3, .L234+8
 2438 0406 1A68     		ldr	r2, [r3]	@ float
 2439 0408 0024     		movs	r4, #0
 2440 040a 0023     		movs	r3, #0
 2441 040c 2146     		mov	r1, r4
 2442 040e 2046     		mov	r0, r4
 2443 0410 FFF7FEFF 		bl	go_motor
 2444              	.LVL392:
 274:./Src/application.c ****         MotorL_stop();
 2445              		.loc 1 274 0
 2446 0414 FFF7FEFF 		bl	MotorR_stop
 2447              	.LVL393:
 275:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 2448              		.loc 1 275 0
 2449 0418 FFF7FEFF 		bl	MotorL_stop
 2450              	.LVL394:
 276:./Src/application.c ****         app.stato = app_init;
 2451              		.loc 1 276 0
 2452 041c 304B     		ldr	r3, .L234+4
 2453 041e 9C61     		str	r4, [r3, #24]	@ float
 277:./Src/application.c ****         break;
 2454              		.loc 1 277 0
 2455 0420 0022     		movs	r2, #0
 2456 0422 1A70     		strb	r2, [r3]
 278:./Src/application.c ****       }
 2457              		.loc 1 278 0
 2458 0424 70BD     		pop	{r4, r5, r6, pc}
 2459              	.L209:
 282:./Src/application.c ****       app.axn = (float)telemetry.joyx;
 2460              		.loc 1 282 0
 2461 0426 354D     		ldr	r5, .L234+32
 2462 0428 688B     		ldrh	r0, [r5, #26]
 2463 042a 00B2     		sxth	r0, r0
 2464 042c FFF7FEFF 		bl	__aeabi_i2f
 2465              	.LVL395:
 2466 0430 2B4C     		ldr	r4, .L234+4
 2467 0432 A060     		str	r0, [r4, #8]	@ float
 283:./Src/application.c ****       if(app.ayn > 300.0){
 2468              		.loc 1 283 0
ARM GAS  /tmp/ccqooRvP.s 			page 63


 2469 0434 288B     		ldrh	r0, [r5, #24]
 2470 0436 00B2     		sxth	r0, r0
 2471 0438 FFF7FEFF 		bl	__aeabi_i2f
 2472              	.LVL396:
 2473 043c E060     		str	r0, [r4, #12]	@ float
 284:./Src/application.c ****         app.ayn = 300.0;
 2474              		.loc 1 284 0
 2475 043e A068     		ldr	r0, [r4, #8]	@ float
 2476 0440 2F49     		ldr	r1, .L234+36
 2477 0442 FFF7FEFF 		bl	__aeabi_fcmpgt
 2478              	.LVL397:
 2479 0446 08B1     		cbz	r0, .L210
 285:./Src/application.c ****       }
 2480              		.loc 1 285 0
 2481 0448 2D4A     		ldr	r2, .L234+36
 2482 044a A260     		str	r2, [r4, #8]	@ float
 2483              	.L210:
 287:./Src/application.c ****         app.axn = 300.0;
 2484              		.loc 1 287 0
 2485 044c 244B     		ldr	r3, .L234+4
 2486 044e D868     		ldr	r0, [r3, #12]	@ float
 2487 0450 2B49     		ldr	r1, .L234+36
 2488 0452 FFF7FEFF 		bl	__aeabi_fcmpgt
 2489              	.LVL398:
 2490 0456 10B1     		cbz	r0, .L212
 288:./Src/application.c ****       }
 2491              		.loc 1 288 0
 2492 0458 294A     		ldr	r2, .L234+36
 2493 045a 214B     		ldr	r3, .L234+4
 2494 045c DA60     		str	r2, [r3, #12]	@ float
 2495              	.L212:
 290:./Src/application.c ****         app.ayn = 0.0;
 2496              		.loc 1 290 0
 2497 045e 204B     		ldr	r3, .L234+4
 2498 0460 9868     		ldr	r0, [r3, #8]	@ float
 2499 0462 0021     		movs	r1, #0
 2500 0464 FFF7FEFF 		bl	__aeabi_fcmplt
 2501              	.LVL399:
 2502 0468 10B1     		cbz	r0, .L214
 291:./Src/application.c ****       }
 2503              		.loc 1 291 0
 2504 046a 0022     		movs	r2, #0
 2505 046c 1C4B     		ldr	r3, .L234+4
 2506 046e 9A60     		str	r2, [r3, #8]	@ float
 2507              	.L214:
 293:./Src/application.c ****         app.axn = 0.0;
 2508              		.loc 1 293 0
 2509 0470 1B4B     		ldr	r3, .L234+4
 2510 0472 D868     		ldr	r0, [r3, #12]	@ float
 2511 0474 0021     		movs	r1, #0
 2512 0476 FFF7FEFF 		bl	__aeabi_fcmplt
 2513              	.LVL400:
 2514 047a 10B1     		cbz	r0, .L216
 294:./Src/application.c ****       }
 2515              		.loc 1 294 0
 2516 047c 0022     		movs	r2, #0
 2517 047e 184B     		ldr	r3, .L234+4
ARM GAS  /tmp/ccqooRvP.s 			page 64


 2518 0480 DA60     		str	r2, [r3, #12]	@ float
 2519              	.L216:
 297:./Src/application.c ****       app.axn = app.axn - 75.0;
 2520              		.loc 1 297 0
 2521 0482 174C     		ldr	r4, .L234+4
 2522 0484 A068     		ldr	r0, [r4, #8]	@ float
 2523 0486 1F49     		ldr	r1, .L234+40
 2524 0488 FFF7FEFF 		bl	__aeabi_fsub
 2525              	.LVL401:
 2526 048c A060     		str	r0, [r4, #8]	@ float
 298:./Src/application.c **** 
 2527              		.loc 1 298 0
 2528 048e E068     		ldr	r0, [r4, #12]	@ float
 2529 0490 1C49     		ldr	r1, .L234+40
 2530 0492 FFF7FEFF 		bl	__aeabi_fsub
 2531              	.LVL402:
 2532 0496 E060     		str	r0, [r4, #12]	@ float
 301:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2533              		.loc 1 301 0
 2534 0498 A068     		ldr	r0, [r4, #8]	@ float
 2535              	.LVL403:
 302:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 2536              		.loc 1 302 0
 2537 049a 124D     		ldr	r5, .L234+8
 2538 049c 2968     		ldr	r1, [r5]	@ float
 2539              	.LVL404:
 303:./Src/application.c ****       tempf1 = app.axn;
 2540              		.loc 1 303 0
 2541 049e FFF7FEFF 		bl	scale_y
 2542              	.LVL405:
 2543 04a2 A060     		str	r0, [r4, #8]	@ float
 304:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2544              		.loc 1 304 0
 2545 04a4 E068     		ldr	r0, [r4, #12]	@ float
 2546              	.LVL406:
 305:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 2547              		.loc 1 305 0
 2548 04a6 2968     		ldr	r1, [r5]	@ float
 2549              	.LVL407:
 306:./Src/application.c **** 
 2550              		.loc 1 306 0
 2551 04a8 FFF7FEFF 		bl	scale_x
 2552              	.LVL408:
 2553 04ac E060     		str	r0, [r4, #12]	@ float
 308:./Src/application.c ****       app.axn = accellerationX(app.axn);
 2554              		.loc 1 308 0
 2555 04ae A068     		ldr	r0, [r4, #8]	@ float
 2556 04b0 FFF7FEFF 		bl	accellerationY
 2557              	.LVL409:
 2558 04b4 A060     		str	r0, [r4, #8]	@ float
 309:./Src/application.c ****       tempf1 = app.ayn;
 2559              		.loc 1 309 0
 2560 04b6 E068     		ldr	r0, [r4, #12]	@ float
 2561 04b8 FFF7FEFF 		bl	accellerationX
 2562              	.LVL410:
 2563 04bc E060     		str	r0, [r4, #12]	@ float
 310:./Src/application.c ****       tempf2 = app.axn;
ARM GAS  /tmp/ccqooRvP.s 			page 65


 2564              		.loc 1 310 0
 2565 04be A068     		ldr	r0, [r4, #8]	@ float
 2566              	.LVL411:
 311:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 2567              		.loc 1 311 0
 2568 04c0 E168     		ldr	r1, [r4, #12]	@ float
 2569              	.LVL412:
 312:./Src/application.c ****     break;
 2570              		.loc 1 312 0
 2571 04c2 2A68     		ldr	r2, [r5]	@ float
 2572 04c4 0023     		movs	r3, #0
 2573 04c6 FFF7FEFF 		bl	go_motor
 2574              	.LVL413:
 313:./Src/application.c **** 
 2575              		.loc 1 313 0
 2576 04ca 70BD     		pop	{r4, r5, r6, pc}
 2577              	.L174:
 316:./Src/application.c ****         MotorL_stop();
 2578              		.loc 1 316 0
 2579 04cc FFF7FEFF 		bl	MotorR_stop
 2580              	.LVL414:
 317:./Src/application.c ****         app.stato = app_init;
 2581              		.loc 1 317 0
 2582 04d0 FFF7FEFF 		bl	MotorL_stop
 2583              	.LVL415:
 318:./Src/application.c ****     break;
 2584              		.loc 1 318 0
 2585 04d4 0022     		movs	r2, #0
 2586 04d6 024B     		ldr	r3, .L234+4
 2587 04d8 1A70     		strb	r2, [r3]
 2588              	.L173:
 2589 04da 70BD     		pop	{r4, r5, r6, pc}
 2590              	.L235:
 2591              		.align	2
 2592              	.L234:
 2593 04dc 00000000 		.word	wii_JOYdati
 2594 04e0 00000000 		.word	app
 2595 04e4 00000000 		.word	battery_dati
 2596 04e8 0000A040 		.word	1084227584
 2597 04ec 00001440 		.word	1075052544
 2598 04f0 0000A0C0 		.word	-1063256064
 2599 04f4 0000B8C1 		.word	-1044905984
 2600 04f8 00002041 		.word	1092616192
 2601 04fc 00000000 		.word	telemetry
 2602 0500 00009643 		.word	1133903872
 2603 0504 00009642 		.word	1117126656
 2604              		.cfi_endproc
 2605              	.LFE68:
 2607              		.global	Battery_power
 2608              		.comm	battery_dati,20,4
 2609              		.comm	app,72,4
 2610              		.section	.rodata.Battery_power,"a",%progbits
 2611              		.align	2
 2614              	Battery_power:
 2615 0000 00002042 		.word	1109393408
 2616 0004 9A99193F 		.word	1058642330
 2617 0008 00000000 		.space	32
ARM GAS  /tmp/ccqooRvP.s 			page 66


 2617      00000000 
 2617      00000000 
 2617      00000000 
 2617      00000000 
 2618 0028 00001842 		.word	1108869120
 2619 002c 9A99193F 		.word	1058642330
 2620 0030 00000000 		.space	32
 2620      00000000 
 2620      00000000 
 2620      00000000 
 2620      00000000 
 2621 0050 00001442 		.word	1108606976
 2622 0054 F6281C3F 		.word	1058810102
 2623 0058 00000000 		.space	32
 2623      00000000 
 2623      00000000 
 2623      00000000 
 2623      00000000 
 2624 0078 00001042 		.word	1108344832
 2625 007c 52B81E3F 		.word	1058977874
 2626 0080 00000000 		.space	32
 2626      00000000 
 2626      00000000 
 2626      00000000 
 2626      00000000 
 2627 00a0 00000C42 		.word	1108082688
 2628 00a4 6666263F 		.word	1059481190
 2629 00a8 00000000 		.space	32
 2629      00000000 
 2629      00000000 
 2629      00000000 
 2629      00000000 
 2630 00c8 00000842 		.word	1107820544
 2631 00cc 6666263F 		.word	1059481190
 2632 00d0 00000000 		.space	32
 2632      00000000 
 2632      00000000 
 2632      00000000 
 2632      00000000 
 2633 00f0 00000442 		.word	1107558400
 2634 00f4 1F852B3F 		.word	1059816735
 2635 00f8 00000000 		.space	32
 2635      00000000 
 2635      00000000 
 2635      00000000 
 2635      00000000 
 2636 0118 00000042 		.word	1107296256
 2637 011c 1F852B3F 		.word	1059816735
 2638 0120 00000000 		.space	32
 2638      00000000 
 2638      00000000 
 2638      00000000 
 2638      00000000 
 2639 0140 0000F841 		.word	1106771968
 2640 0144 1F852B3F 		.word	1059816735
 2641 0148 00000000 		.space	32
 2641      00000000 
ARM GAS  /tmp/ccqooRvP.s 			page 67


 2641      00000000 
 2641      00000000 
 2641      00000000 
 2642 0168 0000F041 		.word	1106247680
 2643 016c 1F852B3F 		.word	1059816735
 2644 0170 00000000 		.space	32
 2644      00000000 
 2644      00000000 
 2644      00000000 
 2644      00000000 
 2645              		.text
 2646              	.Letext0:
 2647              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 2648              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 2649              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 2650              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2651              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 2652              		.file 7 "./Inc/application.h"
 2653              		.file 8 "./Inc/i2c.h"
 2654              		.file 9 "./Inc/telemetry.h"
 2655              		.file 10 "./Drivers/CMSIS/Include/core_cm3.h"
 2656              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2657              		.file 12 "./Inc/varie.h"
 2658              		.file 13 "./Inc/motor_R.h"
 2659              		.file 14 "./Inc/motor_L.h"
 2660              		.file 15 "./Inc/ADC_R.h"
 2661              		.file 16 "./Inc/ADC_L.h"
ARM GAS  /tmp/ccqooRvP.s 			page 68


DEFINED SYMBOLS
                            *ABS*:00000000 application.c
     /tmp/ccqooRvP.s:20     .text.GET_BatteryAverage:00000000 $t
     /tmp/ccqooRvP.s:25     .text.GET_BatteryAverage:00000000 GET_BatteryAverage
     /tmp/ccqooRvP.s:41     .text.GET_BatteryAverage:00000008 $d
                            *COM*:00000014 battery_dati
     /tmp/ccqooRvP.s:46     .text.TASK_BATTERY_LOW_VOLTAGE:00000000 $t
     /tmp/ccqooRvP.s:51     .text.TASK_BATTERY_LOW_VOLTAGE:00000000 TASK_BATTERY_LOW_VOLTAGE
     /tmp/ccqooRvP.s:84     .text.TASK_BATTERY_LOW_VOLTAGE:00000020 $d
     /tmp/ccqooRvP.s:90     .text.applcation_init:00000000 $t
     /tmp/ccqooRvP.s:95     .text.applcation_init:00000000 applcation_init
     /tmp/ccqooRvP.s:142    .text.applcation_init:0000002c $d
                            *COM*:00000048 app
     /tmp/ccqooRvP.s:153    .text.normalize_y:00000000 $t
     /tmp/ccqooRvP.s:158    .text.normalize_y:00000000 normalize_y
     /tmp/ccqooRvP.s:218    .text.normalize_y:0000003c $d
     /tmp/ccqooRvP.s:225    .text.normalize_x:00000000 $t
     /tmp/ccqooRvP.s:230    .text.normalize_x:00000000 normalize_x
     /tmp/ccqooRvP.s:290    .text.normalize_x:0000003c $d
     /tmp/ccqooRvP.s:297    .text.get_powerMax:00000000 $t
     /tmp/ccqooRvP.s:302    .text.get_powerMax:00000000 get_powerMax
     /tmp/ccqooRvP.s:388    .text.get_powerMax:0000005c $d
     /tmp/ccqooRvP.s:404    .text.scale_y:00000000 $t
     /tmp/ccqooRvP.s:409    .text.scale_y:00000000 scale_y
     /tmp/ccqooRvP.s:437    .text.scale_x:00000000 $t
     /tmp/ccqooRvP.s:442    .text.scale_x:00000000 scale_x
     /tmp/ccqooRvP.s:470    .text.accelleration_XY_Reset:00000000 $t
     /tmp/ccqooRvP.s:475    .text.accelleration_XY_Reset:00000000 accelleration_XY_Reset
     /tmp/ccqooRvP.s:492    .text.accelleration_XY_Reset:0000000c $d
     /tmp/ccqooRvP.s:501    .text.accellerationY:00000000 $t
     /tmp/ccqooRvP.s:506    .text.accellerationY:00000000 accellerationY
     /tmp/ccqooRvP.s:591    .text.accellerationY:00000070 $d
     /tmp/ccqooRvP.s:598    .text.accellerationX:00000000 $t
     /tmp/ccqooRvP.s:603    .text.accellerationX:00000000 accellerationX
     /tmp/ccqooRvP.s:688    .text.accellerationX:00000070 $d
     /tmp/ccqooRvP.s:695    .text.accellerationYHARD:00000000 $t
     /tmp/ccqooRvP.s:700    .text.accellerationYHARD:00000000 accellerationYHARD
     /tmp/ccqooRvP.s:785    .text.accellerationYHARD:00000070 $d
     /tmp/ccqooRvP.s:792    .text.accellerationXHARD:00000000 $t
     /tmp/ccqooRvP.s:797    .text.accellerationXHARD:00000000 accellerationXHARD
     /tmp/ccqooRvP.s:882    .text.accellerationXHARD:00000070 $d
     /tmp/ccqooRvP.s:894    .text.Battery_TASK:00000000 $t
     /tmp/ccqooRvP.s:899    .text.Battery_TASK:00000000 Battery_TASK
     /tmp/ccqooRvP.s:987    .text.Battery_TASK:00000080 $d
     /tmp/ccqooRvP.s:995    .text.WAIT_CHARGE_FINISH:00000000 $t
     /tmp/ccqooRvP.s:1000   .text.WAIT_CHARGE_FINISH:00000000 WAIT_CHARGE_FINISH
     /tmp/ccqooRvP.s:1101   .text.WAIT_CHARGE_FINISH:0000007c $d
     /tmp/ccqooRvP.s:1107   .text.Current_Motor_TASK:00000000 $t
     /tmp/ccqooRvP.s:1112   .text.Current_Motor_TASK:00000000 Current_Motor_TASK
     /tmp/ccqooRvP.s:1302   .text.Current_Motor_TASK:00000130 $d
     /tmp/ccqooRvP.s:1319   .text.go_motor:00000000 $t
     /tmp/ccqooRvP.s:1324   .text.go_motor:00000000 go_motor
     /tmp/ccqooRvP.s:1717   .text.go_motor:00000244 $d
     /tmp/ccqooRvP.s:1729   .text.applcation_TASK:00000000 $t
     /tmp/ccqooRvP.s:1734   .text.applcation_TASK:00000000 applcation_TASK
     /tmp/ccqooRvP.s:1755   .text.applcation_TASK:00000012 $d
     /tmp/ccqooRvP.s:1760   .text.applcation_TASK:0000001c $t
ARM GAS  /tmp/ccqooRvP.s 			page 69


     /tmp/ccqooRvP.s:2199   .text.applcation_TASK:00000290 $d
     /tmp/ccqooRvP.s:2209   .text.applcation_TASK:000002b0 $t
     /tmp/ccqooRvP.s:2593   .text.applcation_TASK:000004dc $d
     /tmp/ccqooRvP.s:2614   .rodata.Battery_power:00000000 Battery_power
     /tmp/ccqooRvP.s:2611   .rodata.Battery_power:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
Buzzer_OneLongBeep
MotorR_stop
MotorL_stop
__aeabi_ui2f
__aeabi_fsub
__aeabi_fcmpge
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fmul
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
__aeabi_dsub
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dmul
ADC_BATTERY
Led_Set
HAL_IWDG_Refresh
HAL_Delay
IS_Charge
hiwdg
ADC_MOTOR_LEFT
ADC_MOTOR_RIGHT
__aeabi_f2iz
__aeabi_i2f
__aeabi_fadd
__aeabi_fdiv
__aeabi_d2iz
MotorR_pwm
MotorL_pwm
__aeabi_dcmpgt
__aeabi_fcmple
WiiNunchuck_TASK
MotorR_start
MotorL_start
Buzzer_OneShortBeep
wii_JOYdati
telemetry
