ARM GAS  /tmp/ccmsIxgg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"application.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.GET_BatteryAverage,"ax",%progbits
  20              		.align	2
  21              		.global	GET_BatteryAverage
  22              		.thumb
  23              		.thumb_func
  25              	GET_BatteryAverage:
  26              	.LFB64:
  27              		.file 1 "./Src/application.c"
   1:./Src/application.c **** #include "application.h"
   2:./Src/application.c **** #include "motor_L.h"
   3:./Src/application.c **** #include "motor_R.h"
   4:./Src/application.c **** #include "i2c.h"
   5:./Src/application.c **** #include "ADC_L.h"
   6:./Src/application.c **** #include "ADC_R.h"
   7:./Src/application.c **** #include "varie.h"
   8:./Src/application.c **** #include "telemetry.h"
   9:./Src/application.c **** #include <stdlib.h>
  10:./Src/application.c **** 
  11:./Src/application.c **** extern IWDG_HandleTypeDef hiwdg;
  12:./Src/application.c **** 
  13:./Src/application.c **** volatile __IO struct APPLICATION_dati app;
  14:./Src/application.c **** volatile __IO struct BATTERY_dati battery_dati;
  15:./Src/application.c **** extern volatile __IO struct WII_JOYdati wii_JOYdati;
  16:./Src/application.c **** extern struct TELEMETRY_dati telemetry;
  17:./Src/application.c **** 
  18:./Src/application.c **** float GET_BatteryAverage(void){
  28              		.loc 1 18 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  19:./Src/application.c ****   return battery_dati.VBatt;
  33              		.loc 1 19 0
  34 0000 014B     		ldr	r3, .L2
  35 0002 1868     		ldr	r0, [r3]	@ float
  20:./Src/application.c **** }
  36              		.loc 1 20 0
  37 0004 7047     		bx	lr
  38              	.L3:
ARM GAS  /tmp/ccmsIxgg.s 			page 2


  39 0006 00BF     		.align	2
  40              	.L2:
  41 0008 00000000 		.word	battery_dati
  42              		.cfi_endproc
  43              	.LFE64:
  45              		.section	.text.TASK_BATTERY_LOW_VOLTAGE,"ax",%progbits
  46              		.align	2
  47              		.global	TASK_BATTERY_LOW_VOLTAGE
  48              		.thumb
  49              		.thumb_func
  51              	TASK_BATTERY_LOW_VOLTAGE:
  52              	.LFB65:
  21:./Src/application.c **** void TASK_BATTERY_LOW_VOLTAGE(void){
  53              		.loc 1 21 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57 0000 08B5     		push	{r3, lr}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 8
  60              		.cfi_offset 3, -8
  61              		.cfi_offset 14, -4
  22:./Src/application.c ****   if((HAL_GetTick() - battery_dati.time_lowvoltage) > 600000){          //Ogni 10 min BEEP
  62              		.loc 1 22 0
  63 0002 FFF7FEFF 		bl	HAL_GetTick
  64              	.LVL0:
  65 0006 064B     		ldr	r3, .L7
  66 0008 1B69     		ldr	r3, [r3, #16]
  67 000a C01A     		subs	r0, r0, r3
  68 000c 054B     		ldr	r3, .L7+4
  69 000e 9842     		cmp	r0, r3
  70 0010 05D9     		bls	.L4
  23:./Src/application.c ****     battery_dati.time_lowvoltage = HAL_GetTick();
  71              		.loc 1 23 0
  72 0012 FFF7FEFF 		bl	HAL_GetTick
  73              	.LVL1:
  74 0016 024B     		ldr	r3, .L7
  75 0018 1861     		str	r0, [r3, #16]
  24:./Src/application.c **** 
  25:./Src/application.c ****     Buzzer_OneLongBeep();
  76              		.loc 1 25 0
  77 001a FFF7FEFF 		bl	Buzzer_OneLongBeep
  78              	.LVL2:
  79              	.L4:
  80 001e 08BD     		pop	{r3, pc}
  81              	.L8:
  82              		.align	2
  83              	.L7:
  84 0020 00000000 		.word	battery_dati
  85 0024 C0270900 		.word	600000
  86              		.cfi_endproc
  87              	.LFE65:
  89              		.section	.text.applcation_init,"ax",%progbits
  90              		.align	2
  91              		.global	applcation_init
  92              		.thumb
  93              		.thumb_func
ARM GAS  /tmp/ccmsIxgg.s 			page 3


  95              	applcation_init:
  96              	.LFB67:
  26:./Src/application.c ****   }
  27:./Src/application.c **** }
  28:./Src/application.c **** void WAIT_CHARGE_FINISH(void){
  29:./Src/application.c ****   uint32_t timerBatteryC;
  30:./Src/application.c **** 
  31:./Src/application.c ****   Led_Set(1);
  32:./Src/application.c ****   MotorR_stop();
  33:./Src/application.c ****   MotorL_stop();
  34:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
  35:./Src/application.c ****   Buzzer_OneLongBeep();
  36:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
  37:./Src/application.c ****   Buzzer_OneLongBeep();
  38:./Src/application.c ****   timerBatteryC = HAL_GetTick();
  39:./Src/application.c **** 
  40:./Src/application.c ****   while(IS_Charge()==0){
  41:./Src/application.c ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
  42:./Src/application.c ****     HAL_Delay(250);
  43:./Src/application.c ****     Battery_TASK();
  44:./Src/application.c ****     if(GET_BatteryAverage() < 41.250){
  45:./Src/application.c ****       timerBatteryC = HAL_GetTick();
  46:./Src/application.c ****     }
  47:./Src/application.c ****     if((HAL_GetTick() - timerBatteryC) > 20000){ //600000       x 20Sec, batteria sopra i 42Volt, a
  48:./Src/application.c ****       Buzzer_OneLongBeep();
  49:./Src/application.c ****       HAL_IWDG_Refresh(&hiwdg);   //819mS
  50:./Src/application.c ****     }
  51:./Src/application.c ****   }
  52:./Src/application.c ****   Led_Set(0);
  53:./Src/application.c ****   applcation_init();
  54:./Src/application.c **** }
  55:./Src/application.c **** 
  56:./Src/application.c **** void applcation_init(void){
  97              		.loc 1 56 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101 0000 70B5     		push	{r4, r5, r6, lr}
 102              	.LCFI1:
 103              		.cfi_def_cfa_offset 16
 104              		.cfi_offset 4, -16
 105              		.cfi_offset 5, -12
 106              		.cfi_offset 6, -8
 107              		.cfi_offset 14, -4
  57:./Src/application.c ****   app.stato = app_init;
 108              		.loc 1 57 0
 109 0002 0B4C     		ldr	r4, .L11
 110 0004 0026     		movs	r6, #0
 111 0006 2670     		strb	r6, [r4]
  58:./Src/application.c ****   MotorR_stop();
 112              		.loc 1 58 0
 113 0008 FFF7FEFF 		bl	MotorR_stop
 114              	.LVL3:
  59:./Src/application.c ****   MotorL_stop();
 115              		.loc 1 59 0
 116 000c FFF7FEFF 		bl	MotorL_stop
 117              	.LVL4:
ARM GAS  /tmp/ccmsIxgg.s 			page 4


  60:./Src/application.c ****   battery_dati.time_batt = HAL_GetTick();
 118              		.loc 1 60 0
 119 0010 FFF7FEFF 		bl	HAL_GetTick
 120              	.LVL5:
 121 0014 074D     		ldr	r5, .L11+4
 122 0016 6860     		str	r0, [r5, #4]
  61:./Src/application.c ****   battery_dati.time_lowvoltage = HAL_GetTick();
 123              		.loc 1 61 0
 124 0018 FFF7FEFF 		bl	HAL_GetTick
 125              	.LVL6:
 126 001c 2861     		str	r0, [r5, #16]
  62:./Src/application.c ****   battery_dati.somma_batt = 1400;
 127              		.loc 1 62 0
 128 001e 4FF4AF63 		mov	r3, #1400
 129 0022 AB60     		str	r3, [r5, #8]
  63:./Src/application.c ****   battery_dati.counter_media = 0;
 130              		.loc 1 63 0
 131 0024 2E73     		strb	r6, [r5, #12]
  64:./Src/application.c ****   app.cruise_soft_run_nohand = 0.0;
 132              		.loc 1 64 0
 133 0026 0023     		movs	r3, #0
 134 0028 A361     		str	r3, [r4, #24]	@ float
  65:./Src/application.c **** 
  66:./Src/application.c ****   app.faccY=0.0;
 135              		.loc 1 66 0
 136 002a 6362     		str	r3, [r4, #36]	@ float
  67:./Src/application.c ****   app.faccX=0.0;
 137              		.loc 1 67 0
 138 002c A362     		str	r3, [r4, #40]	@ float
 139 002e 70BD     		pop	{r4, r5, r6, pc}
 140              	.L12:
 141              		.align	2
 142              	.L11:
 143 0030 00000000 		.word	app
 144 0034 00000000 		.word	battery_dati
 145              		.cfi_endproc
 146              	.LFE67:
 148              		.global	__aeabi_ui2f
 149              		.global	__aeabi_fsub
 150              		.global	__aeabi_fcmpge
 151              		.global	__aeabi_fcmpgt
 152              		.global	__aeabi_fcmplt
 153              		.section	.text.normalize_y,"ax",%progbits
 154              		.align	2
 155              		.global	normalize_y
 156              		.thumb
 157              		.thumb_func
 159              	normalize_y:
 160              	.LFB69:
  68:./Src/application.c **** }
  69:./Src/application.c **** 
  70:./Src/application.c **** void applcation_TASK(void){
  71:./Src/application.c ****   uint8_t letture,temp8;
  72:./Src/application.c ****   float tempf1,tempf2;
  73:./Src/application.c **** 
  74:./Src/application.c ****   switch(app.stato){
  75:./Src/application.c ****     case app_init:
ARM GAS  /tmp/ccmsIxgg.s 			page 5


  76:./Src/application.c ****       MotorR_stop();
  77:./Src/application.c ****       MotorL_stop();
  78:./Src/application.c ****       //Aspetta Center joystick e calcola la media
  79:./Src/application.c ****       app.center_media_X = 0.0;
  80:./Src/application.c ****       app.center_media_Y = 0.0;
  81:./Src/application.c ****       letture = 0;
  82:./Src/application.c ****       wii_JOYdati.done = 0;
  83:./Src/application.c ****       do{
  84:./Src/application.c ****         HAL_IWDG_Refresh(&hiwdg);   //819mS
  85:./Src/application.c **** 
  86:./Src/application.c ****         while(wii_JOYdati.done==0){WiiNunchuck_TASK();}
  87:./Src/application.c ****         wii_JOYdati.done = 0;
  88:./Src/application.c ****         if((wii_JOYdati.ay < 129) && (wii_JOYdati.ay > 124)){
  89:./Src/application.c ****           letture++;
  90:./Src/application.c ****           temp8 = wii_JOYdati.ay;
  91:./Src/application.c ****           app.center_media_Y = app.center_media_Y + ((float)temp8);
  92:./Src/application.c ****         }else{
  93:./Src/application.c ****           letture = 0;
  94:./Src/application.c ****           app.center_media_Y = 0.0;
  95:./Src/application.c ****         }
  96:./Src/application.c ****       }while(letture < 50);
  97:./Src/application.c ****       app.center_media_Y = app.center_media_Y / 50.0;
  98:./Src/application.c ****       letture = 0;
  99:./Src/application.c ****       wii_JOYdati.done = 0;
 100:./Src/application.c ****       do{
 101:./Src/application.c ****         HAL_IWDG_Refresh(&hiwdg);   //819mS
 102:./Src/application.c **** 
 103:./Src/application.c ****         while(wii_JOYdati.done==0){WiiNunchuck_TASK();}
 104:./Src/application.c ****         wii_JOYdati.done = 0;
 105:./Src/application.c ****         if((wii_JOYdati.ax < 129) && (wii_JOYdati.ax > 124)){
 106:./Src/application.c ****           letture++;
 107:./Src/application.c ****           temp8 = wii_JOYdati.ax;
 108:./Src/application.c ****           app.center_media_X = app.center_media_X + ((float)temp8);
 109:./Src/application.c ****         }else{
 110:./Src/application.c ****           letture = 0;
 111:./Src/application.c ****           app.center_media_X = 0.0;
 112:./Src/application.c ****         }
 113:./Src/application.c ****       }while(letture < 50);
 114:./Src/application.c ****       app.center_media_X = app.center_media_X / 50.0;
 115:./Src/application.c **** 
 116:./Src/application.c ****       accelleration_XY_Reset();
 117:./Src/application.c **** 
 118:./Src/application.c ****       app.tsoft_run = HAL_GetTick();
 119:./Src/application.c ****       app.stato = app_soft_run;
 120:./Src/application.c ****       MotorR_start();
 121:./Src/application.c ****       MotorL_start();
 122:./Src/application.c **** 
 123:./Src/application.c ****       Buzzer_OneShortBeep();
 124:./Src/application.c **** 
 125:./Src/application.c ****     break;
 126:./Src/application.c **** 
 127:./Src/application.c ****     case app_soft_run:
 128:./Src/application.c ****      //INDOOR LIMIT 30; -30
 129:./Src/application.c ****       app.ayn = normalize_y(wii_JOYdati.ay);
 130:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 131:./Src/application.c **** 
 132:./Src/application.c ****       //scala x soft run
ARM GAS  /tmp/ccmsIxgg.s 			page 6


 133:./Src/application.c ****       tempf1 = app.ayn;
 134:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 135:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 136:./Src/application.c ****       tempf1 = app.axn;
 137:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 138:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 139:./Src/application.c **** 
 140:./Src/application.c ****       app.ayn = accellerationY(app.ayn);
 141:./Src/application.c ****       app.axn = accellerationX(app.axn);
 142:./Src/application.c **** 
 143:./Src/application.c ****       tempf1 = app.ayn;
 144:./Src/application.c ****       tempf2 = app.axn;
 145:./Src/application.c **** 
 146:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt, 0);
 147:./Src/application.c **** 
 148:./Src/application.c ****       //soft_run_nohand
 149:./Src/application.c ****       temp8 = wii_JOYdati.ay;
 150:./Src/application.c ****       if((wii_JOYdati.bz == 0)&&((((float)temp8 - app.center_media_Y) > 4.0))&&(telemetry.dataREADY
 151:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 152:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 153:./Src/application.c ****             app.stato = app_soft_run_nohand;
 154:./Src/application.c ****             app.tcruise_decrement = HAL_GetTick();
 155:./Src/application.c ****             Buzzer_OneShortBeep();
 156:./Src/application.c ****         }
 157:./Src/application.c ****       }else{
 158:./Src/application.c ****         app.tsoft_run = HAL_GetTick();
 159:./Src/application.c ****       }
 160:./Src/application.c ****       //Android APP ?
 161:./Src/application.c ****       if(telemetry.dataREADY_JOYSTICK){
 162:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 163:./Src/application.c ****         if(telemetry.dataLast_Command == 'R'){
 164:./Src/application.c ****           app.stato = app_soft_ANDROIDAPP;
 165:./Src/application.c ****           app.tAndroidAPP = HAL_GetTick();
 166:./Src/application.c ****           accelleration_XY_Reset();
 167:./Src/application.c ****         }
 168:./Src/application.c ****         telemetry.dataLast_Command = 0;
 169:./Src/application.c ****       }
 170:./Src/application.c ****       //Hard RUN joystick press 'c' switch
 171:./Src/application.c ****       if((wii_JOYdati.bc == 0)&&(wii_JOYdati.bz == 1)&&(telemetry.dataREADY_JOYSTICK==0)){
 172:./Src/application.c ****           app.stato = app_hard_run;
 173:./Src/application.c ****           //accelleration_XY_Reset();     //??????
 174:./Src/application.c ****       }
 175:./Src/application.c ****     break;
 176:./Src/application.c **** 
 177:./Src/application.c ****     case app_hard_run:
 178:./Src/application.c ****      //OUTDOOR LIMIT FULL
 179:./Src/application.c ****       app.ayn = normalize_y(wii_JOYdati.ay);
 180:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 181:./Src/application.c **** 
 182:./Src/application.c ****       //scala x soft run
 183:./Src/application.c ****       tempf1 = app.ayn * 0.90;
 184:./Src/application.c ****       app.ayn = tempf1;
 185:./Src/application.c ****       tempf2 = app.axn * 0.90;
 186:./Src/application.c ****       //tempf2 = battery_dati.VBatt;
 187:./Src/application.c ****       app.axn = tempf2;
 188:./Src/application.c **** 
 189:./Src/application.c ****       app.ayn = accellerationYHARD(app.ayn);
ARM GAS  /tmp/ccmsIxgg.s 			page 7


 190:./Src/application.c ****       app.axn = accellerationXHARD(app.axn);
 191:./Src/application.c **** 
 192:./Src/application.c ****       tempf1 = app.ayn;
 193:./Src/application.c ****       tempf2 = app.axn;
 194:./Src/application.c ****       if(tempf1 < 0){
 195:./Src/application.c ****         tempf1 = 0;
 196:./Src/application.c ****       }
 197:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt, 1);
 198:./Src/application.c **** 
 199:./Src/application.c ****       //Soft RUN joystick press 'c' switch
 200:./Src/application.c ****       if(wii_JOYdati.bc == 1){
 201:./Src/application.c ****           //MotorR_stop();
 202:./Src/application.c ****           //MotorL_stop();
 203:./Src/application.c ****           //accelleration_XY_Reset();     //??????
 204:./Src/application.c ****           app.stato = app_soft_run;
 205:./Src/application.c ****       }
 206:./Src/application.c ****     break;
 207:./Src/application.c **** 
 208:./Src/application.c ****     case app_soft_run_nohand:
 209:./Src/application.c ****       app.ayn = normalize_y(wii_JOYdati.ay);
 210:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 211:./Src/application.c **** 
 212:./Src/application.c ****       //scala x soft run
 213:./Src/application.c ****       tempf1 = app.ayn;
 214:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 215:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 216:./Src/application.c ****       tempf1 = app.axn;
 217:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 218:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 219:./Src/application.c **** 
 220:./Src/application.c ****       app.ayn = accellerationY(app.ayn);
 221:./Src/application.c ****       app.axn = accellerationX(app.axn);
 222:./Src/application.c **** 
 223:./Src/application.c ****       //Attiva cruise control
 224:./Src/application.c ****       if(app.ayn > 5.0){
 225:./Src/application.c ****         tempf1 = app.cruise_soft_run_nohand;
 226:./Src/application.c ****         if((app.ayn - 5.0) > tempf1){
 227:./Src/application.c ****           app.cruise_soft_run_nohand = app.ayn - 5.0;
 228:./Src/application.c ****         }
 229:./Src/application.c ****       }
 230:./Src/application.c ****        //Decrementa Cruise
 231:./Src/application.c ****       if((app.ayn < -5.0)&&(app.ayn > -23.0)){
 232:./Src/application.c ****         //con time step
 233:./Src/application.c ****         if((HAL_GetTick() - app.tcruise_decrement)>250){
 234:./Src/application.c ****           tempf1 = app.ayn / 10.0;
 235:./Src/application.c ****           app.cruise_soft_run_nohand = app.cruise_soft_run_nohand + tempf1;                //STEP D
 236:./Src/application.c ****           if(app.cruise_soft_run_nohand < 0.0){
 237:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 238:./Src/application.c ****           }
 239:./Src/application.c ****           app.tcruise_decrement = HAL_GetTick();
 240:./Src/application.c ****         }
 241:./Src/application.c ****       }
 242:./Src/application.c ****       //Stop Cruise
 243:./Src/application.c ****       if(app.ayn <= -23.0){
 244:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 245:./Src/application.c ****         MotorR_stop();
 246:./Src/application.c ****         MotorL_stop();
ARM GAS  /tmp/ccmsIxgg.s 			page 8


 247:./Src/application.c ****         accelleration_XY_Reset();
 248:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 249:./Src/application.c ****         app.stato = app_init;
 250:./Src/application.c ****         break;
 251:./Src/application.c ****       }
 252:./Src/application.c ****       tempf1 = app.cruise_soft_run_nohand;
 253:./Src/application.c ****       tempf2 = app.axn;
 254:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 255:./Src/application.c ****     break;
 256:./Src/application.c **** 
 257:./Src/application.c ****     case app_soft_ANDROIDAPP:
 258:./Src/application.c ****      //ANDROID APP
 259:./Src/application.c ****       if(telemetry.dataREADY_JOYSTICK){
 260:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 261:./Src/application.c ****         app.tAndroidAPP = HAL_GetTick();
 262:./Src/application.c ****         if(telemetry.dataLast_Command == 'F'){
 263:./Src/application.c ****           MotorR_stop();
 264:./Src/application.c ****           MotorL_stop();
 265:./Src/application.c ****           accelleration_XY_Reset();
 266:./Src/application.c ****           app.cruise_soft_run_nohand = 0.0;
 267:./Src/application.c ****           app.stato = app_init;
 268:./Src/application.c ****           telemetry.dataLast_Command = 0;
 269:./Src/application.c ****           break;
 270:./Src/application.c ****         }
 271:./Src/application.c ****       }
 272:./Src/application.c ****       if((HAL_GetTick() - app.tAndroidAPP)>500){    //Se non ricevi risposta dalla APP esci dalla m
 273:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 274:./Src/application.c ****         MotorR_stop();
 275:./Src/application.c ****         MotorL_stop();
 276:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 277:./Src/application.c ****         app.stato = app_init;
 278:./Src/application.c ****         break;
 279:./Src/application.c ****       }
 280:./Src/application.c **** 
 281:./Src/application.c **** 
 282:./Src/application.c ****       app.ayn = (float)telemetry.joyy;
 283:./Src/application.c ****       app.axn = (float)telemetry.joyx;
 284:./Src/application.c ****       if(app.ayn > 300.0){
 285:./Src/application.c ****         app.ayn = 300.0;
 286:./Src/application.c ****       }
 287:./Src/application.c ****       if(app.axn > 300.0){
 288:./Src/application.c ****         app.axn = 300.0;
 289:./Src/application.c ****       }
 290:./Src/application.c ****       if(app.ayn < 0.0){
 291:./Src/application.c ****         app.ayn = 0.0;
 292:./Src/application.c ****       }
 293:./Src/application.c ****       if(app.axn < 0){
 294:./Src/application.c ****         app.axn = 0.0;
 295:./Src/application.c ****       }
 296:./Src/application.c **** 
 297:./Src/application.c ****       app.ayn = app.ayn - 75.0;
 298:./Src/application.c ****       app.axn = app.axn - 75.0;
 299:./Src/application.c **** 
 300:./Src/application.c ****       //scala x soft run
 301:./Src/application.c ****       tempf1 = app.ayn;
 302:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 303:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
ARM GAS  /tmp/ccmsIxgg.s 			page 9


 304:./Src/application.c ****       tempf1 = app.axn;
 305:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 306:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 307:./Src/application.c **** 
 308:./Src/application.c ****       app.ayn = accellerationY(app.ayn);
 309:./Src/application.c ****       app.axn = accellerationX(app.axn);
 310:./Src/application.c ****       tempf1 = app.ayn;
 311:./Src/application.c ****       tempf2 = app.axn;
 312:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 313:./Src/application.c ****     break;
 314:./Src/application.c **** 
 315:./Src/application.c ****     default:
 316:./Src/application.c ****         MotorR_stop();
 317:./Src/application.c ****         MotorL_stop();
 318:./Src/application.c ****         app.stato = app_init;
 319:./Src/application.c ****     break;
 320:./Src/application.c **** 
 321:./Src/application.c ****   }
 322:./Src/application.c **** 
 323:./Src/application.c **** }
 324:./Src/application.c **** 
 325:./Src/application.c **** 
 326:./Src/application.c **** 
 327:./Src/application.c **** 
 328:./Src/application.c **** 
 329:./Src/application.c **** 
 330:./Src/application.c **** 
 331:./Src/application.c **** 
 332:./Src/application.c **** 
 333:./Src/application.c **** 
 334:./Src/application.c **** 
 335:./Src/application.c **** 
 336:./Src/application.c **** 
 337:./Src/application.c **** 
 338:./Src/application.c **** 
 339:./Src/application.c **** 
 340:./Src/application.c **** 
 341:./Src/application.c **** 
 342:./Src/application.c **** float normalize_y(uint8_t y){
 161              		.loc 1 342 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL7:
 166 0000 10B5     		push	{r4, lr}
 167              	.LCFI2:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 4, -8
 170              		.cfi_offset 14, -4
 171              	.LVL8:
 343:./Src/application.c ****   float ayn;
 344:./Src/application.c ****       ayn = 0.0;
 345:./Src/application.c ****       ayn = (float)((float)y - app.center_media_Y);
 172              		.loc 1 345 0
 173 0002 FFF7FEFF 		bl	__aeabi_ui2f
 174              	.LVL9:
 175 0006 0D4B     		ldr	r3, .L22
ARM GAS  /tmp/ccmsIxgg.s 			page 10


 176 0008 196A     		ldr	r1, [r3, #32]	@ float
 177 000a FFF7FEFF 		bl	__aeabi_fsub
 178              	.LVL10:
 179 000e 0446     		mov	r4, r0
 180              	.LVL11:
 346:./Src/application.c ****       //Limit
 347:./Src/application.c ****       if(ayn >= 0.0){
 181              		.loc 1 347 0
 182 0010 0021     		movs	r1, #0
 183 0012 FFF7FEFF 		bl	__aeabi_fcmpge
 184              	.LVL12:
 185 0016 28B1     		cbz	r0, .L20
 348:./Src/application.c ****         //0 ~ 100
 349:./Src/application.c ****         if(ayn > 100.0){
 186              		.loc 1 349 0
 187 0018 0949     		ldr	r1, .L22+4
 188 001a 2046     		mov	r0, r4
 189 001c FFF7FEFF 		bl	__aeabi_fcmpgt
 190              	.LVL13:
 191 0020 30B9     		cbnz	r0, .L17
 192 0022 08E0     		b	.L16
 193              	.L20:
 350:./Src/application.c ****           ayn = 100.0;
 351:./Src/application.c ****         }
 352:./Src/application.c ****       }else{
 353:./Src/application.c ****         //0 ~ -100
 354:./Src/application.c ****         if(ayn < -100.0){
 194              		.loc 1 354 0
 195 0024 0749     		ldr	r1, .L22+8
 196 0026 2046     		mov	r0, r4
 197 0028 FFF7FEFF 		bl	__aeabi_fcmplt
 198              	.LVL14:
 199 002c 10B9     		cbnz	r0, .L18
 200 002e 02E0     		b	.L16
 201              	.L17:
 350:./Src/application.c ****           ayn = 100.0;
 202              		.loc 1 350 0
 203 0030 034C     		ldr	r4, .L22+4
 204              	.LVL15:
 205 0032 00E0     		b	.L16
 206              	.LVL16:
 207              	.L18:
 355:./Src/application.c ****           ayn = -100.0;
 208              		.loc 1 355 0
 209 0034 034C     		ldr	r4, .L22+8
 210              	.LVL17:
 211              	.L16:
 356:./Src/application.c ****         }
 357:./Src/application.c ****       }
 358:./Src/application.c ****   return ayn;
 359:./Src/application.c **** }
 212              		.loc 1 359 0
 213 0036 2046     		mov	r0, r4
 214 0038 10BD     		pop	{r4, pc}
 215              	.LVL18:
 216              	.L23:
 217 003a 00BF     		.align	2
ARM GAS  /tmp/ccmsIxgg.s 			page 11


 218              	.L22:
 219 003c 00000000 		.word	app
 220 0040 0000C842 		.word	1120403456
 221 0044 0000C8C2 		.word	-1027080192
 222              		.cfi_endproc
 223              	.LFE69:
 225              		.section	.text.normalize_x,"ax",%progbits
 226              		.align	2
 227              		.global	normalize_x
 228              		.thumb
 229              		.thumb_func
 231              	normalize_x:
 232              	.LFB70:
 360:./Src/application.c **** 
 361:./Src/application.c **** float normalize_x(uint8_t x){
 233              		.loc 1 361 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              	.LVL19:
 238 0000 10B5     		push	{r4, lr}
 239              	.LCFI3:
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 4, -8
 242              		.cfi_offset 14, -4
 243              	.LVL20:
 362:./Src/application.c ****   float axn;
 363:./Src/application.c ****       axn = 0.0;
 364:./Src/application.c ****       axn = (float)((float)x - app.center_media_X);
 244              		.loc 1 364 0
 245 0002 FFF7FEFF 		bl	__aeabi_ui2f
 246              	.LVL21:
 247 0006 0D4B     		ldr	r3, .L33
 248 0008 D969     		ldr	r1, [r3, #28]	@ float
 249 000a FFF7FEFF 		bl	__aeabi_fsub
 250              	.LVL22:
 251 000e 0446     		mov	r4, r0
 252              	.LVL23:
 365:./Src/application.c ****       //Limit
 366:./Src/application.c **** 
 367:./Src/application.c ****       if(axn >= 0.0){
 253              		.loc 1 367 0
 254 0010 0021     		movs	r1, #0
 255 0012 FFF7FEFF 		bl	__aeabi_fcmpge
 256              	.LVL24:
 257 0016 28B1     		cbz	r0, .L31
 368:./Src/application.c ****         //0 ~ 100
 369:./Src/application.c ****         if(axn > 100.0){
 258              		.loc 1 369 0
 259 0018 0949     		ldr	r1, .L33+4
 260 001a 2046     		mov	r0, r4
 261 001c FFF7FEFF 		bl	__aeabi_fcmpgt
 262              	.LVL25:
 263 0020 30B9     		cbnz	r0, .L28
 264 0022 08E0     		b	.L27
 265              	.L31:
 370:./Src/application.c ****           axn = 100.0;
ARM GAS  /tmp/ccmsIxgg.s 			page 12


 371:./Src/application.c ****         }
 372:./Src/application.c ****       }else{
 373:./Src/application.c ****         //0 ~ -100
 374:./Src/application.c ****         if(axn < -100.0){
 266              		.loc 1 374 0
 267 0024 0749     		ldr	r1, .L33+8
 268 0026 2046     		mov	r0, r4
 269 0028 FFF7FEFF 		bl	__aeabi_fcmplt
 270              	.LVL26:
 271 002c 10B9     		cbnz	r0, .L29
 272 002e 02E0     		b	.L27
 273              	.L28:
 370:./Src/application.c ****           axn = 100.0;
 274              		.loc 1 370 0
 275 0030 034C     		ldr	r4, .L33+4
 276              	.LVL27:
 277 0032 00E0     		b	.L27
 278              	.LVL28:
 279              	.L29:
 375:./Src/application.c ****           axn = -100.0;
 280              		.loc 1 375 0
 281 0034 034C     		ldr	r4, .L33+8
 282              	.LVL29:
 283              	.L27:
 376:./Src/application.c ****         }
 377:./Src/application.c ****       }
 378:./Src/application.c ****   return axn;
 379:./Src/application.c **** }
 284              		.loc 1 379 0
 285 0036 2046     		mov	r0, r4
 286 0038 10BD     		pop	{r4, pc}
 287              	.LVL30:
 288              	.L34:
 289 003a 00BF     		.align	2
 290              	.L33:
 291 003c 00000000 		.word	app
 292 0040 0000C842 		.word	1120403456
 293 0044 0000C8C2 		.word	-1027080192
 294              		.cfi_endproc
 295              	.LFE70:
 297              		.section	.text.get_powerMax,"ax",%progbits
 298              		.align	2
 299              		.global	get_powerMax
 300              		.thumb
 301              		.thumb_func
 303              	get_powerMax:
 304              	.LFB73:
 380:./Src/application.c **** 
 381:./Src/application.c **** float scale_y(float y, float Vbatt){
 382:./Src/application.c ****   float ayn;
 383:./Src/application.c ****   ayn = 0.0;
 384:./Src/application.c ****       ayn = y * get_powerMax(Vbatt); //0.30000;
 385:./Src/application.c ****   return ayn;
 386:./Src/application.c **** }
 387:./Src/application.c **** 
 388:./Src/application.c **** float scale_x(float x, float Vbatt){
 389:./Src/application.c ****   float axn;
ARM GAS  /tmp/ccmsIxgg.s 			page 13


 390:./Src/application.c ****   axn = 0.0;
 391:./Src/application.c ****       axn = x * get_powerMax(Vbatt); //0.30000;
 392:./Src/application.c ****   return axn;
 393:./Src/application.c **** }
 394:./Src/application.c ****                                   //Vbatt,      Power max
 395:./Src/application.c **** const float Battery_power[][21] = {{50.0,       60.0/100.0},    //30% max potenza
 396:./Src/application.c ****                                   {49.0,        63.0/100.0},
 397:./Src/application.c ****                                   {48.0,        66.0/100.0},
 398:./Src/application.c ****                                   {47.0,        69.0/100.0},
 399:./Src/application.c ****                                   {46.0,        72.0/100.0},
 400:./Src/application.c ****                                   {45.0,        75.0/100.0},
 401:./Src/application.c ****                                   {44.0,        78.0/100.0},
 402:./Src/application.c ****                                   {43.0,        81.0/100.0},
 403:./Src/application.c ****                                   {42.0,        84.0/100.0},
 404:./Src/application.c ****                                   {41.0,        87.0/100.0},
 405:./Src/application.c ****                                   {40.0,        90.0/100.0},
 406:./Src/application.c ****                                   {39.0,        93.0/100.0},
 407:./Src/application.c ****                                   {38.0,        96.0/100.0},
 408:./Src/application.c ****                                   {37.0,        100.0/100.0},
 409:./Src/application.c ****                                   {36.0,        100.0/100.0},
 410:./Src/application.c ****                                   {35.0,        100.0/100.0},
 411:./Src/application.c ****                                   {34.0,        100.0/100.0},
 412:./Src/application.c ****                                   {33.0,        100.0/100.0},
 413:./Src/application.c ****                                   {32.0,        100.0/100.0},
 414:./Src/application.c ****                                   {31.0,        100.0/100.0},
 415:./Src/application.c ****                                   {30.0,        100.0/100.0}};
 416:./Src/application.c **** float get_powerMax(float Vbattery){
 305              		.loc 1 416 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              	.LVL31:
 310 0000 10B5     		push	{r4, lr}
 311              	.LCFI4:
 312              		.cfi_def_cfa_offset 8
 313              		.cfi_offset 4, -8
 314              		.cfi_offset 14, -4
 315 0002 0446     		mov	r4, r0
 417:./Src/application.c ****   if(Vbattery >= Battery_power[0][0]){
 316              		.loc 1 417 0
 317 0004 3249     		ldr	r1, .L54
 318 0006 FFF7FEFF 		bl	__aeabi_fcmpge
 319              	.LVL32:
 320 000a 0028     		cmp	r0, #0
 321 000c 44D1     		bne	.L38
 418:./Src/application.c ****     return Battery_power[0][1];
 419:./Src/application.c ****   }else if(Vbattery >= Battery_power[1][0]){
 322              		.loc 1 419 0
 323 000e 3149     		ldr	r1, .L54+4
 324 0010 2046     		mov	r0, r4
 325 0012 FFF7FEFF 		bl	__aeabi_fcmpge
 326              	.LVL33:
 327 0016 0028     		cmp	r0, #0
 328 0018 40D1     		bne	.L39
 420:./Src/application.c ****     return Battery_power[1][1];
 421:./Src/application.c ****   }else if(Vbattery >= Battery_power[2][0]){
 329              		.loc 1 421 0
ARM GAS  /tmp/ccmsIxgg.s 			page 14


 330 001a 2F49     		ldr	r1, .L54+8
 331 001c 2046     		mov	r0, r4
 332 001e FFF7FEFF 		bl	__aeabi_fcmpge
 333              	.LVL34:
 334 0022 0028     		cmp	r0, #0
 335 0024 3CD1     		bne	.L40
 422:./Src/application.c ****     return Battery_power[2][1];
 423:./Src/application.c ****   }else if(Vbattery >= Battery_power[3][0]){
 336              		.loc 1 423 0
 337 0026 2D49     		ldr	r1, .L54+12
 338 0028 2046     		mov	r0, r4
 339 002a FFF7FEFF 		bl	__aeabi_fcmpge
 340              	.LVL35:
 341 002e 0028     		cmp	r0, #0
 342 0030 38D1     		bne	.L41
 424:./Src/application.c ****     return Battery_power[3][1];
 425:./Src/application.c ****   }else if(Vbattery >= Battery_power[4][0]){
 343              		.loc 1 425 0
 344 0032 2B49     		ldr	r1, .L54+16
 345 0034 2046     		mov	r0, r4
 346 0036 FFF7FEFF 		bl	__aeabi_fcmpge
 347              	.LVL36:
 348 003a 0028     		cmp	r0, #0
 349 003c 34D1     		bne	.L42
 426:./Src/application.c ****     return Battery_power[4][1];
 427:./Src/application.c ****   }else if(Vbattery >= Battery_power[5][0]){
 350              		.loc 1 427 0
 351 003e 2949     		ldr	r1, .L54+20
 352 0040 2046     		mov	r0, r4
 353 0042 FFF7FEFF 		bl	__aeabi_fcmpge
 354              	.LVL37:
 355 0046 0028     		cmp	r0, #0
 356 0048 30D1     		bne	.L43
 428:./Src/application.c ****     return Battery_power[5][1];
 429:./Src/application.c ****   }else if(Vbattery >= Battery_power[6][0]){
 357              		.loc 1 429 0
 358 004a 2749     		ldr	r1, .L54+24
 359 004c 2046     		mov	r0, r4
 360 004e FFF7FEFF 		bl	__aeabi_fcmpge
 361              	.LVL38:
 362 0052 0028     		cmp	r0, #0
 363 0054 2DD1     		bne	.L44
 430:./Src/application.c ****     return Battery_power[6][1];
 431:./Src/application.c ****   }else if(Vbattery >= Battery_power[7][0]){
 364              		.loc 1 431 0
 365 0056 2549     		ldr	r1, .L54+28
 366 0058 2046     		mov	r0, r4
 367 005a FFF7FEFF 		bl	__aeabi_fcmpge
 368              	.LVL39:
 369 005e 0028     		cmp	r0, #0
 370 0060 29D1     		bne	.L45
 432:./Src/application.c ****     return Battery_power[7][1];
 433:./Src/application.c ****   }else if(Vbattery >= Battery_power[8][0]){
 371              		.loc 1 433 0
 372 0062 2349     		ldr	r1, .L54+32
 373 0064 2046     		mov	r0, r4
 374 0066 FFF7FEFF 		bl	__aeabi_fcmpge
ARM GAS  /tmp/ccmsIxgg.s 			page 15


 375              	.LVL40:
 376 006a 30BB     		cbnz	r0, .L46
 434:./Src/application.c ****     return Battery_power[8][1];
 435:./Src/application.c ****   }else if(Vbattery >= Battery_power[9][0]){
 377              		.loc 1 435 0
 378 006c 2149     		ldr	r1, .L54+36
 379 006e 2046     		mov	r0, r4
 380 0070 FFF7FEFF 		bl	__aeabi_fcmpge
 381              	.LVL41:
 382 0074 18BB     		cbnz	r0, .L47
 436:./Src/application.c ****     return Battery_power[9][1];
 437:./Src/application.c **** 
 438:./Src/application.c ****   }else if(Vbattery >= Battery_power[10][0]){
 383              		.loc 1 438 0
 384 0076 2049     		ldr	r1, .L54+40
 385 0078 2046     		mov	r0, r4
 386 007a FFF7FEFF 		bl	__aeabi_fcmpge
 387              	.LVL42:
 388 007e 00BB     		cbnz	r0, .L48
 439:./Src/application.c ****     return Battery_power[10][1];
 440:./Src/application.c ****   }else if(Vbattery >= Battery_power[11][0]){
 389              		.loc 1 440 0
 390 0080 1E49     		ldr	r1, .L54+44
 391 0082 2046     		mov	r0, r4
 392 0084 FFF7FEFF 		bl	__aeabi_fcmpge
 393              	.LVL43:
 394 0088 E8B9     		cbnz	r0, .L49
 441:./Src/application.c ****     return Battery_power[11][1];
 442:./Src/application.c ****   }else if(Vbattery >= Battery_power[12][0]){
 395              		.loc 1 442 0
 396 008a 1D49     		ldr	r1, .L54+48
 397 008c 2046     		mov	r0, r4
 398 008e FFF7FEFF 		bl	__aeabi_fcmpge
 399              	.LVL44:
 400 0092 D0B1     		cbz	r0, .L52
 443:./Src/application.c ****     return Battery_power[12][1];
 401              		.loc 1 443 0
 402 0094 1B48     		ldr	r0, .L54+52
 403 0096 10BD     		pop	{r4, pc}
 404              	.LVL45:
 405              	.L38:
 418:./Src/application.c ****   }else if(Vbattery >= Battery_power[1][0]){
 406              		.loc 1 418 0
 407 0098 1B48     		ldr	r0, .L54+56
 408 009a 10BD     		pop	{r4, pc}
 409              	.LVL46:
 410              	.L39:
 420:./Src/application.c ****   }else if(Vbattery >= Battery_power[2][0]){
 411              		.loc 1 420 0
 412 009c 1B48     		ldr	r0, .L54+60
 413 009e 10BD     		pop	{r4, pc}
 414              	.LVL47:
 415              	.L40:
 422:./Src/application.c ****   }else if(Vbattery >= Battery_power[3][0]){
 416              		.loc 1 422 0
 417 00a0 1B48     		ldr	r0, .L54+64
 418 00a2 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccmsIxgg.s 			page 16


 419              	.LVL48:
 420              	.L41:
 424:./Src/application.c ****   }else if(Vbattery >= Battery_power[4][0]){
 421              		.loc 1 424 0
 422 00a4 1B48     		ldr	r0, .L54+68
 423 00a6 10BD     		pop	{r4, pc}
 424              	.LVL49:
 425              	.L42:
 426:./Src/application.c ****   }else if(Vbattery >= Battery_power[5][0]){
 426              		.loc 1 426 0
 427 00a8 1B48     		ldr	r0, .L54+72
 428 00aa 10BD     		pop	{r4, pc}
 429              	.LVL50:
 430              	.L43:
 428:./Src/application.c ****   }else if(Vbattery >= Battery_power[6][0]){
 431              		.loc 1 428 0
 432 00ac 4FF07D50 		mov	r0, #1061158912
 433 00b0 10BD     		pop	{r4, pc}
 434              	.LVL51:
 435              	.L44:
 430:./Src/application.c ****   }else if(Vbattery >= Battery_power[7][0]){
 436              		.loc 1 430 0
 437 00b2 1A48     		ldr	r0, .L54+76
 438 00b4 10BD     		pop	{r4, pc}
 439              	.LVL52:
 440              	.L45:
 432:./Src/application.c ****   }else if(Vbattery >= Battery_power[8][0]){
 441              		.loc 1 432 0
 442 00b6 1A48     		ldr	r0, .L54+80
 443 00b8 10BD     		pop	{r4, pc}
 444              	.LVL53:
 445              	.L46:
 434:./Src/application.c ****   }else if(Vbattery >= Battery_power[9][0]){
 446              		.loc 1 434 0
 447 00ba 1A48     		ldr	r0, .L54+84
 448 00bc 10BD     		pop	{r4, pc}
 449              	.LVL54:
 450              	.L47:
 436:./Src/application.c **** 
 451              		.loc 1 436 0
 452 00be 1A48     		ldr	r0, .L54+88
 453 00c0 10BD     		pop	{r4, pc}
 454              	.LVL55:
 455              	.L48:
 439:./Src/application.c ****   }else if(Vbattery >= Battery_power[11][0]){
 456              		.loc 1 439 0
 457 00c2 1A48     		ldr	r0, .L54+92
 458 00c4 10BD     		pop	{r4, pc}
 459              	.LVL56:
 460              	.L49:
 441:./Src/application.c ****   }else if(Vbattery >= Battery_power[12][0]){
 461              		.loc 1 441 0
 462 00c6 1A48     		ldr	r0, .L54+96
 463 00c8 10BD     		pop	{r4, pc}
 464              	.LVL57:
 465              	.L52:
 444:./Src/application.c ****   }else if(Vbattery >= Battery_power[13][0]){
ARM GAS  /tmp/ccmsIxgg.s 			page 17


 445:./Src/application.c ****     return Battery_power[13][1];
 466              		.loc 1 445 0
 467 00ca 4FF07E50 		mov	r0, #1065353216
 446:./Src/application.c ****   }else if(Vbattery >= Battery_power[14][0]){
 447:./Src/application.c ****     return Battery_power[14][1];
 448:./Src/application.c ****   }else if(Vbattery >= Battery_power[15][0]){
 449:./Src/application.c ****     return Battery_power[15][1];
 450:./Src/application.c ****   }else if(Vbattery >= Battery_power[16][0]){
 451:./Src/application.c ****     return Battery_power[16][1];
 452:./Src/application.c ****   }else if(Vbattery >= Battery_power[17][0]){
 453:./Src/application.c ****     return Battery_power[17][1];
 454:./Src/application.c ****   }else if(Vbattery >= Battery_power[18][0]){
 455:./Src/application.c ****     return Battery_power[18][1];
 456:./Src/application.c ****   }else if(Vbattery >= Battery_power[19][0]){
 457:./Src/application.c ****     return Battery_power[19][1];
 458:./Src/application.c ****   }else if(Vbattery >= Battery_power[20][0]){
 459:./Src/application.c ****     return Battery_power[20][1];
 460:./Src/application.c ****   }else{
 461:./Src/application.c ****     return Battery_power[20][1];
 462:./Src/application.c ****   }
 463:./Src/application.c **** }
 468              		.loc 1 463 0
 469 00ce 10BD     		pop	{r4, pc}
 470              	.LVL58:
 471              	.L55:
 472              		.align	2
 473              	.L54:
 474 00d0 00004842 		.word	1112014848
 475 00d4 00004442 		.word	1111752704
 476 00d8 00004042 		.word	1111490560
 477 00dc 00003C42 		.word	1111228416
 478 00e0 00003842 		.word	1110966272
 479 00e4 00003442 		.word	1110704128
 480 00e8 00003042 		.word	1110441984
 481 00ec 00002C42 		.word	1110179840
 482 00f0 00002842 		.word	1109917696
 483 00f4 00002442 		.word	1109655552
 484 00f8 00002042 		.word	1109393408
 485 00fc 00001C42 		.word	1109131264
 486 0100 00001842 		.word	1108869120
 487 0104 8FC2753F 		.word	1064682127
 488 0108 9A99193F 		.word	1058642330
 489 010c AE47213F 		.word	1059145646
 490 0110 C3F5283F 		.word	1059648963
 491 0114 D7A3303F 		.word	1060152279
 492 0118 EC51383F 		.word	1060655596
 493 011c 14AE473F 		.word	1061662228
 494 0120 295C4F3F 		.word	1062165545
 495 0124 3D0A573F 		.word	1062668861
 496 0128 52B85E3F 		.word	1063172178
 497 012c 6666663F 		.word	1063675494
 498 0130 7B146E3F 		.word	1064178811
 499              		.cfi_endproc
 500              	.LFE73:
 502              		.global	__aeabi_fmul
 503              		.section	.text.scale_y,"ax",%progbits
 504              		.align	2
ARM GAS  /tmp/ccmsIxgg.s 			page 18


 505              		.global	scale_y
 506              		.thumb
 507              		.thumb_func
 509              	scale_y:
 510              	.LFB71:
 381:./Src/application.c ****   float ayn;
 511              		.loc 1 381 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 0, uses_anonymous_args = 0
 515              	.LVL59:
 516 0000 10B5     		push	{r4, lr}
 517              	.LCFI5:
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 4, -8
 520              		.cfi_offset 14, -4
 521 0002 0446     		mov	r4, r0
 522              	.LVL60:
 384:./Src/application.c ****   return ayn;
 523              		.loc 1 384 0
 524 0004 0846     		mov	r0, r1
 525              	.LVL61:
 526 0006 FFF7FEFF 		bl	get_powerMax
 527              	.LVL62:
 528 000a 2146     		mov	r1, r4
 529 000c FFF7FEFF 		bl	__aeabi_fmul
 530              	.LVL63:
 386:./Src/application.c **** 
 531              		.loc 1 386 0
 532 0010 10BD     		pop	{r4, pc}
 533              		.cfi_endproc
 534              	.LFE71:
 536 0012 00BF     		.section	.text.scale_x,"ax",%progbits
 537              		.align	2
 538              		.global	scale_x
 539              		.thumb
 540              		.thumb_func
 542              	scale_x:
 543              	.LFB72:
 388:./Src/application.c ****   float axn;
 544              		.loc 1 388 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548              	.LVL64:
 549 0000 10B5     		push	{r4, lr}
 550              	.LCFI6:
 551              		.cfi_def_cfa_offset 8
 552              		.cfi_offset 4, -8
 553              		.cfi_offset 14, -4
 554 0002 0446     		mov	r4, r0
 555              	.LVL65:
 391:./Src/application.c ****   return axn;
 556              		.loc 1 391 0
 557 0004 0846     		mov	r0, r1
 558              	.LVL66:
 559 0006 FFF7FEFF 		bl	get_powerMax
ARM GAS  /tmp/ccmsIxgg.s 			page 19


 560              	.LVL67:
 561 000a 2146     		mov	r1, r4
 562 000c FFF7FEFF 		bl	__aeabi_fmul
 563              	.LVL68:
 393:./Src/application.c ****                                   //Vbatt,      Power max
 564              		.loc 1 393 0
 565 0010 10BD     		pop	{r4, pc}
 566              		.cfi_endproc
 567              	.LFE72:
 569 0012 00BF     		.section	.text.accelleration_XY_Reset,"ax",%progbits
 570              		.align	2
 571              		.global	accelleration_XY_Reset
 572              		.thumb
 573              		.thumb_func
 575              	accelleration_XY_Reset:
 576              	.LFB74:
 464:./Src/application.c **** 
 465:./Src/application.c **** void accelleration_XY_Reset(void){
 577              		.loc 1 465 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 0
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 581              		@ link register save eliminated.
 466:./Src/application.c ****   app.faccY = 0.0;
 582              		.loc 1 466 0
 583 0000 024B     		ldr	r3, .L61
 584 0002 0022     		movs	r2, #0
 585 0004 5A62     		str	r2, [r3, #36]	@ float
 467:./Src/application.c ****   app.faccX = 0.0;
 586              		.loc 1 467 0
 587 0006 9A62     		str	r2, [r3, #40]	@ float
 588 0008 7047     		bx	lr
 589              	.L62:
 590 000a 00BF     		.align	2
 591              	.L61:
 592 000c 00000000 		.word	app
 593              		.cfi_endproc
 594              	.LFE74:
 596              		.global	__aeabi_f2d
 597              		.global	__aeabi_dadd
 598              		.global	__aeabi_d2f
 599              		.global	__aeabi_dsub
 600              		.section	.text.accellerationY,"ax",%progbits
 601              		.align	2
 602              		.global	accellerationY
 603              		.thumb
 604              		.thumb_func
 606              	accellerationY:
 607              	.LFB75:
 468:./Src/application.c **** }
 469:./Src/application.c **** 
 470:./Src/application.c **** float accellerationY(float value){
 608              		.loc 1 470 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              	.LVL69:
ARM GAS  /tmp/ccmsIxgg.s 			page 20


 613 0000 70B5     		push	{r4, r5, r6, lr}
 614              	.LCFI7:
 615              		.cfi_def_cfa_offset 16
 616              		.cfi_offset 4, -16
 617              		.cfi_offset 5, -12
 618              		.cfi_offset 6, -8
 619              		.cfi_offset 14, -4
 620 0002 0446     		mov	r4, r0
 471:./Src/application.c ****   /* value -> -1000 0 +1000 */
 472:./Src/application.c ****   float tval;
 473:./Src/application.c **** 
 474:./Src/application.c ****   tval = app.faccY;
 621              		.loc 1 474 0
 622 0004 1C4B     		ldr	r3, .L75+8
 623 0006 5D6A     		ldr	r5, [r3, #36]	@ float
 624              	.LVL70:
 475:./Src/application.c **** 
 476:./Src/application.c ****   //EXPEIMENT
 477:./Src/application.c ****   if(value > tval){
 625              		.loc 1 477 0
 626 0008 0146     		mov	r1, r0
 627 000a 2846     		mov	r0, r5
 628              	.LVL71:
 629 000c FFF7FEFF 		bl	__aeabi_fcmplt
 630              	.LVL72:
 631 0010 88B1     		cbz	r0, .L64
 478:./Src/application.c ****     app.faccY = app.faccY + ACCELLERATION_CONSTANT;
 632              		.loc 1 478 0
 633 0012 194E     		ldr	r6, .L75+8
 634 0014 706A     		ldr	r0, [r6, #36]	@ float
 635 0016 FFF7FEFF 		bl	__aeabi_f2d
 636              	.LVL73:
 637 001a 15A3     		adr	r3, .L75
 638 001c D3E90023 		ldrd	r2, [r3]
 639 0020 FFF7FEFF 		bl	__aeabi_dadd
 640              	.LVL74:
 641 0024 FFF7FEFF 		bl	__aeabi_d2f
 642              	.LVL75:
 643 0028 7062     		str	r0, [r6, #36]	@ float
 479:./Src/application.c ****     //limit
 480:./Src/application.c ****     if(app.faccY > value){
 644              		.loc 1 480 0
 645 002a 716A     		ldr	r1, [r6, #36]	@ float
 646 002c 2046     		mov	r0, r4
 647 002e FFF7FEFF 		bl	__aeabi_fcmplt
 648              	.LVL76:
 649 0032 00B1     		cbz	r0, .L64
 481:./Src/application.c ****       app.faccY = (float)value;
 650              		.loc 1 481 0
 651 0034 7462     		str	r4, [r6, #36]	@ float
 652              	.L64:
 482:./Src/application.c ****     }
 483:./Src/application.c ****   }
 484:./Src/application.c ****   if(value < tval){
 653              		.loc 1 484 0
 654 0036 2146     		mov	r1, r4
 655 0038 2846     		mov	r0, r5
ARM GAS  /tmp/ccmsIxgg.s 			page 21


 656 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 657              	.LVL77:
 658 003e 88B1     		cbz	r0, .L67
 485:./Src/application.c ****     app.faccY = app.faccY - ACCELLERATION_CONSTANT;
 659              		.loc 1 485 0
 660 0040 0D4D     		ldr	r5, .L75+8
 661              	.LVL78:
 662 0042 686A     		ldr	r0, [r5, #36]	@ float
 663 0044 FFF7FEFF 		bl	__aeabi_f2d
 664              	.LVL79:
 665 0048 09A3     		adr	r3, .L75
 666 004a D3E90023 		ldrd	r2, [r3]
 667 004e FFF7FEFF 		bl	__aeabi_dsub
 668              	.LVL80:
 669 0052 FFF7FEFF 		bl	__aeabi_d2f
 670              	.LVL81:
 671 0056 6862     		str	r0, [r5, #36]	@ float
 486:./Src/application.c ****     //limit
 487:./Src/application.c ****     if(app.faccY < value){
 672              		.loc 1 487 0
 673 0058 696A     		ldr	r1, [r5, #36]	@ float
 674 005a 2046     		mov	r0, r4
 675 005c FFF7FEFF 		bl	__aeabi_fcmpgt
 676              	.LVL82:
 677 0060 00B1     		cbz	r0, .L67
 488:./Src/application.c ****       app.faccY = (float)value;
 678              		.loc 1 488 0
 679 0062 6C62     		str	r4, [r5, #36]	@ float
 680              	.L67:
 489:./Src/application.c ****     }
 490:./Src/application.c ****   }
 491:./Src/application.c **** 
 492:./Src/application.c ****   /* //ORIGINAL
 493:./Src/application.c ****   if(value > 0.0){
 494:./Src/application.c ****     if(value > tval){
 495:./Src/application.c ****       //Accelleration
 496:./Src/application.c ****       if(tval < 0.0){
 497:./Src/application.c ****         app.faccY = 0.0;
 498:./Src/application.c ****       }else{
 499:./Src/application.c ****         app.faccY = app.faccY + ACCELLERATION_CONSTANT;
 500:./Src/application.c ****         //limit
 501:./Src/application.c ****         if(app.faccY > value){
 502:./Src/application.c ****           app.faccY = (float)value;
 503:./Src/application.c ****         }
 504:./Src/application.c ****       }
 505:./Src/application.c ****     }else if(value < tval){
 506:./Src/application.c ****         app.faccY = (float)value;
 507:./Src/application.c ****     }else{
 508:./Src/application.c ****         app.faccY = (float)value;
 509:./Src/application.c ****     }
 510:./Src/application.c ****   }else if(value < 0){
 511:./Src/application.c ****     if(value < tval){
 512:./Src/application.c ****       //Accelleration
 513:./Src/application.c ****       if(tval > 0){
 514:./Src/application.c ****         app.faccY = 0.0;
 515:./Src/application.c ****       }else{
 516:./Src/application.c ****         app.faccY = app.faccY - ACCELLERATION_CONSTANT;
ARM GAS  /tmp/ccmsIxgg.s 			page 22


 517:./Src/application.c ****         //limit
 518:./Src/application.c ****         if(app.faccY < value){
 519:./Src/application.c ****           app.faccY = (float)value;
 520:./Src/application.c ****         }
 521:./Src/application.c ****       }
 522:./Src/application.c ****     }else if(value > tval){
 523:./Src/application.c ****         app.faccY = (float)value;
 524:./Src/application.c ****     }else{
 525:./Src/application.c ****         app.faccY = (float)value;
 526:./Src/application.c ****     }
 527:./Src/application.c ****   }else{
 528:./Src/application.c ****     app.faccY = (float)value;
 529:./Src/application.c ****   }*/
 530:./Src/application.c **** 
 531:./Src/application.c ****   tval = app.faccY;
 681              		.loc 1 531 0
 682 0064 044B     		ldr	r3, .L75+8
 683 0066 586A     		ldr	r0, [r3, #36]	@ float
 684              	.LVL83:
 532:./Src/application.c **** 
 533:./Src/application.c ****   return tval;
 534:./Src/application.c **** }
 685              		.loc 1 534 0
 686 0068 70BD     		pop	{r4, r5, r6, pc}
 687              	.LVL84:
 688              	.L76:
 689 006a 00BFAFF3 		.align	3
 689      0080
 690              	.L75:
 691 0070 33333333 		.word	858993459
 692 0074 3333E33F 		.word	1071854387
 693 0078 00000000 		.word	app
 694              		.cfi_endproc
 695              	.LFE75:
 697              		.section	.text.accellerationX,"ax",%progbits
 698              		.align	2
 699              		.global	accellerationX
 700              		.thumb
 701              		.thumb_func
 703              	accellerationX:
 704              	.LFB76:
 535:./Src/application.c **** 
 536:./Src/application.c **** float accellerationX(float value){
 705              		.loc 1 536 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709              	.LVL85:
 710 0000 70B5     		push	{r4, r5, r6, lr}
 711              	.LCFI8:
 712              		.cfi_def_cfa_offset 16
 713              		.cfi_offset 4, -16
 714              		.cfi_offset 5, -12
 715              		.cfi_offset 6, -8
 716              		.cfi_offset 14, -4
 717 0002 0446     		mov	r4, r0
 537:./Src/application.c ****   /* value -> -1000 0 +1000 */
ARM GAS  /tmp/ccmsIxgg.s 			page 23


 538:./Src/application.c ****   float tval;
 539:./Src/application.c **** 
 540:./Src/application.c ****   tval = app.faccX;
 718              		.loc 1 540 0
 719 0004 1C4B     		ldr	r3, .L89+8
 720 0006 9D6A     		ldr	r5, [r3, #40]	@ float
 721              	.LVL86:
 541:./Src/application.c **** 
 542:./Src/application.c ****   //EXPERIMENT
 543:./Src/application.c ****   if(value > tval){
 722              		.loc 1 543 0
 723 0008 0146     		mov	r1, r0
 724 000a 2846     		mov	r0, r5
 725              	.LVL87:
 726 000c FFF7FEFF 		bl	__aeabi_fcmplt
 727              	.LVL88:
 728 0010 88B1     		cbz	r0, .L78
 544:./Src/application.c ****     app.faccX = app.faccX + ACCELLERATION_CONSTANT;
 729              		.loc 1 544 0
 730 0012 194E     		ldr	r6, .L89+8
 731 0014 B06A     		ldr	r0, [r6, #40]	@ float
 732 0016 FFF7FEFF 		bl	__aeabi_f2d
 733              	.LVL89:
 734 001a 15A3     		adr	r3, .L89
 735 001c D3E90023 		ldrd	r2, [r3]
 736 0020 FFF7FEFF 		bl	__aeabi_dadd
 737              	.LVL90:
 738 0024 FFF7FEFF 		bl	__aeabi_d2f
 739              	.LVL91:
 740 0028 B062     		str	r0, [r6, #40]	@ float
 545:./Src/application.c ****     //limit
 546:./Src/application.c ****     if(app.faccX > value){
 741              		.loc 1 546 0
 742 002a B16A     		ldr	r1, [r6, #40]	@ float
 743 002c 2046     		mov	r0, r4
 744 002e FFF7FEFF 		bl	__aeabi_fcmplt
 745              	.LVL92:
 746 0032 00B1     		cbz	r0, .L78
 547:./Src/application.c ****       app.faccX = (float)value;
 747              		.loc 1 547 0
 748 0034 B462     		str	r4, [r6, #40]	@ float
 749              	.L78:
 548:./Src/application.c ****     }
 549:./Src/application.c ****   }
 550:./Src/application.c ****   if(value < tval){
 750              		.loc 1 550 0
 751 0036 2146     		mov	r1, r4
 752 0038 2846     		mov	r0, r5
 753 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 754              	.LVL93:
 755 003e 88B1     		cbz	r0, .L81
 551:./Src/application.c ****     app.faccX = app.faccX - ACCELLERATION_CONSTANT;
 756              		.loc 1 551 0
 757 0040 0D4D     		ldr	r5, .L89+8
 758              	.LVL94:
 759 0042 A86A     		ldr	r0, [r5, #40]	@ float
 760 0044 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  /tmp/ccmsIxgg.s 			page 24


 761              	.LVL95:
 762 0048 09A3     		adr	r3, .L89
 763 004a D3E90023 		ldrd	r2, [r3]
 764 004e FFF7FEFF 		bl	__aeabi_dsub
 765              	.LVL96:
 766 0052 FFF7FEFF 		bl	__aeabi_d2f
 767              	.LVL97:
 768 0056 A862     		str	r0, [r5, #40]	@ float
 552:./Src/application.c ****     //limit
 553:./Src/application.c ****     if(app.faccX < value){
 769              		.loc 1 553 0
 770 0058 A96A     		ldr	r1, [r5, #40]	@ float
 771 005a 2046     		mov	r0, r4
 772 005c FFF7FEFF 		bl	__aeabi_fcmpgt
 773              	.LVL98:
 774 0060 00B1     		cbz	r0, .L81
 554:./Src/application.c ****       app.faccX = (float)value;
 775              		.loc 1 554 0
 776 0062 AC62     		str	r4, [r5, #40]	@ float
 777              	.L81:
 555:./Src/application.c ****     }
 556:./Src/application.c ****   }
 557:./Src/application.c ****   /* ORIGINAL
 558:./Src/application.c ****   if(value > 0){
 559:./Src/application.c ****     if(value > tval){
 560:./Src/application.c ****       //Accelleration
 561:./Src/application.c ****       if(tval < 0.0){
 562:./Src/application.c ****         app.faccX = 0.0;
 563:./Src/application.c ****       }else{
 564:./Src/application.c ****         app.faccX = app.faccX + ACCELLERATION_CONSTANT;
 565:./Src/application.c ****         //limit
 566:./Src/application.c ****         if(app.faccX > value){
 567:./Src/application.c ****           app.faccX = (float)value;
 568:./Src/application.c ****         }
 569:./Src/application.c ****       }
 570:./Src/application.c ****     }else if(value < tval){
 571:./Src/application.c ****         app.faccX = (float)value;
 572:./Src/application.c ****     }else{
 573:./Src/application.c ****         app.faccX = (float)value;
 574:./Src/application.c ****     }
 575:./Src/application.c ****   }else if(value < 0){
 576:./Src/application.c ****     if(value < tval){
 577:./Src/application.c ****       //Accelleration
 578:./Src/application.c ****       if(tval > 0.0){
 579:./Src/application.c ****         app.faccX = 0.0;
 580:./Src/application.c ****       }else{
 581:./Src/application.c ****         app.faccX = app.faccX - ACCELLERATION_CONSTANT;
 582:./Src/application.c ****         //limit
 583:./Src/application.c ****         if(app.faccX < value){
 584:./Src/application.c ****           app.faccX = (float)value;
 585:./Src/application.c ****         }
 586:./Src/application.c ****       }
 587:./Src/application.c ****     }else if(value > tval){
 588:./Src/application.c ****         app.faccX = (float)value;
 589:./Src/application.c ****     }else{
 590:./Src/application.c ****         app.faccX = (float)value;
 591:./Src/application.c ****     }
ARM GAS  /tmp/ccmsIxgg.s 			page 25


 592:./Src/application.c ****   }else{
 593:./Src/application.c ****     app.faccX = (float)value;
 594:./Src/application.c ****   }
 595:./Src/application.c **** */
 596:./Src/application.c ****   tval = app.faccX;
 778              		.loc 1 596 0
 779 0064 044B     		ldr	r3, .L89+8
 780 0066 986A     		ldr	r0, [r3, #40]	@ float
 781              	.LVL99:
 597:./Src/application.c **** 
 598:./Src/application.c ****   return tval;
 599:./Src/application.c **** }
 782              		.loc 1 599 0
 783 0068 70BD     		pop	{r4, r5, r6, pc}
 784              	.LVL100:
 785              	.L90:
 786 006a 00BFAFF3 		.align	3
 786      0080
 787              	.L89:
 788 0070 33333333 		.word	858993459
 789 0074 3333E33F 		.word	1071854387
 790 0078 00000000 		.word	app
 791              		.cfi_endproc
 792              	.LFE76:
 794              		.section	.text.accellerationYHARD,"ax",%progbits
 795              		.align	2
 796              		.global	accellerationYHARD
 797              		.thumb
 798              		.thumb_func
 800              	accellerationYHARD:
 801              	.LFB77:
 600:./Src/application.c **** 
 601:./Src/application.c **** float accellerationYHARD(float value){
 802              		.loc 1 601 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              	.LVL101:
 807 0000 70B5     		push	{r4, r5, r6, lr}
 808              	.LCFI9:
 809              		.cfi_def_cfa_offset 16
 810              		.cfi_offset 4, -16
 811              		.cfi_offset 5, -12
 812              		.cfi_offset 6, -8
 813              		.cfi_offset 14, -4
 814 0002 0446     		mov	r4, r0
 602:./Src/application.c ****   /* value -> -1000 0 +1000 */
 603:./Src/application.c ****   float tval;
 604:./Src/application.c **** 
 605:./Src/application.c ****   tval = app.faccY;
 815              		.loc 1 605 0
 816 0004 1C4B     		ldr	r3, .L103+8
 817 0006 5D6A     		ldr	r5, [r3, #36]	@ float
 818              	.LVL102:
 606:./Src/application.c **** 
 607:./Src/application.c ****   //EXPEIMENT
 608:./Src/application.c ****   if(value > tval){
ARM GAS  /tmp/ccmsIxgg.s 			page 26


 819              		.loc 1 608 0
 820 0008 0146     		mov	r1, r0
 821 000a 2846     		mov	r0, r5
 822              	.LVL103:
 823 000c FFF7FEFF 		bl	__aeabi_fcmplt
 824              	.LVL104:
 825 0010 88B1     		cbz	r0, .L92
 609:./Src/application.c ****     app.faccY = app.faccY + ACCELLERATION_CONSTANT_HARD;
 826              		.loc 1 609 0
 827 0012 194E     		ldr	r6, .L103+8
 828 0014 706A     		ldr	r0, [r6, #36]	@ float
 829 0016 FFF7FEFF 		bl	__aeabi_f2d
 830              	.LVL105:
 831 001a 15A3     		adr	r3, .L103
 832 001c D3E90023 		ldrd	r2, [r3]
 833 0020 FFF7FEFF 		bl	__aeabi_dadd
 834              	.LVL106:
 835 0024 FFF7FEFF 		bl	__aeabi_d2f
 836              	.LVL107:
 837 0028 7062     		str	r0, [r6, #36]	@ float
 610:./Src/application.c ****     //limit
 611:./Src/application.c ****     if(app.faccY > value){
 838              		.loc 1 611 0
 839 002a 716A     		ldr	r1, [r6, #36]	@ float
 840 002c 2046     		mov	r0, r4
 841 002e FFF7FEFF 		bl	__aeabi_fcmplt
 842              	.LVL108:
 843 0032 00B1     		cbz	r0, .L92
 612:./Src/application.c ****       app.faccY = (float)value;
 844              		.loc 1 612 0
 845 0034 7462     		str	r4, [r6, #36]	@ float
 846              	.L92:
 613:./Src/application.c ****     }
 614:./Src/application.c ****   }
 615:./Src/application.c ****   if(value < tval){
 847              		.loc 1 615 0
 848 0036 2146     		mov	r1, r4
 849 0038 2846     		mov	r0, r5
 850 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 851              	.LVL109:
 852 003e 88B1     		cbz	r0, .L95
 616:./Src/application.c ****     app.faccY = app.faccY - ACCELLERATION_CONSTANT_HARD;
 853              		.loc 1 616 0
 854 0040 0D4D     		ldr	r5, .L103+8
 855              	.LVL110:
 856 0042 686A     		ldr	r0, [r5, #36]	@ float
 857 0044 FFF7FEFF 		bl	__aeabi_f2d
 858              	.LVL111:
 859 0048 09A3     		adr	r3, .L103
 860 004a D3E90023 		ldrd	r2, [r3]
 861 004e FFF7FEFF 		bl	__aeabi_dsub
 862              	.LVL112:
 863 0052 FFF7FEFF 		bl	__aeabi_d2f
 864              	.LVL113:
 865 0056 6862     		str	r0, [r5, #36]	@ float
 617:./Src/application.c ****     //limit
 618:./Src/application.c ****     if(app.faccY < value){
ARM GAS  /tmp/ccmsIxgg.s 			page 27


 866              		.loc 1 618 0
 867 0058 696A     		ldr	r1, [r5, #36]	@ float
 868 005a 2046     		mov	r0, r4
 869 005c FFF7FEFF 		bl	__aeabi_fcmpgt
 870              	.LVL114:
 871 0060 00B1     		cbz	r0, .L95
 619:./Src/application.c ****       app.faccY = (float)value;
 872              		.loc 1 619 0
 873 0062 6C62     		str	r4, [r5, #36]	@ float
 874              	.L95:
 620:./Src/application.c ****     }
 621:./Src/application.c ****   }
 622:./Src/application.c ****   tval = app.faccY;
 875              		.loc 1 622 0
 876 0064 044B     		ldr	r3, .L103+8
 877 0066 586A     		ldr	r0, [r3, #36]	@ float
 878              	.LVL115:
 623:./Src/application.c ****   return tval;
 624:./Src/application.c **** }
 879              		.loc 1 624 0
 880 0068 70BD     		pop	{r4, r5, r6, pc}
 881              	.LVL116:
 882              	.L104:
 883 006a 00BFAFF3 		.align	3
 883      0080
 884              	.L103:
 885 0070 B81E85EB 		.word	-343597384
 886 0074 51B89E3F 		.word	1067366481
 887 0078 00000000 		.word	app
 888              		.cfi_endproc
 889              	.LFE77:
 891              		.section	.text.accellerationXHARD,"ax",%progbits
 892              		.align	2
 893              		.global	accellerationXHARD
 894              		.thumb
 895              		.thumb_func
 897              	accellerationXHARD:
 898              	.LFB78:
 625:./Src/application.c **** float accellerationXHARD(float value){
 899              		.loc 1 625 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              	.LVL117:
 904 0000 70B5     		push	{r4, r5, r6, lr}
 905              	.LCFI10:
 906              		.cfi_def_cfa_offset 16
 907              		.cfi_offset 4, -16
 908              		.cfi_offset 5, -12
 909              		.cfi_offset 6, -8
 910              		.cfi_offset 14, -4
 911 0002 0446     		mov	r4, r0
 626:./Src/application.c ****   /* value -> -1000 0 +1000 */
 627:./Src/application.c ****   float tval;
 628:./Src/application.c **** 
 629:./Src/application.c ****   tval = app.faccX;
 912              		.loc 1 629 0
ARM GAS  /tmp/ccmsIxgg.s 			page 28


 913 0004 1C4B     		ldr	r3, .L117+8
 914 0006 9D6A     		ldr	r5, [r3, #40]	@ float
 915              	.LVL118:
 630:./Src/application.c **** 
 631:./Src/application.c ****   //EXPERIMENT
 632:./Src/application.c ****   if(value > tval){
 916              		.loc 1 632 0
 917 0008 0146     		mov	r1, r0
 918 000a 2846     		mov	r0, r5
 919              	.LVL119:
 920 000c FFF7FEFF 		bl	__aeabi_fcmplt
 921              	.LVL120:
 922 0010 88B1     		cbz	r0, .L106
 633:./Src/application.c ****     app.faccX = app.faccX + ACCELLERATION_CONSTANT_HARD;
 923              		.loc 1 633 0
 924 0012 194E     		ldr	r6, .L117+8
 925 0014 B06A     		ldr	r0, [r6, #40]	@ float
 926 0016 FFF7FEFF 		bl	__aeabi_f2d
 927              	.LVL121:
 928 001a 15A3     		adr	r3, .L117
 929 001c D3E90023 		ldrd	r2, [r3]
 930 0020 FFF7FEFF 		bl	__aeabi_dadd
 931              	.LVL122:
 932 0024 FFF7FEFF 		bl	__aeabi_d2f
 933              	.LVL123:
 934 0028 B062     		str	r0, [r6, #40]	@ float
 634:./Src/application.c ****     //limit
 635:./Src/application.c ****     if(app.faccX > value){
 935              		.loc 1 635 0
 936 002a B16A     		ldr	r1, [r6, #40]	@ float
 937 002c 2046     		mov	r0, r4
 938 002e FFF7FEFF 		bl	__aeabi_fcmplt
 939              	.LVL124:
 940 0032 00B1     		cbz	r0, .L106
 636:./Src/application.c ****       app.faccX = (float)value;
 941              		.loc 1 636 0
 942 0034 B462     		str	r4, [r6, #40]	@ float
 943              	.L106:
 637:./Src/application.c ****     }
 638:./Src/application.c ****   }
 639:./Src/application.c ****   if(value < tval){
 944              		.loc 1 639 0
 945 0036 2146     		mov	r1, r4
 946 0038 2846     		mov	r0, r5
 947 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 948              	.LVL125:
 949 003e 88B1     		cbz	r0, .L109
 640:./Src/application.c ****     app.faccX = app.faccX - ACCELLERATION_CONSTANT_HARD;
 950              		.loc 1 640 0
 951 0040 0D4D     		ldr	r5, .L117+8
 952              	.LVL126:
 953 0042 A86A     		ldr	r0, [r5, #40]	@ float
 954 0044 FFF7FEFF 		bl	__aeabi_f2d
 955              	.LVL127:
 956 0048 09A3     		adr	r3, .L117
 957 004a D3E90023 		ldrd	r2, [r3]
 958 004e FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  /tmp/ccmsIxgg.s 			page 29


 959              	.LVL128:
 960 0052 FFF7FEFF 		bl	__aeabi_d2f
 961              	.LVL129:
 962 0056 A862     		str	r0, [r5, #40]	@ float
 641:./Src/application.c ****     //limit
 642:./Src/application.c ****     if(app.faccX < value){
 963              		.loc 1 642 0
 964 0058 A96A     		ldr	r1, [r5, #40]	@ float
 965 005a 2046     		mov	r0, r4
 966 005c FFF7FEFF 		bl	__aeabi_fcmpgt
 967              	.LVL130:
 968 0060 00B1     		cbz	r0, .L109
 643:./Src/application.c ****       app.faccX = (float)value;
 969              		.loc 1 643 0
 970 0062 AC62     		str	r4, [r5, #40]	@ float
 971              	.L109:
 644:./Src/application.c ****     }
 645:./Src/application.c ****   }
 646:./Src/application.c ****   tval = app.faccX;
 972              		.loc 1 646 0
 973 0064 044B     		ldr	r3, .L117+8
 974 0066 986A     		ldr	r0, [r3, #40]	@ float
 975              	.LVL131:
 647:./Src/application.c **** 
 648:./Src/application.c ****   return tval;
 649:./Src/application.c **** }
 976              		.loc 1 649 0
 977 0068 70BD     		pop	{r4, r5, r6, pc}
 978              	.LVL132:
 979              	.L118:
 980 006a 00BFAFF3 		.align	3
 980      0080
 981              	.L117:
 982 0070 B81E85EB 		.word	-343597384
 983 0074 51B89E3F 		.word	1067366481
 984 0078 00000000 		.word	app
 985              		.cfi_endproc
 986              	.LFE78:
 988              		.global	__aeabi_ui2d
 989              		.global	__aeabi_ddiv
 990              		.global	__aeabi_d2uiz
 991              		.global	__aeabi_i2d
 992              		.global	__aeabi_dmul
 993              		.section	.text.Battery_TASK,"ax",%progbits
 994              		.align	2
 995              		.global	Battery_TASK
 996              		.thumb
 997              		.thumb_func
 999              	Battery_TASK:
 1000              	.LFB79:
 650:./Src/application.c **** 
 651:./Src/application.c **** 
 652:./Src/application.c **** 
 653:./Src/application.c **** // BATTERY TASK
 654:./Src/application.c **** /*
 655:./Src/application.c **** void Battery_TASK(void){
 656:./Src/application.c ****   if((HAL_GetTick() - battery_dati.time_batt)>200){
ARM GAS  /tmp/ccmsIxgg.s 			page 30


 657:./Src/application.c ****     battery_dati.time_batt = HAL_GetTick();
 658:./Src/application.c **** 
 659:./Src/application.c ****    battery_dati.somma_batt = battery_dati.somma_batt  + ADC_BATTERY();
 660:./Src/application.c ****    battery_dati.counter_media++;
 661:./Src/application.c ****    if(battery_dati.counter_media >= 30){
 662:./Src/application.c ****     battery_dati.counter_media = 0;
 663:./Src/application.c **** 
 664:./Src/application.c ****       //Batteria media valore
 665:./Src/application.c ****       battery_dati.VBatt = (float)battery_dati.somma_batt / 30.0;
 666:./Src/application.c ****       battery_dati.VBatt = battery_dati.VBatt * ADC_BATTERY_VOLT;
 667:./Src/application.c **** 
 668:./Src/application.c ****       battery_dati.somma_batt = 0;
 669:./Src/application.c ****    }
 670:./Src/application.c ****   }
 671:./Src/application.c **** }
 672:./Src/application.c **** */
 673:./Src/application.c **** 
 674:./Src/application.c **** //http://stackoverflow.com/questions/10990618/calculate-rolling-moving-average-in-c/10990656#109906
 675:./Src/application.c **** //ROLLING ACERAGE
 676:./Src/application.c **** void Battery_TASK(void){
 1001              		.loc 1 676 0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1006              	.LCFI11:
 1007              		.cfi_def_cfa_offset 24
 1008              		.cfi_offset 3, -24
 1009              		.cfi_offset 4, -20
 1010              		.cfi_offset 5, -16
 1011              		.cfi_offset 6, -12
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
 677:./Src/application.c ****   uint32_t temp32;
 678:./Src/application.c ****   if((HAL_GetTick() - battery_dati.time_batt)>200){
 1014              		.loc 1 678 0
 1015 0002 FFF7FEFF 		bl	HAL_GetTick
 1016              	.LVL133:
 1017 0006 204B     		ldr	r3, .L122+8
 1018 0008 5B68     		ldr	r3, [r3, #4]
 1019 000a C01A     		subs	r0, r0, r3
 1020 000c C828     		cmp	r0, #200
 1021 000e 36D9     		bls	.L119
 679:./Src/application.c ****     battery_dati.time_batt = HAL_GetTick();
 1022              		.loc 1 679 0
 1023 0010 FFF7FEFF 		bl	HAL_GetTick
 1024              	.LVL134:
 1025 0014 1C4C     		ldr	r4, .L122+8
 1026 0016 6060     		str	r0, [r4, #4]
 680:./Src/application.c **** 
 681:./Src/application.c ****     temp32 = battery_dati.somma_batt;
 1027              		.loc 1 681 0
 1028 0018 A068     		ldr	r0, [r4, #8]
 1029              	.LVL135:
 682:./Src/application.c ****     battery_dati.somma_batt -=  temp32 / 10.0;
 1030              		.loc 1 682 0
 1031 001a A568     		ldr	r5, [r4, #8]
ARM GAS  /tmp/ccmsIxgg.s 			page 31


 1032 001c FFF7FEFF 		bl	__aeabi_ui2d
 1033              	.LVL136:
 1034 0020 0022     		movs	r2, #0
 1035 0022 1A4B     		ldr	r3, .L122+12
 1036 0024 FFF7FEFF 		bl	__aeabi_ddiv
 1037              	.LVL137:
 1038 0028 0646     		mov	r6, r0
 1039 002a 0F46     		mov	r7, r1
 1040 002c 2846     		mov	r0, r5
 1041 002e FFF7FEFF 		bl	__aeabi_ui2d
 1042              	.LVL138:
 1043 0032 3246     		mov	r2, r6
 1044 0034 3B46     		mov	r3, r7
 1045 0036 FFF7FEFF 		bl	__aeabi_dsub
 1046              	.LVL139:
 1047 003a FFF7FEFF 		bl	__aeabi_d2uiz
 1048              	.LVL140:
 1049 003e A060     		str	r0, [r4, #8]
 683:./Src/application.c ****     battery_dati.somma_batt += ADC_BATTERY() / 10.0;
 1050              		.loc 1 683 0
 1051 0040 FFF7FEFF 		bl	ADC_BATTERY
 1052              	.LVL141:
 1053 0044 FFF7FEFF 		bl	__aeabi_i2d
 1054              	.LVL142:
 1055 0048 0022     		movs	r2, #0
 1056 004a 104B     		ldr	r3, .L122+12
 1057 004c FFF7FEFF 		bl	__aeabi_ddiv
 1058              	.LVL143:
 1059 0050 0646     		mov	r6, r0
 1060 0052 0F46     		mov	r7, r1
 1061 0054 A068     		ldr	r0, [r4, #8]
 1062 0056 FFF7FEFF 		bl	__aeabi_ui2d
 1063              	.LVL144:
 1064 005a 3246     		mov	r2, r6
 1065 005c 3B46     		mov	r3, r7
 1066 005e FFF7FEFF 		bl	__aeabi_dadd
 1067              	.LVL145:
 1068 0062 FFF7FEFF 		bl	__aeabi_d2uiz
 1069              	.LVL146:
 1070 0066 A060     		str	r0, [r4, #8]
 684:./Src/application.c **** 
 685:./Src/application.c ****       //Batteria media valore
 686:./Src/application.c ****    battery_dati.VBatt = battery_dati.somma_batt * ADC_BATTERY_VOLT;
 1071              		.loc 1 686 0
 1072 0068 A068     		ldr	r0, [r4, #8]
 1073 006a FFF7FEFF 		bl	__aeabi_ui2d
 1074              	.LVL147:
 1075 006e 04A3     		adr	r3, .L122
 1076 0070 D3E90023 		ldrd	r2, [r3]
 1077 0074 FFF7FEFF 		bl	__aeabi_dmul
 1078              	.LVL148:
 1079 0078 FFF7FEFF 		bl	__aeabi_d2f
 1080              	.LVL149:
 1081 007c 2060     		str	r0, [r4]	@ float
 1082              	.L119:
 1083 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1084              	.L123:
ARM GAS  /tmp/ccmsIxgg.s 			page 32


 1085              		.align	3
 1086              	.L122:
 1087 0080 6C787AA5 		.word	-1518700436
 1088 0084 2C439C3F 		.word	1067205420
 1089 0088 00000000 		.word	battery_dati
 1090 008c 00002440 		.word	1076101120
 1091              		.cfi_endproc
 1092              	.LFE79:
 1094              		.section	.text.WAIT_CHARGE_FINISH,"ax",%progbits
 1095              		.align	2
 1096              		.global	WAIT_CHARGE_FINISH
 1097              		.thumb
 1098              		.thumb_func
 1100              	WAIT_CHARGE_FINISH:
 1101              	.LFB66:
  28:./Src/application.c ****   uint32_t timerBatteryC;
 1102              		.loc 1 28 0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 0
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 1106 0000 10B5     		push	{r4, lr}
 1107              	.LCFI12:
 1108              		.cfi_def_cfa_offset 8
 1109              		.cfi_offset 4, -8
 1110              		.cfi_offset 14, -4
  31:./Src/application.c ****   MotorR_stop();
 1111              		.loc 1 31 0
 1112 0002 0120     		movs	r0, #1
 1113 0004 FFF7FEFF 		bl	Led_Set
 1114              	.LVL150:
  32:./Src/application.c ****   MotorL_stop();
 1115              		.loc 1 32 0
 1116 0008 FFF7FEFF 		bl	MotorR_stop
 1117              	.LVL151:
  33:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
 1118              		.loc 1 33 0
 1119 000c FFF7FEFF 		bl	MotorL_stop
 1120              	.LVL152:
  34:./Src/application.c ****   Buzzer_OneLongBeep();
 1121              		.loc 1 34 0
 1122 0010 1A4C     		ldr	r4, .L132
 1123 0012 2046     		mov	r0, r4
 1124 0014 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1125              	.LVL153:
  35:./Src/application.c ****   HAL_IWDG_Refresh(&hiwdg);   //819mS
 1126              		.loc 1 35 0
 1127 0018 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1128              	.LVL154:
  36:./Src/application.c ****   Buzzer_OneLongBeep();
 1129              		.loc 1 36 0
 1130 001c 2046     		mov	r0, r4
 1131 001e FFF7FEFF 		bl	HAL_IWDG_Refresh
 1132              	.LVL155:
  37:./Src/application.c ****   timerBatteryC = HAL_GetTick();
 1133              		.loc 1 37 0
 1134 0022 FFF7FEFF 		bl	Buzzer_OneLongBeep
 1135              	.LVL156:
ARM GAS  /tmp/ccmsIxgg.s 			page 33


  38:./Src/application.c **** 
 1136              		.loc 1 38 0
 1137 0026 FFF7FEFF 		bl	HAL_GetTick
 1138              	.LVL157:
 1139 002a 0446     		mov	r4, r0
 1140              	.LVL158:
  40:./Src/application.c ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 1141              		.loc 1 40 0
 1142 002c 1CE0     		b	.L125
 1143              	.LVL159:
 1144              	.L129:
  41:./Src/application.c ****     HAL_Delay(250);
 1145              		.loc 1 41 0
 1146 002e 1348     		ldr	r0, .L132
 1147 0030 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1148              	.LVL160:
  42:./Src/application.c ****     Battery_TASK();
 1149              		.loc 1 42 0
 1150 0034 FA20     		movs	r0, #250
 1151 0036 FFF7FEFF 		bl	HAL_Delay
 1152              	.LVL161:
  43:./Src/application.c ****     if(GET_BatteryAverage() < 41.250){
 1153              		.loc 1 43 0
 1154 003a FFF7FEFF 		bl	Battery_TASK
 1155              	.LVL162:
  44:./Src/application.c ****       timerBatteryC = HAL_GetTick();
 1156              		.loc 1 44 0
 1157 003e FFF7FEFF 		bl	GET_BatteryAverage
 1158              	.LVL163:
 1159 0042 0F49     		ldr	r1, .L132+4
 1160 0044 FFF7FEFF 		bl	__aeabi_fcmplt
 1161              	.LVL164:
 1162 0048 10B1     		cbz	r0, .L126
  45:./Src/application.c ****     }
 1163              		.loc 1 45 0
 1164 004a FFF7FEFF 		bl	HAL_GetTick
 1165              	.LVL165:
 1166 004e 0446     		mov	r4, r0
 1167              	.LVL166:
 1168              	.L126:
  47:./Src/application.c ****       Buzzer_OneLongBeep();
 1169              		.loc 1 47 0
 1170 0050 FFF7FEFF 		bl	HAL_GetTick
 1171              	.LVL167:
 1172 0054 001B     		subs	r0, r0, r4
 1173 0056 44F62063 		movw	r3, #20000
 1174 005a 9842     		cmp	r0, r3
 1175 005c 04D9     		bls	.L125
  48:./Src/application.c ****       HAL_IWDG_Refresh(&hiwdg);   //819mS
 1176              		.loc 1 48 0
 1177 005e FFF7FEFF 		bl	Buzzer_OneLongBeep
 1178              	.LVL168:
  49:./Src/application.c ****     }
 1179              		.loc 1 49 0
 1180 0062 0648     		ldr	r0, .L132
 1181 0064 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1182              	.LVL169:
ARM GAS  /tmp/ccmsIxgg.s 			page 34


 1183              	.L125:
  40:./Src/application.c ****     HAL_IWDG_Refresh(&hiwdg);   //819mS
 1184              		.loc 1 40 0
 1185 0068 FFF7FEFF 		bl	IS_Charge
 1186              	.LVL170:
 1187 006c 0028     		cmp	r0, #0
 1188 006e DED0     		beq	.L129
  52:./Src/application.c ****   applcation_init();
 1189              		.loc 1 52 0
 1190 0070 0020     		movs	r0, #0
 1191 0072 FFF7FEFF 		bl	Led_Set
 1192              	.LVL171:
  53:./Src/application.c **** }
 1193              		.loc 1 53 0
 1194 0076 FFF7FEFF 		bl	applcation_init
 1195              	.LVL172:
 1196 007a 10BD     		pop	{r4, pc}
 1197              	.LVL173:
 1198              	.L133:
 1199              		.align	2
 1200              	.L132:
 1201 007c 00000000 		.word	hiwdg
 1202 0080 00002542 		.word	1109721088
 1203              		.cfi_endproc
 1204              	.LFE66:
 1206              		.section	.text.Current_Motor_TASK,"ax",%progbits
 1207              		.align	2
 1208              		.global	Current_Motor_TASK
 1209              		.thumb
 1210              		.thumb_func
 1212              	Current_Motor_TASK:
 1213              	.LFB80:
 687:./Src/application.c **** 
 688:./Src/application.c ****   }
 689:./Src/application.c **** }
 690:./Src/application.c **** 
 691:./Src/application.c **** 
 692:./Src/application.c **** 
 693:./Src/application.c **** 
 694:./Src/application.c **** // CURRENT MOTOR TASK
 695:./Src/application.c **** /*
 696:./Src/application.c **** void Current_Motor_TASK(void){
 697:./Src/application.c ****   if((HAL_GetTick() - app.Current_time_measure)>100){
 698:./Src/application.c ****     app.Current_time_measure = HAL_GetTick();
 699:./Src/application.c **** 
 700:./Src/application.c ****    app.somma_current_m_L = app.somma_current_m_L  + ADC_MOTOR_LEFT();
 701:./Src/application.c ****    app.somma_current_m_R = app.somma_current_m_R  + ADC_MOTOR_RIGHT();
 702:./Src/application.c **** 
 703:./Src/application.c ****    app.current_counter_media++;
 704:./Src/application.c ****    if(app.current_counter_media >= 10){
 705:./Src/application.c ****     app.current_counter_media = 0;
 706:./Src/application.c **** 
 707:./Src/application.c ****       //Current media valore
 708:./Src/application.c ****       app.Current_M_LEFT = (float)app.somma_current_m_L / 10.0;
 709:./Src/application.c ****       app.Current_M_RIGHT = (float)app.somma_current_m_R / 10.0;
 710:./Src/application.c **** 
 711:./Src/application.c ****       if(app.Current_M_RIGHT < ADC_MOTOR_R_CENTER){
ARM GAS  /tmp/ccmsIxgg.s 			page 35


 712:./Src/application.c ****         app.Current_M_RIGHT = 0.0;
 713:./Src/application.c ****       }else{
 714:./Src/application.c ****         app.Current_M_RIGHT = ((app.Current_M_RIGHT  - ADC_MOTOR_R_CENTER) * MOTOR_R_AMP_CONV_AMP);
 715:./Src/application.c ****       }
 716:./Src/application.c ****       if(app.Current_M_LEFT < ADC_MOTOR_L_CENTER){
 717:./Src/application.c ****         app.Current_M_LEFT = 0.0;
 718:./Src/application.c ****       }else{
 719:./Src/application.c ****         app.Current_M_LEFT = ((app.Current_M_LEFT  - ADC_MOTOR_L_CENTER) * MOTOR_L_AMP_CONV_AMP);
 720:./Src/application.c ****       }
 721:./Src/application.c **** 
 722:./Src/application.c ****       app.somma_current_m_L = 0;
 723:./Src/application.c ****       app.somma_current_m_R = 0;
 724:./Src/application.c ****    }
 725:./Src/application.c ****   }
 726:./Src/application.c **** }
 727:./Src/application.c **** */
 728:./Src/application.c **** //ROLLING ACERAGE
 729:./Src/application.c **** void Current_Motor_TASK(void){
 1214              		.loc 1 729 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 0, uses_anonymous_args = 0
 1218 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1219              	.LCFI13:
 1220              		.cfi_def_cfa_offset 24
 1221              		.cfi_offset 3, -24
 1222              		.cfi_offset 4, -20
 1223              		.cfi_offset 5, -16
 1224              		.cfi_offset 6, -12
 1225              		.cfi_offset 7, -8
 1226              		.cfi_offset 14, -4
 730:./Src/application.c ****   uint32_t temp32;
 731:./Src/application.c ****   app.somma_current_m_L = 5;
 1227              		.loc 1 731 0
 1228 0002 4F4C     		ldr	r4, .L146+16
 1229 0004 0523     		movs	r3, #5
 1230 0006 6363     		str	r3, [r4, #52]
 732:./Src/application.c ****   app.somma_current_m_R = 5;
 1231              		.loc 1 732 0
 1232 0008 A363     		str	r3, [r4, #56]
 733:./Src/application.c ****   if((HAL_GetTick() - app.Current_time_measure)>100){
 1233              		.loc 1 733 0
 1234 000a FFF7FEFF 		bl	HAL_GetTick
 1235              	.LVL174:
 1236 000e 236B     		ldr	r3, [r4, #48]
 1237 0010 C01A     		subs	r0, r0, r3
 1238 0012 6428     		cmp	r0, #100
 1239 0014 40F28B80 		bls	.L134
 734:./Src/application.c ****     app.Current_time_measure = HAL_GetTick();
 1240              		.loc 1 734 0
 1241 0018 FFF7FEFF 		bl	HAL_GetTick
 1242              	.LVL175:
 1243 001c 2063     		str	r0, [r4, #48]
 735:./Src/application.c **** 
 736:./Src/application.c ****     temp32 = app.somma_current_m_L;
 1244              		.loc 1 736 0
 1245 001e 606B     		ldr	r0, [r4, #52]
ARM GAS  /tmp/ccmsIxgg.s 			page 36


 1246              	.LVL176:
 737:./Src/application.c ****     app.somma_current_m_L -=  temp32 / 5.0;
 1247              		.loc 1 737 0
 1248 0020 656B     		ldr	r5, [r4, #52]
 1249 0022 FFF7FEFF 		bl	__aeabi_ui2d
 1250              	.LVL177:
 1251 0026 0022     		movs	r2, #0
 1252 0028 464B     		ldr	r3, .L146+20
 1253 002a FFF7FEFF 		bl	__aeabi_ddiv
 1254              	.LVL178:
 1255 002e 0646     		mov	r6, r0
 1256 0030 0F46     		mov	r7, r1
 1257 0032 2846     		mov	r0, r5
 1258 0034 FFF7FEFF 		bl	__aeabi_ui2d
 1259              	.LVL179:
 1260 0038 3246     		mov	r2, r6
 1261 003a 3B46     		mov	r3, r7
 1262 003c FFF7FEFF 		bl	__aeabi_dsub
 1263              	.LVL180:
 1264 0040 FFF7FEFF 		bl	__aeabi_d2uiz
 1265              	.LVL181:
 1266 0044 6063     		str	r0, [r4, #52]
 738:./Src/application.c ****     app.somma_current_m_L += ADC_MOTOR_LEFT() / 5.0;
 1267              		.loc 1 738 0
 1268 0046 FFF7FEFF 		bl	ADC_MOTOR_LEFT
 1269              	.LVL182:
 1270 004a FFF7FEFF 		bl	__aeabi_i2d
 1271              	.LVL183:
 1272 004e 0022     		movs	r2, #0
 1273 0050 3C4B     		ldr	r3, .L146+20
 1274 0052 FFF7FEFF 		bl	__aeabi_ddiv
 1275              	.LVL184:
 1276 0056 0646     		mov	r6, r0
 1277 0058 0F46     		mov	r7, r1
 1278 005a 606B     		ldr	r0, [r4, #52]
 1279 005c FFF7FEFF 		bl	__aeabi_ui2d
 1280              	.LVL185:
 1281 0060 3246     		mov	r2, r6
 1282 0062 3B46     		mov	r3, r7
 1283 0064 FFF7FEFF 		bl	__aeabi_dadd
 1284              	.LVL186:
 1285 0068 FFF7FEFF 		bl	__aeabi_d2uiz
 1286              	.LVL187:
 1287 006c 6063     		str	r0, [r4, #52]
 739:./Src/application.c **** 
 740:./Src/application.c ****     temp32 = app.somma_current_m_R;
 1288              		.loc 1 740 0
 1289 006e A06B     		ldr	r0, [r4, #56]
 1290              	.LVL188:
 741:./Src/application.c ****     app.somma_current_m_R -=  temp32 / 5.0;
 1291              		.loc 1 741 0
 1292 0070 A56B     		ldr	r5, [r4, #56]
 1293 0072 FFF7FEFF 		bl	__aeabi_ui2d
 1294              	.LVL189:
 1295 0076 0022     		movs	r2, #0
 1296 0078 324B     		ldr	r3, .L146+20
 1297 007a FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  /tmp/ccmsIxgg.s 			page 37


 1298              	.LVL190:
 1299 007e 0646     		mov	r6, r0
 1300 0080 0F46     		mov	r7, r1
 1301 0082 2846     		mov	r0, r5
 1302 0084 FFF7FEFF 		bl	__aeabi_ui2d
 1303              	.LVL191:
 1304 0088 3246     		mov	r2, r6
 1305 008a 3B46     		mov	r3, r7
 1306 008c FFF7FEFF 		bl	__aeabi_dsub
 1307              	.LVL192:
 1308 0090 FFF7FEFF 		bl	__aeabi_d2uiz
 1309              	.LVL193:
 1310 0094 A063     		str	r0, [r4, #56]
 742:./Src/application.c ****     app.somma_current_m_R += ADC_MOTOR_RIGHT() / 5.0;
 1311              		.loc 1 742 0
 1312 0096 FFF7FEFF 		bl	ADC_MOTOR_RIGHT
 1313              	.LVL194:
 1314 009a FFF7FEFF 		bl	__aeabi_i2d
 1315              	.LVL195:
 1316 009e 0022     		movs	r2, #0
 1317 00a0 284B     		ldr	r3, .L146+20
 1318 00a2 FFF7FEFF 		bl	__aeabi_ddiv
 1319              	.LVL196:
 1320 00a6 0646     		mov	r6, r0
 1321 00a8 0F46     		mov	r7, r1
 1322 00aa A06B     		ldr	r0, [r4, #56]
 1323 00ac FFF7FEFF 		bl	__aeabi_ui2d
 1324              	.LVL197:
 1325 00b0 3246     		mov	r2, r6
 1326 00b2 3B46     		mov	r3, r7
 1327 00b4 FFF7FEFF 		bl	__aeabi_dadd
 1328              	.LVL198:
 1329 00b8 FFF7FEFF 		bl	__aeabi_d2uiz
 1330              	.LVL199:
 1331 00bc A063     		str	r0, [r4, #56]
 743:./Src/application.c **** 
 744:./Src/application.c **** 
 745:./Src/application.c **** 
 746:./Src/application.c ****    //Current media valore
 747:./Src/application.c ****     app.Current_M_LEFT = (float)app.somma_current_m_L;
 1332              		.loc 1 747 0
 1333 00be 606B     		ldr	r0, [r4, #52]
 1334 00c0 FFF7FEFF 		bl	__aeabi_ui2f
 1335              	.LVL200:
 1336 00c4 2064     		str	r0, [r4, #64]	@ float
 748:./Src/application.c ****     app.Current_M_RIGHT = (float)app.somma_current_m_R;
 1337              		.loc 1 748 0
 1338 00c6 A06B     		ldr	r0, [r4, #56]
 1339 00c8 FFF7FEFF 		bl	__aeabi_ui2f
 1340              	.LVL201:
 1341 00cc 6064     		str	r0, [r4, #68]	@ float
 749:./Src/application.c **** 
 750:./Src/application.c ****     if(app.Current_M_RIGHT < ADC_MOTOR_R_CENTER){
 1342              		.loc 1 750 0
 1343 00ce 606C     		ldr	r0, [r4, #68]	@ float
 1344 00d0 1D49     		ldr	r1, .L146+24
 1345 00d2 FFF7FEFF 		bl	__aeabi_fcmplt
ARM GAS  /tmp/ccmsIxgg.s 			page 38


 1346              	.LVL202:
 1347 00d6 10B1     		cbz	r0, .L143
 751:./Src/application.c ****       app.Current_M_RIGHT = 0.0;
 1348              		.loc 1 751 0
 1349 00d8 0022     		movs	r2, #0
 1350 00da 6264     		str	r2, [r4, #68]	@ float
 1351 00dc 0EE0     		b	.L138
 1352              	.L143:
 752:./Src/application.c ****     }else{
 753:./Src/application.c ****       app.Current_M_RIGHT = ((app.Current_M_RIGHT  - ADC_MOTOR_R_CENTER) * MOTOR_R_AMP_CONV_AMP);
 1353              		.loc 1 753 0
 1354 00de 184C     		ldr	r4, .L146+16
 1355 00e0 606C     		ldr	r0, [r4, #68]	@ float
 1356 00e2 1949     		ldr	r1, .L146+24
 1357 00e4 FFF7FEFF 		bl	__aeabi_fsub
 1358              	.LVL203:
 1359 00e8 FFF7FEFF 		bl	__aeabi_f2d
 1360              	.LVL204:
 1361 00ec 10A3     		adr	r3, .L146
 1362 00ee D3E90023 		ldrd	r2, [r3]
 1363 00f2 FFF7FEFF 		bl	__aeabi_dmul
 1364              	.LVL205:
 1365 00f6 FFF7FEFF 		bl	__aeabi_d2f
 1366              	.LVL206:
 1367 00fa 6064     		str	r0, [r4, #68]	@ float
 1368              	.L138:
 754:./Src/application.c ****     }
 755:./Src/application.c ****     if(app.Current_M_LEFT < ADC_MOTOR_L_CENTER){
 1369              		.loc 1 755 0
 1370 00fc 104B     		ldr	r3, .L146+16
 1371 00fe 186C     		ldr	r0, [r3, #64]	@ float
 1372 0100 1149     		ldr	r1, .L146+24
 1373 0102 FFF7FEFF 		bl	__aeabi_fcmplt
 1374              	.LVL207:
 1375 0106 18B1     		cbz	r0, .L144
 756:./Src/application.c ****       app.Current_M_LEFT = 0.0;
 1376              		.loc 1 756 0
 1377 0108 0022     		movs	r2, #0
 1378 010a 0D4B     		ldr	r3, .L146+16
 1379 010c 1A64     		str	r2, [r3, #64]	@ float
 1380 010e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1381              	.L144:
 757:./Src/application.c ****     }else{
 758:./Src/application.c ****       app.Current_M_LEFT = ((app.Current_M_LEFT  - ADC_MOTOR_L_CENTER) * MOTOR_L_AMP_CONV_AMP);
 1382              		.loc 1 758 0
 1383 0110 0B4C     		ldr	r4, .L146+16
 1384 0112 206C     		ldr	r0, [r4, #64]	@ float
 1385 0114 0C49     		ldr	r1, .L146+24
 1386 0116 FFF7FEFF 		bl	__aeabi_fsub
 1387              	.LVL208:
 1388 011a FFF7FEFF 		bl	__aeabi_f2d
 1389              	.LVL209:
 1390 011e 06A3     		adr	r3, .L146+8
 1391 0120 D3E90023 		ldrd	r2, [r3]
 1392 0124 FFF7FEFF 		bl	__aeabi_dmul
 1393              	.LVL210:
 1394 0128 FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  /tmp/ccmsIxgg.s 			page 39


 1395              	.LVL211:
 1396 012c 2064     		str	r0, [r4, #64]	@ float
 1397              	.L134:
 1398 012e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1399              	.L147:
 1400              		.align	3
 1401              	.L146:
 1402 0130 D2131C3D 		.word	1025250258
 1403 0134 C1D1933F 		.word	1066652097
 1404 0138 B4FA5241 		.word	1095957172
 1405 013c AB2F953F 		.word	1066741675
 1406 0140 00000000 		.word	app
 1407 0144 00001440 		.word	1075052544
 1408 0148 0080ED44 		.word	1156415488
 1409              		.cfi_endproc
 1410              	.LFE80:
 1412              		.section	.text.getMotorCurrentR,"ax",%progbits
 1413              		.align	2
 1414              		.global	getMotorCurrentR
 1415              		.thumb
 1416              		.thumb_func
 1418              	getMotorCurrentR:
 1419              	.LFB81:
 759:./Src/application.c ****     }
 760:./Src/application.c **** 
 761:./Src/application.c **** 
 762:./Src/application.c ****   }
 763:./Src/application.c **** }
 764:./Src/application.c **** 
 765:./Src/application.c **** int16_t getMotorCurrentR(){
 1420              		.loc 1 765 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
 1424 0000 08B5     		push	{r3, lr}
 1425              	.LCFI14:
 1426              		.cfi_def_cfa_offset 8
 1427              		.cfi_offset 3, -8
 1428              		.cfi_offset 14, -4
 766:./Src/application.c ****   return (ADC_MOTOR_RIGHT()  - ADC_MOTOR_R_CENTER);
 1429              		.loc 1 766 0
 1430 0002 FFF7FEFF 		bl	ADC_MOTOR_RIGHT
 1431              	.LVL212:
 1432 0006 A0F26C70 		subw	r0, r0, #1900
 767:./Src/application.c **** }
 1433              		.loc 1 767 0
 1434 000a 00B2     		sxth	r0, r0
 1435 000c 08BD     		pop	{r3, pc}
 1436              		.cfi_endproc
 1437              	.LFE81:
 1439 000e 00BF     		.section	.text.getMotorCurrentL,"ax",%progbits
 1440              		.align	2
 1441              		.global	getMotorCurrentL
 1442              		.thumb
 1443              		.thumb_func
 1445              	getMotorCurrentL:
 1446              	.LFB82:
ARM GAS  /tmp/ccmsIxgg.s 			page 40


 768:./Src/application.c **** int16_t getMotorCurrentL(){
 1447              		.loc 1 768 0
 1448              		.cfi_startproc
 1449              		@ args = 0, pretend = 0, frame = 0
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451 0000 08B5     		push	{r3, lr}
 1452              	.LCFI15:
 1453              		.cfi_def_cfa_offset 8
 1454              		.cfi_offset 3, -8
 1455              		.cfi_offset 14, -4
 769:./Src/application.c ****   return (ADC_MOTOR_LEFT()  - ADC_MOTOR_L_CENTER);
 1456              		.loc 1 769 0
 1457 0002 FFF7FEFF 		bl	ADC_MOTOR_LEFT
 1458              	.LVL213:
 1459 0006 A0F26C70 		subw	r0, r0, #1900
 770:./Src/application.c **** }
 1460              		.loc 1 770 0
 1461 000a 00B2     		sxth	r0, r0
 1462 000c 08BD     		pop	{r3, pc}
 1463              		.cfi_endproc
 1464              	.LFE82:
 1466              		.global	__aeabi_f2iz
 1467              		.global	__aeabi_i2f
 1468              		.global	__aeabi_fadd
 1469              		.global	__aeabi_fdiv
 1470              		.global	__aeabi_d2iz
 1471 000e 00BF     		.section	.text.go_motor,"ax",%progbits
 1472              		.align	2
 1473              		.global	go_motor
 1474              		.thumb
 1475              		.thumb_func
 1477              	go_motor:
 1478              	.LFB83:
 771:./Src/application.c **** 
 772:./Src/application.c **** 
 773:./Src/application.c **** //  MOTOR
 774:./Src/application.c **** 
 775:./Src/application.c **** /*
 776:./Src/application.c **** void go_motor(float throttle, float steering, float Vbatt){
 777:./Src/application.c ****   float limitSup, limitInf ;
 778:./Src/application.c **** 
 779:./Src/application.c ****   limitSup = 1000.0 * get_powerMax(Vbatt);
 780:./Src/application.c ****   limitInf = limitSup * -1;
 781:./Src/application.c **** 
 782:./Src/application.c ****       if(throttle>0.0){
 783:./Src/application.c ****         if(throttle > 20){
 784:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering * 0.333));
 785:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering * 0.333));
 786:./Src/application.c ****         }else if((throttle > 15)){
 787:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering * 0.5));
 788:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering * 0.5));
 789:./Src/application.c ****         }else{
 790:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering));
 791:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering));
 792:./Src/application.c ****         }
 793:./Src/application.c ****       }else if(throttle<0.0){
 794:./Src/application.c ****           app.motATS=(int8_t)(throttle+(steering));
ARM GAS  /tmp/ccmsIxgg.s 			page 41


 795:./Src/application.c ****           app.motBTS=(int8_t)(throttle-(steering));
 796:./Src/application.c ****       }else{
 797:./Src/application.c ****           app.motATS=(int8_t)steering;
 798:./Src/application.c ****           app.motBTS=(int8_t)((steering)*-1);
 799:./Src/application.c ****       }
 800:./Src/application.c **** 
 801:./Src/application.c ****     //printf("%d ; %d\r\n",motATS,motBTS);
 802:./Src/application.c **** 
 803:./Src/application.c ****       if(app.motATS >= 0){
 804:./Src/application.c ****         //0 ~ 100
 805:./Src/application.c ****         if(app.motATS > limitSup){
 806:./Src/application.c ****           app.motATS = (int16_t)limitSup;
 807:./Src/application.c ****         }
 808:./Src/application.c ****         MotorR_pwm(app.motATS);
 809:./Src/application.c ****       }else{
 810:./Src/application.c ****         //0 ~ -100
 811:./Src/application.c ****         if(app.motATS < limitInf){
 812:./Src/application.c ****           app.motATS = (int16_t)limitInf;
 813:./Src/application.c ****         }
 814:./Src/application.c ****         //app.motATS = app.motATS * -1;
 815:./Src/application.c ****         MotorR_pwm(app.motATS);
 816:./Src/application.c ****       }
 817:./Src/application.c **** 
 818:./Src/application.c ****       if(app.motBTS >= 0){
 819:./Src/application.c ****         //0 ~ 100
 820:./Src/application.c ****         if(app.motBTS > limitSup){
 821:./Src/application.c ****           app.motBTS = (int16_t)limitSup;
 822:./Src/application.c ****         }
 823:./Src/application.c ****         MotorL_pwm(app.motBTS );
 824:./Src/application.c ****       }else{
 825:./Src/application.c ****         //0 ~ -100
 826:./Src/application.c ****         if(app.motBTS < limitInf){
 827:./Src/application.c ****           app.motBTS = (int16_t)limitInf;
 828:./Src/application.c ****         }
 829:./Src/application.c ****         //MOTOR_VALUE.motBTS = MOTOR_VALUE.motBTS * -1;
 830:./Src/application.c ****         MotorL_pwm(app.motBTS );
 831:./Src/application.c ****       }
 832:./Src/application.c **** }
 833:./Src/application.c **** */
 834:./Src/application.c **** 
 835:./Src/application.c **** // EXPERIMENT
 836:./Src/application.c **** // http://www.impulseadventure.com/elec/robot-differential-steering.html
 837:./Src/application.c **** void go_motor(float throttle, float steering, float Vbatt, uint8_t fullpower){
 1479              		.loc 1 837 0
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 8
 1482              		@ frame_needed = 0, uses_anonymous_args = 0
 1483              	.LVL214:
 1484 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1485              	.LCFI16:
 1486              		.cfi_def_cfa_offset 36
 1487              		.cfi_offset 4, -36
 1488              		.cfi_offset 5, -32
 1489              		.cfi_offset 6, -28
 1490              		.cfi_offset 7, -24
 1491              		.cfi_offset 8, -20
 1492              		.cfi_offset 9, -16
ARM GAS  /tmp/ccmsIxgg.s 			page 42


 1493              		.cfi_offset 10, -12
 1494              		.cfi_offset 11, -8
 1495              		.cfi_offset 14, -4
 1496 0004 83B0     		sub	sp, sp, #12
 1497              	.LCFI17:
 1498              		.cfi_def_cfa_offset 48
 1499 0006 0646     		mov	r6, r0
 1500 0008 0C46     		mov	r4, r1
 838:./Src/application.c ****   float limitSup, limitInf ;
 839:./Src/application.c **** 
 840:./Src/application.c ****   if(fullpower==0){
 1501              		.loc 1 840 0
 1502 000a 4BB9     		cbnz	r3, .L171
 841:./Src/application.c ****     limitSup = 1000.0 * get_powerMax(Vbatt);
 1503              		.loc 1 841 0
 1504 000c 1046     		mov	r0, r2
 1505              	.LVL215:
 1506 000e FFF7FEFF 		bl	get_powerMax
 1507              	.LVL216:
 1508 0012 8C49     		ldr	r1, .L182
 1509 0014 FFF7FEFF 		bl	__aeabi_fmul
 1510              	.LVL217:
 1511 0018 0546     		mov	r5, r0
 1512              	.LVL218:
 842:./Src/application.c ****     limitInf = limitSup * -1;
 1513              		.loc 1 842 0
 1514 001a 00F1004A 		add	r10, r0, #-2147483648
 1515              	.LVL219:
 1516 001e 02E0     		b	.L153
 1517              	.LVL220:
 1518              	.L171:
 843:./Src/application.c ****   }else{
 844:./Src/application.c ****     limitSup = 1000.0;
 845:./Src/application.c ****     limitInf = limitSup * -1;
 1519              		.loc 1 845 0
 1520 0020 DFF834A2 		ldr	r10, .L182+20
 844:./Src/application.c ****     limitInf = limitSup * -1;
 1521              		.loc 1 844 0
 1522 0024 874D     		ldr	r5, .L182
 1523              	.LVL221:
 1524              	.L153:
 846:./Src/application.c ****   }
 847:./Src/application.c **** 
 848:./Src/application.c **** // INPUTS
 849:./Src/application.c **** int     nJoyX;              // Joystick X input                     (-128..+127)
 850:./Src/application.c **** int     nJoyY;              // Joystick Y input                     (-128..+127)
 851:./Src/application.c **** 
 852:./Src/application.c **** // OUTPUTS
 853:./Src/application.c **** int     nMotMixL;           // Motor (left)  mixed output           (-128..+127)
 854:./Src/application.c **** int     nMotMixR;           // Motor (right) mixed output           (-128..+127)
 855:./Src/application.c **** 
 856:./Src/application.c **** // CONFIG
 857:./Src/application.c **** // - fPivYLimt  : The threshold at which the pivot action starts
 858:./Src/application.c **** //                This threshold is measured in units on the Y-axis
 859:./Src/application.c **** //                away from the X-axis (Y=0). A greater value will assign
 860:./Src/application.c **** //                more of the joystick's range to pivot actions.
 861:./Src/application.c **** //                Allowable range: (0..+127)
ARM GAS  /tmp/ccmsIxgg.s 			page 43


 862:./Src/application.c **** float fPivYLimit = 85.0;
 863:./Src/application.c **** 
 864:./Src/application.c **** // TEMP VARIABLES
 865:./Src/application.c **** float   nMotPremixL;    // Motor (left)  premixed output        (-128..+127)
 866:./Src/application.c **** float   nMotPremixR;    // Motor (right) premixed output        (-128..+127)
 867:./Src/application.c **** int     nPivSpeed;      // Pivot Speed                          (-128..+127)
 868:./Src/application.c **** float   fPivScale;      // Balance scale b/w drive and pivot    (   0..1   )
 869:./Src/application.c **** 
 870:./Src/application.c **** 
 871:./Src/application.c **** nJoyY = (int)throttle;
 1525              		.loc 1 871 0
 1526 0026 3046     		mov	r0, r6
 1527 0028 FFF7FEFF 		bl	__aeabi_f2iz
 1528              	.LVL222:
 1529 002c 0646     		mov	r6, r0
 1530              	.LVL223:
 872:./Src/application.c **** nJoyX = (int)steering;
 1531              		.loc 1 872 0
 1532 002e 2046     		mov	r0, r4
 1533              	.LVL224:
 1534 0030 FFF7FEFF 		bl	__aeabi_f2iz
 1535              	.LVL225:
 1536 0034 0446     		mov	r4, r0
 1537              	.LVL226:
 873:./Src/application.c **** 
 874:./Src/application.c **** 
 875:./Src/application.c **** 
 876:./Src/application.c **** // Calculate Drive Turn output due to Joystick X input
 877:./Src/application.c **** if (nJoyY >= 0) {
 1538              		.loc 1 877 0
 1539 0036 002E     		cmp	r6, #0
 1540 0038 15DB     		blt	.L154
 878:./Src/application.c ****   // Forward
 879:./Src/application.c ****   nMotPremixL = (nJoyX>=0)? limitSup : (limitSup + nJoyX);
 1541              		.loc 1 879 0
 1542 003a 0028     		cmp	r0, #0
 1543 003c 07DA     		bge	.L172
 1544              		.loc 1 879 0 is_stmt 0 discriminator 1
 1545 003e FFF7FEFF 		bl	__aeabi_i2f
 1546              	.LVL227:
 1547 0042 0146     		mov	r1, r0
 1548 0044 2846     		mov	r0, r5
 1549 0046 FFF7FEFF 		bl	__aeabi_fadd
 1550              	.LVL228:
 1551 004a 8146     		mov	r9, r0
 1552 004c 00E0     		b	.L155
 1553              	.LVL229:
 1554              	.L172:
 1555              		.loc 1 879 0
 1556 004e A946     		mov	r9, r5
 1557              	.LVL230:
 1558              	.L155:
 880:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? (limitSup - nJoyX) : limitSup;
 1559              		.loc 1 880 0 is_stmt 1 discriminator 4
 1560 0050 002C     		cmp	r4, #0
 1561 0052 1EDB     		blt	.L173
 1562              		.loc 1 880 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccmsIxgg.s 			page 44


 1563 0054 2046     		mov	r0, r4
 1564 0056 FFF7FEFF 		bl	__aeabi_i2f
 1565              	.LVL231:
 1566 005a 0146     		mov	r1, r0
 1567 005c 2846     		mov	r0, r5
 1568 005e FFF7FEFF 		bl	__aeabi_fsub
 1569              	.LVL232:
 1570 0062 8046     		mov	r8, r0
 1571 0064 18E0     		b	.L156
 1572              	.LVL233:
 1573              	.L154:
 881:./Src/application.c **** } else {
 882:./Src/application.c ****   // Reverse
 883:./Src/application.c ****   nMotPremixL = (nJoyX>=0)? (limitSup - nJoyX) : limitSup;
 1574              		.loc 1 883 0 is_stmt 1
 1575 0066 0028     		cmp	r0, #0
 1576 0068 07DB     		blt	.L174
 1577              		.loc 1 883 0 is_stmt 0 discriminator 1
 1578 006a FFF7FEFF 		bl	__aeabi_i2f
 1579              	.LVL234:
 1580 006e 0146     		mov	r1, r0
 1581 0070 2846     		mov	r0, r5
 1582 0072 FFF7FEFF 		bl	__aeabi_fsub
 1583              	.LVL235:
 1584 0076 8146     		mov	r9, r0
 1585 0078 00E0     		b	.L157
 1586              	.LVL236:
 1587              	.L174:
 1588              		.loc 1 883 0
 1589 007a A946     		mov	r9, r5
 1590              	.LVL237:
 1591              	.L157:
 884:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? limitSup : (limitSup + nJoyX);
 1592              		.loc 1 884 0 is_stmt 1 discriminator 4
 1593 007c 002C     		cmp	r4, #0
 1594 007e 0ADA     		bge	.L175
 1595              		.loc 1 884 0 is_stmt 0 discriminator 1
 1596 0080 2046     		mov	r0, r4
 1597 0082 FFF7FEFF 		bl	__aeabi_i2f
 1598              	.LVL238:
 1599 0086 0146     		mov	r1, r0
 1600 0088 2846     		mov	r0, r5
 1601 008a FFF7FEFF 		bl	__aeabi_fadd
 1602              	.LVL239:
 1603 008e 8046     		mov	r8, r0
 1604 0090 02E0     		b	.L156
 1605              	.L173:
 880:./Src/application.c ****   nMotPremixR = (nJoyX>=0)? (limitSup - nJoyX) : limitSup;
 1606              		.loc 1 880 0 is_stmt 1
 1607 0092 A846     		mov	r8, r5
 1608 0094 00E0     		b	.L156
 1609              	.L175:
 1610              		.loc 1 884 0
 1611 0096 A846     		mov	r8, r5
 1612              	.L156:
 1613              	.LVL240:
 885:./Src/application.c **** }
ARM GAS  /tmp/ccmsIxgg.s 			page 45


 886:./Src/application.c **** 
 887:./Src/application.c **** // Scale Drive output due to Joystick Y input (throttle)
 888:./Src/application.c **** nMotPremixL = nMotPremixL * nJoyY/100.0;
 1614              		.loc 1 888 0
 1615 0098 3046     		mov	r0, r6
 1616 009a FFF7FEFF 		bl	__aeabi_i2f
 1617              	.LVL241:
 1618 009e 0746     		mov	r7, r0
 1619 00a0 0146     		mov	r1, r0
 1620 00a2 4846     		mov	r0, r9
 1621 00a4 FFF7FEFF 		bl	__aeabi_fmul
 1622              	.LVL242:
 1623 00a8 6749     		ldr	r1, .L182+4
 1624 00aa FFF7FEFF 		bl	__aeabi_fdiv
 1625              	.LVL243:
 1626 00ae 8346     		mov	fp, r0
 1627              	.LVL244:
 889:./Src/application.c **** nMotPremixR = nMotPremixR * nJoyY/100.0;
 1628              		.loc 1 889 0
 1629 00b0 3946     		mov	r1, r7
 1630 00b2 4046     		mov	r0, r8
 1631              	.LVL245:
 1632 00b4 FFF7FEFF 		bl	__aeabi_fmul
 1633              	.LVL246:
 1634 00b8 6349     		ldr	r1, .L182+4
 1635 00ba FFF7FEFF 		bl	__aeabi_fdiv
 1636              	.LVL247:
 1637 00be 0746     		mov	r7, r0
 1638              	.LVL248:
 890:./Src/application.c **** 
 891:./Src/application.c **** // Now calculate pivot amount
 892:./Src/application.c **** // - Strength of pivot (nPivSpeed) based on Joystick X input
 893:./Src/application.c **** // - Blending of pivot vs drive (fPivScale) based on Joystick Y input
 894:./Src/application.c **** nPivSpeed = nJoyX*3; //************************************
 1639              		.loc 1 894 0
 1640 00c0 04EB4404 		add	r4, r4, r4, lsl #1
 1641              	.LVL249:
 895:./Src/application.c **** fPivScale = (abs(nJoyY)>fPivYLimit)? 0.0 : (1.0 - abs(nJoyY)/fPivYLimit);
 1642              		.loc 1 895 0
 1643 00c4 86EAE670 		eor	r0, r6, r6, asr #31
 1644              	.LVL250:
 1645 00c8 A0EBE670 		sub	r0, r0, r6, asr #31
 1646 00cc FFF7FEFF 		bl	__aeabi_i2f
 1647              	.LVL251:
 1648 00d0 0646     		mov	r6, r0
 1649              	.LVL252:
 1650 00d2 5E49     		ldr	r1, .L182+8
 1651 00d4 FFF7FEFF 		bl	__aeabi_fcmpgt
 1652              	.LVL253:
 1653 00d8 78B9     		cbnz	r0, .L176
 1654              		.loc 1 895 0 is_stmt 0 discriminator 2
 1655 00da 5C49     		ldr	r1, .L182+8
 1656 00dc 3046     		mov	r0, r6
 1657 00de FFF7FEFF 		bl	__aeabi_fdiv
 1658              	.LVL254:
 1659 00e2 FFF7FEFF 		bl	__aeabi_f2d
 1660              	.LVL255:
ARM GAS  /tmp/ccmsIxgg.s 			page 46


 1661 00e6 0246     		mov	r2, r0
 1662 00e8 0B46     		mov	r3, r1
 1663 00ea 0020     		movs	r0, #0
 1664 00ec 5849     		ldr	r1, .L182+12
 1665 00ee FFF7FEFF 		bl	__aeabi_dsub
 1666              	.LVL256:
 1667 00f2 FFF7FEFF 		bl	__aeabi_d2f
 1668              	.LVL257:
 1669 00f6 0646     		mov	r6, r0
 1670 00f8 00E0     		b	.L158
 1671              	.L176:
 1672              		.loc 1 895 0
 1673 00fa 0026     		movs	r6, #0
 1674              	.L158:
 1675              	.LVL258:
 896:./Src/application.c **** 
 897:./Src/application.c **** // Calculate final mix of Drive and Pivot
 898:./Src/application.c **** nMotMixL = (int)((1.0-fPivScale)*nMotPremixL + fPivScale*( nPivSpeed));
 1676              		.loc 1 898 0 is_stmt 1 discriminator 4
 1677 00fc 3046     		mov	r0, r6
 1678 00fe FFF7FEFF 		bl	__aeabi_f2d
 1679              	.LVL259:
 1680 0102 0246     		mov	r2, r0
 1681 0104 0B46     		mov	r3, r1
 1682 0106 0020     		movs	r0, #0
 1683 0108 5149     		ldr	r1, .L182+12
 1684 010a FFF7FEFF 		bl	__aeabi_dsub
 1685              	.LVL260:
 1686 010e 8046     		mov	r8, r0
 1687 0110 8946     		mov	r9, r1
 1688 0112 5846     		mov	r0, fp
 1689 0114 FFF7FEFF 		bl	__aeabi_f2d
 1690              	.LVL261:
 1691 0118 4246     		mov	r2, r8
 1692 011a 4B46     		mov	r3, r9
 1693 011c FFF7FEFF 		bl	__aeabi_dmul
 1694              	.LVL262:
 1695 0120 CDE90001 		strd	r0, [sp]
 1696 0124 2046     		mov	r0, r4
 1697 0126 FFF7FEFF 		bl	__aeabi_i2f
 1698              	.LVL263:
 1699 012a 3146     		mov	r1, r6
 1700 012c FFF7FEFF 		bl	__aeabi_fmul
 1701              	.LVL264:
 1702 0130 FFF7FEFF 		bl	__aeabi_f2d
 1703              	.LVL265:
 1704 0134 DDE90023 		ldrd	r2, [sp]
 1705 0138 FFF7FEFF 		bl	__aeabi_dadd
 1706              	.LVL266:
 1707 013c FFF7FEFF 		bl	__aeabi_d2iz
 1708              	.LVL267:
 1709 0140 8346     		mov	fp, r0
 1710              	.LVL268:
 899:./Src/application.c **** nMotMixR = (int)((1.0-fPivScale)*nMotPremixR + fPivScale*(-nPivSpeed));
 1711              		.loc 1 899 0 discriminator 4
 1712 0142 3846     		mov	r0, r7
 1713              	.LVL269:
ARM GAS  /tmp/ccmsIxgg.s 			page 47


 1714 0144 FFF7FEFF 		bl	__aeabi_f2d
 1715              	.LVL270:
 1716 0148 4246     		mov	r2, r8
 1717 014a 4B46     		mov	r3, r9
 1718 014c FFF7FEFF 		bl	__aeabi_dmul
 1719              	.LVL271:
 1720 0150 8046     		mov	r8, r0
 1721 0152 8946     		mov	r9, r1
 1722 0154 6042     		negs	r0, r4
 1723 0156 FFF7FEFF 		bl	__aeabi_i2f
 1724              	.LVL272:
 1725 015a 3146     		mov	r1, r6
 1726 015c FFF7FEFF 		bl	__aeabi_fmul
 1727              	.LVL273:
 1728 0160 FFF7FEFF 		bl	__aeabi_f2d
 1729              	.LVL274:
 1730 0164 4246     		mov	r2, r8
 1731 0166 4B46     		mov	r3, r9
 1732 0168 FFF7FEFF 		bl	__aeabi_dadd
 1733              	.LVL275:
 1734 016c FFF7FEFF 		bl	__aeabi_d2iz
 1735              	.LVL276:
 900:./Src/application.c **** 
 901:./Src/application.c **** 
 902:./Src/application.c **** 
 903:./Src/application.c **** /*
 904:./Src/application.c **** if((nMotMixL>0)&&(nMotMixR>0)){
 905:./Src/application.c ****   app.motATS = nMotMixL + FRICTION;
 906:./Src/application.c ****   app.motBTS = nMotMixR + FRICTION;
 907:./Src/application.c **** }else if ((nMotMixL<0)&&(nMotMixR<0)){
 908:./Src/application.c ****   app.motATS = nMotMixL - FRICTION;
 909:./Src/application.c ****   app.motBTS = nMotMixR - FRICTION;
 910:./Src/application.c **** }else{
 911:./Src/application.c ****   if((nMotMixL>0)&&(nMotMixR<0)){
 912:./Src/application.c ****     app.motATS = nMotMixL + FRICTION;
 913:./Src/application.c ****     app.motBTS = nMotMixR - FRICTION + FRICTION/2;
 914:./Src/application.c ****   }else if((nMotMixL<0)&&(nMotMixR>0)){
 915:./Src/application.c ****     app.motBTS = nMotMixR + FRICTION;
 916:./Src/application.c ****     app.motATS = nMotMixL - FRICTION  + FRICTION/2;
 917:./Src/application.c ****   }else{
 918:./Src/application.c ****     app.motATS = nMotMixL;
 919:./Src/application.c ****     app.motBTS = nMotMixR;
 920:./Src/application.c ****   }
 921:./Src/application.c **** }
 922:./Src/application.c **** */
 923:./Src/application.c **** 
 924:./Src/application.c **** app.motATS = nMotMixL;
 1736              		.loc 1 924 0 discriminator 4
 1737 0170 0FFA8BFB 		sxth	fp, fp
 1738              	.LVL277:
 1739 0174 374B     		ldr	r3, .L182+16
 1740 0176 A3F82CB0 		strh	fp, [r3, #44]	@ movhi
 925:./Src/application.c **** app.motBTS = nMotMixR;
 1741              		.loc 1 925 0 discriminator 4
 1742 017a 00B2     		sxth	r0, r0
 1743              	.LVL278:
 1744 017c D885     		strh	r0, [r3, #46]	@ movhi
ARM GAS  /tmp/ccmsIxgg.s 			page 48


 926:./Src/application.c **** 
 927:./Src/application.c ****       if(app.motATS >= 0){
 1745              		.loc 1 927 0 discriminator 4
 1746 017e 9B8D     		ldrh	r3, [r3, #44]
 1747 0180 13F4004F 		tst	r3, #32768
 1748 0184 15D1     		bne	.L159
 928:./Src/application.c ****         //0 ~ 100
 929:./Src/application.c ****         if(app.motATS > limitSup){
 1749              		.loc 1 929 0
 1750 0186 334B     		ldr	r3, .L182+16
 1751 0188 988D     		ldrh	r0, [r3, #44]
 1752 018a 00B2     		sxth	r0, r0
 1753 018c FFF7FEFF 		bl	__aeabi_i2f
 1754              	.LVL279:
 1755 0190 0146     		mov	r1, r0
 1756 0192 2846     		mov	r0, r5
 1757 0194 FFF7FEFF 		bl	__aeabi_fcmplt
 1758              	.LVL280:
 1759 0198 28B1     		cbz	r0, .L160
 930:./Src/application.c ****           app.motATS = (int16_t)limitSup;
 1760              		.loc 1 930 0
 1761 019a 2846     		mov	r0, r5
 1762 019c FFF7FEFF 		bl	__aeabi_f2iz
 1763              	.LVL281:
 1764 01a0 00B2     		sxth	r0, r0
 1765 01a2 2C4B     		ldr	r3, .L182+16
 1766 01a4 9885     		strh	r0, [r3, #44]	@ movhi
 1767              	.L160:
 931:./Src/application.c ****         }
 932:./Src/application.c ****         MotorR_pwm(app.motATS);
 1768              		.loc 1 932 0
 1769 01a6 2B4B     		ldr	r3, .L182+16
 1770 01a8 988D     		ldrh	r0, [r3, #44]
 1771 01aa 00B2     		sxth	r0, r0
 1772 01ac FFF7FEFF 		bl	MotorR_pwm
 1773              	.LVL282:
 1774 01b0 14E0     		b	.L162
 1775              	.L159:
 933:./Src/application.c ****       }else{
 934:./Src/application.c ****         //0 ~ -100
 935:./Src/application.c ****         if(app.motATS < limitInf){
 1776              		.loc 1 935 0
 1777 01b2 284B     		ldr	r3, .L182+16
 1778 01b4 988D     		ldrh	r0, [r3, #44]
 1779 01b6 00B2     		sxth	r0, r0
 1780 01b8 FFF7FEFF 		bl	__aeabi_i2f
 1781              	.LVL283:
 1782 01bc 0146     		mov	r1, r0
 1783 01be 5046     		mov	r0, r10
 1784 01c0 FFF7FEFF 		bl	__aeabi_fcmpgt
 1785              	.LVL284:
 1786 01c4 28B1     		cbz	r0, .L163
 936:./Src/application.c ****           app.motATS = (int16_t)limitInf;
 1787              		.loc 1 936 0
 1788 01c6 5046     		mov	r0, r10
 1789 01c8 FFF7FEFF 		bl	__aeabi_f2iz
 1790              	.LVL285:
ARM GAS  /tmp/ccmsIxgg.s 			page 49


 1791 01cc 00B2     		sxth	r0, r0
 1792 01ce 214B     		ldr	r3, .L182+16
 1793 01d0 9885     		strh	r0, [r3, #44]	@ movhi
 1794              	.L163:
 937:./Src/application.c ****         }
 938:./Src/application.c ****         //app.motATS = app.motATS * -1;
 939:./Src/application.c ****         MotorR_pwm(app.motATS);
 1795              		.loc 1 939 0
 1796 01d2 204B     		ldr	r3, .L182+16
 1797 01d4 988D     		ldrh	r0, [r3, #44]
 1798 01d6 00B2     		sxth	r0, r0
 1799 01d8 FFF7FEFF 		bl	MotorR_pwm
 1800              	.LVL286:
 1801              	.L162:
 940:./Src/application.c ****       }
 941:./Src/application.c **** 
 942:./Src/application.c ****       if(app.motBTS >= 0){
 1802              		.loc 1 942 0
 1803 01dc 1D4B     		ldr	r3, .L182+16
 1804 01de DB8D     		ldrh	r3, [r3, #46]
 1805 01e0 13F4004F 		tst	r3, #32768
 1806 01e4 15D1     		bne	.L165
 943:./Src/application.c ****         //0 ~ 100
 944:./Src/application.c ****         if(app.motBTS > limitSup){
 1807              		.loc 1 944 0
 1808 01e6 1B4B     		ldr	r3, .L182+16
 1809 01e8 D88D     		ldrh	r0, [r3, #46]
 1810 01ea 00B2     		sxth	r0, r0
 1811 01ec FFF7FEFF 		bl	__aeabi_i2f
 1812              	.LVL287:
 1813 01f0 0146     		mov	r1, r0
 1814 01f2 2846     		mov	r0, r5
 1815 01f4 FFF7FEFF 		bl	__aeabi_fcmplt
 1816              	.LVL288:
 1817 01f8 28B1     		cbz	r0, .L166
 945:./Src/application.c ****           app.motBTS = (int16_t)limitSup;
 1818              		.loc 1 945 0
 1819 01fa 2846     		mov	r0, r5
 1820 01fc FFF7FEFF 		bl	__aeabi_f2iz
 1821              	.LVL289:
 1822 0200 00B2     		sxth	r0, r0
 1823 0202 144B     		ldr	r3, .L182+16
 1824 0204 D885     		strh	r0, [r3, #46]	@ movhi
 1825              	.L166:
 946:./Src/application.c ****         }
 947:./Src/application.c ****         MotorL_pwm(app.motBTS );
 1826              		.loc 1 947 0
 1827 0206 134B     		ldr	r3, .L182+16
 1828 0208 D88D     		ldrh	r0, [r3, #46]
 1829 020a 00B2     		sxth	r0, r0
 1830 020c FFF7FEFF 		bl	MotorL_pwm
 1831              	.LVL290:
 1832 0210 14E0     		b	.L152
 1833              	.L165:
 948:./Src/application.c ****       }else{
 949:./Src/application.c ****         //0 ~ -100
 950:./Src/application.c ****         if(app.motBTS < limitInf){
ARM GAS  /tmp/ccmsIxgg.s 			page 50


 1834              		.loc 1 950 0
 1835 0212 104B     		ldr	r3, .L182+16
 1836 0214 D88D     		ldrh	r0, [r3, #46]
 1837 0216 00B2     		sxth	r0, r0
 1838 0218 FFF7FEFF 		bl	__aeabi_i2f
 1839              	.LVL291:
 1840 021c 0146     		mov	r1, r0
 1841 021e 5046     		mov	r0, r10
 1842 0220 FFF7FEFF 		bl	__aeabi_fcmpgt
 1843              	.LVL292:
 1844 0224 28B1     		cbz	r0, .L169
 951:./Src/application.c ****           app.motBTS = (int16_t)limitInf;
 1845              		.loc 1 951 0
 1846 0226 5046     		mov	r0, r10
 1847 0228 FFF7FEFF 		bl	__aeabi_f2iz
 1848              	.LVL293:
 1849 022c 00B2     		sxth	r0, r0
 1850 022e 094B     		ldr	r3, .L182+16
 1851 0230 D885     		strh	r0, [r3, #46]	@ movhi
 1852              	.L169:
 952:./Src/application.c ****         }
 953:./Src/application.c ****         //MOTOR_VALUE.motBTS = MOTOR_VALUE.motBTS * -1;
 954:./Src/application.c ****         MotorL_pwm(app.motBTS );
 1853              		.loc 1 954 0
 1854 0232 084B     		ldr	r3, .L182+16
 1855 0234 D88D     		ldrh	r0, [r3, #46]
 1856 0236 00B2     		sxth	r0, r0
 1857 0238 FFF7FEFF 		bl	MotorL_pwm
 1858              	.LVL294:
 1859              	.L152:
 955:./Src/application.c ****       }
 956:./Src/application.c **** }
 1860              		.loc 1 956 0
 1861 023c 03B0     		add	sp, sp, #12
 1862              	.LCFI18:
 1863              		.cfi_def_cfa_offset 36
 1864              		@ sp needed
 1865 023e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1866              	.LVL295:
 1867              	.L183:
 1868 0242 00BF     		.align	2
 1869              	.L182:
 1870 0244 00007A44 		.word	1148846080
 1871 0248 0000C842 		.word	1120403456
 1872 024c 0000AA42 		.word	1118437376
 1873 0250 0000F03F 		.word	1072693248
 1874 0254 00000000 		.word	app
 1875 0258 00007AC4 		.word	-998637568
 1876              		.cfi_endproc
 1877              	.LFE83:
 1879              		.global	__aeabi_dcmpgt
 1880              		.global	__aeabi_fcmple
 1881              		.section	.text.applcation_TASK,"ax",%progbits
 1882              		.align	2
 1883              		.global	applcation_TASK
 1884              		.thumb
 1885              		.thumb_func
ARM GAS  /tmp/ccmsIxgg.s 			page 51


 1887              	applcation_TASK:
 1888              	.LFB68:
  70:./Src/application.c ****   uint8_t letture,temp8;
 1889              		.loc 1 70 0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893 0000 70B5     		push	{r4, r5, r6, lr}
 1894              	.LCFI19:
 1895              		.cfi_def_cfa_offset 16
 1896              		.cfi_offset 4, -16
 1897              		.cfi_offset 5, -12
 1898              		.cfi_offset 6, -8
 1899              		.cfi_offset 14, -4
  74:./Src/application.c ****     case app_init:
 1900              		.loc 1 74 0
 1901 0002 A54B     		ldr	r3, .L243+8
 1902 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1903 0006 DBB2     		uxtb	r3, r3
 1904 0008 042B     		cmp	r3, #4
 1905 000a 00F25F82 		bhi	.L185
 1906 000e DFE813F0 		tbh	[pc, r3, lsl #1]
 1907              	.L187:
 1908 0012 0500     		.2byte	(.L186-.L187)/2
 1909 0014 8300     		.2byte	(.L188-.L187)/2
 1910 0016 FD00     		.2byte	(.L189-.L187)/2
 1911 0018 4F01     		.2byte	(.L190-.L187)/2
 1912 001a D401     		.2byte	(.L191-.L187)/2
 1913              		.p2align 1
 1914              	.L186:
  76:./Src/application.c ****       MotorL_stop();
 1915              		.loc 1 76 0
 1916 001c FFF7FEFF 		bl	MotorR_stop
 1917              	.LVL296:
  77:./Src/application.c ****       //Aspetta Center joystick e calcola la media
 1918              		.loc 1 77 0
 1919 0020 FFF7FEFF 		bl	MotorL_stop
 1920              	.LVL297:
  79:./Src/application.c ****       app.center_media_Y = 0.0;
 1921              		.loc 1 79 0
 1922 0024 9C4B     		ldr	r3, .L243+8
 1923 0026 0022     		movs	r2, #0
 1924 0028 DA61     		str	r2, [r3, #28]	@ float
  80:./Src/application.c ****       letture = 0;
 1925              		.loc 1 80 0
 1926 002a 1A62     		str	r2, [r3, #32]	@ float
 1927              	.LVL298:
  82:./Src/application.c ****       do{
 1928              		.loc 1 82 0
 1929 002c 0024     		movs	r4, #0
 1930 002e 9B4B     		ldr	r3, .L243+12
 1931 0030 1C71     		strb	r4, [r3, #4]
 1932              	.LVL299:
 1933              	.L196:
  84:./Src/application.c **** 
 1934              		.loc 1 84 0
 1935 0032 9B48     		ldr	r0, .L243+16
ARM GAS  /tmp/ccmsIxgg.s 			page 52


 1936 0034 FFF7FEFF 		bl	HAL_IWDG_Refresh
 1937              	.LVL300:
  86:./Src/application.c ****         wii_JOYdati.done = 0;
 1938              		.loc 1 86 0
 1939 0038 01E0     		b	.L192
 1940              	.L193:
  86:./Src/application.c ****         wii_JOYdati.done = 0;
 1941              		.loc 1 86 0 is_stmt 0 discriminator 2
 1942 003a FFF7FEFF 		bl	WiiNunchuck_TASK
 1943              	.LVL301:
 1944              	.L192:
  86:./Src/application.c ****         wii_JOYdati.done = 0;
 1945              		.loc 1 86 0 discriminator 1
 1946 003e 974B     		ldr	r3, .L243+12
 1947 0040 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1948 0042 13F0FF0F 		tst	r3, #255
 1949 0046 F8D0     		beq	.L193
  87:./Src/application.c ****         if((wii_JOYdati.ay < 129) && (wii_JOYdati.ay > 124)){
 1950              		.loc 1 87 0 is_stmt 1
 1951 0048 944B     		ldr	r3, .L243+12
 1952 004a 0022     		movs	r2, #0
 1953 004c 1A71     		strb	r2, [r3, #4]
  88:./Src/application.c ****           letture++;
 1954              		.loc 1 88 0
 1955 004e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1956 0050 DBB2     		uxtb	r3, r3
 1957 0052 802B     		cmp	r3, #128
 1958 0054 12D8     		bhi	.L194
  88:./Src/application.c ****           letture++;
 1959              		.loc 1 88 0 is_stmt 0 discriminator 1
 1960 0056 914B     		ldr	r3, .L243+12
 1961 0058 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1962 005a DBB2     		uxtb	r3, r3
 1963 005c 7C2B     		cmp	r3, #124
 1964 005e 0DD9     		bls	.L194
  89:./Src/application.c ****           temp8 = wii_JOYdati.ay;
 1965              		.loc 1 89 0 is_stmt 1
 1966 0060 0134     		adds	r4, r4, #1
 1967              	.LVL302:
 1968 0062 E4B2     		uxtb	r4, r4
 1969              	.LVL303:
  90:./Src/application.c ****           app.center_media_Y = app.center_media_Y + ((float)temp8);
 1970              		.loc 1 90 0
 1971 0064 8D4B     		ldr	r3, .L243+12
 1972 0066 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1973              	.LVL304:
  91:./Src/application.c ****         }else{
 1974              		.loc 1 91 0
 1975 0068 8B4D     		ldr	r5, .L243+8
 1976 006a 2E6A     		ldr	r6, [r5, #32]	@ float
 1977 006c FFF7FEFF 		bl	__aeabi_ui2f
 1978              	.LVL305:
 1979 0070 0146     		mov	r1, r0
 1980 0072 3046     		mov	r0, r6
 1981 0074 FFF7FEFF 		bl	__aeabi_fadd
 1982              	.LVL306:
 1983 0078 2862     		str	r0, [r5, #32]	@ float
ARM GAS  /tmp/ccmsIxgg.s 			page 53


 1984 007a 03E0     		b	.L195
 1985              	.L194:
 1986              	.LVL307:
  94:./Src/application.c ****         }
 1987              		.loc 1 94 0
 1988 007c 0022     		movs	r2, #0
 1989 007e 864B     		ldr	r3, .L243+8
 1990 0080 1A62     		str	r2, [r3, #32]	@ float
  93:./Src/application.c ****           app.center_media_Y = 0.0;
 1991              		.loc 1 93 0
 1992 0082 0024     		movs	r4, #0
 1993              	.LVL308:
 1994              	.L195:
  96:./Src/application.c ****       app.center_media_Y = app.center_media_Y / 50.0;
 1995              		.loc 1 96 0
 1996 0084 312C     		cmp	r4, #49
 1997 0086 D4D9     		bls	.L196
  97:./Src/application.c ****       letture = 0;
 1998              		.loc 1 97 0
 1999 0088 834C     		ldr	r4, .L243+8
 2000              	.LVL309:
 2001 008a 206A     		ldr	r0, [r4, #32]	@ float
 2002 008c 8549     		ldr	r1, .L243+20
 2003 008e FFF7FEFF 		bl	__aeabi_fdiv
 2004              	.LVL310:
 2005 0092 2062     		str	r0, [r4, #32]	@ float
 2006              	.LVL311:
  99:./Src/application.c ****       do{
 2007              		.loc 1 99 0
 2008 0094 0024     		movs	r4, #0
 2009 0096 814B     		ldr	r3, .L243+12
 2010 0098 1C71     		strb	r4, [r3, #4]
 2011              	.LVL312:
 2012              	.L201:
 101:./Src/application.c **** 
 2013              		.loc 1 101 0
 2014 009a 8148     		ldr	r0, .L243+16
 2015 009c FFF7FEFF 		bl	HAL_IWDG_Refresh
 2016              	.LVL313:
 103:./Src/application.c ****         wii_JOYdati.done = 0;
 2017              		.loc 1 103 0
 2018 00a0 01E0     		b	.L197
 2019              	.L198:
 103:./Src/application.c ****         wii_JOYdati.done = 0;
 2020              		.loc 1 103 0 is_stmt 0 discriminator 2
 2021 00a2 FFF7FEFF 		bl	WiiNunchuck_TASK
 2022              	.LVL314:
 2023              	.L197:
 103:./Src/application.c ****         wii_JOYdati.done = 0;
 2024              		.loc 1 103 0 discriminator 1
 2025 00a6 7D4B     		ldr	r3, .L243+12
 2026 00a8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2027 00aa 13F0FF0F 		tst	r3, #255
 2028 00ae F8D0     		beq	.L198
 104:./Src/application.c ****         if((wii_JOYdati.ax < 129) && (wii_JOYdati.ax > 124)){
 2029              		.loc 1 104 0 is_stmt 1
 2030 00b0 7A4B     		ldr	r3, .L243+12
ARM GAS  /tmp/ccmsIxgg.s 			page 54


 2031 00b2 0022     		movs	r2, #0
 2032 00b4 1A71     		strb	r2, [r3, #4]
 105:./Src/application.c ****           letture++;
 2033              		.loc 1 105 0
 2034 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2035 00b8 DBB2     		uxtb	r3, r3
 2036 00ba 802B     		cmp	r3, #128
 2037 00bc 12D8     		bhi	.L199
 105:./Src/application.c ****           letture++;
 2038              		.loc 1 105 0 is_stmt 0 discriminator 1
 2039 00be 774B     		ldr	r3, .L243+12
 2040 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2041 00c2 DBB2     		uxtb	r3, r3
 2042 00c4 7C2B     		cmp	r3, #124
 2043 00c6 0DD9     		bls	.L199
 106:./Src/application.c ****           temp8 = wii_JOYdati.ax;
 2044              		.loc 1 106 0 is_stmt 1
 2045 00c8 0134     		adds	r4, r4, #1
 2046              	.LVL315:
 2047 00ca E4B2     		uxtb	r4, r4
 2048              	.LVL316:
 107:./Src/application.c ****           app.center_media_X = app.center_media_X + ((float)temp8);
 2049              		.loc 1 107 0
 2050 00cc 734B     		ldr	r3, .L243+12
 2051 00ce 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 2052              	.LVL317:
 108:./Src/application.c ****         }else{
 2053              		.loc 1 108 0
 2054 00d0 714D     		ldr	r5, .L243+8
 2055 00d2 EE69     		ldr	r6, [r5, #28]	@ float
 2056 00d4 FFF7FEFF 		bl	__aeabi_ui2f
 2057              	.LVL318:
 2058 00d8 0146     		mov	r1, r0
 2059 00da 3046     		mov	r0, r6
 2060 00dc FFF7FEFF 		bl	__aeabi_fadd
 2061              	.LVL319:
 2062 00e0 E861     		str	r0, [r5, #28]	@ float
 2063 00e2 03E0     		b	.L200
 2064              	.L199:
 2065              	.LVL320:
 111:./Src/application.c ****         }
 2066              		.loc 1 111 0
 2067 00e4 0022     		movs	r2, #0
 2068 00e6 6C4B     		ldr	r3, .L243+8
 2069 00e8 DA61     		str	r2, [r3, #28]	@ float
 110:./Src/application.c ****           app.center_media_X = 0.0;
 2070              		.loc 1 110 0
 2071 00ea 0024     		movs	r4, #0
 2072              	.LVL321:
 2073              	.L200:
 113:./Src/application.c ****       app.center_media_X = app.center_media_X / 50.0;
 2074              		.loc 1 113 0
 2075 00ec 312C     		cmp	r4, #49
 2076 00ee D4D9     		bls	.L201
 114:./Src/application.c **** 
 2077              		.loc 1 114 0
 2078 00f0 694C     		ldr	r4, .L243+8
ARM GAS  /tmp/ccmsIxgg.s 			page 55


 2079              	.LVL322:
 2080 00f2 E069     		ldr	r0, [r4, #28]	@ float
 2081 00f4 6B49     		ldr	r1, .L243+20
 2082 00f6 FFF7FEFF 		bl	__aeabi_fdiv
 2083              	.LVL323:
 2084 00fa E061     		str	r0, [r4, #28]	@ float
 116:./Src/application.c **** 
 2085              		.loc 1 116 0
 2086 00fc FFF7FEFF 		bl	accelleration_XY_Reset
 2087              	.LVL324:
 118:./Src/application.c ****       app.stato = app_soft_run;
 2088              		.loc 1 118 0
 2089 0100 FFF7FEFF 		bl	HAL_GetTick
 2090              	.LVL325:
 2091 0104 6060     		str	r0, [r4, #4]
 119:./Src/application.c ****       MotorR_start();
 2092              		.loc 1 119 0
 2093 0106 0123     		movs	r3, #1
 2094 0108 2370     		strb	r3, [r4]
 120:./Src/application.c ****       MotorL_start();
 2095              		.loc 1 120 0
 2096 010a FFF7FEFF 		bl	MotorR_start
 2097              	.LVL326:
 121:./Src/application.c **** 
 2098              		.loc 1 121 0
 2099 010e FFF7FEFF 		bl	MotorL_start
 2100              	.LVL327:
 123:./Src/application.c **** 
 2101              		.loc 1 123 0
 2102 0112 FFF7FEFF 		bl	Buzzer_OneShortBeep
 2103              	.LVL328:
 125:./Src/application.c **** 
 2104              		.loc 1 125 0
 2105 0116 70BD     		pop	{r4, r5, r6, pc}
 2106              	.L188:
 129:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 2107              		.loc 1 129 0
 2108 0118 604D     		ldr	r5, .L243+12
 2109 011a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2110 011c FFF7FEFF 		bl	normalize_y
 2111              	.LVL329:
 2112 0120 5D4C     		ldr	r4, .L243+8
 2113 0122 A060     		str	r0, [r4, #8]	@ float
 130:./Src/application.c **** 
 2114              		.loc 1 130 0
 2115 0124 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2116 0126 FFF7FEFF 		bl	normalize_x
 2117              	.LVL330:
 2118 012a E060     		str	r0, [r4, #12]	@ float
 133:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2119              		.loc 1 133 0
 2120 012c A068     		ldr	r0, [r4, #8]	@ float
 2121              	.LVL331:
 134:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 2122              		.loc 1 134 0
 2123 012e 5E4E     		ldr	r6, .L243+24
 2124 0130 3168     		ldr	r1, [r6]	@ float
ARM GAS  /tmp/ccmsIxgg.s 			page 56


 2125              	.LVL332:
 135:./Src/application.c ****       tempf1 = app.axn;
 2126              		.loc 1 135 0
 2127 0132 FFF7FEFF 		bl	scale_y
 2128              	.LVL333:
 2129 0136 A060     		str	r0, [r4, #8]	@ float
 136:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2130              		.loc 1 136 0
 2131 0138 E068     		ldr	r0, [r4, #12]	@ float
 2132              	.LVL334:
 137:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 2133              		.loc 1 137 0
 2134 013a 3168     		ldr	r1, [r6]	@ float
 2135              	.LVL335:
 138:./Src/application.c **** 
 2136              		.loc 1 138 0
 2137 013c FFF7FEFF 		bl	scale_x
 2138              	.LVL336:
 2139 0140 E060     		str	r0, [r4, #12]	@ float
 140:./Src/application.c ****       app.axn = accellerationX(app.axn);
 2140              		.loc 1 140 0
 2141 0142 A068     		ldr	r0, [r4, #8]	@ float
 2142 0144 FFF7FEFF 		bl	accellerationY
 2143              	.LVL337:
 2144 0148 A060     		str	r0, [r4, #8]	@ float
 141:./Src/application.c **** 
 2145              		.loc 1 141 0
 2146 014a E068     		ldr	r0, [r4, #12]	@ float
 2147 014c FFF7FEFF 		bl	accellerationX
 2148              	.LVL338:
 2149 0150 E060     		str	r0, [r4, #12]	@ float
 143:./Src/application.c ****       tempf2 = app.axn;
 2150              		.loc 1 143 0
 2151 0152 A068     		ldr	r0, [r4, #8]	@ float
 2152              	.LVL339:
 144:./Src/application.c **** 
 2153              		.loc 1 144 0
 2154 0154 E168     		ldr	r1, [r4, #12]	@ float
 2155              	.LVL340:
 146:./Src/application.c **** 
 2156              		.loc 1 146 0
 2157 0156 3268     		ldr	r2, [r6]	@ float
 2158 0158 0023     		movs	r3, #0
 2159 015a FFF7FEFF 		bl	go_motor
 2160              	.LVL341:
 149:./Src/application.c ****       if((wii_JOYdati.bz == 0)&&((((float)temp8 - app.center_media_Y) > 4.0))&&(telemetry.dataREADY
 2161              		.loc 1 149 0
 2162 015e 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 2163 0160 D8B2     		uxtb	r0, r3
 2164              	.LVL342:
 150:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 2165              		.loc 1 150 0
 2166 0162 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 2167 0164 13F0FF0F 		tst	r3, #255
 2168 0168 1FD1     		bne	.L203
 150:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 2169              		.loc 1 150 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccmsIxgg.s 			page 57


 2170 016a FFF7FEFF 		bl	__aeabi_ui2f
 2171              	.LVL343:
 2172 016e 216A     		ldr	r1, [r4, #32]	@ float
 2173 0170 FFF7FEFF 		bl	__aeabi_fsub
 2174              	.LVL344:
 2175 0174 4FF08141 		mov	r1, #1082130432
 2176 0178 FFF7FEFF 		bl	__aeabi_fcmpgt
 2177              	.LVL345:
 2178 017c A8B1     		cbz	r0, .L203
 150:./Src/application.c ****         if((HAL_GetTick() - app.tsoft_run)>=1000){
 2179              		.loc 1 150 0 discriminator 2
 2180 017e 4B4B     		ldr	r3, .L243+28
 2181 0180 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2182 0182 13F0FF0F 		tst	r3, #255
 2183 0186 10D1     		bne	.L203
 151:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 2184              		.loc 1 151 0 is_stmt 1
 2185 0188 FFF7FEFF 		bl	HAL_GetTick
 2186              	.LVL346:
 2187 018c 6368     		ldr	r3, [r4, #4]
 2188 018e C01A     		subs	r0, r0, r3
 2189 0190 B0F57A7F 		cmp	r0, #1000
 2190 0194 0DD3     		bcc	.L205
 152:./Src/application.c ****             app.stato = app_soft_run_nohand;
 2191              		.loc 1 152 0
 2192 0196 0023     		movs	r3, #0
 2193 0198 A361     		str	r3, [r4, #24]	@ float
 153:./Src/application.c ****             app.tcruise_decrement = HAL_GetTick();
 2194              		.loc 1 153 0
 2195 019a 0323     		movs	r3, #3
 2196 019c 2370     		strb	r3, [r4]
 154:./Src/application.c ****             Buzzer_OneShortBeep();
 2197              		.loc 1 154 0
 2198 019e FFF7FEFF 		bl	HAL_GetTick
 2199              	.LVL347:
 2200 01a2 2061     		str	r0, [r4, #16]
 155:./Src/application.c ****         }
 2201              		.loc 1 155 0
 2202 01a4 FFF7FEFF 		bl	Buzzer_OneShortBeep
 2203              	.LVL348:
 2204 01a8 03E0     		b	.L205
 2205              	.L203:
 158:./Src/application.c ****       }
 2206              		.loc 1 158 0
 2207 01aa FFF7FEFF 		bl	HAL_GetTick
 2208              	.LVL349:
 2209 01ae 3A4B     		ldr	r3, .L243+8
 2210 01b0 5860     		str	r0, [r3, #4]
 2211              	.L205:
 161:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 2212              		.loc 1 161 0
 2213 01b2 3E4B     		ldr	r3, .L243+28
 2214 01b4 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2215 01b6 13F0FF0F 		tst	r3, #255
 2216 01ba 11D0     		beq	.L206
 162:./Src/application.c ****         if(telemetry.dataLast_Command == 'R'){
 2217              		.loc 1 162 0
ARM GAS  /tmp/ccmsIxgg.s 			page 58


 2218 01bc 3B4B     		ldr	r3, .L243+28
 2219 01be 0022     		movs	r2, #0
 2220 01c0 5A75     		strb	r2, [r3, #21]
 163:./Src/application.c ****           app.stato = app_soft_ANDROIDAPP;
 2221              		.loc 1 163 0
 2222 01c2 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2223 01c4 DBB2     		uxtb	r3, r3
 2224 01c6 522B     		cmp	r3, #82
 2225 01c8 07D1     		bne	.L207
 164:./Src/application.c ****           app.tAndroidAPP = HAL_GetTick();
 2226              		.loc 1 164 0
 2227 01ca 334C     		ldr	r4, .L243+8
 2228 01cc 0423     		movs	r3, #4
 2229 01ce 2370     		strb	r3, [r4]
 165:./Src/application.c ****           accelleration_XY_Reset();
 2230              		.loc 1 165 0
 2231 01d0 FFF7FEFF 		bl	HAL_GetTick
 2232              	.LVL350:
 2233 01d4 6061     		str	r0, [r4, #20]
 166:./Src/application.c ****         }
 2234              		.loc 1 166 0
 2235 01d6 FFF7FEFF 		bl	accelleration_XY_Reset
 2236              	.LVL351:
 2237              	.L207:
 168:./Src/application.c ****       }
 2238              		.loc 1 168 0
 2239 01da 0022     		movs	r2, #0
 2240 01dc 334B     		ldr	r3, .L243+28
 2241 01de 9A75     		strb	r2, [r3, #22]
 2242              	.L206:
 171:./Src/application.c ****           app.stato = app_hard_run;
 2243              		.loc 1 171 0
 2244 01e0 2E4B     		ldr	r3, .L243+12
 2245 01e2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2246 01e4 13F0FF0F 		tst	r3, #255
 2247 01e8 40F07781 		bne	.L184
 171:./Src/application.c ****           app.stato = app_hard_run;
 2248              		.loc 1 171 0 is_stmt 0 discriminator 1
 2249 01ec 2B4B     		ldr	r3, .L243+12
 2250 01ee DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2251 01f0 DBB2     		uxtb	r3, r3
 2252 01f2 012B     		cmp	r3, #1
 2253 01f4 40F07181 		bne	.L184
 171:./Src/application.c ****           app.stato = app_hard_run;
 2254              		.loc 1 171 0 discriminator 2
 2255 01f8 2C4B     		ldr	r3, .L243+28
 2256 01fa 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2257 01fc 13F0FF0F 		tst	r3, #255
 2258 0200 40F06B81 		bne	.L184
 172:./Src/application.c ****           //accelleration_XY_Reset();     //??????
 2259              		.loc 1 172 0 is_stmt 1
 2260 0204 0222     		movs	r2, #2
 2261 0206 244B     		ldr	r3, .L243+8
 2262 0208 1A70     		strb	r2, [r3]
 2263 020a 70BD     		pop	{r4, r5, r6, pc}
 2264              	.L189:
 179:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
ARM GAS  /tmp/ccmsIxgg.s 			page 59


 2265              		.loc 1 179 0
 2266 020c 234D     		ldr	r5, .L243+12
 2267 020e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2268 0210 FFF7FEFF 		bl	normalize_y
 2269              	.LVL352:
 2270 0214 204C     		ldr	r4, .L243+8
 2271 0216 A060     		str	r0, [r4, #8]	@ float
 180:./Src/application.c **** 
 2272              		.loc 1 180 0
 2273 0218 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2274 021a FFF7FEFF 		bl	normalize_x
 2275              	.LVL353:
 2276 021e E060     		str	r0, [r4, #12]	@ float
 183:./Src/application.c ****       app.ayn = tempf1;
 2277              		.loc 1 183 0
 2278 0220 A068     		ldr	r0, [r4, #8]	@ float
 2279 0222 FFF7FEFF 		bl	__aeabi_f2d
 2280              	.LVL354:
 2281 0226 1AA3     		adr	r3, .L243
 2282 0228 D3E90023 		ldrd	r2, [r3]
 2283 022c FFF7FEFF 		bl	__aeabi_dmul
 2284              	.LVL355:
 2285 0230 FFF7FEFF 		bl	__aeabi_d2f
 2286              	.LVL356:
 184:./Src/application.c ****       tempf2 = app.axn * 0.90;
 2287              		.loc 1 184 0
 2288 0234 A060     		str	r0, [r4, #8]	@ float
 185:./Src/application.c ****       //tempf2 = battery_dati.VBatt;
 2289              		.loc 1 185 0
 2290 0236 E068     		ldr	r0, [r4, #12]	@ float
 2291              	.LVL357:
 2292 0238 FFF7FEFF 		bl	__aeabi_f2d
 2293              	.LVL358:
 2294 023c 14A3     		adr	r3, .L243
 2295 023e D3E90023 		ldrd	r2, [r3]
 2296 0242 FFF7FEFF 		bl	__aeabi_dmul
 2297              	.LVL359:
 2298 0246 FFF7FEFF 		bl	__aeabi_d2f
 2299              	.LVL360:
 187:./Src/application.c **** 
 2300              		.loc 1 187 0
 2301 024a E060     		str	r0, [r4, #12]	@ float
 189:./Src/application.c ****       app.axn = accellerationXHARD(app.axn);
 2302              		.loc 1 189 0
 2303 024c A068     		ldr	r0, [r4, #8]	@ float
 2304              	.LVL361:
 2305 024e FFF7FEFF 		bl	accellerationYHARD
 2306              	.LVL362:
 2307 0252 A060     		str	r0, [r4, #8]	@ float
 190:./Src/application.c **** 
 2308              		.loc 1 190 0
 2309 0254 E068     		ldr	r0, [r4, #12]	@ float
 2310 0256 FFF7FEFF 		bl	accellerationXHARD
 2311              	.LVL363:
 2312 025a E060     		str	r0, [r4, #12]	@ float
 192:./Src/application.c ****       tempf2 = app.axn;
 2313              		.loc 1 192 0
ARM GAS  /tmp/ccmsIxgg.s 			page 60


 2314 025c A568     		ldr	r5, [r4, #8]	@ float
 2315              	.LVL364:
 193:./Src/application.c ****       if(tempf1 < 0){
 2316              		.loc 1 193 0
 2317 025e E468     		ldr	r4, [r4, #12]	@ float
 2318              	.LVL365:
 194:./Src/application.c ****         tempf1 = 0;
 2319              		.loc 1 194 0
 2320 0260 0021     		movs	r1, #0
 2321 0262 2846     		mov	r0, r5
 2322 0264 FFF7FEFF 		bl	__aeabi_fcmplt
 2323              	.LVL366:
 2324 0268 00B1     		cbz	r0, .L208
 195:./Src/application.c ****       }
 2325              		.loc 1 195 0
 2326 026a 0025     		movs	r5, #0
 2327              	.LVL367:
 2328              	.L208:
 197:./Src/application.c **** 
 2329              		.loc 1 197 0
 2330 026c 0E4B     		ldr	r3, .L243+24
 2331 026e 1A68     		ldr	r2, [r3]	@ float
 2332 0270 0123     		movs	r3, #1
 2333 0272 2146     		mov	r1, r4
 2334 0274 2846     		mov	r0, r5
 2335 0276 FFF7FEFF 		bl	go_motor
 2336              	.LVL368:
 200:./Src/application.c ****           //MotorR_stop();
 2337              		.loc 1 200 0
 2338 027a 084B     		ldr	r3, .L243+12
 2339 027c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2340 027e DBB2     		uxtb	r3, r3
 2341 0280 012B     		cmp	r3, #1
 2342 0282 40F02A81 		bne	.L184
 204:./Src/application.c ****       }
 2343              		.loc 1 204 0
 2344 0286 0122     		movs	r2, #1
 2345 0288 034B     		ldr	r3, .L243+8
 2346 028a 1A70     		strb	r2, [r3]
 2347 028c 70BD     		pop	{r4, r5, r6, pc}
 2348              	.LVL369:
 2349              	.L244:
 2350 028e 00BF     		.align	3
 2351              	.L243:
 2352 0290 CDCCCCCC 		.word	-858993459
 2353 0294 CCCCEC3F 		.word	1072483532
 2354 0298 00000000 		.word	app
 2355 029c 00000000 		.word	wii_JOYdati
 2356 02a0 00000000 		.word	hiwdg
 2357 02a4 00004842 		.word	1112014848
 2358 02a8 00000000 		.word	battery_dati
 2359 02ac 00000000 		.word	telemetry
 2360              	.L190:
 209:./Src/application.c ****       app.axn = normalize_x(wii_JOYdati.ax);
 2361              		.loc 1 209 0
 2362 02b0 8A4D     		ldr	r5, .L245
 2363 02b2 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccmsIxgg.s 			page 61


 2364 02b4 FFF7FEFF 		bl	normalize_y
 2365              	.LVL370:
 2366 02b8 894C     		ldr	r4, .L245+4
 2367 02ba A060     		str	r0, [r4, #8]	@ float
 210:./Src/application.c **** 
 2368              		.loc 1 210 0
 2369 02bc 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2370 02be FFF7FEFF 		bl	normalize_x
 2371              	.LVL371:
 2372 02c2 E060     		str	r0, [r4, #12]	@ float
 213:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2373              		.loc 1 213 0
 2374 02c4 A068     		ldr	r0, [r4, #8]	@ float
 2375              	.LVL372:
 214:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 2376              		.loc 1 214 0
 2377 02c6 874D     		ldr	r5, .L245+8
 2378 02c8 2968     		ldr	r1, [r5]	@ float
 2379              	.LVL373:
 215:./Src/application.c ****       tempf1 = app.axn;
 2380              		.loc 1 215 0
 2381 02ca FFF7FEFF 		bl	scale_y
 2382              	.LVL374:
 2383 02ce A060     		str	r0, [r4, #8]	@ float
 216:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2384              		.loc 1 216 0
 2385 02d0 E068     		ldr	r0, [r4, #12]	@ float
 2386              	.LVL375:
 217:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 2387              		.loc 1 217 0
 2388 02d2 2968     		ldr	r1, [r5]	@ float
 2389              	.LVL376:
 218:./Src/application.c **** 
 2390              		.loc 1 218 0
 2391 02d4 FFF7FEFF 		bl	scale_x
 2392              	.LVL377:
 2393 02d8 E060     		str	r0, [r4, #12]	@ float
 220:./Src/application.c ****       app.axn = accellerationX(app.axn);
 2394              		.loc 1 220 0
 2395 02da A068     		ldr	r0, [r4, #8]	@ float
 2396 02dc FFF7FEFF 		bl	accellerationY
 2397              	.LVL378:
 2398 02e0 A060     		str	r0, [r4, #8]	@ float
 221:./Src/application.c **** 
 2399              		.loc 1 221 0
 2400 02e2 E068     		ldr	r0, [r4, #12]	@ float
 2401 02e4 FFF7FEFF 		bl	accellerationX
 2402              	.LVL379:
 2403 02e8 E060     		str	r0, [r4, #12]	@ float
 224:./Src/application.c ****         tempf1 = app.cruise_soft_run_nohand;
 2404              		.loc 1 224 0
 2405 02ea A068     		ldr	r0, [r4, #8]	@ float
 2406 02ec 7E49     		ldr	r1, .L245+12
 2407 02ee FFF7FEFF 		bl	__aeabi_fcmpgt
 2408              	.LVL380:
 2409 02f2 C8B1     		cbz	r0, .L209
 225:./Src/application.c ****         if((app.ayn - 5.0) > tempf1){
ARM GAS  /tmp/ccmsIxgg.s 			page 62


 2410              		.loc 1 225 0
 2411 02f4 A669     		ldr	r6, [r4, #24]	@ float
 2412              	.LVL381:
 226:./Src/application.c ****           app.cruise_soft_run_nohand = app.ayn - 5.0;
 2413              		.loc 1 226 0
 2414 02f6 A068     		ldr	r0, [r4, #8]	@ float
 2415 02f8 FFF7FEFF 		bl	__aeabi_f2d
 2416              	.LVL382:
 2417 02fc 0022     		movs	r2, #0
 2418 02fe 7B4B     		ldr	r3, .L245+16
 2419 0300 FFF7FEFF 		bl	__aeabi_dsub
 2420              	.LVL383:
 2421 0304 0446     		mov	r4, r0
 2422 0306 0D46     		mov	r5, r1
 2423 0308 3046     		mov	r0, r6
 2424 030a FFF7FEFF 		bl	__aeabi_f2d
 2425              	.LVL384:
 2426 030e 0246     		mov	r2, r0
 2427 0310 0B46     		mov	r3, r1
 2428 0312 2046     		mov	r0, r4
 2429 0314 2946     		mov	r1, r5
 2430 0316 FFF7FEFF 		bl	__aeabi_dcmpgt
 2431              	.LVL385:
 2432 031a 28B1     		cbz	r0, .L209
 227:./Src/application.c ****         }
 2433              		.loc 1 227 0
 2434 031c 704C     		ldr	r4, .L245+4
 2435 031e A068     		ldr	r0, [r4, #8]	@ float
 2436 0320 7149     		ldr	r1, .L245+12
 2437 0322 FFF7FEFF 		bl	__aeabi_fsub
 2438              	.LVL386:
 2439 0326 A061     		str	r0, [r4, #24]	@ float
 2440              	.LVL387:
 2441              	.L209:
 231:./Src/application.c ****         //con time step
 2442              		.loc 1 231 0
 2443 0328 6D4B     		ldr	r3, .L245+4
 2444 032a 9868     		ldr	r0, [r3, #8]	@ float
 2445 032c 7049     		ldr	r1, .L245+20
 2446 032e FFF7FEFF 		bl	__aeabi_fcmplt
 2447              	.LVL388:
 2448 0332 00B3     		cbz	r0, .L212
 231:./Src/application.c ****         //con time step
 2449              		.loc 1 231 0 is_stmt 0 discriminator 1
 2450 0334 6A4B     		ldr	r3, .L245+4
 2451 0336 9868     		ldr	r0, [r3, #8]	@ float
 2452 0338 6E49     		ldr	r1, .L245+24
 2453 033a FFF7FEFF 		bl	__aeabi_fcmpgt
 2454              	.LVL389:
 2455 033e D0B1     		cbz	r0, .L212
 233:./Src/application.c ****           tempf1 = app.ayn / 10.0;
 2456              		.loc 1 233 0 is_stmt 1
 2457 0340 FFF7FEFF 		bl	HAL_GetTick
 2458              	.LVL390:
 2459 0344 664B     		ldr	r3, .L245+4
 2460 0346 1B69     		ldr	r3, [r3, #16]
 2461 0348 C01A     		subs	r0, r0, r3
ARM GAS  /tmp/ccmsIxgg.s 			page 63


 2462 034a FA28     		cmp	r0, #250
 2463 034c 13D9     		bls	.L212
 234:./Src/application.c ****           app.cruise_soft_run_nohand = app.cruise_soft_run_nohand + tempf1;                //STEP D
 2464              		.loc 1 234 0
 2465 034e 644C     		ldr	r4, .L245+4
 2466 0350 A068     		ldr	r0, [r4, #8]	@ float
 2467 0352 6949     		ldr	r1, .L245+28
 2468 0354 FFF7FEFF 		bl	__aeabi_fdiv
 2469              	.LVL391:
 235:./Src/application.c ****           if(app.cruise_soft_run_nohand < 0.0){
 2470              		.loc 1 235 0
 2471 0358 A169     		ldr	r1, [r4, #24]	@ float
 2472 035a FFF7FEFF 		bl	__aeabi_fadd
 2473              	.LVL392:
 2474 035e A061     		str	r0, [r4, #24]	@ float
 236:./Src/application.c ****             app.cruise_soft_run_nohand = 0.0;
 2475              		.loc 1 236 0
 2476 0360 A069     		ldr	r0, [r4, #24]	@ float
 2477 0362 0021     		movs	r1, #0
 2478 0364 FFF7FEFF 		bl	__aeabi_fcmplt
 2479              	.LVL393:
 2480 0368 08B1     		cbz	r0, .L215
 237:./Src/application.c ****           }
 2481              		.loc 1 237 0
 2482 036a 0022     		movs	r2, #0
 2483 036c A261     		str	r2, [r4, #24]	@ float
 2484              	.L215:
 239:./Src/application.c ****         }
 2485              		.loc 1 239 0
 2486 036e FFF7FEFF 		bl	HAL_GetTick
 2487              	.LVL394:
 2488 0372 5B4B     		ldr	r3, .L245+4
 2489 0374 1861     		str	r0, [r3, #16]
 2490              	.L212:
 243:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 2491              		.loc 1 243 0
 2492 0376 5A4B     		ldr	r3, .L245+4
 2493 0378 9868     		ldr	r0, [r3, #8]	@ float
 2494 037a 5E49     		ldr	r1, .L245+24
 2495 037c FFF7FEFF 		bl	__aeabi_fcmple
 2496              	.LVL395:
 2497 0380 90B1     		cbz	r0, .L241
 244:./Src/application.c ****         MotorR_stop();
 2498              		.loc 1 244 0
 2499 0382 584B     		ldr	r3, .L245+8
 2500 0384 1A68     		ldr	r2, [r3]	@ float
 2501 0386 0024     		movs	r4, #0
 2502 0388 0023     		movs	r3, #0
 2503 038a 2146     		mov	r1, r4
 2504 038c 2046     		mov	r0, r4
 2505 038e FFF7FEFF 		bl	go_motor
 2506              	.LVL396:
 245:./Src/application.c ****         MotorL_stop();
 2507              		.loc 1 245 0
 2508 0392 FFF7FEFF 		bl	MotorR_stop
 2509              	.LVL397:
 246:./Src/application.c ****         accelleration_XY_Reset();
ARM GAS  /tmp/ccmsIxgg.s 			page 64


 2510              		.loc 1 246 0
 2511 0396 FFF7FEFF 		bl	MotorL_stop
 2512              	.LVL398:
 247:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
 2513              		.loc 1 247 0
 2514 039a FFF7FEFF 		bl	accelleration_XY_Reset
 2515              	.LVL399:
 248:./Src/application.c ****         app.stato = app_init;
 2516              		.loc 1 248 0
 2517 039e 504B     		ldr	r3, .L245+4
 2518 03a0 9C61     		str	r4, [r3, #24]	@ float
 249:./Src/application.c ****         break;
 2519              		.loc 1 249 0
 2520 03a2 0022     		movs	r2, #0
 2521 03a4 1A70     		strb	r2, [r3]
 250:./Src/application.c ****       }
 2522              		.loc 1 250 0
 2523 03a6 70BD     		pop	{r4, r5, r6, pc}
 2524              	.L241:
 252:./Src/application.c ****       tempf2 = app.axn;
 2525              		.loc 1 252 0
 2526 03a8 4D4B     		ldr	r3, .L245+4
 2527 03aa 9869     		ldr	r0, [r3, #24]	@ float
 2528              	.LVL400:
 253:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 2529              		.loc 1 253 0
 2530 03ac D968     		ldr	r1, [r3, #12]	@ float
 2531              	.LVL401:
 254:./Src/application.c ****     break;
 2532              		.loc 1 254 0
 2533 03ae 4D4B     		ldr	r3, .L245+8
 2534 03b0 1A68     		ldr	r2, [r3]	@ float
 2535 03b2 0023     		movs	r3, #0
 2536 03b4 FFF7FEFF 		bl	go_motor
 2537              	.LVL402:
 255:./Src/application.c **** 
 2538              		.loc 1 255 0
 2539 03b8 70BD     		pop	{r4, r5, r6, pc}
 2540              	.L191:
 259:./Src/application.c ****         telemetry.dataREADY_JOYSTICK  = 0;
 2541              		.loc 1 259 0
 2542 03ba 504B     		ldr	r3, .L245+32
 2543 03bc 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2544 03be 13F0FF0F 		tst	r3, #255
 2545 03c2 17D0     		beq	.L219
 260:./Src/application.c ****         app.tAndroidAPP = HAL_GetTick();
 2546              		.loc 1 260 0
 2547 03c4 4D4C     		ldr	r4, .L245+32
 2548 03c6 0023     		movs	r3, #0
 2549 03c8 6375     		strb	r3, [r4, #21]
 261:./Src/application.c ****         if(telemetry.dataLast_Command == 'F'){
 2550              		.loc 1 261 0
 2551 03ca FFF7FEFF 		bl	HAL_GetTick
 2552              	.LVL403:
 2553 03ce 444B     		ldr	r3, .L245+4
 2554 03d0 5861     		str	r0, [r3, #20]
 262:./Src/application.c ****           MotorR_stop();
ARM GAS  /tmp/ccmsIxgg.s 			page 65


 2555              		.loc 1 262 0
 2556 03d2 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 2557 03d4 DBB2     		uxtb	r3, r3
 2558 03d6 462B     		cmp	r3, #70
 2559 03d8 0CD1     		bne	.L219
 263:./Src/application.c ****           MotorL_stop();
 2560              		.loc 1 263 0
 2561 03da FFF7FEFF 		bl	MotorR_stop
 2562              	.LVL404:
 264:./Src/application.c ****           accelleration_XY_Reset();
 2563              		.loc 1 264 0
 2564 03de FFF7FEFF 		bl	MotorL_stop
 2565              	.LVL405:
 265:./Src/application.c ****           app.cruise_soft_run_nohand = 0.0;
 2566              		.loc 1 265 0
 2567 03e2 FFF7FEFF 		bl	accelleration_XY_Reset
 2568              	.LVL406:
 266:./Src/application.c ****           app.stato = app_init;
 2569              		.loc 1 266 0
 2570 03e6 3E4A     		ldr	r2, .L245+4
 2571 03e8 0023     		movs	r3, #0
 2572 03ea 9361     		str	r3, [r2, #24]	@ float
 267:./Src/application.c ****           telemetry.dataLast_Command = 0;
 2573              		.loc 1 267 0
 2574 03ec 0023     		movs	r3, #0
 2575 03ee 1370     		strb	r3, [r2]
 268:./Src/application.c ****           break;
 2576              		.loc 1 268 0
 2577 03f0 A375     		strb	r3, [r4, #22]
 269:./Src/application.c ****         }
 2578              		.loc 1 269 0
 2579 03f2 70BD     		pop	{r4, r5, r6, pc}
 2580              	.L219:
 272:./Src/application.c ****         go_motor(0, 0, battery_dati.VBatt,0);
 2581              		.loc 1 272 0
 2582 03f4 FFF7FEFF 		bl	HAL_GetTick
 2583              	.LVL407:
 2584 03f8 394B     		ldr	r3, .L245+4
 2585 03fa 5B69     		ldr	r3, [r3, #20]
 2586 03fc C01A     		subs	r0, r0, r3
 2587 03fe B0F5FA7F 		cmp	r0, #500
 2588 0402 10D9     		bls	.L220
 273:./Src/application.c ****         MotorR_stop();
 2589              		.loc 1 273 0
 2590 0404 374B     		ldr	r3, .L245+8
 2591 0406 1A68     		ldr	r2, [r3]	@ float
 2592 0408 0024     		movs	r4, #0
 2593 040a 0023     		movs	r3, #0
 2594 040c 2146     		mov	r1, r4
 2595 040e 2046     		mov	r0, r4
 2596 0410 FFF7FEFF 		bl	go_motor
 2597              	.LVL408:
 274:./Src/application.c ****         MotorL_stop();
 2598              		.loc 1 274 0
 2599 0414 FFF7FEFF 		bl	MotorR_stop
 2600              	.LVL409:
 275:./Src/application.c ****         app.cruise_soft_run_nohand = 0.0;
ARM GAS  /tmp/ccmsIxgg.s 			page 66


 2601              		.loc 1 275 0
 2602 0418 FFF7FEFF 		bl	MotorL_stop
 2603              	.LVL410:
 276:./Src/application.c ****         app.stato = app_init;
 2604              		.loc 1 276 0
 2605 041c 304B     		ldr	r3, .L245+4
 2606 041e 9C61     		str	r4, [r3, #24]	@ float
 277:./Src/application.c ****         break;
 2607              		.loc 1 277 0
 2608 0420 0022     		movs	r2, #0
 2609 0422 1A70     		strb	r2, [r3]
 278:./Src/application.c ****       }
 2610              		.loc 1 278 0
 2611 0424 70BD     		pop	{r4, r5, r6, pc}
 2612              	.L220:
 282:./Src/application.c ****       app.axn = (float)telemetry.joyx;
 2613              		.loc 1 282 0
 2614 0426 354D     		ldr	r5, .L245+32
 2615 0428 688B     		ldrh	r0, [r5, #26]
 2616 042a 00B2     		sxth	r0, r0
 2617 042c FFF7FEFF 		bl	__aeabi_i2f
 2618              	.LVL411:
 2619 0430 2B4C     		ldr	r4, .L245+4
 2620 0432 A060     		str	r0, [r4, #8]	@ float
 283:./Src/application.c ****       if(app.ayn > 300.0){
 2621              		.loc 1 283 0
 2622 0434 288B     		ldrh	r0, [r5, #24]
 2623 0436 00B2     		sxth	r0, r0
 2624 0438 FFF7FEFF 		bl	__aeabi_i2f
 2625              	.LVL412:
 2626 043c E060     		str	r0, [r4, #12]	@ float
 284:./Src/application.c ****         app.ayn = 300.0;
 2627              		.loc 1 284 0
 2628 043e A068     		ldr	r0, [r4, #8]	@ float
 2629 0440 2F49     		ldr	r1, .L245+36
 2630 0442 FFF7FEFF 		bl	__aeabi_fcmpgt
 2631              	.LVL413:
 2632 0446 08B1     		cbz	r0, .L221
 285:./Src/application.c ****       }
 2633              		.loc 1 285 0
 2634 0448 2D4A     		ldr	r2, .L245+36
 2635 044a A260     		str	r2, [r4, #8]	@ float
 2636              	.L221:
 287:./Src/application.c ****         app.axn = 300.0;
 2637              		.loc 1 287 0
 2638 044c 244B     		ldr	r3, .L245+4
 2639 044e D868     		ldr	r0, [r3, #12]	@ float
 2640 0450 2B49     		ldr	r1, .L245+36
 2641 0452 FFF7FEFF 		bl	__aeabi_fcmpgt
 2642              	.LVL414:
 2643 0456 10B1     		cbz	r0, .L223
 288:./Src/application.c ****       }
 2644              		.loc 1 288 0
 2645 0458 294A     		ldr	r2, .L245+36
 2646 045a 214B     		ldr	r3, .L245+4
 2647 045c DA60     		str	r2, [r3, #12]	@ float
 2648              	.L223:
ARM GAS  /tmp/ccmsIxgg.s 			page 67


 290:./Src/application.c ****         app.ayn = 0.0;
 2649              		.loc 1 290 0
 2650 045e 204B     		ldr	r3, .L245+4
 2651 0460 9868     		ldr	r0, [r3, #8]	@ float
 2652 0462 0021     		movs	r1, #0
 2653 0464 FFF7FEFF 		bl	__aeabi_fcmplt
 2654              	.LVL415:
 2655 0468 10B1     		cbz	r0, .L225
 291:./Src/application.c ****       }
 2656              		.loc 1 291 0
 2657 046a 0022     		movs	r2, #0
 2658 046c 1C4B     		ldr	r3, .L245+4
 2659 046e 9A60     		str	r2, [r3, #8]	@ float
 2660              	.L225:
 293:./Src/application.c ****         app.axn = 0.0;
 2661              		.loc 1 293 0
 2662 0470 1B4B     		ldr	r3, .L245+4
 2663 0472 D868     		ldr	r0, [r3, #12]	@ float
 2664 0474 0021     		movs	r1, #0
 2665 0476 FFF7FEFF 		bl	__aeabi_fcmplt
 2666              	.LVL416:
 2667 047a 10B1     		cbz	r0, .L227
 294:./Src/application.c ****       }
 2668              		.loc 1 294 0
 2669 047c 0022     		movs	r2, #0
 2670 047e 184B     		ldr	r3, .L245+4
 2671 0480 DA60     		str	r2, [r3, #12]	@ float
 2672              	.L227:
 297:./Src/application.c ****       app.axn = app.axn - 75.0;
 2673              		.loc 1 297 0
 2674 0482 174C     		ldr	r4, .L245+4
 2675 0484 A068     		ldr	r0, [r4, #8]	@ float
 2676 0486 1F49     		ldr	r1, .L245+40
 2677 0488 FFF7FEFF 		bl	__aeabi_fsub
 2678              	.LVL417:
 2679 048c A060     		str	r0, [r4, #8]	@ float
 298:./Src/application.c **** 
 2680              		.loc 1 298 0
 2681 048e E068     		ldr	r0, [r4, #12]	@ float
 2682 0490 1C49     		ldr	r1, .L245+40
 2683 0492 FFF7FEFF 		bl	__aeabi_fsub
 2684              	.LVL418:
 2685 0496 E060     		str	r0, [r4, #12]	@ float
 301:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2686              		.loc 1 301 0
 2687 0498 A068     		ldr	r0, [r4, #8]	@ float
 2688              	.LVL419:
 302:./Src/application.c ****       app.ayn = scale_y(tempf1, tempf2);
 2689              		.loc 1 302 0
 2690 049a 124D     		ldr	r5, .L245+8
 2691 049c 2968     		ldr	r1, [r5]	@ float
 2692              	.LVL420:
 303:./Src/application.c ****       tempf1 = app.axn;
 2693              		.loc 1 303 0
 2694 049e FFF7FEFF 		bl	scale_y
 2695              	.LVL421:
 2696 04a2 A060     		str	r0, [r4, #8]	@ float
ARM GAS  /tmp/ccmsIxgg.s 			page 68


 304:./Src/application.c ****       tempf2 = battery_dati.VBatt;
 2697              		.loc 1 304 0
 2698 04a4 E068     		ldr	r0, [r4, #12]	@ float
 2699              	.LVL422:
 305:./Src/application.c ****       app.axn = scale_x(tempf1, tempf2);
 2700              		.loc 1 305 0
 2701 04a6 2968     		ldr	r1, [r5]	@ float
 2702              	.LVL423:
 306:./Src/application.c **** 
 2703              		.loc 1 306 0
 2704 04a8 FFF7FEFF 		bl	scale_x
 2705              	.LVL424:
 2706 04ac E060     		str	r0, [r4, #12]	@ float
 308:./Src/application.c ****       app.axn = accellerationX(app.axn);
 2707              		.loc 1 308 0
 2708 04ae A068     		ldr	r0, [r4, #8]	@ float
 2709 04b0 FFF7FEFF 		bl	accellerationY
 2710              	.LVL425:
 2711 04b4 A060     		str	r0, [r4, #8]	@ float
 309:./Src/application.c ****       tempf1 = app.ayn;
 2712              		.loc 1 309 0
 2713 04b6 E068     		ldr	r0, [r4, #12]	@ float
 2714 04b8 FFF7FEFF 		bl	accellerationX
 2715              	.LVL426:
 2716 04bc E060     		str	r0, [r4, #12]	@ float
 310:./Src/application.c ****       tempf2 = app.axn;
 2717              		.loc 1 310 0
 2718 04be A068     		ldr	r0, [r4, #8]	@ float
 2719              	.LVL427:
 311:./Src/application.c ****       go_motor(tempf1, tempf2, battery_dati.VBatt,0);
 2720              		.loc 1 311 0
 2721 04c0 E168     		ldr	r1, [r4, #12]	@ float
 2722              	.LVL428:
 312:./Src/application.c ****     break;
 2723              		.loc 1 312 0
 2724 04c2 2A68     		ldr	r2, [r5]	@ float
 2725 04c4 0023     		movs	r3, #0
 2726 04c6 FFF7FEFF 		bl	go_motor
 2727              	.LVL429:
 313:./Src/application.c **** 
 2728              		.loc 1 313 0
 2729 04ca 70BD     		pop	{r4, r5, r6, pc}
 2730              	.L185:
 316:./Src/application.c ****         MotorL_stop();
 2731              		.loc 1 316 0
 2732 04cc FFF7FEFF 		bl	MotorR_stop
 2733              	.LVL430:
 317:./Src/application.c ****         app.stato = app_init;
 2734              		.loc 1 317 0
 2735 04d0 FFF7FEFF 		bl	MotorL_stop
 2736              	.LVL431:
 318:./Src/application.c ****     break;
 2737              		.loc 1 318 0
 2738 04d4 0022     		movs	r2, #0
 2739 04d6 024B     		ldr	r3, .L245+4
 2740 04d8 1A70     		strb	r2, [r3]
 2741              	.L184:
ARM GAS  /tmp/ccmsIxgg.s 			page 69


 2742 04da 70BD     		pop	{r4, r5, r6, pc}
 2743              	.L246:
 2744              		.align	2
 2745              	.L245:
 2746 04dc 00000000 		.word	wii_JOYdati
 2747 04e0 00000000 		.word	app
 2748 04e4 00000000 		.word	battery_dati
 2749 04e8 0000A040 		.word	1084227584
 2750 04ec 00001440 		.word	1075052544
 2751 04f0 0000A0C0 		.word	-1063256064
 2752 04f4 0000B8C1 		.word	-1044905984
 2753 04f8 00002041 		.word	1092616192
 2754 04fc 00000000 		.word	telemetry
 2755 0500 00009643 		.word	1133903872
 2756 0504 00009642 		.word	1117126656
 2757              		.cfi_endproc
 2758              	.LFE68:
 2760              		.global	Battery_power
 2761              		.comm	battery_dati,20,4
 2762              		.comm	app,72,4
 2763              		.section	.rodata.Battery_power,"a",%progbits
 2764              		.align	2
 2767              	Battery_power:
 2768 0000 00004842 		.word	1112014848
 2769 0004 9A99193F 		.word	1058642330
 2770 0008 00000000 		.space	76
 2770      00000000 
 2770      00000000 
 2770      00000000 
 2770      00000000 
 2771 0054 00004442 		.word	1111752704
 2772 0058 AE47213F 		.word	1059145646
 2773 005c 00000000 		.space	76
 2773      00000000 
 2773      00000000 
 2773      00000000 
 2773      00000000 
 2774 00a8 00004042 		.word	1111490560
 2775 00ac C3F5283F 		.word	1059648963
 2776 00b0 00000000 		.space	76
 2776      00000000 
 2776      00000000 
 2776      00000000 
 2776      00000000 
 2777 00fc 00003C42 		.word	1111228416
 2778 0100 D7A3303F 		.word	1060152279
 2779 0104 00000000 		.space	76
 2779      00000000 
 2779      00000000 
 2779      00000000 
 2779      00000000 
 2780 0150 00003842 		.word	1110966272
 2781 0154 EC51383F 		.word	1060655596
 2782 0158 00000000 		.space	76
 2782      00000000 
 2782      00000000 
 2782      00000000 
ARM GAS  /tmp/ccmsIxgg.s 			page 70


 2782      00000000 
 2783 01a4 00003442 		.word	1110704128
 2784 01a8 0000403F 		.word	1061158912
 2785 01ac 00000000 		.space	76
 2785      00000000 
 2785      00000000 
 2785      00000000 
 2785      00000000 
 2786 01f8 00003042 		.word	1110441984
 2787 01fc 14AE473F 		.word	1061662228
 2788 0200 00000000 		.space	76
 2788      00000000 
 2788      00000000 
 2788      00000000 
 2788      00000000 
 2789 024c 00002C42 		.word	1110179840
 2790 0250 295C4F3F 		.word	1062165545
 2791 0254 00000000 		.space	76
 2791      00000000 
 2791      00000000 
 2791      00000000 
 2791      00000000 
 2792 02a0 00002842 		.word	1109917696
 2793 02a4 3D0A573F 		.word	1062668861
 2794 02a8 00000000 		.space	76
 2794      00000000 
 2794      00000000 
 2794      00000000 
 2794      00000000 
 2795 02f4 00002442 		.word	1109655552
 2796 02f8 52B85E3F 		.word	1063172178
 2797 02fc 00000000 		.space	76
 2797      00000000 
 2797      00000000 
 2797      00000000 
 2797      00000000 
 2798 0348 00002042 		.word	1109393408
 2799 034c 6666663F 		.word	1063675494
 2800 0350 00000000 		.space	76
 2800      00000000 
 2800      00000000 
 2800      00000000 
 2800      00000000 
 2801 039c 00001C42 		.word	1109131264
 2802 03a0 7B146E3F 		.word	1064178811
 2803 03a4 00000000 		.space	76
 2803      00000000 
 2803      00000000 
 2803      00000000 
 2803      00000000 
 2804 03f0 00001842 		.word	1108869120
 2805 03f4 8FC2753F 		.word	1064682127
 2806 03f8 00000000 		.space	76
 2806      00000000 
 2806      00000000 
 2806      00000000 
 2806      00000000 
ARM GAS  /tmp/ccmsIxgg.s 			page 71


 2807 0444 00001442 		.word	1108606976
 2808 0448 0000803F 		.word	1065353216
 2809 044c 00000000 		.space	76
 2809      00000000 
 2809      00000000 
 2809      00000000 
 2809      00000000 
 2810 0498 00001042 		.word	1108344832
 2811 049c 0000803F 		.word	1065353216
 2812 04a0 00000000 		.space	76
 2812      00000000 
 2812      00000000 
 2812      00000000 
 2812      00000000 
 2813 04ec 00000C42 		.word	1108082688
 2814 04f0 0000803F 		.word	1065353216
 2815 04f4 00000000 		.space	76
 2815      00000000 
 2815      00000000 
 2815      00000000 
 2815      00000000 
 2816 0540 00000842 		.word	1107820544
 2817 0544 0000803F 		.word	1065353216
 2818 0548 00000000 		.space	76
 2818      00000000 
 2818      00000000 
 2818      00000000 
 2818      00000000 
 2819 0594 00000442 		.word	1107558400
 2820 0598 0000803F 		.word	1065353216
 2821 059c 00000000 		.space	76
 2821      00000000 
 2821      00000000 
 2821      00000000 
 2821      00000000 
 2822 05e8 00000042 		.word	1107296256
 2823 05ec 0000803F 		.word	1065353216
 2824 05f0 00000000 		.space	76
 2824      00000000 
 2824      00000000 
 2824      00000000 
 2824      00000000 
 2825 063c 0000F841 		.word	1106771968
 2826 0640 0000803F 		.word	1065353216
 2827 0644 00000000 		.space	76
 2827      00000000 
 2827      00000000 
 2827      00000000 
 2827      00000000 
 2828 0690 0000F041 		.word	1106247680
 2829 0694 0000803F 		.word	1065353216
 2830 0698 00000000 		.space	76
 2830      00000000 
 2830      00000000 
 2830      00000000 
 2830      00000000 
 2831              		.text
ARM GAS  /tmp/ccmsIxgg.s 			page 72


 2832              	.Letext0:
 2833              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 2834              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 2835              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 2836              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2837              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 2838              		.file 7 "./Inc/application.h"
 2839              		.file 8 "./Inc/i2c.h"
 2840              		.file 9 "./Inc/telemetry.h"
 2841              		.file 10 "./Drivers/CMSIS/Include/core_cm3.h"
 2842              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 2843              		.file 12 "./Inc/varie.h"
 2844              		.file 13 "./Inc/motor_R.h"
 2845              		.file 14 "./Inc/motor_L.h"
 2846              		.file 15 "./Inc/ADC_R.h"
 2847              		.file 16 "./Inc/ADC_L.h"
ARM GAS  /tmp/ccmsIxgg.s 			page 73


DEFINED SYMBOLS
                            *ABS*:00000000 application.c
     /tmp/ccmsIxgg.s:20     .text.GET_BatteryAverage:00000000 $t
     /tmp/ccmsIxgg.s:25     .text.GET_BatteryAverage:00000000 GET_BatteryAverage
     /tmp/ccmsIxgg.s:41     .text.GET_BatteryAverage:00000008 $d
                            *COM*:00000014 battery_dati
     /tmp/ccmsIxgg.s:46     .text.TASK_BATTERY_LOW_VOLTAGE:00000000 $t
     /tmp/ccmsIxgg.s:51     .text.TASK_BATTERY_LOW_VOLTAGE:00000000 TASK_BATTERY_LOW_VOLTAGE
     /tmp/ccmsIxgg.s:84     .text.TASK_BATTERY_LOW_VOLTAGE:00000020 $d
     /tmp/ccmsIxgg.s:90     .text.applcation_init:00000000 $t
     /tmp/ccmsIxgg.s:95     .text.applcation_init:00000000 applcation_init
     /tmp/ccmsIxgg.s:143    .text.applcation_init:00000030 $d
                            *COM*:00000048 app
     /tmp/ccmsIxgg.s:154    .text.normalize_y:00000000 $t
     /tmp/ccmsIxgg.s:159    .text.normalize_y:00000000 normalize_y
     /tmp/ccmsIxgg.s:219    .text.normalize_y:0000003c $d
     /tmp/ccmsIxgg.s:226    .text.normalize_x:00000000 $t
     /tmp/ccmsIxgg.s:231    .text.normalize_x:00000000 normalize_x
     /tmp/ccmsIxgg.s:291    .text.normalize_x:0000003c $d
     /tmp/ccmsIxgg.s:298    .text.get_powerMax:00000000 $t
     /tmp/ccmsIxgg.s:303    .text.get_powerMax:00000000 get_powerMax
     /tmp/ccmsIxgg.s:474    .text.get_powerMax:000000d0 $d
     /tmp/ccmsIxgg.s:504    .text.scale_y:00000000 $t
     /tmp/ccmsIxgg.s:509    .text.scale_y:00000000 scale_y
     /tmp/ccmsIxgg.s:537    .text.scale_x:00000000 $t
     /tmp/ccmsIxgg.s:542    .text.scale_x:00000000 scale_x
     /tmp/ccmsIxgg.s:570    .text.accelleration_XY_Reset:00000000 $t
     /tmp/ccmsIxgg.s:575    .text.accelleration_XY_Reset:00000000 accelleration_XY_Reset
     /tmp/ccmsIxgg.s:592    .text.accelleration_XY_Reset:0000000c $d
     /tmp/ccmsIxgg.s:601    .text.accellerationY:00000000 $t
     /tmp/ccmsIxgg.s:606    .text.accellerationY:00000000 accellerationY
     /tmp/ccmsIxgg.s:691    .text.accellerationY:00000070 $d
     /tmp/ccmsIxgg.s:698    .text.accellerationX:00000000 $t
     /tmp/ccmsIxgg.s:703    .text.accellerationX:00000000 accellerationX
     /tmp/ccmsIxgg.s:788    .text.accellerationX:00000070 $d
     /tmp/ccmsIxgg.s:795    .text.accellerationYHARD:00000000 $t
     /tmp/ccmsIxgg.s:800    .text.accellerationYHARD:00000000 accellerationYHARD
     /tmp/ccmsIxgg.s:885    .text.accellerationYHARD:00000070 $d
     /tmp/ccmsIxgg.s:892    .text.accellerationXHARD:00000000 $t
     /tmp/ccmsIxgg.s:897    .text.accellerationXHARD:00000000 accellerationXHARD
     /tmp/ccmsIxgg.s:982    .text.accellerationXHARD:00000070 $d
     /tmp/ccmsIxgg.s:994    .text.Battery_TASK:00000000 $t
     /tmp/ccmsIxgg.s:999    .text.Battery_TASK:00000000 Battery_TASK
     /tmp/ccmsIxgg.s:1087   .text.Battery_TASK:00000080 $d
     /tmp/ccmsIxgg.s:1095   .text.WAIT_CHARGE_FINISH:00000000 $t
     /tmp/ccmsIxgg.s:1100   .text.WAIT_CHARGE_FINISH:00000000 WAIT_CHARGE_FINISH
     /tmp/ccmsIxgg.s:1201   .text.WAIT_CHARGE_FINISH:0000007c $d
     /tmp/ccmsIxgg.s:1207   .text.Current_Motor_TASK:00000000 $t
     /tmp/ccmsIxgg.s:1212   .text.Current_Motor_TASK:00000000 Current_Motor_TASK
     /tmp/ccmsIxgg.s:1402   .text.Current_Motor_TASK:00000130 $d
     /tmp/ccmsIxgg.s:1413   .text.getMotorCurrentR:00000000 $t
     /tmp/ccmsIxgg.s:1418   .text.getMotorCurrentR:00000000 getMotorCurrentR
     /tmp/ccmsIxgg.s:1440   .text.getMotorCurrentL:00000000 $t
     /tmp/ccmsIxgg.s:1445   .text.getMotorCurrentL:00000000 getMotorCurrentL
     /tmp/ccmsIxgg.s:1472   .text.go_motor:00000000 $t
     /tmp/ccmsIxgg.s:1477   .text.go_motor:00000000 go_motor
     /tmp/ccmsIxgg.s:1870   .text.go_motor:00000244 $d
ARM GAS  /tmp/ccmsIxgg.s 			page 74


     /tmp/ccmsIxgg.s:1882   .text.applcation_TASK:00000000 $t
     /tmp/ccmsIxgg.s:1887   .text.applcation_TASK:00000000 applcation_TASK
     /tmp/ccmsIxgg.s:1908   .text.applcation_TASK:00000012 $d
     /tmp/ccmsIxgg.s:1913   .text.applcation_TASK:0000001c $t
     /tmp/ccmsIxgg.s:2352   .text.applcation_TASK:00000290 $d
     /tmp/ccmsIxgg.s:2362   .text.applcation_TASK:000002b0 $t
     /tmp/ccmsIxgg.s:2746   .text.applcation_TASK:000004dc $d
     /tmp/ccmsIxgg.s:2767   .rodata.Battery_power:00000000 Battery_power
     /tmp/ccmsIxgg.s:2764   .rodata.Battery_power:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
Buzzer_OneLongBeep
MotorR_stop
MotorL_stop
__aeabi_ui2f
__aeabi_fsub
__aeabi_fcmpge
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fmul
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
__aeabi_dsub
__aeabi_ui2d
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_i2d
__aeabi_dmul
ADC_BATTERY
Led_Set
HAL_IWDG_Refresh
HAL_Delay
IS_Charge
hiwdg
ADC_MOTOR_LEFT
ADC_MOTOR_RIGHT
__aeabi_f2iz
__aeabi_i2f
__aeabi_fadd
__aeabi_fdiv
__aeabi_d2iz
MotorR_pwm
MotorL_pwm
__aeabi_dcmpgt
__aeabi_fcmple
WiiNunchuck_TASK
MotorR_start
MotorL_start
Buzzer_OneShortBeep
wii_JOYdati
telemetry
