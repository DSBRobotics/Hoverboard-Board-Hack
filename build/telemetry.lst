<<<<<<< HEAD
ARM GAS  /tmp/cc25mYAb.s 			page 1
=======
ARM GAS  /tmp/ccTmmKvh.s 			page 1
>>>>>>> 0ef1b90... ADD: over discharge detection, over current protection


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"telemetry.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Telemetry_init,"ax",%progbits
  20              		.align	2
  21              		.global	Telemetry_init
  22              		.thumb
  23              		.thumb_func
  25              	Telemetry_init:
  26              	.LFB64:
  27              		.file 1 "./Src/telemetry.c"
   1:./Src/telemetry.c **** #include "telemetry.h"
   2:./Src/telemetry.c **** #include "uart.h"
   3:./Src/telemetry.c **** #include "application.h"
   4:./Src/telemetry.c **** #include <stdio.h>
   5:./Src/telemetry.c **** #include <stdlib.h>
   6:./Src/telemetry.c **** #include <string.h>
   7:./Src/telemetry.c **** 
   8:./Src/telemetry.c **** extern UART_HandleTypeDef huart2;
   9:./Src/telemetry.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  10:./Src/telemetry.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  11:./Src/telemetry.c **** extern volatile __IO struct UART_dati uartData;
  12:./Src/telemetry.c **** extern volatile __IO struct APPLICATION_dati app;
  13:./Src/telemetry.c **** extern volatile __IO struct BATTERY_dati battery_dati;
  14:./Src/telemetry.c **** volatile __IO struct TELEMETRY_dati telemetry;
  15:./Src/telemetry.c **** volatile COMMAND_data commandsequence;
  16:./Src/telemetry.c **** 
  17:./Src/telemetry.c **** volatile __IO uint32_t leftToTransfer;
  18:./Src/telemetry.c **** 
  19:./Src/telemetry.c **** 
  20:./Src/telemetry.c **** void Telemetry_init(void){
  28              		.loc 1 20 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  21:./Src/telemetry.c ****   MX_USART2_UART_Init();
  37              		.loc 1 21 0
<<<<<<< HEAD
ARM GAS  /tmp/cc25mYAb.s 			page 2
=======
ARM GAS  /tmp/ccTmmKvh.s 			page 2
>>>>>>> 0ef1b90... ADD: over discharge detection, over current protection


  38 0002 FFF7FEFF 		bl	MX_USART2_UART_Init
  39              	.LVL0:
  22:./Src/telemetry.c ****   HAL_UART_Receive_DMA(&huart2, (uint8_t *)&commandsequence, 8);
  40              		.loc 1 22 0
  41 0006 0822     		movs	r2, #8
  42 0008 0249     		ldr	r1, .L3
  43 000a 0348     		ldr	r0, .L3+4
  44 000c FFF7FEFF 		bl	HAL_UART_Receive_DMA
  45              	.LVL1:
  46 0010 08BD     		pop	{r3, pc}
  47              	.L4:
  48 0012 00BF     		.align	2
  49              	.L3:
  50 0014 00000000 		.word	commandsequence
  51 0018 00000000 		.word	huart2
  52              		.cfi_endproc
  53              	.LFE64:
  55              		.global	__aeabi_fmul
  56              		.global	__aeabi_f2iz
  57              		.section	.text.getMotorL,"ax",%progbits
  58              		.align	2
  59              		.global	getMotorL
  60              		.thumb
  61              		.thumb_func
  63              	getMotorL:
  64              	.LFB65:
  23:./Src/telemetry.c **** 
  24:./Src/telemetry.c **** }
  25:./Src/telemetry.c **** 
  26:./Src/telemetry.c **** int16_t getMotorL() {
  65              		.loc 1 26 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69 0000 08B5     		push	{r3, lr}
  70              	.LCFI1:
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 3, -8
  73              		.cfi_offset 14, -4
  27:./Src/telemetry.c ****   return commandsequence.motorRxL * 1000;
  74              		.loc 1 27 0
  75 0002 044B     		ldr	r3, .L7
  76 0004 5868     		ldr	r0, [r3, #4]	@ float
  77 0006 0449     		ldr	r1, .L7+4
  78 0008 FFF7FEFF 		bl	__aeabi_fmul
  79              	.LVL2:
  80 000c FFF7FEFF 		bl	__aeabi_f2iz
  81              	.LVL3:
  28:./Src/telemetry.c **** }
  82              		.loc 1 28 0
  83 0010 00B2     		sxth	r0, r0
  84 0012 08BD     		pop	{r3, pc}
  85              	.L8:
  86              		.align	2
  87              	.L7:
  88 0014 00000000 		.word	commandsequence
  89 0018 00007A44 		.word	1148846080
<<<<<<< HEAD
ARM GAS  /tmp/cc25mYAb.s 			page 3
=======
ARM GAS  /tmp/ccTmmKvh.s 			page 3
>>>>>>> 0ef1b90... ADD: over discharge detection, over current protection


  90              		.cfi_endproc
  91              	.LFE65:
  93              		.section	.text.getMotorR,"ax",%progbits
  94              		.align	2
  95              		.global	getMotorR
  96              		.thumb
  97              		.thumb_func
  99              	getMotorR:
 100              	.LFB66:
  29:./Src/telemetry.c **** 
  30:./Src/telemetry.c **** int16_t getMotorR() {
 101              		.loc 1 30 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105 0000 08B5     		push	{r3, lr}
 106              	.LCFI2:
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 3, -8
 109              		.cfi_offset 14, -4
  31:./Src/telemetry.c ****   return commandsequence.motorRxR * 1000;
 110              		.loc 1 31 0
 111 0002 044B     		ldr	r3, .L11
 112 0004 1868     		ldr	r0, [r3]	@ float
 113 0006 0449     		ldr	r1, .L11+4
 114 0008 FFF7FEFF 		bl	__aeabi_fmul
 115              	.LVL4:
 116 000c FFF7FEFF 		bl	__aeabi_f2iz
 117              	.LVL5:
  32:./Src/telemetry.c **** }
 118              		.loc 1 32 0
 119 0010 00B2     		sxth	r0, r0
 120 0012 08BD     		pop	{r3, pc}
 121              	.L12:
 122              		.align	2
 123              	.L11:
 124 0014 00000000 		.word	commandsequence
 125 0018 00007A44 		.word	1148846080
 126              		.cfi_endproc
 127              	.LFE66:
 129              		.comm	leftToTransfer,4,4
 130              		.comm	commandsequence,8,4
 131              		.comm	telemetry,28,4
 132              		.text
 133              	.Letext0:
 134              		.file 2 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 135              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 136              		.file 4 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 137              		.file 5 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 138              		.file 6 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 139              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 140              		.file 8 "./Inc/telemetry.h"
 141              		.file 9 "./Drivers/CMSIS/Include/core_cm3.h"
 142              		.file 10 "./Inc/uart.h"
<<<<<<< HEAD
ARM GAS  /tmp/cc25mYAb.s 			page 4
=======
ARM GAS  /tmp/ccTmmKvh.s 			page 4
>>>>>>> 0ef1b90... ADD: over discharge detection, over current protection


DEFINED SYMBOLS
                            *ABS*:00000000 telemetry.c
<<<<<<< HEAD
     /tmp/cc25mYAb.s:20     .text.Telemetry_init:00000000 $t
     /tmp/cc25mYAb.s:25     .text.Telemetry_init:00000000 Telemetry_init
     /tmp/cc25mYAb.s:50     .text.Telemetry_init:00000014 $d
                            *COM*:00000008 commandsequence
     /tmp/cc25mYAb.s:58     .text.getMotorL:00000000 $t
     /tmp/cc25mYAb.s:63     .text.getMotorL:00000000 getMotorL
     /tmp/cc25mYAb.s:88     .text.getMotorL:00000014 $d
     /tmp/cc25mYAb.s:94     .text.getMotorR:00000000 $t
     /tmp/cc25mYAb.s:99     .text.getMotorR:00000000 getMotorR
     /tmp/cc25mYAb.s:124    .text.getMotorR:00000014 $d
=======
     /tmp/ccTmmKvh.s:20     .text.Telemetry_init:00000000 $t
     /tmp/ccTmmKvh.s:25     .text.Telemetry_init:00000000 Telemetry_init
     /tmp/ccTmmKvh.s:50     .text.Telemetry_init:00000014 $d
                            *COM*:00000008 commandsequence
     /tmp/ccTmmKvh.s:58     .text.getMotorL:00000000 $t
     /tmp/ccTmmKvh.s:63     .text.getMotorL:00000000 getMotorL
     /tmp/ccTmmKvh.s:88     .text.getMotorL:00000014 $d
     /tmp/ccTmmKvh.s:94     .text.getMotorR:00000000 $t
     /tmp/ccTmmKvh.s:99     .text.getMotorR:00000000 getMotorR
     /tmp/ccTmmKvh.s:124    .text.getMotorR:00000014 $d
>>>>>>> 0ef1b90... ADD: over discharge detection, over current protection
                            *COM*:00000004 leftToTransfer
                            *COM*:0000001c telemetry
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
MX_USART2_UART_Init
HAL_UART_Receive_DMA
huart2
__aeabi_fmul
__aeabi_f2iz
