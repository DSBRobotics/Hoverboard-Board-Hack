ARM GAS  /tmp/cc4olctV.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	2
  21              		.global	NMI_Handler
  22              		.thumb
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB64:
  27              		.file 1 "./Src/stm32f1xx_it.c"
   1:./Src/stm32f1xx_it.c **** /**
   2:./Src/stm32f1xx_it.c ****   ******************************************************************************
   3:./Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:./Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:./Src/stm32f1xx_it.c ****   ******************************************************************************
   6:./Src/stm32f1xx_it.c ****   *
   7:./Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:./Src/stm32f1xx_it.c ****   *
   9:./Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:./Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:./Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:./Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:./Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:./Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:./Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:./Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:./Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:./Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:./Src/stm32f1xx_it.c ****   *
  20:./Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:./Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:./Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:./Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:./Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:./Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:./Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:./Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:./Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:./Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:./Src/stm32f1xx_it.c ****   *
  31:./Src/stm32f1xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/cc4olctV.s 			page 2


  32:./Src/stm32f1xx_it.c ****   */
  33:./Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:./Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:./Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:./Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:./Src/stm32f1xx_it.c **** #include "motor_L.h"
  38:./Src/stm32f1xx_it.c **** #include "motor_R.h"
  39:./Src/stm32f1xx_it.c **** #include "varie.h"
  40:./Src/stm32f1xx_it.c **** #include "pid.h"
  41:./Src/stm32f1xx_it.c **** 
  42:./Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  43:./Src/stm32f1xx_it.c **** 
  44:./Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  45:./Src/stm32f1xx_it.c **** 
  46:./Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  47:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc1;
  48:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc3;
  49:./Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
  50:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim1;
  51:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim8;
  52:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_rx;
  53:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_tx;
  54:./Src/stm32f1xx_it.c **** extern void PWM_L_ISR_Callback(void);
  55:./Src/stm32f1xx_it.c **** extern void HALL_L_ISR_Callback(void);
  56:./Src/stm32f1xx_it.c **** extern void PWM_R_ISR_Callback(void);
  57:./Src/stm32f1xx_it.c **** extern void HALL_R_ISR_Callback(void);
  58:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef Tim3PID;
  59:./Src/stm32f1xx_it.c **** /******************************************************************************/
  60:./Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */
  61:./Src/stm32f1xx_it.c **** /******************************************************************************/
  62:./Src/stm32f1xx_it.c **** extern ADC_HandleTypeDef hadc1;
  63:./Src/stm32f1xx_it.c **** extern ADC_HandleTypeDef hadc3;
  64:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc3;
  65:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim2;
  66:./Src/stm32f1xx_it.c **** /**
  67:./Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  68:./Src/stm32f1xx_it.c **** */
  69:./Src/stm32f1xx_it.c **** void NMI_Handler(void)
  70:./Src/stm32f1xx_it.c **** {
  28              		.loc 1 70 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.L2:
  35              	.LBB20:
  36              	.LBB21:
  37              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4olctV.s 			page 3


   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  /tmp/cc4olctV.s 			page 4


  66:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4olctV.s 			page 5


 123:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc4olctV.s 			page 6


 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc4olctV.s 			page 7


 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4olctV.s 			page 8


 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc4olctV.s 			page 9


 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
  38              		.loc 2 375 0 discriminator 1
  39              		.syntax unified
  40              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
  41 0000 00BF     		nop
  42              	@ 0 "" 2
  43              		.thumb
  44              		.syntax unified
  45              	.LBE21:
  46              	.LBE20:
  47              	.LBB22:
  48              	.LBB23:
  49              		.syntax unified
  50              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
  51 0002 00BF     		nop
  52              	@ 0 "" 2
  53              		.thumb
  54              		.syntax unified
  55              	.LBE23:
  56              	.LBE22:
  57              	.LBB24:
  58              	.LBB25:
  59              		.syntax unified
  60              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
  61 0004 00BF     		nop
  62              	@ 0 "" 2
  63              		.thumb
  64              		.syntax unified
  65 0006 FBE7     		b	.L2
  66              	.LBE25:
  67              	.LBE24:
  68              		.cfi_endproc
  69              	.LFE64:
ARM GAS  /tmp/cc4olctV.s 			page 10


  71              		.section	.text.TIM2_IRQHandler,"ax",%progbits
  72              		.align	2
  73              		.global	TIM2_IRQHandler
  74              		.thumb
  75              		.thumb_func
  77              	TIM2_IRQHandler:
  78              	.LFB65:
  71:./Src/stm32f1xx_it.c ****   while(1){
  72:./Src/stm32f1xx_it.c ****     __NOP();
  73:./Src/stm32f1xx_it.c ****     __NOP();
  74:./Src/stm32f1xx_it.c ****     __NOP();
  75:./Src/stm32f1xx_it.c ****   }
  76:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  77:./Src/stm32f1xx_it.c **** 
  78:./Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  79:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  80:./Src/stm32f1xx_it.c **** 
  81:./Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  82:./Src/stm32f1xx_it.c **** }
  83:./Src/stm32f1xx_it.c **** 
  84:./Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
  85:./Src/stm32f1xx_it.c **** {
  79              		.loc 1 85 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83 0000 08B5     		push	{r3, lr}
  84              	.LCFI0:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 3, -8
  87              		.cfi_offset 14, -4
  86:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
  87:./Src/stm32f1xx_it.c ****   Led_Set(1);
  88              		.loc 1 87 0
  89 0002 0120     		movs	r0, #1
  90 0004 FFF7FEFF 		bl	Led_Set
  91              	.LVL0:
  88:./Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
  89:./Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
  92              		.loc 1 89 0
  93 0008 0148     		ldr	r0, .L5
  94 000a FFF7FEFF 		bl	HAL_TIM_IRQHandler
  95              	.LVL1:
  96 000e 08BD     		pop	{r3, pc}
  97              	.L6:
  98              		.align	2
  99              	.L5:
 100 0010 00000000 		.word	htim2
 101              		.cfi_endproc
 102              	.LFE65:
 104              		.section	.text.HardFault_Handler,"ax",%progbits
 105              		.align	2
 106              		.global	HardFault_Handler
 107              		.thumb
 108              		.thumb_func
 110              	HardFault_Handler:
 111              	.LFB66:
ARM GAS  /tmp/cc4olctV.s 			page 11


  90:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
  91:./Src/stm32f1xx_it.c **** 
  92:./Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
  93:./Src/stm32f1xx_it.c **** }
  94:./Src/stm32f1xx_it.c **** 
  95:./Src/stm32f1xx_it.c **** /**
  96:./Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  97:./Src/stm32f1xx_it.c **** */
  98:./Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  99:./Src/stm32f1xx_it.c **** {
 112              		.loc 1 99 0
 113              		.cfi_startproc
 114              		@ Volatile: function does not return.
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117 0000 08B5     		push	{r3, lr}
 118              	.LCFI1:
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 3, -8
 121              		.cfi_offset 14, -4
 100:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 101:./Src/stm32f1xx_it.c ****   MotorR_stop();
 122              		.loc 1 101 0
 123 0002 FFF7FEFF 		bl	MotorR_stop
 124              	.LVL2:
 102:./Src/stm32f1xx_it.c ****   MotorL_stop();
 125              		.loc 1 102 0
 126 0006 FFF7FEFF 		bl	MotorL_stop
 127              	.LVL3:
 128              	.L8:
 129 000a FEE7     		b	.L8
 130              		.cfi_endproc
 131              	.LFE66:
 133              		.section	.text.MemManage_Handler,"ax",%progbits
 134              		.align	2
 135              		.global	MemManage_Handler
 136              		.thumb
 137              		.thumb_func
 139              	MemManage_Handler:
 140              	.LFB67:
 103:./Src/stm32f1xx_it.c **** 
 104:./Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 105:./Src/stm32f1xx_it.c ****   while (1)
 106:./Src/stm32f1xx_it.c ****   {
 107:./Src/stm32f1xx_it.c ****   }
 108:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
 109:./Src/stm32f1xx_it.c **** 
 110:./Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
 111:./Src/stm32f1xx_it.c **** }
 112:./Src/stm32f1xx_it.c **** 
 113:./Src/stm32f1xx_it.c **** /**
 114:./Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
 115:./Src/stm32f1xx_it.c **** */
 116:./Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 117:./Src/stm32f1xx_it.c **** {
 141              		.loc 1 117 0
 142              		.cfi_startproc
ARM GAS  /tmp/cc4olctV.s 			page 12


 143              		@ Volatile: function does not return.
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146 0000 08B5     		push	{r3, lr}
 147              	.LCFI2:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 3, -8
 150              		.cfi_offset 14, -4
 118:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 119:./Src/stm32f1xx_it.c ****   MotorR_stop();
 151              		.loc 1 119 0
 152 0002 FFF7FEFF 		bl	MotorR_stop
 153              	.LVL4:
 120:./Src/stm32f1xx_it.c ****   MotorL_stop();
 154              		.loc 1 120 0
 155 0006 FFF7FEFF 		bl	MotorL_stop
 156              	.LVL5:
 157              	.L11:
 158 000a FEE7     		b	.L11
 159              		.cfi_endproc
 160              	.LFE67:
 162              		.section	.text.BusFault_Handler,"ax",%progbits
 163              		.align	2
 164              		.global	BusFault_Handler
 165              		.thumb
 166              		.thumb_func
 168              	BusFault_Handler:
 169              	.LFB68:
 121:./Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 122:./Src/stm32f1xx_it.c ****   while (1)
 123:./Src/stm32f1xx_it.c ****   {
 124:./Src/stm32f1xx_it.c ****   }
 125:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 126:./Src/stm32f1xx_it.c **** 
 127:./Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 128:./Src/stm32f1xx_it.c **** }
 129:./Src/stm32f1xx_it.c **** 
 130:./Src/stm32f1xx_it.c **** /**
 131:./Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 132:./Src/stm32f1xx_it.c **** */
 133:./Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 134:./Src/stm32f1xx_it.c **** {
 170              		.loc 1 134 0
 171              		.cfi_startproc
 172              		@ Volatile: function does not return.
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175 0000 08B5     		push	{r3, lr}
 176              	.LCFI3:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 3, -8
 179              		.cfi_offset 14, -4
 135:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 136:./Src/stm32f1xx_it.c ****   MotorR_stop();
 180              		.loc 1 136 0
 181 0002 FFF7FEFF 		bl	MotorR_stop
 182              	.LVL6:
ARM GAS  /tmp/cc4olctV.s 			page 13


 137:./Src/stm32f1xx_it.c ****   MotorL_stop();
 183              		.loc 1 137 0
 184 0006 FFF7FEFF 		bl	MotorL_stop
 185              	.LVL7:
 186              	.L14:
 187 000a FEE7     		b	.L14
 188              		.cfi_endproc
 189              	.LFE68:
 191              		.section	.text.UsageFault_Handler,"ax",%progbits
 192              		.align	2
 193              		.global	UsageFault_Handler
 194              		.thumb
 195              		.thumb_func
 197              	UsageFault_Handler:
 198              	.LFB69:
 138:./Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 139:./Src/stm32f1xx_it.c ****   while (1)
 140:./Src/stm32f1xx_it.c ****   {
 141:./Src/stm32f1xx_it.c ****   }
 142:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 143:./Src/stm32f1xx_it.c **** 
 144:./Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 145:./Src/stm32f1xx_it.c **** }
 146:./Src/stm32f1xx_it.c **** 
 147:./Src/stm32f1xx_it.c **** /**
 148:./Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 149:./Src/stm32f1xx_it.c **** */
 150:./Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 151:./Src/stm32f1xx_it.c **** {
 199              		.loc 1 151 0
 200              		.cfi_startproc
 201              		@ Volatile: function does not return.
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 08B5     		push	{r3, lr}
 205              	.LCFI4:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 152:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 153:./Src/stm32f1xx_it.c ****   MotorR_stop();
 209              		.loc 1 153 0
 210 0002 FFF7FEFF 		bl	MotorR_stop
 211              	.LVL8:
 154:./Src/stm32f1xx_it.c ****   MotorL_stop();
 212              		.loc 1 154 0
 213 0006 FFF7FEFF 		bl	MotorL_stop
 214              	.LVL9:
 215              	.L17:
 216 000a FEE7     		b	.L17
 217              		.cfi_endproc
 218              	.LFE69:
 220              		.section	.text.SVC_Handler,"ax",%progbits
 221              		.align	2
 222              		.global	SVC_Handler
 223              		.thumb
 224              		.thumb_func
ARM GAS  /tmp/cc4olctV.s 			page 14


 226              	SVC_Handler:
 227              	.LFB70:
 155:./Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 156:./Src/stm32f1xx_it.c ****   while (1)
 157:./Src/stm32f1xx_it.c ****   {
 158:./Src/stm32f1xx_it.c ****   }
 159:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 160:./Src/stm32f1xx_it.c **** 
 161:./Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 162:./Src/stm32f1xx_it.c **** }
 163:./Src/stm32f1xx_it.c **** 
 164:./Src/stm32f1xx_it.c **** /**
 165:./Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 166:./Src/stm32f1xx_it.c **** */
 167:./Src/stm32f1xx_it.c **** void SVC_Handler(void)
 168:./Src/stm32f1xx_it.c **** {
 228              		.loc 1 168 0
 229              		.cfi_startproc
 230              		@ Volatile: function does not return.
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234              	.L20:
 235              	.LBB26:
 236              	.LBB27:
 237              		.loc 2 375 0 discriminator 1
 238              		.syntax unified
 239              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 240 0000 00BF     		nop
 241              	@ 0 "" 2
 242              		.thumb
 243              		.syntax unified
 244              	.LBE27:
 245              	.LBE26:
 246              	.LBB28:
 247              	.LBB29:
 248              		.syntax unified
 249              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 250 0002 00BF     		nop
 251              	@ 0 "" 2
 252              		.thumb
 253              		.syntax unified
 254              	.LBE29:
 255              	.LBE28:
 256              	.LBB30:
 257              	.LBB31:
 258              		.syntax unified
 259              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 260 0004 00BF     		nop
 261              	@ 0 "" 2
 262              		.thumb
 263              		.syntax unified
 264 0006 FBE7     		b	.L20
 265              	.LBE31:
 266              	.LBE30:
 267              		.cfi_endproc
 268              	.LFE70:
ARM GAS  /tmp/cc4olctV.s 			page 15


 270              		.section	.text.DebugMon_Handler,"ax",%progbits
 271              		.align	2
 272              		.global	DebugMon_Handler
 273              		.thumb
 274              		.thumb_func
 276              	DebugMon_Handler:
 277              	.LFB71:
 169:./Src/stm32f1xx_it.c ****   while(1){
 170:./Src/stm32f1xx_it.c ****     __NOP();
 171:./Src/stm32f1xx_it.c ****     __NOP();
 172:./Src/stm32f1xx_it.c ****     __NOP();
 173:./Src/stm32f1xx_it.c ****   }
 174:./Src/stm32f1xx_it.c **** 
 175:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 176:./Src/stm32f1xx_it.c **** 
 177:./Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 178:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 179:./Src/stm32f1xx_it.c **** 
 180:./Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 181:./Src/stm32f1xx_it.c **** }
 182:./Src/stm32f1xx_it.c **** 
 183:./Src/stm32f1xx_it.c **** /**
 184:./Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 185:./Src/stm32f1xx_it.c **** */
 186:./Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 187:./Src/stm32f1xx_it.c **** {
 278              		.loc 1 187 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283 0000 7047     		bx	lr
 284              		.cfi_endproc
 285              	.LFE71:
 287 0002 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 288              		.align	2
 289              		.global	PendSV_Handler
 290              		.thumb
 291              		.thumb_func
 293              	PendSV_Handler:
 294              	.LFB72:
 188:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 189:./Src/stm32f1xx_it.c **** 
 190:./Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 191:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 192:./Src/stm32f1xx_it.c **** 
 193:./Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 194:./Src/stm32f1xx_it.c **** }
 195:./Src/stm32f1xx_it.c **** 
 196:./Src/stm32f1xx_it.c **** /**
 197:./Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 198:./Src/stm32f1xx_it.c **** */
 199:./Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 200:./Src/stm32f1xx_it.c **** {
 295              		.loc 1 200 0
 296              		.cfi_startproc
 297              		@ Volatile: function does not return.
ARM GAS  /tmp/cc4olctV.s 			page 16


 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              		@ link register save eliminated.
 301              	.L23:
 302              	.LBB32:
 303              	.LBB33:
 304              		.loc 2 375 0 discriminator 1
 305              		.syntax unified
 306              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 307 0000 00BF     		nop
 308              	@ 0 "" 2
 309              		.thumb
 310              		.syntax unified
 311              	.LBE33:
 312              	.LBE32:
 313              	.LBB34:
 314              	.LBB35:
 315              		.syntax unified
 316              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 317 0002 00BF     		nop
 318              	@ 0 "" 2
 319              		.thumb
 320              		.syntax unified
 321              	.LBE35:
 322              	.LBE34:
 323              	.LBB36:
 324              	.LBB37:
 325              		.syntax unified
 326              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 327 0004 00BF     		nop
 328              	@ 0 "" 2
 329              		.thumb
 330              		.syntax unified
 331 0006 FBE7     		b	.L23
 332              	.LBE37:
 333              	.LBE36:
 334              		.cfi_endproc
 335              	.LFE72:
 337              		.section	.text.SysTick_Handler,"ax",%progbits
 338              		.align	2
 339              		.global	SysTick_Handler
 340              		.thumb
 341              		.thumb_func
 343              	SysTick_Handler:
 344              	.LFB73:
 201:./Src/stm32f1xx_it.c ****   while(1){
 202:./Src/stm32f1xx_it.c ****     __NOP();
 203:./Src/stm32f1xx_it.c ****     __NOP();
 204:./Src/stm32f1xx_it.c ****     __NOP();
 205:./Src/stm32f1xx_it.c ****   }
 206:./Src/stm32f1xx_it.c **** 
 207:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 208:./Src/stm32f1xx_it.c **** 
 209:./Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 210:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 211:./Src/stm32f1xx_it.c **** 
 212:./Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
ARM GAS  /tmp/cc4olctV.s 			page 17


 213:./Src/stm32f1xx_it.c **** }
 214:./Src/stm32f1xx_it.c **** 
 215:./Src/stm32f1xx_it.c **** /**
 216:./Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 217:./Src/stm32f1xx_it.c **** */
 218:./Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 219:./Src/stm32f1xx_it.c **** {
 345              		.loc 1 219 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349 0000 08B5     		push	{r3, lr}
 350              	.LCFI5:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 3, -8
 353              		.cfi_offset 14, -4
 220:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 221:./Src/stm32f1xx_it.c **** 
 222:./Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 223:./Src/stm32f1xx_it.c ****   HAL_IncTick();
 354              		.loc 1 223 0
 355 0002 FFF7FEFF 		bl	HAL_IncTick
 356              	.LVL10:
 224:./Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 357              		.loc 1 224 0
 358 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 359              	.LVL11:
 360 000a 08BD     		pop	{r3, pc}
 361              		.cfi_endproc
 362              	.LFE73:
 364              		.section	.text.I2C1_EV_IRQHandler,"ax",%progbits
 365              		.align	2
 366              		.global	I2C1_EV_IRQHandler
 367              		.thumb
 368              		.thumb_func
 370              	I2C1_EV_IRQHandler:
 371              	.LFB74:
 225:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 226:./Src/stm32f1xx_it.c **** 
 227:./Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 228:./Src/stm32f1xx_it.c **** }
 229:./Src/stm32f1xx_it.c **** 
 230:./Src/stm32f1xx_it.c **** /******************************************************************************/
 231:./Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 232:./Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 233:./Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 234:./Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 235:./Src/stm32f1xx_it.c **** /******************************************************************************/
 236:./Src/stm32f1xx_it.c **** 
 237:./Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
 238:./Src/stm32f1xx_it.c **** void I2C1_EV_IRQHandler(void)
 239:./Src/stm32f1xx_it.c **** {
 372              		.loc 1 239 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc4olctV.s 			page 18


 377              	.LCFI6:
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 3, -8
 380              		.cfi_offset 14, -4
 240:./Src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c2);
 381              		.loc 1 240 0
 382 0002 0248     		ldr	r0, .L28
 383 0004 FFF7FEFF 		bl	HAL_I2C_EV_IRQHandler
 384              	.LVL12:
 385 0008 08BD     		pop	{r3, pc}
 386              	.L29:
 387 000a 00BF     		.align	2
 388              	.L28:
 389 000c 00000000 		.word	hi2c2
 390              		.cfi_endproc
 391              	.LFE74:
 393              		.section	.text.I2C1_ER_IRQHandler,"ax",%progbits
 394              		.align	2
 395              		.global	I2C1_ER_IRQHandler
 396              		.thumb
 397              		.thumb_func
 399              	I2C1_ER_IRQHandler:
 400              	.LFB75:
 241:./Src/stm32f1xx_it.c **** }
 242:./Src/stm32f1xx_it.c **** 
 243:./Src/stm32f1xx_it.c **** void I2C1_ER_IRQHandler(void)
 244:./Src/stm32f1xx_it.c **** {
 401              		.loc 1 244 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405 0000 08B5     		push	{r3, lr}
 406              	.LCFI7:
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 3, -8
 409              		.cfi_offset 14, -4
 245:./Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 410              		.loc 1 245 0
 411 0002 0248     		ldr	r0, .L32
 412 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 413              	.LVL13:
 414 0008 08BD     		pop	{r3, pc}
 415              	.L33:
 416 000a 00BF     		.align	2
 417              	.L32:
 418 000c 00000000 		.word	hi2c2
 419              		.cfi_endproc
 420              	.LFE75:
 422              		.section	.text.DMA1_Channel3_IRQHandler,"ax",%progbits
 423              		.align	2
 424              		.global	DMA1_Channel3_IRQHandler
 425              		.thumb
 426              		.thumb_func
 428              	DMA1_Channel3_IRQHandler:
 429              	.LFB76:
 246:./Src/stm32f1xx_it.c **** }
 247:./Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/cc4olctV.s 			page 19


 248:./Src/stm32f1xx_it.c **** 
 249:./Src/stm32f1xx_it.c **** 
 250:./Src/stm32f1xx_it.c **** /**
 251:./Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel6 global interrupt.
 252:./Src/stm32f1xx_it.c **** */
 253:./Src/stm32f1xx_it.c **** void DMA1_Channel3_IRQHandler(void)
 254:./Src/stm32f1xx_it.c **** {
 430              		.loc 1 254 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434 0000 08B5     		push	{r3, lr}
 435              	.LCFI8:
 436              		.cfi_def_cfa_offset 8
 437              		.cfi_offset 3, -8
 438              		.cfi_offset 14, -4
 255:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
 256:./Src/stm32f1xx_it.c **** 
 257:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 0 */
 258:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_rx);
 439              		.loc 1 258 0
 440 0002 0248     		ldr	r0, .L36
 441 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 442              	.LVL14:
 443 0008 08BD     		pop	{r3, pc}
 444              	.L37:
 445 000a 00BF     		.align	2
 446              	.L36:
 447 000c 00000000 		.word	hdma_usart3_rx
 448              		.cfi_endproc
 449              	.LFE76:
 451              		.section	.text.DMA1_Channel2_IRQHandler,"ax",%progbits
 452              		.align	2
 453              		.global	DMA1_Channel2_IRQHandler
 454              		.thumb
 455              		.thumb_func
 457              	DMA1_Channel2_IRQHandler:
 458              	.LFB77:
 259:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
 260:./Src/stm32f1xx_it.c **** 
 261:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 1 */
 262:./Src/stm32f1xx_it.c **** }
 263:./Src/stm32f1xx_it.c **** 
 264:./Src/stm32f1xx_it.c **** /**
 265:./Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel7 global interrupt.
 266:./Src/stm32f1xx_it.c **** */
 267:./Src/stm32f1xx_it.c **** void DMA1_Channel2_IRQHandler(void)
 268:./Src/stm32f1xx_it.c **** {
 459              		.loc 1 268 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463 0000 08B5     		push	{r3, lr}
 464              	.LCFI9:
 465              		.cfi_def_cfa_offset 8
 466              		.cfi_offset 3, -8
 467              		.cfi_offset 14, -4
ARM GAS  /tmp/cc4olctV.s 			page 20


 269:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
 270:./Src/stm32f1xx_it.c **** 
 271:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 0 */
 272:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_tx);
 468              		.loc 1 272 0
 469 0002 0248     		ldr	r0, .L40
 470 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 471              	.LVL15:
 472 0008 08BD     		pop	{r3, pc}
 473              	.L41:
 474 000a 00BF     		.align	2
 475              	.L40:
 476 000c 00000000 		.word	hdma_usart3_tx
 477              		.cfi_endproc
 478              	.LFE77:
 480              		.section	.text.I2C2_ER_IRQHandler,"ax",%progbits
 481              		.align	2
 482              		.global	I2C2_ER_IRQHandler
 483              		.thumb
 484              		.thumb_func
 486              	I2C2_ER_IRQHandler:
 487              	.LFB78:
 273:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
 274:./Src/stm32f1xx_it.c **** 
 275:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 1 */
 276:./Src/stm32f1xx_it.c **** }
 277:./Src/stm32f1xx_it.c **** 
 278:./Src/stm32f1xx_it.c **** 
 279:./Src/stm32f1xx_it.c **** 
 280:./Src/stm32f1xx_it.c **** /**
 281:./Src/stm32f1xx_it.c **** * @brief This function handles I2C2 error interrupt.
 282:./Src/stm32f1xx_it.c **** */
 283:./Src/stm32f1xx_it.c **** void I2C2_ER_IRQHandler(void)
 284:./Src/stm32f1xx_it.c **** {
 488              		.loc 1 284 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492 0000 08B5     		push	{r3, lr}
 493              	.LCFI10:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 3, -8
 496              		.cfi_offset 14, -4
 285:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_ER_IRQn 0 */
 286:./Src/stm32f1xx_it.c **** 
 287:./Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_ER_IRQn 0 */
 288:./Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 497              		.loc 1 288 0
 498 0002 0248     		ldr	r0, .L44
 499 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 500              	.LVL16:
 501 0008 08BD     		pop	{r3, pc}
 502              	.L45:
 503 000a 00BF     		.align	2
 504              	.L44:
 505 000c 00000000 		.word	hi2c2
 506              		.cfi_endproc
ARM GAS  /tmp/cc4olctV.s 			page 21


 507              	.LFE78:
 509              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 510              		.align	2
 511              		.global	EXTI15_10_IRQHandler
 512              		.thumb
 513              		.thumb_func
 515              	EXTI15_10_IRQHandler:
 516              	.LFB79:
 289:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_ER_IRQn 1 */
 290:./Src/stm32f1xx_it.c **** 
 291:./Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_ER_IRQn 1 */
 292:./Src/stm32f1xx_it.c **** }
 293:./Src/stm32f1xx_it.c **** 
 294:./Src/stm32f1xx_it.c **** /**
 295:./Src/stm32f1xx_it.c **** * @brief This function handles EXTI line[15:10] interrupts.
 296:./Src/stm32f1xx_it.c **** */
 297:./Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 298:./Src/stm32f1xx_it.c **** {
 517              		.loc 1 298 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521 0000 08B5     		push	{r3, lr}
 522              	.LCFI11:
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 3, -8
 525              		.cfi_offset 14, -4
 299:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET)||
 526              		.loc 1 299 0
 527 0002 0E4B     		ldr	r3, .L50
 528 0004 5B69     		ldr	r3, [r3, #20]
 529 0006 13F4806F 		tst	r3, #1024
 530 000a 09D1     		bne	.L47
 300:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET)||
 531              		.loc 1 300 0 discriminator 1
 532 000c 0B4B     		ldr	r3, .L50
 533 000e 5B69     		ldr	r3, [r3, #20]
 299:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET)||
 534              		.loc 1 299 0 discriminator 1
 535 0010 13F4006F 		tst	r3, #2048
 536 0014 04D1     		bne	.L47
 301:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET))
 537              		.loc 1 301 0
 538 0016 094B     		ldr	r3, .L50
 539 0018 5B69     		ldr	r3, [r3, #20]
 300:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET)||
 540              		.loc 1 300 0
 541 001a 13F4805F 		tst	r3, #4096
 542 001e 0BD0     		beq	.L46
 543              	.L47:
 302:./Src/stm32f1xx_it.c ****   {
 303:./Src/stm32f1xx_it.c **** 
 304:./Src/stm32f1xx_it.c ****     HALL_R_ISR_Callback();
 544              		.loc 1 304 0
 545 0020 FFF7FEFF 		bl	HALL_R_ISR_Callback
 546              	.LVL17:
 305:./Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/cc4olctV.s 			page 22


 306:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 547              		.loc 1 306 0
 548 0024 054B     		ldr	r3, .L50
 549 0026 4FF48062 		mov	r2, #1024
 550 002a 5A61     		str	r2, [r3, #20]
 307:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 551              		.loc 1 307 0
 552 002c 4FF40062 		mov	r2, #2048
 553 0030 5A61     		str	r2, [r3, #20]
 308:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 554              		.loc 1 308 0
 555 0032 4FF48052 		mov	r2, #4096
 556 0036 5A61     		str	r2, [r3, #20]
 557              	.L46:
 558 0038 08BD     		pop	{r3, pc}
 559              	.L51:
 560 003a 00BF     		.align	2
 561              	.L50:
 562 003c 00040140 		.word	1073808384
 563              		.cfi_endproc
 564              	.LFE79:
 566              		.section	.text.EXTI3_IRQHandler,"ax",%progbits
 567              		.align	2
 568              		.global	EXTI3_IRQHandler
 569              		.thumb
 570              		.thumb_func
 572              	EXTI3_IRQHandler:
 573              	.LFB80:
 309:./Src/stm32f1xx_it.c ****   }
 310:./Src/stm32f1xx_it.c **** }
 311:./Src/stm32f1xx_it.c **** 
 312:./Src/stm32f1xx_it.c **** void EXTI3_IRQHandler(void)
 313:./Src/stm32f1xx_it.c **** {
 574              		.loc 1 313 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578 0000 08B5     		push	{r3, lr}
 579              	.LCFI12:
 580              		.cfi_def_cfa_offset 8
 581              		.cfi_offset 3, -8
 582              		.cfi_offset 14, -4
 314:./Src/stm32f1xx_it.c ****     PPM_ISR_Callback();
 583              		.loc 1 314 0
 584 0002 FFF7FEFF 		bl	PPM_ISR_Callback
 585              	.LVL18:
 315:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 586              		.loc 1 315 0
 587 0006 0822     		movs	r2, #8
 588 0008 014B     		ldr	r3, .L54
 589 000a 5A61     		str	r2, [r3, #20]
 590 000c 08BD     		pop	{r3, pc}
 591              	.L55:
 592 000e 00BF     		.align	2
 593              	.L54:
 594 0010 00040140 		.word	1073808384
 595              		.cfi_endproc
ARM GAS  /tmp/cc4olctV.s 			page 23


 596              	.LFE80:
 598              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 599              		.align	2
 600              		.global	EXTI9_5_IRQHandler
 601              		.thumb
 602              		.thumb_func
 604              	EXTI9_5_IRQHandler:
 605              	.LFB81:
 316:./Src/stm32f1xx_it.c **** }
 317:./Src/stm32f1xx_it.c **** 
 318:./Src/stm32f1xx_it.c **** /**
 319:./Src/stm32f1xx_it.c **** * @brief This function handles TIM1 capture compare interrupt.
 320:./Src/stm32f1xx_it.c **** */
 321:./Src/stm32f1xx_it.c **** 
 322:./Src/stm32f1xx_it.c **** 
 323:./Src/stm32f1xx_it.c **** /**
 324:./Src/stm32f1xx_it.c **** * @brief This function handles EXTI line[9:5] interrupts.
 325:./Src/stm32f1xx_it.c **** */
 326:./Src/stm32f1xx_it.c **** void EXTI9_5_IRQHandler(void)
 327:./Src/stm32f1xx_it.c **** {
 606              		.loc 1 327 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610 0000 08B5     		push	{r3, lr}
 611              	.LCFI13:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 3, -8
 614              		.cfi_offset 14, -4
 328:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)||
 615              		.loc 1 328 0
 616 0002 0C4B     		ldr	r3, .L60
 617 0004 5B69     		ldr	r3, [r3, #20]
 618 0006 13F0200F 		tst	r3, #32
 619 000a 09D1     		bne	.L57
 329:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET)||
 620              		.loc 1 329 0 discriminator 1
 621 000c 094B     		ldr	r3, .L60
 622 000e 5B69     		ldr	r3, [r3, #20]
 328:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)||
 623              		.loc 1 328 0 discriminator 1
 624 0010 13F0400F 		tst	r3, #64
 625 0014 04D1     		bne	.L57
 330:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET))
 626              		.loc 1 330 0
 627 0016 074B     		ldr	r3, .L60
 628 0018 5B69     		ldr	r3, [r3, #20]
 329:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET)||
 629              		.loc 1 329 0
 630 001a 13F0800F 		tst	r3, #128
 631 001e 08D0     		beq	.L56
 632              	.L57:
 331:./Src/stm32f1xx_it.c ****   {
 332:./Src/stm32f1xx_it.c **** 
 333:./Src/stm32f1xx_it.c ****     HALL_L_ISR_Callback();
 633              		.loc 1 333 0
 634 0020 FFF7FEFF 		bl	HALL_L_ISR_Callback
ARM GAS  /tmp/cc4olctV.s 			page 24


 635              	.LVL19:
 334:./Src/stm32f1xx_it.c **** 
 335:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 636              		.loc 1 335 0
 637 0024 034B     		ldr	r3, .L60
 638 0026 2022     		movs	r2, #32
 639 0028 5A61     		str	r2, [r3, #20]
 336:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 640              		.loc 1 336 0
 641 002a 4022     		movs	r2, #64
 642 002c 5A61     		str	r2, [r3, #20]
 337:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 643              		.loc 1 337 0
 644 002e 8022     		movs	r2, #128
 645 0030 5A61     		str	r2, [r3, #20]
 646              	.L56:
 647 0032 08BD     		pop	{r3, pc}
 648              	.L61:
 649              		.align	2
 650              	.L60:
 651 0034 00040140 		.word	1073808384
 652              		.cfi_endproc
 653              	.LFE81:
 655              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 656              		.align	2
 657              		.global	TIM1_CC_IRQHandler
 658              		.thumb
 659              		.thumb_func
 661              	TIM1_CC_IRQHandler:
 662              	.LFB82:
 338:./Src/stm32f1xx_it.c ****   }
 339:./Src/stm32f1xx_it.c **** }
 340:./Src/stm32f1xx_it.c **** 
 341:./Src/stm32f1xx_it.c **** /**
 342:./Src/stm32f1xx_it.c **** * @brief This function handles TIM8 capture compare interrupt.
 343:./Src/stm32f1xx_it.c **** */
 344:./Src/stm32f1xx_it.c **** void TIM1_CC_IRQHandler(void)
 345:./Src/stm32f1xx_it.c **** {
 663              		.loc 1 345 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667 0000 08B5     		push	{r3, lr}
 668              	.LCFI14:
 669              		.cfi_def_cfa_offset 8
 670              		.cfi_offset 3, -8
 671              		.cfi_offset 14, -4
 346:./Src/stm32f1xx_it.c ****   //DebugPin4_ON();
 347:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1);
 672              		.loc 1 347 0
 673 0002 0A4B     		ldr	r3, .L64
 674 0004 1B68     		ldr	r3, [r3]
 675 0006 6FF00202 		mvn	r2, #2
 676 000a 1A61     		str	r2, [r3, #16]
 348:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC2);
 677              		.loc 1 348 0
 678 000c 6FF00402 		mvn	r2, #4
ARM GAS  /tmp/cc4olctV.s 			page 25


 679 0010 1A61     		str	r2, [r3, #16]
 349:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC3);
 680              		.loc 1 349 0
 681 0012 6FF00802 		mvn	r2, #8
 682 0016 1A61     		str	r2, [r3, #16]
 350:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC4);
 683              		.loc 1 350 0
 684 0018 6FF01002 		mvn	r2, #16
 685 001c 1A61     		str	r2, [r3, #16]
 351:./Src/stm32f1xx_it.c **** 
 352:./Src/stm32f1xx_it.c ****   PWM_R_ISR_Callback();
 686              		.loc 1 352 0
 687 001e FFF7FEFF 		bl	PWM_R_ISR_Callback
 688              	.LVL20:
 353:./Src/stm32f1xx_it.c ****   HAL_ADC_Start(&hadc1);
 689              		.loc 1 353 0
 690 0022 0348     		ldr	r0, .L64+4
 691 0024 FFF7FEFF 		bl	HAL_ADC_Start
 692              	.LVL21:
 693 0028 08BD     		pop	{r3, pc}
 694              	.L65:
 695 002a 00BF     		.align	2
 696              	.L64:
 697 002c 00000000 		.word	htim1
 698 0030 00000000 		.word	hadc1
 699              		.cfi_endproc
 700              	.LFE82:
 702              		.section	.text.TIM8_CC_IRQHandler,"ax",%progbits
 703              		.align	2
 704              		.global	TIM8_CC_IRQHandler
 705              		.thumb
 706              		.thumb_func
 708              	TIM8_CC_IRQHandler:
 709              	.LFB83:
 354:./Src/stm32f1xx_it.c ****   //DebugPin4_OFF();
 355:./Src/stm32f1xx_it.c **** }
 356:./Src/stm32f1xx_it.c **** void TIM8_CC_IRQHandler(void)
 357:./Src/stm32f1xx_it.c **** {
 710              		.loc 1 357 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714 0000 08B5     		push	{r3, lr}
 715              	.LCFI15:
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 3, -8
 718              		.cfi_offset 14, -4
 358:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC1);
 719              		.loc 1 358 0
 720 0002 0A4B     		ldr	r3, .L68
 721 0004 1B68     		ldr	r3, [r3]
 722 0006 6FF00202 		mvn	r2, #2
 723 000a 1A61     		str	r2, [r3, #16]
 359:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC2);
 724              		.loc 1 359 0
 725 000c 6FF00402 		mvn	r2, #4
 726 0010 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/cc4olctV.s 			page 26


 360:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC3);
 727              		.loc 1 360 0
 728 0012 6FF00802 		mvn	r2, #8
 729 0016 1A61     		str	r2, [r3, #16]
 361:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC4);
 730              		.loc 1 361 0
 731 0018 6FF01002 		mvn	r2, #16
 732 001c 1A61     		str	r2, [r3, #16]
 362:./Src/stm32f1xx_it.c **** 
 363:./Src/stm32f1xx_it.c ****   PWM_L_ISR_Callback();
 733              		.loc 1 363 0
 734 001e FFF7FEFF 		bl	PWM_L_ISR_Callback
 735              	.LVL22:
 364:./Src/stm32f1xx_it.c ****   HAL_ADC_Start(&hadc3);
 736              		.loc 1 364 0
 737 0022 0348     		ldr	r0, .L68+4
 738 0024 FFF7FEFF 		bl	HAL_ADC_Start
 739              	.LVL23:
 740 0028 08BD     		pop	{r3, pc}
 741              	.L69:
 742 002a 00BF     		.align	2
 743              	.L68:
 744 002c 00000000 		.word	htim8
 745 0030 00000000 		.word	hadc3
 746              		.cfi_endproc
 747              	.LFE83:
 749              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 750              		.align	2
 751              		.global	DMA1_Channel1_IRQHandler
 752              		.thumb
 753              		.thumb_func
 755              	DMA1_Channel1_IRQHandler:
 756              	.LFB84:
 365:./Src/stm32f1xx_it.c **** }
 366:./Src/stm32f1xx_it.c **** 
 367:./Src/stm32f1xx_it.c **** //ADC1 -PC1-PC2-
 368:./Src/stm32f1xx_it.c **** void DMA1_Channel1_IRQHandler(void)
 369:./Src/stm32f1xx_it.c **** {
 757              		.loc 1 369 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 0
 760              		@ frame_needed = 0, uses_anonymous_args = 0
 761 0000 08B5     		push	{r3, lr}
 762              	.LCFI16:
 763              		.cfi_def_cfa_offset 8
 764              		.cfi_offset 3, -8
 765              		.cfi_offset 14, -4
 370:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc1);
 766              		.loc 1 370 0
 767 0002 0248     		ldr	r0, .L72
 768 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 769              	.LVL24:
 770 0008 08BD     		pop	{r3, pc}
 771              	.L73:
 772 000a 00BF     		.align	2
 773              	.L72:
 774 000c 00000000 		.word	hdma_adc1
ARM GAS  /tmp/cc4olctV.s 			page 27


 775              		.cfi_endproc
 776              	.LFE84:
 778              		.section	.text.DMA2_Channel4_5_IRQHandler,"ax",%progbits
 779              		.align	2
 780              		.global	DMA2_Channel4_5_IRQHandler
 781              		.thumb
 782              		.thumb_func
 784              	DMA2_Channel4_5_IRQHandler:
 785              	.LFB85:
 371:./Src/stm32f1xx_it.c **** }
 372:./Src/stm32f1xx_it.c **** //ADC3 -PC0-
 373:./Src/stm32f1xx_it.c **** void DMA2_Channel4_5_IRQHandler(void)
 374:./Src/stm32f1xx_it.c **** {
 786              		.loc 1 374 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790 0000 08B5     		push	{r3, lr}
 791              	.LCFI17:
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 3, -8
 794              		.cfi_offset 14, -4
 375:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc3);
 795              		.loc 1 375 0
 796 0002 0248     		ldr	r0, .L76
 797 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 798              	.LVL25:
 799 0008 08BD     		pop	{r3, pc}
 800              	.L77:
 801 000a 00BF     		.align	2
 802              	.L76:
 803 000c 00000000 		.word	hdma_adc3
 804              		.cfi_endproc
 805              	.LFE85:
 807              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 808              		.align	2
 809              		.global	TIM3_IRQHandler
 810              		.thumb
 811              		.thumb_func
 813              	TIM3_IRQHandler:
 814              	.LFB86:
 376:./Src/stm32f1xx_it.c **** }
 377:./Src/stm32f1xx_it.c **** 
 378:./Src/stm32f1xx_it.c **** 
 379:./Src/stm32f1xx_it.c **** //extern volatile __IO int32_t testVelR;
 380:./Src/stm32f1xx_it.c **** 
 381:./Src/stm32f1xx_it.c **** //PID
 382:./Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 383:./Src/stm32f1xx_it.c **** {
 815              		.loc 1 383 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 384:./Src/stm32f1xx_it.c ****   //DebugPin4_ON();
 385:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&Tim3PID, TIM_IT_UPDATE);
 820              		.loc 1 385 0
ARM GAS  /tmp/cc4olctV.s 			page 28


 821 0000 024B     		ldr	r3, .L79
 822 0002 1B68     		ldr	r3, [r3]
 823 0004 6FF00102 		mvn	r2, #1
 824 0008 1A61     		str	r2, [r3, #16]
 825 000a 7047     		bx	lr
 826              	.L80:
 827              		.align	2
 828              	.L79:
 829 000c 00000000 		.word	Tim3PID
 830              		.cfi_endproc
 831              	.LFE86:
 833              		.text
 834              	.Letext0:
 835              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 836              		.file 4 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 837              		.file 5 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 838              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 839              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 840              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 841              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 842              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 843              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 844              		.file 12 "./Drivers/CMSIS/Include/core_cm3.h"
 845              		.file 13 "./Inc/varie.h"
 846              		.file 14 "./Inc/motor_R.h"
 847              		.file 15 "./Inc/motor_L.h"
 848              		.file 16 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 849              		.file 17 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/cc4olctV.s 			page 29


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_it.c
     /tmp/cc4olctV.s:20     .text.NMI_Handler:00000000 $t
     /tmp/cc4olctV.s:25     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/cc4olctV.s:72     .text.TIM2_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:77     .text.TIM2_IRQHandler:00000000 TIM2_IRQHandler
     /tmp/cc4olctV.s:100    .text.TIM2_IRQHandler:00000010 $d
     /tmp/cc4olctV.s:105    .text.HardFault_Handler:00000000 $t
     /tmp/cc4olctV.s:110    .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/cc4olctV.s:134    .text.MemManage_Handler:00000000 $t
     /tmp/cc4olctV.s:139    .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/cc4olctV.s:163    .text.BusFault_Handler:00000000 $t
     /tmp/cc4olctV.s:168    .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/cc4olctV.s:192    .text.UsageFault_Handler:00000000 $t
     /tmp/cc4olctV.s:197    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/cc4olctV.s:221    .text.SVC_Handler:00000000 $t
     /tmp/cc4olctV.s:226    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/cc4olctV.s:271    .text.DebugMon_Handler:00000000 $t
     /tmp/cc4olctV.s:276    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/cc4olctV.s:288    .text.PendSV_Handler:00000000 $t
     /tmp/cc4olctV.s:293    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/cc4olctV.s:338    .text.SysTick_Handler:00000000 $t
     /tmp/cc4olctV.s:343    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/cc4olctV.s:365    .text.I2C1_EV_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:370    .text.I2C1_EV_IRQHandler:00000000 I2C1_EV_IRQHandler
     /tmp/cc4olctV.s:389    .text.I2C1_EV_IRQHandler:0000000c $d
     /tmp/cc4olctV.s:394    .text.I2C1_ER_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:399    .text.I2C1_ER_IRQHandler:00000000 I2C1_ER_IRQHandler
     /tmp/cc4olctV.s:418    .text.I2C1_ER_IRQHandler:0000000c $d
     /tmp/cc4olctV.s:423    .text.DMA1_Channel3_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:428    .text.DMA1_Channel3_IRQHandler:00000000 DMA1_Channel3_IRQHandler
     /tmp/cc4olctV.s:447    .text.DMA1_Channel3_IRQHandler:0000000c $d
     /tmp/cc4olctV.s:452    .text.DMA1_Channel2_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:457    .text.DMA1_Channel2_IRQHandler:00000000 DMA1_Channel2_IRQHandler
     /tmp/cc4olctV.s:476    .text.DMA1_Channel2_IRQHandler:0000000c $d
     /tmp/cc4olctV.s:481    .text.I2C2_ER_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:486    .text.I2C2_ER_IRQHandler:00000000 I2C2_ER_IRQHandler
     /tmp/cc4olctV.s:505    .text.I2C2_ER_IRQHandler:0000000c $d
     /tmp/cc4olctV.s:510    .text.EXTI15_10_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:515    .text.EXTI15_10_IRQHandler:00000000 EXTI15_10_IRQHandler
     /tmp/cc4olctV.s:562    .text.EXTI15_10_IRQHandler:0000003c $d
     /tmp/cc4olctV.s:567    .text.EXTI3_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:572    .text.EXTI3_IRQHandler:00000000 EXTI3_IRQHandler
     /tmp/cc4olctV.s:594    .text.EXTI3_IRQHandler:00000010 $d
     /tmp/cc4olctV.s:599    .text.EXTI9_5_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:604    .text.EXTI9_5_IRQHandler:00000000 EXTI9_5_IRQHandler
     /tmp/cc4olctV.s:651    .text.EXTI9_5_IRQHandler:00000034 $d
     /tmp/cc4olctV.s:656    .text.TIM1_CC_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:661    .text.TIM1_CC_IRQHandler:00000000 TIM1_CC_IRQHandler
     /tmp/cc4olctV.s:697    .text.TIM1_CC_IRQHandler:0000002c $d
     /tmp/cc4olctV.s:703    .text.TIM8_CC_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:708    .text.TIM8_CC_IRQHandler:00000000 TIM8_CC_IRQHandler
     /tmp/cc4olctV.s:744    .text.TIM8_CC_IRQHandler:0000002c $d
     /tmp/cc4olctV.s:750    .text.DMA1_Channel1_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:755    .text.DMA1_Channel1_IRQHandler:00000000 DMA1_Channel1_IRQHandler
     /tmp/cc4olctV.s:774    .text.DMA1_Channel1_IRQHandler:0000000c $d
     /tmp/cc4olctV.s:779    .text.DMA2_Channel4_5_IRQHandler:00000000 $t
ARM GAS  /tmp/cc4olctV.s 			page 30


     /tmp/cc4olctV.s:784    .text.DMA2_Channel4_5_IRQHandler:00000000 DMA2_Channel4_5_IRQHandler
     /tmp/cc4olctV.s:803    .text.DMA2_Channel4_5_IRQHandler:0000000c $d
     /tmp/cc4olctV.s:808    .text.TIM3_IRQHandler:00000000 $t
     /tmp/cc4olctV.s:813    .text.TIM3_IRQHandler:00000000 TIM3_IRQHandler
     /tmp/cc4olctV.s:829    .text.TIM3_IRQHandler:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Led_Set
HAL_TIM_IRQHandler
htim2
MotorR_stop
MotorL_stop
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_I2C_EV_IRQHandler
hi2c2
HAL_I2C_ER_IRQHandler
HAL_DMA_IRQHandler
hdma_usart3_rx
hdma_usart3_tx
HALL_R_ISR_Callback
PPM_ISR_Callback
HALL_L_ISR_Callback
PWM_R_ISR_Callback
HAL_ADC_Start
htim1
hadc1
PWM_L_ISR_Callback
htim8
hadc3
hdma_adc1
hdma_adc3
Tim3PID
