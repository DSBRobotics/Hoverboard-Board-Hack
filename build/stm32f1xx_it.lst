ARM GAS  /tmp/ccGTYQMs.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f1xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	2
  21              		.global	NMI_Handler
  22              		.thumb
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB64:
  27              		.file 1 "./Src/stm32f1xx_it.c"
   1:./Src/stm32f1xx_it.c **** /**
   2:./Src/stm32f1xx_it.c ****   ******************************************************************************
   3:./Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:./Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:./Src/stm32f1xx_it.c ****   ******************************************************************************
   6:./Src/stm32f1xx_it.c ****   *
   7:./Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:./Src/stm32f1xx_it.c ****   *
   9:./Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:./Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:./Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:./Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:./Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:./Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:./Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:./Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:./Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:./Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:./Src/stm32f1xx_it.c ****   *
  20:./Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:./Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:./Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:./Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:./Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:./Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:./Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:./Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:./Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:./Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:./Src/stm32f1xx_it.c ****   *
  31:./Src/stm32f1xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/ccGTYQMs.s 			page 2


  32:./Src/stm32f1xx_it.c ****   */
  33:./Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:./Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:./Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:./Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:./Src/stm32f1xx_it.c **** #include "motor_L.h"
  38:./Src/stm32f1xx_it.c **** #include "motor_R.h"
  39:./Src/stm32f1xx_it.c **** #include "varie.h"
  40:./Src/stm32f1xx_it.c **** #include "pid.h"
  41:./Src/stm32f1xx_it.c **** 
  42:./Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  43:./Src/stm32f1xx_it.c **** 
  44:./Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  45:./Src/stm32f1xx_it.c **** 
  46:./Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  47:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc1;
  48:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc3;
  49:./Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
  50:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim1;
  51:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim8;
  52:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_rx;
  53:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_tx;
  54:./Src/stm32f1xx_it.c **** extern void PWM_L_ISR_Callback(void);
  55:./Src/stm32f1xx_it.c **** extern void HALL_L_ISR_Callback(void);
  56:./Src/stm32f1xx_it.c **** extern void PWM_R_ISR_Callback(void);
  57:./Src/stm32f1xx_it.c **** extern void HALL_R_ISR_Callback(void);
  58:./Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef Tim3PID;
  59:./Src/stm32f1xx_it.c **** /******************************************************************************/
  60:./Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */
  61:./Src/stm32f1xx_it.c **** /******************************************************************************/
  62:./Src/stm32f1xx_it.c **** extern ADC_HandleTypeDef hadc1;
  63:./Src/stm32f1xx_it.c **** extern ADC_HandleTypeDef hadc3;
  64:./Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc3;
  65:./Src/stm32f1xx_it.c **** //extern TIM_HandleTypeDef htim2;
  66:./Src/stm32f1xx_it.c **** /**
  67:./Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  68:./Src/stm32f1xx_it.c **** */
  69:./Src/stm32f1xx_it.c **** void NMI_Handler(void)
  70:./Src/stm32f1xx_it.c **** {
  28              		.loc 1 70 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.L2:
  35              	.LBB20:
  36              	.LBB21:
  37              		.file 2 "./Drivers/CMSIS/Include/cmsis_gcc.h"
   1:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccGTYQMs.s 			page 3


   9:./Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:./Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  /tmp/ccGTYQMs.s 			page 4


  66:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccGTYQMs.s 			page 5


 123:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:./Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccGTYQMs.s 			page 6


 180:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:./Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccGTYQMs.s 			page 7


 237:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccGTYQMs.s 			page 8


 294:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:./Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccGTYQMs.s 			page 9


 351:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:./Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:./Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:./Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
  38              		.loc 2 375 0 discriminator 1
  39              		.syntax unified
  40              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
  41 0000 00BF     		nop
  42              	@ 0 "" 2
  43              		.thumb
  44              		.syntax unified
  45              	.LBE21:
  46              	.LBE20:
  47              	.LBB22:
  48              	.LBB23:
  49              		.syntax unified
  50              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
  51 0002 00BF     		nop
  52              	@ 0 "" 2
  53              		.thumb
  54              		.syntax unified
  55              	.LBE23:
  56              	.LBE22:
  57              	.LBB24:
  58              	.LBB25:
  59              		.syntax unified
  60              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
  61 0004 00BF     		nop
  62              	@ 0 "" 2
  63              		.thumb
  64              		.syntax unified
  65 0006 FBE7     		b	.L2
  66              	.LBE25:
  67              	.LBE24:
  68              		.cfi_endproc
  69              	.LFE64:
ARM GAS  /tmp/ccGTYQMs.s 			page 10


  71              		.section	.text.HardFault_Handler,"ax",%progbits
  72              		.align	2
  73              		.global	HardFault_Handler
  74              		.thumb
  75              		.thumb_func
  77              	HardFault_Handler:
  78              	.LFB65:
  71:./Src/stm32f1xx_it.c ****   while(1){
  72:./Src/stm32f1xx_it.c ****     __NOP();
  73:./Src/stm32f1xx_it.c ****     __NOP();
  74:./Src/stm32f1xx_it.c ****     __NOP();
  75:./Src/stm32f1xx_it.c ****   }
  76:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  77:./Src/stm32f1xx_it.c **** 
  78:./Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  79:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  80:./Src/stm32f1xx_it.c **** 
  81:./Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  82:./Src/stm32f1xx_it.c **** }
  83:./Src/stm32f1xx_it.c **** 
  84:./Src/stm32f1xx_it.c **** /**
  85:./Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  86:./Src/stm32f1xx_it.c **** */
  87:./Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  88:./Src/stm32f1xx_it.c **** {
  79              		.loc 1 88 0
  80              		.cfi_startproc
  81              		@ Volatile: function does not return.
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84 0000 08B5     		push	{r3, lr}
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 3, -8
  88              		.cfi_offset 14, -4
  89:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  90:./Src/stm32f1xx_it.c ****   MotorR_stop();
  89              		.loc 1 90 0
  90 0002 FFF7FEFF 		bl	MotorR_stop
  91              	.LVL0:
  91:./Src/stm32f1xx_it.c ****   MotorL_stop();
  92              		.loc 1 91 0
  93 0006 FFF7FEFF 		bl	MotorL_stop
  94              	.LVL1:
  95              	.L4:
  96 000a FEE7     		b	.L4
  97              		.cfi_endproc
  98              	.LFE65:
 100              		.section	.text.MemManage_Handler,"ax",%progbits
 101              		.align	2
 102              		.global	MemManage_Handler
 103              		.thumb
 104              		.thumb_func
 106              	MemManage_Handler:
 107              	.LFB66:
  92:./Src/stm32f1xx_it.c **** 
  93:./Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
ARM GAS  /tmp/ccGTYQMs.s 			page 11


  94:./Src/stm32f1xx_it.c ****   while (1)
  95:./Src/stm32f1xx_it.c ****   {
  96:./Src/stm32f1xx_it.c ****   }
  97:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  98:./Src/stm32f1xx_it.c **** 
  99:./Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
 100:./Src/stm32f1xx_it.c **** }
 101:./Src/stm32f1xx_it.c **** 
 102:./Src/stm32f1xx_it.c **** /**
 103:./Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
 104:./Src/stm32f1xx_it.c **** */
 105:./Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 106:./Src/stm32f1xx_it.c **** {
 108              		.loc 1 106 0
 109              		.cfi_startproc
 110              		@ Volatile: function does not return.
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113 0000 08B5     		push	{r3, lr}
 114              	.LCFI1:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 3, -8
 117              		.cfi_offset 14, -4
 107:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 108:./Src/stm32f1xx_it.c ****   MotorR_stop();
 118              		.loc 1 108 0
 119 0002 FFF7FEFF 		bl	MotorR_stop
 120              	.LVL2:
 109:./Src/stm32f1xx_it.c ****   MotorL_stop();
 121              		.loc 1 109 0
 122 0006 FFF7FEFF 		bl	MotorL_stop
 123              	.LVL3:
 124              	.L7:
 125 000a FEE7     		b	.L7
 126              		.cfi_endproc
 127              	.LFE66:
 129              		.section	.text.BusFault_Handler,"ax",%progbits
 130              		.align	2
 131              		.global	BusFault_Handler
 132              		.thumb
 133              		.thumb_func
 135              	BusFault_Handler:
 136              	.LFB67:
 110:./Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 111:./Src/stm32f1xx_it.c ****   while (1)
 112:./Src/stm32f1xx_it.c ****   {
 113:./Src/stm32f1xx_it.c ****   }
 114:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
 115:./Src/stm32f1xx_it.c **** 
 116:./Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 117:./Src/stm32f1xx_it.c **** }
 118:./Src/stm32f1xx_it.c **** 
 119:./Src/stm32f1xx_it.c **** /**
 120:./Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 121:./Src/stm32f1xx_it.c **** */
 122:./Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 123:./Src/stm32f1xx_it.c **** {
ARM GAS  /tmp/ccGTYQMs.s 			page 12


 137              		.loc 1 123 0
 138              		.cfi_startproc
 139              		@ Volatile: function does not return.
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142 0000 08B5     		push	{r3, lr}
 143              	.LCFI2:
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 3, -8
 146              		.cfi_offset 14, -4
 124:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 125:./Src/stm32f1xx_it.c ****   MotorR_stop();
 147              		.loc 1 125 0
 148 0002 FFF7FEFF 		bl	MotorR_stop
 149              	.LVL4:
 126:./Src/stm32f1xx_it.c ****   MotorL_stop();
 150              		.loc 1 126 0
 151 0006 FFF7FEFF 		bl	MotorL_stop
 152              	.LVL5:
 153              	.L10:
 154 000a FEE7     		b	.L10
 155              		.cfi_endproc
 156              	.LFE67:
 158              		.section	.text.UsageFault_Handler,"ax",%progbits
 159              		.align	2
 160              		.global	UsageFault_Handler
 161              		.thumb
 162              		.thumb_func
 164              	UsageFault_Handler:
 165              	.LFB68:
 127:./Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 128:./Src/stm32f1xx_it.c ****   while (1)
 129:./Src/stm32f1xx_it.c ****   {
 130:./Src/stm32f1xx_it.c ****   }
 131:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 132:./Src/stm32f1xx_it.c **** 
 133:./Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 134:./Src/stm32f1xx_it.c **** }
 135:./Src/stm32f1xx_it.c **** 
 136:./Src/stm32f1xx_it.c **** /**
 137:./Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 138:./Src/stm32f1xx_it.c **** */
 139:./Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 140:./Src/stm32f1xx_it.c **** {
 166              		.loc 1 140 0
 167              		.cfi_startproc
 168              		@ Volatile: function does not return.
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171 0000 08B5     		push	{r3, lr}
 172              	.LCFI3:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 3, -8
 175              		.cfi_offset 14, -4
 141:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 142:./Src/stm32f1xx_it.c ****   MotorR_stop();
 176              		.loc 1 142 0
ARM GAS  /tmp/ccGTYQMs.s 			page 13


 177 0002 FFF7FEFF 		bl	MotorR_stop
 178              	.LVL6:
 143:./Src/stm32f1xx_it.c ****   MotorL_stop();
 179              		.loc 1 143 0
 180 0006 FFF7FEFF 		bl	MotorL_stop
 181              	.LVL7:
 182              	.L13:
 183 000a FEE7     		b	.L13
 184              		.cfi_endproc
 185              	.LFE68:
 187              		.section	.text.SVC_Handler,"ax",%progbits
 188              		.align	2
 189              		.global	SVC_Handler
 190              		.thumb
 191              		.thumb_func
 193              	SVC_Handler:
 194              	.LFB69:
 144:./Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 145:./Src/stm32f1xx_it.c ****   while (1)
 146:./Src/stm32f1xx_it.c ****   {
 147:./Src/stm32f1xx_it.c ****   }
 148:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 149:./Src/stm32f1xx_it.c **** 
 150:./Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 151:./Src/stm32f1xx_it.c **** }
 152:./Src/stm32f1xx_it.c **** 
 153:./Src/stm32f1xx_it.c **** /**
 154:./Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 155:./Src/stm32f1xx_it.c **** */
 156:./Src/stm32f1xx_it.c **** void SVC_Handler(void)
 157:./Src/stm32f1xx_it.c **** {
 195              		.loc 1 157 0
 196              		.cfi_startproc
 197              		@ Volatile: function does not return.
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              		@ link register save eliminated.
 201              	.L16:
 202              	.LBB26:
 203              	.LBB27:
 204              		.loc 2 375 0 discriminator 1
 205              		.syntax unified
 206              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 207 0000 00BF     		nop
 208              	@ 0 "" 2
 209              		.thumb
 210              		.syntax unified
 211              	.LBE27:
 212              	.LBE26:
 213              	.LBB28:
 214              	.LBB29:
 215              		.syntax unified
 216              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 217 0002 00BF     		nop
 218              	@ 0 "" 2
 219              		.thumb
 220              		.syntax unified
ARM GAS  /tmp/ccGTYQMs.s 			page 14


 221              	.LBE29:
 222              	.LBE28:
 223              	.LBB30:
 224              	.LBB31:
 225              		.syntax unified
 226              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 227 0004 00BF     		nop
 228              	@ 0 "" 2
 229              		.thumb
 230              		.syntax unified
 231 0006 FBE7     		b	.L16
 232              	.LBE31:
 233              	.LBE30:
 234              		.cfi_endproc
 235              	.LFE69:
 237              		.section	.text.DebugMon_Handler,"ax",%progbits
 238              		.align	2
 239              		.global	DebugMon_Handler
 240              		.thumb
 241              		.thumb_func
 243              	DebugMon_Handler:
 244              	.LFB70:
 158:./Src/stm32f1xx_it.c ****   while(1){
 159:./Src/stm32f1xx_it.c ****     __NOP();
 160:./Src/stm32f1xx_it.c ****     __NOP();
 161:./Src/stm32f1xx_it.c ****     __NOP();
 162:./Src/stm32f1xx_it.c ****   }
 163:./Src/stm32f1xx_it.c **** 
 164:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 165:./Src/stm32f1xx_it.c **** 
 166:./Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 167:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 168:./Src/stm32f1xx_it.c **** 
 169:./Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 170:./Src/stm32f1xx_it.c **** }
 171:./Src/stm32f1xx_it.c **** 
 172:./Src/stm32f1xx_it.c **** /**
 173:./Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 174:./Src/stm32f1xx_it.c **** */
 175:./Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 176:./Src/stm32f1xx_it.c **** {
 245              		.loc 1 176 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 250 0000 7047     		bx	lr
 251              		.cfi_endproc
 252              	.LFE70:
 254 0002 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 255              		.align	2
 256              		.global	PendSV_Handler
 257              		.thumb
 258              		.thumb_func
 260              	PendSV_Handler:
 261              	.LFB71:
 177:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
ARM GAS  /tmp/ccGTYQMs.s 			page 15


 178:./Src/stm32f1xx_it.c **** 
 179:./Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 180:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 181:./Src/stm32f1xx_it.c **** 
 182:./Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 183:./Src/stm32f1xx_it.c **** }
 184:./Src/stm32f1xx_it.c **** 
 185:./Src/stm32f1xx_it.c **** /**
 186:./Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 187:./Src/stm32f1xx_it.c **** */
 188:./Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 189:./Src/stm32f1xx_it.c **** {
 262              		.loc 1 189 0
 263              		.cfi_startproc
 264              		@ Volatile: function does not return.
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 268              	.L19:
 269              	.LBB32:
 270              	.LBB33:
 271              		.loc 2 375 0 discriminator 1
 272              		.syntax unified
 273              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 274 0000 00BF     		nop
 275              	@ 0 "" 2
 276              		.thumb
 277              		.syntax unified
 278              	.LBE33:
 279              	.LBE32:
 280              	.LBB34:
 281              	.LBB35:
 282              		.syntax unified
 283              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 284 0002 00BF     		nop
 285              	@ 0 "" 2
 286              		.thumb
 287              		.syntax unified
 288              	.LBE35:
 289              	.LBE34:
 290              	.LBB36:
 291              	.LBB37:
 292              		.syntax unified
 293              	@ 375 "./Drivers/CMSIS/Include/cmsis_gcc.h" 1
 294 0004 00BF     		nop
 295              	@ 0 "" 2
 296              		.thumb
 297              		.syntax unified
 298 0006 FBE7     		b	.L19
 299              	.LBE37:
 300              	.LBE36:
 301              		.cfi_endproc
 302              	.LFE71:
 304              		.section	.text.SysTick_Handler,"ax",%progbits
 305              		.align	2
 306              		.global	SysTick_Handler
 307              		.thumb
ARM GAS  /tmp/ccGTYQMs.s 			page 16


 308              		.thumb_func
 310              	SysTick_Handler:
 311              	.LFB72:
 190:./Src/stm32f1xx_it.c ****   while(1){
 191:./Src/stm32f1xx_it.c ****     __NOP();
 192:./Src/stm32f1xx_it.c ****     __NOP();
 193:./Src/stm32f1xx_it.c ****     __NOP();
 194:./Src/stm32f1xx_it.c ****   }
 195:./Src/stm32f1xx_it.c **** 
 196:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 197:./Src/stm32f1xx_it.c **** 
 198:./Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 199:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 200:./Src/stm32f1xx_it.c **** 
 201:./Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 202:./Src/stm32f1xx_it.c **** }
 203:./Src/stm32f1xx_it.c **** 
 204:./Src/stm32f1xx_it.c **** /**
 205:./Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 206:./Src/stm32f1xx_it.c **** */
 207:./Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 208:./Src/stm32f1xx_it.c **** {
 312              		.loc 1 208 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316 0000 08B5     		push	{r3, lr}
 317              	.LCFI4:
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 3, -8
 320              		.cfi_offset 14, -4
 209:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 210:./Src/stm32f1xx_it.c **** 
 211:./Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 212:./Src/stm32f1xx_it.c ****   HAL_IncTick();
 321              		.loc 1 212 0
 322 0002 FFF7FEFF 		bl	HAL_IncTick
 323              	.LVL8:
 213:./Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 324              		.loc 1 213 0
 325 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 326              	.LVL9:
 327 000a 08BD     		pop	{r3, pc}
 328              		.cfi_endproc
 329              	.LFE72:
 331              		.section	.text.I2C1_EV_IRQHandler,"ax",%progbits
 332              		.align	2
 333              		.global	I2C1_EV_IRQHandler
 334              		.thumb
 335              		.thumb_func
 337              	I2C1_EV_IRQHandler:
 338              	.LFB73:
 214:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 215:./Src/stm32f1xx_it.c **** 
 216:./Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 217:./Src/stm32f1xx_it.c **** }
 218:./Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccGTYQMs.s 			page 17


 219:./Src/stm32f1xx_it.c **** /******************************************************************************/
 220:./Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 221:./Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 222:./Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 223:./Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 224:./Src/stm32f1xx_it.c **** /******************************************************************************/
 225:./Src/stm32f1xx_it.c **** 
 226:./Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
 227:./Src/stm32f1xx_it.c **** void I2C1_EV_IRQHandler(void)
 228:./Src/stm32f1xx_it.c **** {
 339              		.loc 1 228 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343 0000 08B5     		push	{r3, lr}
 344              	.LCFI5:
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 3, -8
 347              		.cfi_offset 14, -4
 229:./Src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c2);
 348              		.loc 1 229 0
 349 0002 0248     		ldr	r0, .L24
 350 0004 FFF7FEFF 		bl	HAL_I2C_EV_IRQHandler
 351              	.LVL10:
 352 0008 08BD     		pop	{r3, pc}
 353              	.L25:
 354 000a 00BF     		.align	2
 355              	.L24:
 356 000c 00000000 		.word	hi2c2
 357              		.cfi_endproc
 358              	.LFE73:
 360              		.section	.text.I2C1_ER_IRQHandler,"ax",%progbits
 361              		.align	2
 362              		.global	I2C1_ER_IRQHandler
 363              		.thumb
 364              		.thumb_func
 366              	I2C1_ER_IRQHandler:
 367              	.LFB74:
 230:./Src/stm32f1xx_it.c **** }
 231:./Src/stm32f1xx_it.c **** 
 232:./Src/stm32f1xx_it.c **** void I2C1_ER_IRQHandler(void)
 233:./Src/stm32f1xx_it.c **** {
 368              		.loc 1 233 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372 0000 08B5     		push	{r3, lr}
 373              	.LCFI6:
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 3, -8
 376              		.cfi_offset 14, -4
 234:./Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 377              		.loc 1 234 0
 378 0002 0248     		ldr	r0, .L28
 379 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 380              	.LVL11:
 381 0008 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccGTYQMs.s 			page 18


 382              	.L29:
 383 000a 00BF     		.align	2
 384              	.L28:
 385 000c 00000000 		.word	hi2c2
 386              		.cfi_endproc
 387              	.LFE74:
 389              		.section	.text.DMA1_Channel3_IRQHandler,"ax",%progbits
 390              		.align	2
 391              		.global	DMA1_Channel3_IRQHandler
 392              		.thumb
 393              		.thumb_func
 395              	DMA1_Channel3_IRQHandler:
 396              	.LFB75:
 235:./Src/stm32f1xx_it.c **** }
 236:./Src/stm32f1xx_it.c **** 
 237:./Src/stm32f1xx_it.c **** 
 238:./Src/stm32f1xx_it.c **** 
 239:./Src/stm32f1xx_it.c **** /**
 240:./Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel6 global interrupt.
 241:./Src/stm32f1xx_it.c **** */
 242:./Src/stm32f1xx_it.c **** void DMA1_Channel3_IRQHandler(void)
 243:./Src/stm32f1xx_it.c **** {
 397              		.loc 1 243 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 0, uses_anonymous_args = 0
 401 0000 08B5     		push	{r3, lr}
 402              	.LCFI7:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 3, -8
 405              		.cfi_offset 14, -4
 244:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
 245:./Src/stm32f1xx_it.c **** 
 246:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 0 */
 247:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_rx);
 406              		.loc 1 247 0
 407 0002 0248     		ldr	r0, .L32
 408 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 409              	.LVL12:
 410 0008 08BD     		pop	{r3, pc}
 411              	.L33:
 412 000a 00BF     		.align	2
 413              	.L32:
 414 000c 00000000 		.word	hdma_usart3_rx
 415              		.cfi_endproc
 416              	.LFE75:
 418              		.section	.text.DMA1_Channel2_IRQHandler,"ax",%progbits
 419              		.align	2
 420              		.global	DMA1_Channel2_IRQHandler
 421              		.thumb
 422              		.thumb_func
 424              	DMA1_Channel2_IRQHandler:
 425              	.LFB76:
 248:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
 249:./Src/stm32f1xx_it.c **** 
 250:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel6_IRQn 1 */
 251:./Src/stm32f1xx_it.c **** }
ARM GAS  /tmp/ccGTYQMs.s 			page 19


 252:./Src/stm32f1xx_it.c **** 
 253:./Src/stm32f1xx_it.c **** /**
 254:./Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel7 global interrupt.
 255:./Src/stm32f1xx_it.c **** */
 256:./Src/stm32f1xx_it.c **** void DMA1_Channel2_IRQHandler(void)
 257:./Src/stm32f1xx_it.c **** {
 426              		.loc 1 257 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430 0000 08B5     		push	{r3, lr}
 431              	.LCFI8:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 3, -8
 434              		.cfi_offset 14, -4
 258:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
 259:./Src/stm32f1xx_it.c **** 
 260:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 0 */
 261:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_tx);
 435              		.loc 1 261 0
 436 0002 0248     		ldr	r0, .L36
 437 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 438              	.LVL13:
 439 0008 08BD     		pop	{r3, pc}
 440              	.L37:
 441 000a 00BF     		.align	2
 442              	.L36:
 443 000c 00000000 		.word	hdma_usart3_tx
 444              		.cfi_endproc
 445              	.LFE76:
 447              		.section	.text.I2C2_ER_IRQHandler,"ax",%progbits
 448              		.align	2
 449              		.global	I2C2_ER_IRQHandler
 450              		.thumb
 451              		.thumb_func
 453              	I2C2_ER_IRQHandler:
 454              	.LFB77:
 262:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
 263:./Src/stm32f1xx_it.c **** 
 264:./Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel7_IRQn 1 */
 265:./Src/stm32f1xx_it.c **** }
 266:./Src/stm32f1xx_it.c **** 
 267:./Src/stm32f1xx_it.c **** 
 268:./Src/stm32f1xx_it.c **** 
 269:./Src/stm32f1xx_it.c **** /**
 270:./Src/stm32f1xx_it.c **** * @brief This function handles I2C2 error interrupt.
 271:./Src/stm32f1xx_it.c **** */
 272:./Src/stm32f1xx_it.c **** void I2C2_ER_IRQHandler(void)
 273:./Src/stm32f1xx_it.c **** {
 455              		.loc 1 273 0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459 0000 08B5     		push	{r3, lr}
 460              	.LCFI9:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 3, -8
ARM GAS  /tmp/ccGTYQMs.s 			page 20


 463              		.cfi_offset 14, -4
 274:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_ER_IRQn 0 */
 275:./Src/stm32f1xx_it.c **** 
 276:./Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_ER_IRQn 0 */
 277:./Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 464              		.loc 1 277 0
 465 0002 0248     		ldr	r0, .L40
 466 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 467              	.LVL14:
 468 0008 08BD     		pop	{r3, pc}
 469              	.L41:
 470 000a 00BF     		.align	2
 471              	.L40:
 472 000c 00000000 		.word	hi2c2
 473              		.cfi_endproc
 474              	.LFE77:
 476              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 477              		.align	2
 478              		.global	EXTI15_10_IRQHandler
 479              		.thumb
 480              		.thumb_func
 482              	EXTI15_10_IRQHandler:
 483              	.LFB78:
 278:./Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_ER_IRQn 1 */
 279:./Src/stm32f1xx_it.c **** 
 280:./Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_ER_IRQn 1 */
 281:./Src/stm32f1xx_it.c **** }
 282:./Src/stm32f1xx_it.c **** 
 283:./Src/stm32f1xx_it.c **** /**
 284:./Src/stm32f1xx_it.c **** * @brief This function handles EXTI line[15:10] interrupts.
 285:./Src/stm32f1xx_it.c **** */
 286:./Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 287:./Src/stm32f1xx_it.c **** {
 484              		.loc 1 287 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488 0000 08B5     		push	{r3, lr}
 489              	.LCFI10:
 490              		.cfi_def_cfa_offset 8
 491              		.cfi_offset 3, -8
 492              		.cfi_offset 14, -4
 288:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET)||
 493              		.loc 1 288 0
 494 0002 0E4B     		ldr	r3, .L46
 495 0004 5B69     		ldr	r3, [r3, #20]
 496 0006 13F4806F 		tst	r3, #1024
 497 000a 09D1     		bne	.L43
 289:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET)||
 498              		.loc 1 289 0 discriminator 1
 499 000c 0B4B     		ldr	r3, .L46
 500 000e 5B69     		ldr	r3, [r3, #20]
 288:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET)||
 501              		.loc 1 288 0 discriminator 1
 502 0010 13F4006F 		tst	r3, #2048
 503 0014 04D1     		bne	.L43
 290:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET))
ARM GAS  /tmp/ccGTYQMs.s 			page 21


 504              		.loc 1 290 0
 505 0016 094B     		ldr	r3, .L46
 506 0018 5B69     		ldr	r3, [r3, #20]
 289:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET)||
 507              		.loc 1 289 0
 508 001a 13F4805F 		tst	r3, #4096
 509 001e 0BD0     		beq	.L42
 510              	.L43:
 291:./Src/stm32f1xx_it.c ****   {
 292:./Src/stm32f1xx_it.c **** 
 293:./Src/stm32f1xx_it.c ****     HALL_R_ISR_Callback();
 511              		.loc 1 293 0
 512 0020 FFF7FEFF 		bl	HALL_R_ISR_Callback
 513              	.LVL15:
 294:./Src/stm32f1xx_it.c **** 
 295:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 514              		.loc 1 295 0
 515 0024 054B     		ldr	r3, .L46
 516 0026 4FF48062 		mov	r2, #1024
 517 002a 5A61     		str	r2, [r3, #20]
 296:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 518              		.loc 1 296 0
 519 002c 4FF40062 		mov	r2, #2048
 520 0030 5A61     		str	r2, [r3, #20]
 297:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 521              		.loc 1 297 0
 522 0032 4FF48052 		mov	r2, #4096
 523 0036 5A61     		str	r2, [r3, #20]
 524              	.L42:
 525 0038 08BD     		pop	{r3, pc}
 526              	.L47:
 527 003a 00BF     		.align	2
 528              	.L46:
 529 003c 00040140 		.word	1073808384
 530              		.cfi_endproc
 531              	.LFE78:
 533              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 534              		.align	2
 535              		.global	EXTI9_5_IRQHandler
 536              		.thumb
 537              		.thumb_func
 539              	EXTI9_5_IRQHandler:
 540              	.LFB79:
 298:./Src/stm32f1xx_it.c ****   }
 299:./Src/stm32f1xx_it.c **** }
 300:./Src/stm32f1xx_it.c **** 
 301:./Src/stm32f1xx_it.c **** /*void EXTI3_IRQHandler(void)
 302:./Src/stm32f1xx_it.c **** {
 303:./Src/stm32f1xx_it.c ****     PPM_ISR_Callback();
 304:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 305:./Src/stm32f1xx_it.c **** }*/
 306:./Src/stm32f1xx_it.c **** 
 307:./Src/stm32f1xx_it.c **** /**
 308:./Src/stm32f1xx_it.c **** * @brief This function handles TIM1 capture compare interrupt.
 309:./Src/stm32f1xx_it.c **** */
 310:./Src/stm32f1xx_it.c **** 
 311:./Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccGTYQMs.s 			page 22


 312:./Src/stm32f1xx_it.c **** /**
 313:./Src/stm32f1xx_it.c **** * @brief This function handles EXTI line[9:5] interrupts.
 314:./Src/stm32f1xx_it.c **** */
 315:./Src/stm32f1xx_it.c **** void EXTI9_5_IRQHandler(void)
 316:./Src/stm32f1xx_it.c **** {
 541              		.loc 1 316 0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545 0000 08B5     		push	{r3, lr}
 546              	.LCFI11:
 547              		.cfi_def_cfa_offset 8
 548              		.cfi_offset 3, -8
 549              		.cfi_offset 14, -4
 317:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)||
 550              		.loc 1 317 0
 551 0002 0C4B     		ldr	r3, .L52
 552 0004 5B69     		ldr	r3, [r3, #20]
 553 0006 13F0200F 		tst	r3, #32
 554 000a 09D1     		bne	.L49
 318:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET)||
 555              		.loc 1 318 0 discriminator 1
 556 000c 094B     		ldr	r3, .L52
 557 000e 5B69     		ldr	r3, [r3, #20]
 317:./Src/stm32f1xx_it.c ****   if((__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)||
 558              		.loc 1 317 0 discriminator 1
 559 0010 13F0400F 		tst	r3, #64
 560 0014 04D1     		bne	.L49
 319:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET))
 561              		.loc 1 319 0
 562 0016 074B     		ldr	r3, .L52
 563 0018 5B69     		ldr	r3, [r3, #20]
 318:./Src/stm32f1xx_it.c ****     (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET)||
 564              		.loc 1 318 0
 565 001a 13F0800F 		tst	r3, #128
 566 001e 08D0     		beq	.L48
 567              	.L49:
 320:./Src/stm32f1xx_it.c ****   {
 321:./Src/stm32f1xx_it.c **** 
 322:./Src/stm32f1xx_it.c ****     HALL_L_ISR_Callback();
 568              		.loc 1 322 0
 569 0020 FFF7FEFF 		bl	HALL_L_ISR_Callback
 570              	.LVL16:
 323:./Src/stm32f1xx_it.c **** 
 324:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 571              		.loc 1 324 0
 572 0024 034B     		ldr	r3, .L52
 573 0026 2022     		movs	r2, #32
 574 0028 5A61     		str	r2, [r3, #20]
 325:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 575              		.loc 1 325 0
 576 002a 4022     		movs	r2, #64
 577 002c 5A61     		str	r2, [r3, #20]
 326:./Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 578              		.loc 1 326 0
 579 002e 8022     		movs	r2, #128
 580 0030 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccGTYQMs.s 			page 23


 581              	.L48:
 582 0032 08BD     		pop	{r3, pc}
 583              	.L53:
 584              		.align	2
 585              	.L52:
 586 0034 00040140 		.word	1073808384
 587              		.cfi_endproc
 588              	.LFE79:
 590              		.section	.text.TIM1_CC_IRQHandler,"ax",%progbits
 591              		.align	2
 592              		.global	TIM1_CC_IRQHandler
 593              		.thumb
 594              		.thumb_func
 596              	TIM1_CC_IRQHandler:
 597              	.LFB80:
 327:./Src/stm32f1xx_it.c ****   }
 328:./Src/stm32f1xx_it.c **** }
 329:./Src/stm32f1xx_it.c **** 
 330:./Src/stm32f1xx_it.c **** /**
 331:./Src/stm32f1xx_it.c **** * @brief This function handles TIM8 capture compare interrupt.
 332:./Src/stm32f1xx_it.c **** */
 333:./Src/stm32f1xx_it.c **** void TIM1_CC_IRQHandler(void)
 334:./Src/stm32f1xx_it.c **** {
 598              		.loc 1 334 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602 0000 08B5     		push	{r3, lr}
 603              	.LCFI12:
 604              		.cfi_def_cfa_offset 8
 605              		.cfi_offset 3, -8
 606              		.cfi_offset 14, -4
 335:./Src/stm32f1xx_it.c ****   //DebugPin4_ON();
 336:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC1);
 607              		.loc 1 336 0
 608 0002 0A4B     		ldr	r3, .L56
 609 0004 1B68     		ldr	r3, [r3]
 610 0006 6FF00202 		mvn	r2, #2
 611 000a 1A61     		str	r2, [r3, #16]
 337:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC2);
 612              		.loc 1 337 0
 613 000c 6FF00402 		mvn	r2, #4
 614 0010 1A61     		str	r2, [r3, #16]
 338:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC3);
 615              		.loc 1 338 0
 616 0012 6FF00802 		mvn	r2, #8
 617 0016 1A61     		str	r2, [r3, #16]
 339:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_CC4);
 618              		.loc 1 339 0
 619 0018 6FF01002 		mvn	r2, #16
 620 001c 1A61     		str	r2, [r3, #16]
 340:./Src/stm32f1xx_it.c **** 
 341:./Src/stm32f1xx_it.c ****   PWM_R_ISR_Callback();
 621              		.loc 1 341 0
 622 001e FFF7FEFF 		bl	PWM_R_ISR_Callback
 623              	.LVL17:
 342:./Src/stm32f1xx_it.c ****   HAL_ADC_Start(&hadc1);
ARM GAS  /tmp/ccGTYQMs.s 			page 24


 624              		.loc 1 342 0
 625 0022 0348     		ldr	r0, .L56+4
 626 0024 FFF7FEFF 		bl	HAL_ADC_Start
 627              	.LVL18:
 628 0028 08BD     		pop	{r3, pc}
 629              	.L57:
 630 002a 00BF     		.align	2
 631              	.L56:
 632 002c 00000000 		.word	htim1
 633 0030 00000000 		.word	hadc1
 634              		.cfi_endproc
 635              	.LFE80:
 637              		.section	.text.TIM8_CC_IRQHandler,"ax",%progbits
 638              		.align	2
 639              		.global	TIM8_CC_IRQHandler
 640              		.thumb
 641              		.thumb_func
 643              	TIM8_CC_IRQHandler:
 644              	.LFB81:
 343:./Src/stm32f1xx_it.c ****   //DebugPin4_OFF();
 344:./Src/stm32f1xx_it.c **** }
 345:./Src/stm32f1xx_it.c **** void TIM8_CC_IRQHandler(void)
 346:./Src/stm32f1xx_it.c **** {
 645              		.loc 1 346 0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
 649 0000 08B5     		push	{r3, lr}
 650              	.LCFI13:
 651              		.cfi_def_cfa_offset 8
 652              		.cfi_offset 3, -8
 653              		.cfi_offset 14, -4
 347:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC1);
 654              		.loc 1 347 0
 655 0002 0A4B     		ldr	r3, .L60
 656 0004 1B68     		ldr	r3, [r3]
 657 0006 6FF00202 		mvn	r2, #2
 658 000a 1A61     		str	r2, [r3, #16]
 348:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC2);
 659              		.loc 1 348 0
 660 000c 6FF00402 		mvn	r2, #4
 661 0010 1A61     		str	r2, [r3, #16]
 349:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC3);
 662              		.loc 1 349 0
 663 0012 6FF00802 		mvn	r2, #8
 664 0016 1A61     		str	r2, [r3, #16]
 350:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_CC4);
 665              		.loc 1 350 0
 666 0018 6FF01002 		mvn	r2, #16
 667 001c 1A61     		str	r2, [r3, #16]
 351:./Src/stm32f1xx_it.c **** 
 352:./Src/stm32f1xx_it.c ****   PWM_L_ISR_Callback();
 668              		.loc 1 352 0
 669 001e FFF7FEFF 		bl	PWM_L_ISR_Callback
 670              	.LVL19:
 353:./Src/stm32f1xx_it.c ****   HAL_ADC_Start(&hadc3);
 671              		.loc 1 353 0
ARM GAS  /tmp/ccGTYQMs.s 			page 25


 672 0022 0348     		ldr	r0, .L60+4
 673 0024 FFF7FEFF 		bl	HAL_ADC_Start
 674              	.LVL20:
 675 0028 08BD     		pop	{r3, pc}
 676              	.L61:
 677 002a 00BF     		.align	2
 678              	.L60:
 679 002c 00000000 		.word	htim8
 680 0030 00000000 		.word	hadc3
 681              		.cfi_endproc
 682              	.LFE81:
 684              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 685              		.align	2
 686              		.global	DMA1_Channel1_IRQHandler
 687              		.thumb
 688              		.thumb_func
 690              	DMA1_Channel1_IRQHandler:
 691              	.LFB82:
 354:./Src/stm32f1xx_it.c **** }
 355:./Src/stm32f1xx_it.c **** 
 356:./Src/stm32f1xx_it.c **** //ADC1 -PC1-PC2-
 357:./Src/stm32f1xx_it.c **** void DMA1_Channel1_IRQHandler(void)
 358:./Src/stm32f1xx_it.c **** {
 692              		.loc 1 358 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 696 0000 08B5     		push	{r3, lr}
 697              	.LCFI14:
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 3, -8
 700              		.cfi_offset 14, -4
 359:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc1);
 701              		.loc 1 359 0
 702 0002 0248     		ldr	r0, .L64
 703 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 704              	.LVL21:
 705 0008 08BD     		pop	{r3, pc}
 706              	.L65:
 707 000a 00BF     		.align	2
 708              	.L64:
 709 000c 00000000 		.word	hdma_adc1
 710              		.cfi_endproc
 711              	.LFE82:
 713              		.section	.text.DMA2_Channel4_5_IRQHandler,"ax",%progbits
 714              		.align	2
 715              		.global	DMA2_Channel4_5_IRQHandler
 716              		.thumb
 717              		.thumb_func
 719              	DMA2_Channel4_5_IRQHandler:
 720              	.LFB83:
 360:./Src/stm32f1xx_it.c **** }
 361:./Src/stm32f1xx_it.c **** //ADC3 -PC0-
 362:./Src/stm32f1xx_it.c **** void DMA2_Channel4_5_IRQHandler(void)
 363:./Src/stm32f1xx_it.c **** {
 721              		.loc 1 363 0
 722              		.cfi_startproc
ARM GAS  /tmp/ccGTYQMs.s 			page 26


 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725 0000 08B5     		push	{r3, lr}
 726              	.LCFI15:
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 3, -8
 729              		.cfi_offset 14, -4
 364:./Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc3);
 730              		.loc 1 364 0
 731 0002 0248     		ldr	r0, .L68
 732 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 733              	.LVL22:
 734 0008 08BD     		pop	{r3, pc}
 735              	.L69:
 736 000a 00BF     		.align	2
 737              	.L68:
 738 000c 00000000 		.word	hdma_adc3
 739              		.cfi_endproc
 740              	.LFE83:
 742              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 743              		.align	2
 744              		.global	TIM3_IRQHandler
 745              		.thumb
 746              		.thumb_func
 748              	TIM3_IRQHandler:
 749              	.LFB84:
 365:./Src/stm32f1xx_it.c **** }
 366:./Src/stm32f1xx_it.c **** 
 367:./Src/stm32f1xx_it.c **** 
 368:./Src/stm32f1xx_it.c **** //extern volatile __IO int32_t testVelR;
 369:./Src/stm32f1xx_it.c **** 
 370:./Src/stm32f1xx_it.c **** //PID
 371:./Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 372:./Src/stm32f1xx_it.c **** {
 750              		.loc 1 372 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 373:./Src/stm32f1xx_it.c ****   //DebugPin4_ON();
 374:./Src/stm32f1xx_it.c ****   __HAL_TIM_CLEAR_IT(&Tim3PID, TIM_IT_UPDATE);
 755              		.loc 1 374 0
 756 0000 024B     		ldr	r3, .L71
 757 0002 1B68     		ldr	r3, [r3]
 758 0004 6FF00102 		mvn	r2, #1
 759 0008 1A61     		str	r2, [r3, #16]
 760 000a 7047     		bx	lr
 761              	.L72:
 762              		.align	2
 763              	.L71:
 764 000c 00000000 		.word	Tim3PID
 765              		.cfi_endproc
 766              	.LFE84:
 768              		.text
 769              	.Letext0:
 770              		.file 3 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 771              		.file 4 "/home/niklas/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
ARM GAS  /tmp/ccGTYQMs.s 			page 27


 772              		.file 5 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 773              		.file 6 "./Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 774              		.file 7 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 775              		.file 8 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 776              		.file 9 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 777              		.file 10 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 778              		.file 11 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 779              		.file 12 "./Drivers/CMSIS/Include/core_cm3.h"
 780              		.file 13 "./Inc/motor_R.h"
 781              		.file 14 "./Inc/motor_L.h"
 782              		.file 15 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 783              		.file 16 "./Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccGTYQMs.s 			page 28


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f1xx_it.c
     /tmp/ccGTYQMs.s:20     .text.NMI_Handler:00000000 $t
     /tmp/ccGTYQMs.s:25     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/ccGTYQMs.s:72     .text.HardFault_Handler:00000000 $t
     /tmp/ccGTYQMs.s:77     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccGTYQMs.s:101    .text.MemManage_Handler:00000000 $t
     /tmp/ccGTYQMs.s:106    .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/ccGTYQMs.s:130    .text.BusFault_Handler:00000000 $t
     /tmp/ccGTYQMs.s:135    .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/ccGTYQMs.s:159    .text.UsageFault_Handler:00000000 $t
     /tmp/ccGTYQMs.s:164    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/ccGTYQMs.s:188    .text.SVC_Handler:00000000 $t
     /tmp/ccGTYQMs.s:193    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/ccGTYQMs.s:238    .text.DebugMon_Handler:00000000 $t
     /tmp/ccGTYQMs.s:243    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/ccGTYQMs.s:255    .text.PendSV_Handler:00000000 $t
     /tmp/ccGTYQMs.s:260    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/ccGTYQMs.s:305    .text.SysTick_Handler:00000000 $t
     /tmp/ccGTYQMs.s:310    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccGTYQMs.s:332    .text.I2C1_EV_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:337    .text.I2C1_EV_IRQHandler:00000000 I2C1_EV_IRQHandler
     /tmp/ccGTYQMs.s:356    .text.I2C1_EV_IRQHandler:0000000c $d
     /tmp/ccGTYQMs.s:361    .text.I2C1_ER_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:366    .text.I2C1_ER_IRQHandler:00000000 I2C1_ER_IRQHandler
     /tmp/ccGTYQMs.s:385    .text.I2C1_ER_IRQHandler:0000000c $d
     /tmp/ccGTYQMs.s:390    .text.DMA1_Channel3_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:395    .text.DMA1_Channel3_IRQHandler:00000000 DMA1_Channel3_IRQHandler
     /tmp/ccGTYQMs.s:414    .text.DMA1_Channel3_IRQHandler:0000000c $d
     /tmp/ccGTYQMs.s:419    .text.DMA1_Channel2_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:424    .text.DMA1_Channel2_IRQHandler:00000000 DMA1_Channel2_IRQHandler
     /tmp/ccGTYQMs.s:443    .text.DMA1_Channel2_IRQHandler:0000000c $d
     /tmp/ccGTYQMs.s:448    .text.I2C2_ER_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:453    .text.I2C2_ER_IRQHandler:00000000 I2C2_ER_IRQHandler
     /tmp/ccGTYQMs.s:472    .text.I2C2_ER_IRQHandler:0000000c $d
     /tmp/ccGTYQMs.s:477    .text.EXTI15_10_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:482    .text.EXTI15_10_IRQHandler:00000000 EXTI15_10_IRQHandler
     /tmp/ccGTYQMs.s:529    .text.EXTI15_10_IRQHandler:0000003c $d
     /tmp/ccGTYQMs.s:534    .text.EXTI9_5_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:539    .text.EXTI9_5_IRQHandler:00000000 EXTI9_5_IRQHandler
     /tmp/ccGTYQMs.s:586    .text.EXTI9_5_IRQHandler:00000034 $d
     /tmp/ccGTYQMs.s:591    .text.TIM1_CC_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:596    .text.TIM1_CC_IRQHandler:00000000 TIM1_CC_IRQHandler
     /tmp/ccGTYQMs.s:632    .text.TIM1_CC_IRQHandler:0000002c $d
     /tmp/ccGTYQMs.s:638    .text.TIM8_CC_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:643    .text.TIM8_CC_IRQHandler:00000000 TIM8_CC_IRQHandler
     /tmp/ccGTYQMs.s:679    .text.TIM8_CC_IRQHandler:0000002c $d
     /tmp/ccGTYQMs.s:685    .text.DMA1_Channel1_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:690    .text.DMA1_Channel1_IRQHandler:00000000 DMA1_Channel1_IRQHandler
     /tmp/ccGTYQMs.s:709    .text.DMA1_Channel1_IRQHandler:0000000c $d
     /tmp/ccGTYQMs.s:714    .text.DMA2_Channel4_5_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:719    .text.DMA2_Channel4_5_IRQHandler:00000000 DMA2_Channel4_5_IRQHandler
     /tmp/ccGTYQMs.s:738    .text.DMA2_Channel4_5_IRQHandler:0000000c $d
     /tmp/ccGTYQMs.s:743    .text.TIM3_IRQHandler:00000000 $t
     /tmp/ccGTYQMs.s:748    .text.TIM3_IRQHandler:00000000 TIM3_IRQHandler
     /tmp/ccGTYQMs.s:764    .text.TIM3_IRQHandler:0000000c $d
                     .debug_frame:00000010 $d
ARM GAS  /tmp/ccGTYQMs.s 			page 29



UNDEFINED SYMBOLS
MotorR_stop
MotorL_stop
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_I2C_EV_IRQHandler
hi2c2
HAL_I2C_ER_IRQHandler
HAL_DMA_IRQHandler
hdma_usart3_rx
hdma_usart3_tx
HALL_R_ISR_Callback
HALL_L_ISR_Callback
PWM_R_ISR_Callback
HAL_ADC_Start
htim1
hadc1
PWM_L_ISR_Callback
htim8
hadc3
hdma_adc1
hdma_adc3
Tim3PID
